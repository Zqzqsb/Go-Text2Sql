SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-13' AND d.name = '客户服务部' AND (a.check_out - a.check_in) > '15:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-10-11' AND a.check_in > '09:00:00'	hr
SELECT COUNT(*) FROM attendance_records WHERE employee_id = 'H03961' AND date >= '2024-01-01' AND date <= '2024-12-31' AND check_in > '09:00:00'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-24' AND a.check_in < '08:30:00' AND p.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-21' ORDER BY d.name	hr
SELECT COUNT(*) FILTER (WHERE end_date - start_date < 90 AND status = '离职') / COUNT(*) * 100 AS离职比例 FROM probation_employees	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08' AND d.name = '客户服务部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.hire_date FROM employees e JOIN probation_employees p ON e.employee_id = p.employee_id WHERE p.status = '在职'	hr
SELECT d.name AS department_name, e.name AS employee_name, a.check_in, e.remaining_annual_leave FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND a.check_in > '09:00:00' AND e.remaining_annual_leave < 5	hr
SELECT e.name, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.date = '2024-10-05'	hr
SELECT e.name, e.hire_date, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.date = '2024-09-26'	hr
SELECT COUNT(*) FROM attendance_records WHERE employee_id = 'H05598' AND date >= '2024-01-01' AND date <= '2024-12-31' AND check_out < '18:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-28' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-12' AND a.check_in > '09:00:00' AND d.name = '运营部'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-11' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-21' AND d.name = '销售部' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-12-11' AND pe.rating = 'C'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-22' AND ar.check_in > '09:00:00'	hr
SELECT a.employee_id, e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2023 AND a.award_name = '创新奖' AND pe.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-10-09' AND a.check_in > '08:30:00'	hr
SELECT COUNT(DISTINCT pe.employee_id) FROM probation_employees pe JOIN awards a ON pe.employee_id = a.employee_id WHERE pe.status = '在职' AND a.award_name = '优秀员工' AND a.year = 2023	hr
SELECT e.name, a.award_name FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE e.hire_date BETWEEN '2021-01-01' AND '2021-12-31' AND a.year = 2022	hr
SELECT employee_id FROM attendance_records GROUP BY employee_id HAVING COUNT(DISTINCT date) > 1	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-24' AND ar.check_in > '09:30:00' AND e.remaining_annual_leave < 10	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-19' AND d.name = '销售部' AND a.check_in > '09:00:00'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-26' AND ar.check_in > '09:00:00' AND pe.rating = 'C'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2021-01-01' AND e.hire_date < '2022-01-01' AND a.year = 2021 AND pe.rating = 'B'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-10-03' AND a.check_in > '09:00:00'	hr
SELECT e.name, p.status FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN probation_employees p ON e.employee_id = p.employee_id WHERE a.year = 2020 AND a.award_name = '优秀员工' AND p.status = '在职'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.year = 2023 AND pe.rating = 'A+'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN probation_employees p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-19' AND p.status = '在职'	hr
SELECT e.employee_id, e.name, e.hire_date, e.remaining_annual_leave, COUNT(a.id) AS days_used_annual_leave FROM employees e LEFT JOIN attendance_records a ON e.employee_id = a.employee_id GROUP BY e.employee_id, e.name, e.hire_date, e.remaining_annual_leave	hr
SELECT e.name, a.date, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.year = 2022 AND aw.award_name = '技术突破奖' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 10	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-20' AND d.name = '质量控制部' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) > 8	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-25' AND e.university = '清华大学' AND a.check_in < '09:00:00'	hr
SELECT e.name FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN (SELECT employee_id, AVG(EXTRACT(EPOCH FROM (check_out - check_in)) / 3600) AS avg_work_hours FROM attendance_records GROUP BY employee_id) a ON e.employee_id = a.employee_id WHERE pe.rating = 'A+' ORDER BY a.avg_work_hours DESC LIMIT 1	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-04' AND d.name = '销售部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-18' AND a.check_in > '09:00:00' AND p.rating = 'D'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-25' AND a.check_in > '08:30:00' AND p.rating = 'B+'	hr
SELECT * FROM interviews WHERE interview_date >= '2024-01-01' AND interview_date <= '2024-12-31' ORDER BY interview_count DESC	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-10' AND a.check_in > '08:30:00' AND p.rating = 'A+'	hr
SELECT d.name AS department_name, e.name AS employee_name, a.check_in, e.remaining_annual_leave FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-27' AND a.check_in > '09:00:00' AND e.remaining_annual_leave < 10	hr
SELECT e.name, p.evaluation_date FROM employees e JOIN performance_evaluations p ON e.employee_id = p.employee_id	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-07' AND a.check_in > '09:00:00' AND a.check_out < '17:00:00'	hr
SELECT e.name, d.name AS department_name, ar.check_in, ar.check_out FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-05'	hr
SELECT e.department_id, AVG(i.interview_count) AS avg_interview_count FROM employees e JOIN interviews i ON e.employee_id = i.employee_id GROUP BY e.department_id ORDER BY avg_interview_count DESC LIMIT 1	hr
SELECT e.name, e.employee_id, a.date, a.check_in, a.check_out, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-27' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '最佳团队奖' AND aw.year = 2024 AND a.date = '2024-10-09' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-14' AND a.check_in > '09:00:00' AND d.name = '质量控制部'	hr
SELECT e.name, a.check_out, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-24' AND a.check_out > '13:00:00' AND p.rating = 'B+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-08' AND ar.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, a.award_name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.year = 2022	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-12' AND a.check_in > '09:00:00' AND p.rating = 'D'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-10-13' AND a.check_in < '09:30:00'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-22'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2023 AND pe.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in, d.name AS department_name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05' AND a.check_in > '08:30:00' AND d.manager_id = 'H05487'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-02' AND d.name = '行政部' AND (a.check_out - a.check_in) > '09:00:00'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-03-31' AND pe.rating = 'D'	hr
SELECT name, car_plate FROM employees WHERE employee_type = '正式员工'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-19' AND d.name = '质量控制部' AND a.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '客户满意度奖' AND a.year = 2022 AND ar.date = '2024-10-12' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, d.name AS department_name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-11' AND a.check_in > '09:00:00' AND d.manager_id = 'H00842'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '领导力奖' AND a.year = 2023	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '领导力奖' AND aw.year = 2023 AND a.date = '2024-10-09' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, d.manager_id FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-02' AND ar.check_in BETWEEN '09:00:00' AND '10:00:00' AND e.employee_type = '实习生'	hr
SELECT d.name FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.name ORDER BY AVG(EXTRACT(YEAR FROM AGE(date('now'), e.birth_date))) DESC LIMIT 1	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-16' AND p.rating = 'C'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08' AND d.name = '研发部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-09-20' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '人力资源部' AND a.date = '2024-10-05' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 8	hr
SELECT e.name, e.employee_id, a.date, a.check_in, a.check_out, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-14' AND p.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-27' AND d.name = '行政部' AND a.check_in > '09:00:00'	hr
SELECT d.name AS department_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.name	hr
SELECT e.name FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE pe.rating = 'A+' ORDER BY e.hire_date DESC LIMIT 1	hr
SELECT e.employee_id, e.name, e.department_id, a.total_hours, d.avg_hours, ABS(a.total_hours - d.avg_hours) AS difference FROM ( SELECT employee_id, SUM(EXTRACT(EPOCH FROM (check_out - check_in)) / 3600) AS total_hours FROM attendance_records GROUP BY employee_id ) a JOIN employees e ON a.employee_id = e.employee_id JOIN ( SELECT e.department_id, AVG(a.total_hours) AS avg_hours FROM ( SELECT employee_id, SUM(EXTRACT(EPOCH FROM (check_out - check_in)) / 3600) AS total_hours FROM attendance_records GROUP BY employee_id ) a JOIN employees e ON a.employee_id = e.employee_id GROUP BY e.department_id ) d ON e.department_id = d.department_id ORDER BY difference DESC	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out, (a.check_out - a.check_in) AS work_duration FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05' AND d.name = '研发部' AND (a.check_out - a.check_in) > '10:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-12'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-11' AND a.check_in > '09:00:00' AND d.name = '销售部'	hr
SELECT e.name, d.name AS department_name, ar.check_in, a.award_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN awards a ON ar.employee_id = a.employee_id WHERE ar.date = '2024-09-26' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-05' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-07' AND d.name = '人力资源部' AND a.check_in > '09:00:00'	hr
SELECT e.name, d.name AS department_name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-11' AND e.employee_type = '实习生' AND a.check_in < '09:00:00'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '优秀员工' AND pe.rating = 'A+' AND a.year = 2023	hr
SELECT e.department_id, COUNT(DISTINCT pe.employee_id) AS core_talent_count FROM employees e JOIN probation_employees pe ON e.employee_id = pe.employee_id WHERE pe.status = '转正' AND pe.end_date >= datetime('now') - INTERVAL '5 years' GROUP BY e.department_id	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '新人奖' AND a.year = 2024 AND ar.date = '2024-10-08'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-02' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '新人奖' AND a.year = 2024	hr
SELECT AVG(EXTRACT(YEAR FROM age(first_management_position_date, hire_date))) AS average_years_to_management FROM ( SELECT e.employee_id, e.hire_date, MIN(e.hire_date) AS first_management_position_date FROM employees e WHERE e.position LIKE '%管理%' GROUP BY e.employee_id, e.hire_date ) AS subquery	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '研发部' AND a.date = '2024-10-06' AND EXTRACT(EPOCH FROM (a.check_out - a.check_in)) / 3600 > 10	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '技术突破奖' AND pe.rating = 'A+' AND a.year = 2023	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-17' AND a.check_in > '09:00:00' AND p.rating = 'D'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2024 AND ar.date = '2024-10-03'	hr
SELECT e.name, e.hire_date, a.award_name FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '领导力奖' AND a.year = 2023 AND e.hire_date > '2017-01-01'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-09-16' AND (a.check_out - a.check_in) > '08:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2023 AND a.award_name = '领导力奖' AND pe.evaluation_date = '2023-06-04' AND pe.rating = 'D'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-10-12' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-21' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-24' AND ar.check_in > '09:00:00' AND pe.rating = 'C'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05' AND d.name = '行政部' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 9	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-10-06' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, d.manager_id FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.rating = 'A+' AND pe.evaluation_date >= '2023-01-01' AND pe.evaluation_date < '2024-01-01'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-28' AND a.check_in > '09:00:00' AND p.rating = 'A'	hr
SELECT ar.id, ar.employee_id, ar.date, ar.check_in, ar.check_out FROM attendance_records ar JOIN awards a ON ar.employee_id = a.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2023 AND ar.date = '2024-10-01'	hr
SELECT e.department_id, e.employee_id, e.name, MIN(pe.evaluation_date - e.hire_date) AS time_to_first_A_plus FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE pe.rating = 'A+' GROUP BY e.department_id, e.employee_id, e.name ORDER BY e.department_id, time_to_first_A_plus LIMIT 1	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-22' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND a.award_name = '优秀员工' AND pe.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-10-29'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-09-17' AND (a.check_out - a.check_in) > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2022-06-16' AND pe.rating = 'C'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '优秀员工' AND a.year = 2022 AND pe.evaluation_date = '2022-10-30' AND pe.rating = 'A+'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-15' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT e.name, e.position FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-23' AND a.check_in > '09:00:00' AND p.rating = 'D'	hr
SELECT e.name, e.employee_id FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2024-10-14' AND pe.rating = 'D' AND d.name = '客户服务部'	hr
SELECT e.name, e.hire_date, a.award_name FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '领导力奖' AND a.year = 2023 AND e.hire_date >= '2019-01-01'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-20' AND ar.check_in > '09:00:00' AND pe.rating = 'A+'	hr
SELECT e.employee_id, e.name FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN awards a ON e.employee_id = a.employee_id WHERE pe.rating IN ('B', 'C') AND a.award_name IN ('最佳团队奖', '最佳同事评价奖')	hr
SELECT e.name, a.check_in, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-20' AND a.check_in BETWEEN '08:00:00' AND '09:00:00' AND p.rating = 'B'	hr
SELECT e.employee_id, e.name FROM employees e JOIN (SELECT employee_id, MAX(evaluation_date) AS last_evaluation_date FROM performance_evaluations WHERE evaluation_date < '2024-01-01' GROUP BY employee_id) pe ON e.employee_id = pe.employee_id JOIN performance_evaluations pe2 ON pe.employee_id = pe2.employee_id AND pe.last_evaluation_date = pe2.evaluation_date WHERE pe2.rating = 'B'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-19' AND a.check_in > '09:00:00' AND p.rating = 'B+'	hr
SELECT e.name AS employee_name, d.name AS department_name, a.check_in, a.check_out, (a.check_out - a.check_in) AS work_duration FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND (a.check_out - a.check_in) > '12:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-09-29' AND a.check_in < '09:00:00'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-11' AND a.check_in > '09:00:00' AND p.rating = 'A'	hr
SELECT date, check_in, check_out FROM attendance_records WHERE employee_id = 'H03961'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '厦门大学' AND a.date = '2024-09-23' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-19' AND a.check_in > '09:00:00' AND p.rating = 'D'	hr
SELECT e.name, e.employee_id, a.date, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-10-11' AND a.check_in > '08:30:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-10' AND a.check_in > '09:00:00' AND p.rating = 'D'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2024-01-01' AND a.award_name = '新人奖' AND pe.rating = 'A' AND a.year = 2024	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-26' AND a.check_in BETWEEN '08:00:00' AND '09:00:00' AND p.rating = 'B+'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '创新奖' AND a.year = 2023 AND ar.date = '2024-09-25'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-24' AND a.check_in > '09:00:00' AND p.rating = 'D'	hr
SELECT d.name AS department_name, AVG(e.remaining_annual_leave) AS avg_annual_leave FROM departments d JOIN employees e ON d.department_id = e.department_id WHERE d.manager_id = 'H03372' GROUP BY d.name	hr
SELECT e.name, a.date, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-12' AND p.rating = 'A+'	hr
SELECT e.name, a.date, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '质量改进奖' AND aw.year = 2023 AND a.date = '2024-10-03' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, d.name AS department_name, pe.rating FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE ar.date = '2024-09-15' AND d.name = '财务部' AND pe.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '质量控制部' AND a.date = '2024-09-21' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-25' AND d.name = '销售部' AND (a.check_out - a.check_in) > '08:00:00'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2022 AND a.award_name = '技术突破奖' AND pe.evaluation_date > '2022-07-13'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-11' AND a.check_in > '09:00:00' AND d.name = '财务部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-12' AND a.check_in > '09:00:00' AND d.name = '研发部'	hr
SELECT d.name AS department_name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE pe.evaluation_date = '2023-08-06' AND pe.rating = 'C'	hr
SELECT e.name AS employee_name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-01' AND (a.check_out - a.check_in) > '12:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-09' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND a.check_in > '09:00:00' AND d.name = '人力资源部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-10-02' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_out, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-11' AND a.check_out > '21:00:00' AND p.rating = 'B+'	hr
SELECT e.name, d.name AS department_name, e.hire_date FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.rating = 'B' AND pe.evaluation_date >= '2022-01-01' AND pe.evaluation_date < '2023-01-01' ORDER BY e.hire_date	hr
SELECT e.name AS employee_name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND d.name = '客户服务部'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-20' AND ar.check_in > '09:00:00' AND pe.rating = 'B'	hr
SELECT e.name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id WHERE ar.date = '2024-10-02' ORDER BY ar.check_in LIMIT 1	hr
SELECT e.name, e.employee_id, a.date, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.date = '2024-10-10' AND p.rating = 'B+'	hr
SELECT e.name, e.employee_id, a.date, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-10-04' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.date, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-17' AND p.rating = 'A+'	hr
SELECT d.name AS department_name FROM probation_employees pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id GROUP BY pe.employee_id, d.name ORDER BY COUNT(*) DESC LIMIT 3	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-04' AND d.name = '财务部' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '优秀员工' AND a.year = 2023	hr
SELECT COUNT(DISTINCT pe.employee_id) FROM probation_employees pe JOIN awards a ON pe.employee_id = a.employee_id WHERE pe.status = '在职' AND a.award_name = '客户满意度奖' AND a.year = 2023	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-24' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.name, a.award_name FROM employees e JOIN awards a ON e.employee_id = a.employee_id	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-13' AND a.check_in < '08:30:00' AND d.name = '法务部'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-17' AND d.name = '质量控制部' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 9	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-26' AND e.remaining_annual_leave > 10	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-10-09' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-10' AND d.name = '客户服务部' AND a.check_in > '09:00:00'	hr
SELECT e.employee_id, e.name, COUNT(a.id) AS active_projects_count FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '创新奖' GROUP BY e.employee_id, e.name ORDER BY active_projects_count DESC	hr
SELECT e.name AS employee_name, d.name AS department_name, FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-25' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-28' AND d.name = '客户服务部' AND p.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-07' AND a.check_in > '09:00:00' AND d.name = '法务部'	hr
SELECT e.name AS employee_name, d.name AS department_name, ar.check_in, ar.check_out FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-14'	hr
SELECT DISTINCT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '优秀员工' AND a.year = 2021 AND ar.date > '2021-01-01'	hr
SELECT AVG(e.remaining_annual_leave) AS avg_remaining_annual_leave FROM awards a JOIN employees e ON a.employee_id = e.employee_id WHERE a.year = 2024 AND a.award_name = '领导力奖' AND e.hire_date > '2017-01-01'	hr
SELECT e.employee_id, e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name IN ('创新奖', '关键决策奖')	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-12-07' AND pe.rating = 'B'	hr
SELECT e.name, d.name AS department_name, a.award_name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.year = 2023	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-25' AND d.name = '销售部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '质量控制部' AND a.date = '2024-09-20' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-29' AND d.name = '客户服务部' AND EXTRACT(EPOCH FROM (a.check_out - a.check_in)) / 3600 > 10	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-04' AND a.check_in > '08:30:00' AND p.rating = 'A+'	hr
SELECT employee_id, COUNT(*) AS late_days FROM attendance_records WHERE check_in > '09:00:00' GROUP BY employee_id	hr
SELECT e.name, e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-15' AND p.rating = 'A+'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '最佳团队奖' AND a.year = 2021 AND ar.date = '2024-09-19'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-21'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-23' AND a.check_in < '09:30:00' AND d.name = '财务部'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id WHERE a.date = '2024-10-09' AND a.check_in > '09:00:00' AND e.employee_type = '实习生'	hr
SELECT e.name, a.date, a.check_in, a.check_out FROM awards a1 JOIN employees e ON a1.employee_id = e.employee_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a1.award_name = '项目管理奖' AND a1.year = 2023 AND a.date = '2024-09-23'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2022-01-01' AND e.hire_date < '2023-01-01' AND a.year = 2023 AND pe.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-13' AND d.name = '人力资源部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '行政部' AND a.date = '2024-09-18' AND a.check_in > '09:00:00'	hr
SELECT '导师计划' AS factor, COUNT(*) AS contribution FROM employees WHERE employee_id IN (SELECT employee_id FROM performance_evaluations WHERE rating = 'A+') UNION ALL SELECT '培训课程' AS factor, COUNT(*) AS contribution FROM employees WHERE employee_id IN (SELECT employee_id FROM performance_evaluations WHERE rating = 'A+') UNION ALL SELECT '轮岗经历' AS factor, COUNT(*) AS contribution FROM employees WHERE employee_id IN (SELECT employee_id FROM performance_evaluations WHERE rating = 'A+') ORDER BY contribution DESC	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-09-20' AND a.check_in > '08:00:00'	hr
SELECT e.department_id, e.employee_id, e.name, MAX(AGE(date('now'), e.birth_date)) AS max_age FROM employees e GROUP BY e.department_id, e.employee_id, e.name	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-30' AND d.name = '人力资源部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-18' AND d.name = '研发部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-28' AND a.check_in > '09:30:00' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-17' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT e.name, e.employee_id, a.date, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-22' AND p.rating = 'D'	hr
SELECT e.name, e.employee_id, a.date, a.check_in, a.check_out, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-03' AND p.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-10-07' AND a.check_in > '09:00:00'	hr
SELECT ar.employee_id, ar.date, ar.check_in, ar.check_out, pe.rating FROM attendance_records ar JOIN performance_evaluations pe ON ar.employee_id = pe.employee_id	hr
SELECT e.name, a.award_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN awards a ON e.employee_id = a.employee_id WHERE ar.date = '2024-10-05' AND ar.check_in > '09:00:00' AND a.year = 2021	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '质量控制部' AND a.date = '2024-09-25' AND a.check_in > '08:30:00'	hr
WITH QuarterlyPerformance AS (SELECT EXTRACT(YEAR FROM evaluation_date) AS year, EXTRACT(QUARTER FROM evaluation_date) AS quarter, employee_id, RANK() OVER (PARTITION BY EXTRACT(YEAR FROM evaluation_date), EXTRACT(QUARTER FROM evaluation_date) ORDER BY rating DESC) AS performance_rank FROM performance_evaluations WHERE evaluation_date >= date('now') - INTERVAL '3 years'), QuarterlyAttendance AS (SELECT EXTRACT(YEAR FROM date) AS year, EXTRACT(QUARTER FROM date) AS quarter, employee_id, COUNT(*) FILTER (WHERE check_in IS NOT NULL AND check_out IS NOT NULL) AS full_attendance_days, COUNT(*) AS total_days, RANK() OVER (PARTITION BY EXTRACT(YEAR FROM date), EXTRACT(QUARTER FROM date) ORDER BY COUNT(*) FILTER (WHERE check_in IS NOT NULL AND check_out IS NOT NULL) DESC) AS attendance_rank FROM attendance_records WHERE date >= date('now') - INTERVAL '3 years' GROUP BY EXTRACT(YEAR FROM date), EXTRACT(QUARTER FROM date), employee_id) SELECT qp.year, qp.quarter, qp.employee_id FROM QuarterlyPerformance qp JOIN QuarterlyAttendance qa ON qp.year = qa.year AND qp.quarter = qa.quarter AND qp.employee_id = qa.employee_id WHERE qp.performance_rank = 1 AND qa.attendance_rank = 1	hr
SELECT a.employee_id, e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2023 AND pe.rating = 'A+'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2022 AND ar.date = '2024-10-04' AND ar.check_in > '08:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-03' AND a.check_in > '09:00:00' AND d.name = '客户服务部'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '人力资源部' AND a.date = '2024-10-02' AND a.check_in > '09:00:00'	hr
SELECT e.name, p.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.year = 2023 AND a.award_name = '优秀员工' AND p.rating = 'A+'	hr
SELECT d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-05-31' AND pe.rating = 'A+'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-02' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT ar.date, ar.check_in, ar.check_out FROM attendance_records ar JOIN awards a ON ar.employee_id = a.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2021 AND ar.date = '2024-09-18'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-05-27' AND pe.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-16' AND ar.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.department_id	hr
SELECT * FROM employees ORDER BY hire_date ASC, position DESC LIMIT 1	hr
SELECT e.name FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.department_id = 'D00007' AND pe.rating = 'A' AND pe.evaluation_date >= '2024-01-01' AND pe.evaluation_date < '2025-01-01'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '创新奖' AND a.year = 2022 AND ar.date = '2024-10-12' AND ar.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-23' AND ar.check_in > '09:00:00'	hr
SELECT COUNT(DISTINCT a.employee_id) FROM awards a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2023 AND p.rating = 'A+'	hr
SELECT d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-23' AND ar.check_in > '08:00:00' AND ar.check_out < '18:00:00'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN awards a ON e.employee_id = a.employee_id JOIN interviews i ON e.employee_id = i.employee_id WHERE a.award_name = '优秀员工' AND i.interview_date = '2023-10-09'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-12' AND a.check_in < '09:00:00' AND p.rating = 'B+'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-20' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2021 AND a.award_name = '质量改进奖' AND pe.rating = 'B+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-29' AND a.check_in > '08:30:00' AND d.name = '客户服务部'	hr
SELECT e.name AS employee_name, d.name AS department_name, d.manager_id FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-16' AND ar.check_in > '08:30:00'	hr
SELECT e.name, e.position, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-10-01' AND a.check_in > '09:00:00' AND e.position = '顾问'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-23' AND a.check_in > '09:00:00'	hr
SELECT a.year, e.name, a.award_name, pe.status FROM awards a JOIN employees e ON a.employee_id = e.employee_id LEFT JOIN probation_employees pe ON a.employee_id = pe.employee_id WHERE a.award_name = '创新奖' AND a.year >= EXTRACT(YEAR FROM date('now')) - 5	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-06' AND a.check_in > '09:00:00' AND d.name = '财务部'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-04' AND ar.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-04'	hr
SELECT a.employee_id, a.award_name, pe.rating, pe.evaluation_date FROM awards a JOIN performance_evaluations pe ON a.employee_id = pe.employee_id WHERE a.year = 2023 AND pe.evaluation_date >= '2023-01-01' AND pe.evaluation_date < '2024-01-01'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-10' AND ar.check_in > '09:30:00'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-19'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-03' AND d.name = '行政部' AND a.check_in > '09:00:00'	hr
SELECT e.department_id, AVG(e.remaining_annual_leave) AS avg_remaining_annual_leave FROM employees e GROUP BY e.department_id ORDER BY avg_remaining_annual_leave DESC LIMIT 1	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-27' AND a.check_in < '10:00:00' AND p.rating = 'A+'	hr
SELECT interview_date, interview_count FROM interviews WHERE interview_date >= '2024-01-01' AND interview_date < '2025-01-01'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-20' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, d.name AS department_name, pe.rating FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE d.name = '研发部' AND pe.rating = 'B+' AND ar.date = '2024-09-29'	hr
SELECT ar.id, ar.employee_id, ar.date, ar.check_in, ar.check_out FROM attendance_records ar JOIN awards a ON ar.employee_id = a.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2022 AND ar.date = '2024-10-10'	hr
SELECT e.name, e.hire_date, a.award_name FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '客户满意度奖' AND a.year = 2023 AND e.hire_date > '2020-06-19'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-22' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2022-06-20' AND pe.rating = 'C'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '客户满意度奖' AND a.year = 2024 AND pe.rating = 'C'	hr
SELECT e.name, AVG(EXTRACT(EPOCH FROM (ar.check_out - ar.check_in)) / 3600) AS avg_work_hours FROM employees e JOIN attendance_records ar ON e.employee_id = ar.employee_id JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2023 GROUP BY e.name HAVING AVG(EXTRACT(EPOCH FROM (ar.check_out - ar.check_in)) / 3600) > 10	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-03-09' AND pe.rating = 'D'	hr
SELECT e.employee_id, e.name, e.major, e.hire_date, pe.rating, a.award_name FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id LEFT JOIN awards a ON e.employee_id = a.employee_id WHERE e.major IS NOT NULL AND e.hire_date < date('now') - INTERVAL '5 years' ORDER BY pe.rating DESC	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-26' AND a.check_in > '09:00:00' AND d.name = '人力资源部'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-28' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '研发部' AND a.date = '2024-09-20' AND a.check_in > '09:00:00'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-13' AND ar.check_in > '09:00:00' AND pe.rating = 'A+'	hr
SELECT e.name, a.award_name, p.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.year = 2023 AND a.award_name = '销售冠军' AND p.rating IN ('B', 'A+', 'A')	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-17' AND d.name = '财务部' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 9	hr
SELECT e.name AS employee_name, e.employee_id, a.check_in, d.name AS department_name, d.manager_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-18' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '技术突破奖' AND aw.year = 2023 AND a.date = '2024-09-23' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '运营部' AND a.date = '2024-09-26'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.year = 2020 AND a.award_name = '优秀员工' AND p.rating = 'C' AND p.evaluation_date >= '2023-01-01' AND p.evaluation_date < '2024-01-01'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-03' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-12' AND d.name = '法务部' AND a.check_in > '09:00:00'	hr
WITH InterviewCounts AS (SELECT EXTRACT(YEAR FROM interview_date) AS year, department_id, COUNT(*) AS total_interviews FROM interviews JOIN employees ON interviews.employee_id = employees.employee_id WHERE interview_date >= date('now') - INTERVAL '5 years' GROUP BY year, department_id), HiredCounts AS (SELECT EXTRACT(YEAR FROM hire_date) AS year, department_id, COUNT(*) AS total_hired FROM employees WHERE hire_date >= date('now') - INTERVAL '5 years' GROUP BY year, department_id) SELECT ic.year, ic.department_id, (hc.total_hired / ic.total_interviews) AS hire_rate FROM InterviewCounts ic JOIN HiredCounts hc ON ic.year = hc.year AND ic.department_id = hc.department_id ORDER BY ic.year, hire_rate DESC	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-10-12'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '领导力奖' AND a.year = 2023 AND ar.date = '2024-10-01' AND ar.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2023 AND ar.date = '2024-09-22' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-10' AND a.check_in > '09:00:00' AND d.name = '人力资源部'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-04-20' AND pe.rating = 'D'	hr
SELECT COUNT(DISTINCT pe.employee_id) * 1.0 / COUNT(DISTINCT e.employee_id) AS award_and_performance_ratio FROM employees e LEFT JOIN ( SELECT a.employee_id FROM awards a WHERE a.year >= EXTRACT(YEAR FROM date('now')) - 2 INTERSECT SELECT p.employee_id FROM performance_evaluations p WHERE p.evaluation_date >= date('now') - INTERVAL '2 years' ) pe ON e.employee_id = pe.employee_id	hr
SELECT e.employee_id, e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.award_name = '优秀员工' AND pe.rating = 'A+' AND pe.evaluation_date >= '2023-01-01' AND pe.evaluation_date < '2024-01-01'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-21' AND a.check_in > '09:00:00'	hr
SELECT employee_id, SUM(EXTRACT(EPOCH FROM (check_out - check_in))) AS total_work_seconds FROM attendance_records GROUP BY employee_id	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-15' AND d.name = '客户服务部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.date, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '创新奖' AND aw.year = 2021 AND a.date = '2024-10-05' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND pe.rating = 'C'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND a.award_name = '领导力奖' AND pe.rating = 'C'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '质量控制部' AND a.date = '2024-09-19' AND a.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2024 AND ar.date = '2024-09-23'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id AND pe.evaluation_date = '2024-09-20' WHERE ar.date = '2024-09-20'	hr
SELECT e.name AS employee_name, d.name AS department_name, d.manager_id FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-26' AND ar.check_in > '09:30:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-10-03' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-01' AND d.name = '研发部' AND EXTRACT(EPOCH FROM (a.check_out - a.check_in)) / 3600 > 10	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2023 AND a.award_name = '优秀员工' AND pe.evaluation_date >= '2023-01-01' AND pe.evaluation_date < '2024-01-01'	hr
SELECT d.cust_no, d.acct_bal, l.loan_balance, l.loan_type FROM deposit_account_info d JOIN loan_detail_info l ON d.cust_no = l.cust_id WHERE d.data_dt = '2024-07-19' AND l.dw_date = '2024-07-19' AND d.acct_bal > 100000 AND l.loan_balance > 500000	loan_user
SELECT cust_no, wealth_bal FROM financial_products WHERE data_dt = '2024-07-02' AND currency = 'USD' AND wealth_bal > 5000000	loan_user
SELECT rs_type_name, rs_type_id FROM five_level_classification WHERE rs_type = '不良' AND data_dt = '2024-07-22'	loan_user
SELECT c.customer_name, o.occupation_name, lr.description FROM customer c JOIN occupation o ON c.occupation_id = o.id JOIN loan_repayment lr ON c.id = lr.loan_application_id ORDER BY lr.repayment_amount DESC	loan_user
SELECT c.customer_name, c.id_number, c.phone_number, c.email, c.address FROM customer c JOIN occupation o ON c.occupation_id = o.id WHERE o.occupation_name = '护士' ORDER BY c.customer_name	loan_user
SELECT COUNT(DISTINCT da.cust_no) FROM deposit_account_info da JOIN loan_detail_info ld ON da.cust_no = ld.cust_id WHERE da.data_dt = '2024-08-19' AND da.bank_nm = '沈阳分行' AND da.cust_type = '对私' AND ld.cust_type = '对私' AND ld.dw_date = '2024-07-19'	loan_user
SELECT c.curr_code, c.curr_full_name, b.bank_name, b.bank_level FROM currency c JOIN bank_orgnization b ON c.data_dt = b.data_dt WHERE c.curr_class = '外币' AND c.data_dt = '2023-06-30'	loan_user
SELECT deposit_id, deposit_name FROM deposit_type WHERE data_dt = '2024-07-22'	loan_user
SELECT d.card_no, d.cust_nm, d.residential_address FROM debit_card_information d WHERE d.open_date = '2024-07-15' AND d.current_bal > 2000	loan_user
SELECT customer_id, credit_score FROM loan_credit WHERE credit_date = '2003-06-22' AND credit_score > 0.75	loan_user
SELECT c.gender, c.customer_name, lr.repayment_amount FROM customer c JOIN loan_repayment lr ON c.id = lr.loan_application_id GROUP BY c.gender, c.customer_name, lr.repayment_amount	loan_user
SELECT la.loan_amount, da.cust_name FROM loan_application la JOIN deposit_account_info da ON la.customer_id = da.cust_no ORDER BY la.loan_amount DESC LIMIT 1	loan_user
SELECT COUNT(DISTINCT fp.cust_no) FROM financial_products fp JOIN debit_card_information dci ON fp.cust_no = dci.cust_no WHERE fp.wealth_bal > 1000000 AND dci.card_state = '正常'	loan_user
SELECT dai.cust_name, dai.ci_ref_acct, dai.act_mon_avg_bal FROM deposit_account_info dai JOIN bank_orgnization bo ON dai.org_no = bo.bank_id WHERE dai.data_dt = '2024-07-19' AND dai.acct_type_code = '活期' AND dai.org_nm = '沈阳余淮支行' AND dai.act_mon_avg_bal > 50000	loan_user
SELECT c.customer_name, l.loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id WHERE l.loan_amount > 30000 AND l.status = 'PENDING'	loan_user
WITH top_20_customers AS (SELECT cust_id FROM loan_detail_info ORDER BY loan_amount DESC LIMIT 20) SELECT d.deposit_type_name, COUNT(*) AS customer_count FROM top_20_customers t JOIN loan_detail_info l ON t.cust_id = l.cust_id JOIN deposit_type d ON l.dw_date = d.data_dt GROUP BY d.deposit_type_name	loan_user
SELECT curr_code, curr_full_name FROM currency WHERE curr_class = '外币' ORDER BY curr_code ASC	loan_user
SELECT la.customer_id, la.loan_amount FROM loan_application la ORDER BY la.loan_amount DESC	loan_user
SELECT f.cast_type, AVG(f.wealth_sta_m_avg_bal_b) AS avg_monthly_balance FROM financial_products f WHERE f.data_dt BETWEEN '2024-07-01' AND '2024-07-31' GROUP BY f.cast_type	loan_user
SELECT * FROM loan_detail_info WHERE loandate_s > '2024-04-01'	loan_user
WITH age_group_avg AS (SELECT CASE WHEN DATE_PART('year', AGE(date('now'), c.birth_date)) BETWEEN 0 AND 20 THEN '0-20' WHEN DATE_PART('year', AGE(date('now'), c.birth_date)) BETWEEN 21 AND 40 THEN '21-40' WHEN DATE_PART('year', AGE(date('now'), c.birth_date)) BETWEEN 41 AND 60 THEN '41-60' ELSE '61+' END as age_group, AVG(l.loan_amount) as avg_loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id GROUP BY age_group) SELECT c.customer_name, aga.age_group, l.loan_amount, aga.avg_loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id JOIN age_group_avg aga ON CASE WHEN DATE_PART('year', AGE(date('now'), c.birth_date)) BETWEEN 0 AND 20 THEN '0-20' WHEN DATE_PART('year', AGE(date('now'), c.birth_date)) BETWEEN 21 AND 40 THEN '21-40' WHEN DATE_PART('year', AGE(date('now'), c.birth_date)) BETWEEN 41 AND 60 THEN '41-60' ELSE '61+' END = aga.age_group WHERE l.loan_amount > aga.avg_loan_amount * 1.5 ORDER BY l.loan_amount DESC	loan_user
SELECT birth_date, gender FROM customer	loan_user
SELECT d.cust_id, d.loan_balance FROM loan_detail_info d JOIN deposit_account_info a ON d.cust_id = a.cust_no WHERE d.loan_balance > 500000 AND d.dw_date = '2024-07-19' AND a.bank_no = 'BANK_006'	loan_user
SELECT ldi.reportid, ldi.loan_balance, c.curr_full_name, flc.rs_type_name FROM loan_detail_info ldi JOIN currency c ON ldi.currency_type = c.curr_code JOIN five_level_classification flc ON ldi.judgelevel = flc.rs_type_id WHERE ldi.loan_balance > 1000000	loan_user
SELECT ldi.cust_id, c.curr_full_name, ldi.loan_balance FROM loan_detail_info ldi JOIN currency c ON ldi.currency_type = c.curr_code WHERE ldi.loan_balance > 1000000 ORDER BY ldi.loan_balance DESC	loan_user
SELECT ub.customer_id, COUNT(DISTINCT ub.behavior_type) AS behavior_type_count FROM user_behavior ub WHERE ub.behavior_date >= date('now') - INTERVAL '1 year' GROUP BY ub.customer_id ORDER BY behavior_type_count DESC LIMIT 5	loan_user
SELECT SUM(age1 + age2 + age3 + age4 + age5 + age6) AS total_overdue_amount, COUNT(*) AS account_count FROM credit_card_data WHERE corporation = 'Corp3' AND dw_date = '2024-07-03'	loan_user
SELECT * FROM loan_detail_info WHERE cust_id = '1004'	loan_user
SELECT c.customer_name, t.transfer_amount, t.transfer_date FROM customer c JOIN transfer t ON c.id = t.source_customer_id OR c.id = t.target_customer_id	loan_user
SELECT ub.customer_id, ub.behavior_type, lr.repayment_amount FROM user_behavior ub LEFT JOIN loan_repayment lr ON ub.customer_id = lr.loan_application_id	loan_user
SELECT dai.cust_name, dai.acct_bal, dt.deposit_name FROM deposit_account_info dai JOIN deposit_type dt ON dai.arl_pdp_code = dt.deposit_id WHERE dai.data_dt = '2024-07-21' AND dai.acct_bal > 50000	loan_user
WITH customer_total AS (SELECT c.id, c.customer_name, c.province, SUM(l.loan_amount) as total_loan FROM customer c JOIN loan_application l ON c.id = l.customer_id GROUP BY c.id, c.customer_name, c.province), province_total AS (SELECT province, SUM(loan_amount) as province_total FROM loan_application l JOIN customer c ON l.customer_id = c.id GROUP BY province) SELECT ct.customer_name, ct.province, ct.total_loan, (ct.total_loan / pt.province_total * 100) as percentage FROM customer_total ct JOIN province_total pt ON ct.province = pt.province ORDER BY percentage DESC	loan_user
WITH province_occupation_approval AS (SELECT c.province, o.occupation_name, COUNT(*) as total_applications, SUM(CASE WHEN la.status = 'APPROVED' THEN 1 ELSE 0 END) / COUNT(*) as approval_rate, ROW_NUMBER() OVER (PARTITION BY c.province ORDER BY SUM(CASE WHEN la.status = 'APPROVED' THEN 1 ELSE 0 END) / COUNT(*) DESC) as rank FROM customer c JOIN occupation o ON c.occupation_id = o.id JOIN loan_application la ON c.id = la.customer_id GROUP BY c.province, o.occupation_name) SELECT province, occupation_name, approval_rate FROM province_occupation_approval WHERE rank = 1 ORDER BY approval_rate DESC	loan_user
WITH branch_total AS (SELECT bank_nm, SUM(current_bal + fixed_bal) AS total_deposit FROM debit_card_information GROUP BY bank_nm), top_customers AS (SELECT bank_nm, cust_nm, current_bal + fixed_bal AS deposit, ROW_NUMBER() OVER (PARTITION BY bank_nm ORDER BY current_bal + fixed_bal DESC) AS rank FROM debit_card_information) SELECT tc.bank_nm, SUM(tc.deposit) / bt.total_deposit AS top_10_ratio FROM top_customers tc JOIN branch_total bt ON tc.bank_nm = bt.bank_nm WHERE tc.rank <= 10 GROUP BY tc.bank_nm, bt.total_deposit	loan_user
SELECT cust_nm, tel_no FROM debit_card_information WHERE cust_nm LIKE '%Lee%'	loan_user
SELECT ub.customer_id, ub.behavior_type, lr.repayment_amount FROM user_behavior ub LEFT JOIN loan_repayment lr ON ub.customer_id = lr.loan_application_id	loan_user
SELECT DISTINCT lr.loan_application_id, lc.customer_id FROM loan_repayment lr JOIN loan_application la ON lr.loan_application_id = la.id JOIN loan_credit lc ON la.customer_id = lc.customer_id WHERE lr.repayment_date = '2021-11-10' AND lc.credit_score > 0.75	loan_user
SELECT * FROM loan_repayment WHERE repayment_amount > 900	loan_user
SELECT dci.cust_no, dci.cust_nm, dci.card_no, dci.residential_address FROM debit_card_information dci WHERE dci.data_dt = '2024-07-09' AND dci.card_state = '正常' AND dci.residential_address = '987 Willow Street'	loan_user
SELECT ld.cust_id, ld.loan_balance FROM loan_detail_info ld	loan_user
SELECT lt.loan_type_name, COUNT(DISTINCT d.cust_no) AS user_count FROM loan_type lt LEFT JOIN debit_card_information d ON lt.loan_type_code = d.cust_no GROUP BY lt.loan_type_name	loan_user
SELECT ld.loan_type, COUNT(DISTINCT ld.cust_id) AS customer_count FROM loan_detail_info ld GROUP BY ld.loan_type	loan_user
SELECT credit_score, description FROM loan_credit WHERE credit_date = '2011-04-13'	loan_user
SELECT SUM(fp.wealth_bal) AS total_wealth_bal, SUM(fp.wealth_bal_t) AS total_wealth_bal_t FROM financial_products fp WHERE fp.data_dt = '2024-07-14' AND fp.bank_nm = '沈阳余淮支行' AND fp.cast_type = '对公'	loan_user
SELECT customer_id, credit_score FROM loan_credit WHERE credit_date = '2003-06-22' AND credit_score > 0.75	loan_user
SELECT source_customer_id, target_customer_id FROM transfer	loan_user
SELECT loan_type_name FROM loan_type WHERE loan_type_code = 'MORTGAGE'	loan_user
SELECT cust_nm, card_no FROM debit_card_information WHERE data_dt = '2024-07-05' AND card_state = '正常'	loan_user
SELECT f.bank_nm, f.cast_type, COUNT(*) AS product_count FROM financial_products f GROUP BY f.bank_nm, f.cast_type	loan_user
SELECT deposit_name, deposit_type_id FROM deposit_type ORDER BY deposit_name	loan_user
SELECT la.status, la.loan_amount FROM loan_application la	loan_user
SELECT customer_id FROM loan_credit WHERE credit_score = 0.77	loan_user
SELECT lt.description, lr.repayment_amount FROM loan_type lt JOIN loan_application la ON lt.id = la.loan_type_id JOIN loan_repayment lr ON la.id = lr.loan_application_id	loan_user
SELECT rs_type_id, rs_type_name FROM five_level_classification WHERE rs_type_name = '可疑'	loan_user
SELECT card_no, closing_date FROM debit_card_information WHERE closing_date > '2024-07-05'	loan_user
SELECT card_type_nm, card_state FROM debit_card_information WHERE card_type_nm IS NOT NULL	loan_user
SELECT cust_id, SUM(loan_balance) AS total_loan_balance FROM loan_detail_info WHERE dw_date = '2024-07-19' AND loan_balance > 100000 GROUP BY cust_id	loan_user
WITH customer_balances AS (SELECT d.bank_nm, d.cust_no, SUM(d.current_bal + d.fixed_bal) AS deposit_balance, SUM(CASE WHEN lt.loan_type_name IS NOT NULL THEN d.current_bal + d.fixed_bal ELSE 0 END) AS loan_balance FROM debit_card_information d LEFT JOIN loan_type lt ON d.cust_no = lt.loan_type_code GROUP BY d.bank_nm, d.cust_no) SELECT bank_nm, CORR(deposit_balance, loan_balance) AS correlation_coefficient FROM customer_balances GROUP BY bank_nm	loan_user
SELECT DATE_TRUNC('month', t.transfer_date) AS month, SUM(t.transfer_amount) AS total_transfer, SUM(l.loan_amount) AS total_loan FROM transfer t FULL OUTER JOIN loan_detail_info l ON DATE_TRUNC('month', t.transfer_date) = DATE_TRUNC('month', l.loandate_s) GROUP BY month ORDER BY month	loan_user
SELECT customer_name, phone_number FROM customer WHERE province = '上海市'	loan_user
SELECT credit_score, credit_date FROM loan_credit WHERE customer_id = 533302	loan_user
SELECT * FROM transfer ORDER BY transfer_amount DESC	loan_user
SELECT customer_id, COUNT(DISTINCT behavior_type) AS unique_behavior_types FROM user_behavior GROUP BY customer_id	loan_user
SELECT COUNT(DISTINCT da.cust_no) FROM deposit_account_info da JOIN credit_card_data cc ON da.cust_no = cc.custr_nbr WHERE da.bank_nm = '沈阳分行' AND da.data_dt = '2024-07-22' AND da.acct_bal > 100000 AND (cc.age1 > 5000 OR cc.age2 > 5000 OR cc.age3 > 5000 OR cc.age4 > 5000 OR cc.age5 > 5000 OR cc.age6 > 5000)	loan_user
SELECT card_no, cust_nm FROM debit_card_information WHERE bank_nm = '北京分行'	loan_user
WITH monthly_applications AS (SELECT customer_id, DATE_TRUNC('month', apply_date) as apply_month FROM loan_application), consecutive_months AS (SELECT customer_id, apply_month, LEAD(apply_month, 2) OVER (PARTITION BY customer_id ORDER BY apply_month) as next_two_month FROM monthly_applications) SELECT COUNT(DISTINCT customer_id) as customer_count FROM consecutive_months WHERE next_two_month = apply_month + INTERVAL '2 months'	loan_user
SELECT f.cust_no, f.bank_nm FROM financial_products f ORDER BY f.cust_no	loan_user
SELECT occupation_code, occupation_name FROM occupation ORDER BY occupation_name	loan_user
SELECT COUNT(*) FROM financial_products fp JOIN debit_card_information dci ON fp.cust_no = dci.cust_no WHERE fp.wealth_bal > 10 * (dci.current_bal + dci.fixed_bal)	loan_user
SELECT ld.loan_orgno, ld.loan_balance FROM loan_detail_info ld WHERE ld.loan_amount > 70000	loan_user
SELECT lt.loan_type_name, ub.behavior_type FROM loan_type lt LEFT JOIN loan_repayment lr ON lt.id = lr.loan_application_id LEFT JOIN user_behavior ub ON lr.loan_application_id = ub.customer_id	loan_user
SELECT bank_level, COUNT(*) AS institution_count FROM bank_orgnization GROUP BY bank_level	loan_user
SELECT current_bal, fixed_bal FROM debit_card_information WHERE data_dt = '2024-07-15' AND bank_nm = '北京东单支行' AND cust_nm = 'Olivia Lee'	loan_user
SELECT c.customer_name, lc.description FROM loan_credit lc JOIN customer c ON lc.customer_id = c.id WHERE lc.credit_date = '2017-10-31' AND lc.credit_score > 0.85 ORDER BY lc.credit_score DESC	loan_user
SELECT la.loan_amount FROM loan_application la WHERE la.loan_type_id = (SELECT id FROM loan_type WHERE loan_type_code = 'CAR')	loan_user
SELECT lt.loan_type_name, AVG(lr.repayment_amount) as avg_repayment_amount, COUNT(lr.id) as repayment_count FROM loan_repayment lr JOIN loan_application la ON lr.loan_application_id = la.id JOIN loan_type lt ON la.loan_type_id = lt.id GROUP BY lt.loan_type_name	loan_user
SELECT acc_name1, bank, category, day_opened FROM credit_card_data WHERE corporation = 'Corp3' ORDER BY day_opened DESC	loan_user
SELECT customer_name, address FROM customer	loan_user
WITH loan_sum AS (SELECT loan_orgno, SUM(loan_amount) as total_loan FROM loan_detail_info WHERE EXTRACT(YEAR FROM loandate_s) = 2023 GROUP BY loan_orgno), debit_sum AS (SELECT bank_no, SUM(current_bal) as total_debit FROM debit_card_information WHERE EXTRACT(YEAR FROM data_dt) = 2023 GROUP BY bank_no) SELECT bo.bank_name, ls.total_loan, ds.total_debit, ls.total_loan / NULLIF(ds.total_debit, 0) as loan_debit_ratio FROM bank_orgnization bo LEFT JOIN loan_sum ls ON bo.bank_id = ls.loan_orgno LEFT JOIN debit_sum ds ON bo.bank_id = ds.bank_no ORDER BY loan_debit_ratio DESC	loan_user
SELECT * FROM loan_repayment WHERE repayment_amount = (SELECT repayment_amount FROM loan_repayment ORDER BY ABS(repayment_amount - (SELECT AVG(repayment_amount) FROM loan_repayment)) LIMIT 1)	loan_user
SELECT DISTINCT l.customer_id FROM loan_credit l JOIN financial_products f ON l.credit_date = f.data_dt WHERE l.credit_score > 0.8 AND f.data_dt >= '2024-07-01' AND f.data_dt < '2024-08-01'	loan_user
SELECT EXTRACT(YEAR FROM apply_date) as year, EXTRACT(MONTH FROM apply_date) as month, COUNT(CASE WHEN status = 'APPROVED' THEN 1 END) / COUNT(*) as approval_rate FROM loan_application GROUP BY year, month ORDER BY year, month	loan_user
WITH new_customers AS (SELECT DISTINCT ON (cust_id) cust_id, loan_orgno, loan_amount FROM loan_detail_info WHERE loandate_s BETWEEN '2024-01-01' AND '2024-03-31' AND cust_id NOT IN (SELECT cust_id FROM loan_detail_info WHERE loandate_s < '2024-01-01')) SELECT bo.bank_name, COUNT(nc.cust_id) as new_customer_count, AVG(nc.loan_amount) as avg_loan_amount FROM bank_orgnization bo LEFT JOIN new_customers nc ON bo.bank_id = nc.loan_orgno GROUP BY bo.bank_name ORDER BY new_customer_count DESC	loan_user
SELECT dai.bank_nm, AVG(la.loan_term) as avg_loan_term, AVG(la.loan_amount) as avg_loan_amount FROM loan_application la JOIN deposit_account_info dai ON la.customer_id = dai.cust_noeger GROUP BY dai.bank_nm	loan_user
SELECT customer_id, credit_score, credit_date FROM loan_credit	loan_user
SELECT l.cust_id, l.loan_balance FROM loan_detail_info l WHERE l.loandate_e < '2026-01-01'	loan_user
SELECT apply_date, loan_amount FROM loan_application	loan_user
SELECT la.customer_id, la.loan_amount FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id WHERE lt.loan_type_name = '住房贷款' AND la.status = 'APPROVED' ORDER BY la.loan_amount DESC	loan_user
SELECT dai.org_nm, dai.bank_nm, SUM(dai.acct_bal) as total_balance FROM deposit_account_info dai GROUP BY dai.org_nm, dai.bank_nm ORDER BY total_balance DESC LIMIT 5	loan_user
SELECT * FROM loan_repayment WHERE description = '严琳'	loan_user
SELECT rs_type, COUNT(*) AS count FROM five_level_classification GROUP BY rs_type	loan_user
SELECT rs_type, COUNT(*) FROM five_level_classification GROUP BY rs_type	loan_user
SELECT b.bank_name, f.cust_no, f.wealth_bal FROM bank_orgnization b JOIN financial_products f ON b.bank_id = f.bank_no	loan_user
SELECT loan_type_name, description FROM loan_type ORDER BY loan_type_code	loan_user
SELECT b1.bank_name, b2.bank_name AS parent_name FROM bank_orgnization b1 LEFT JOIN bank_orgnization b2 ON b1.bank_parent = b2.bank_id WHERE b1.bank_level = '2'	loan_user
WITH ranked_loans AS (SELECT c.province, c.customer_name, l.loan_amount, ROW_NUMBER() OVER (PARTITION BY c.province ORDER BY l.loan_amount DESC) as rank FROM customer c JOIN loan_application l ON c.id = l.customer_id) SELECT province, customer_name, loan_amount FROM ranked_loans WHERE rank <= 3 ORDER BY province, loan_amount DESC	loan_user
SELECT * FROM transfer WHERE source_customer_id = 376252	loan_user
SELECT c.customer_name, c.gender, o.occupation_name FROM customer c JOIN occupation o ON c.occupation_id = o.id	loan_user
SELECT COUNT(DISTINCT fp.cust_no) AS customer_count, SUM(fp.wealth_bal_f) AS total_non_guaranteed_wealth_balance FROM financial_products fp JOIN bank_orgnization bo ON fp.bank_no = bo.bank_id WHERE bo.bank_name = '沈阳余淮支行' AND fp.data_dt >= '2024-07-01' AND fp.data_dt <= '2024-07-31' AND fp.wealth_bal_f IS NOT NULL	loan_user
SELECT customer_id FROM loan_credit WHERE credit_score > 0.8	loan_user
SELECT c1.customer_name AS source_customer_name, c2.customer_name AS target_customer_name, t.transfer_amount FROM transfer t JOIN customer c1 ON t.source_customer_id = c1.id JOIN customer c2 ON t.target_customer_id = c2.id WHERE t.transfer_amount > 5000	loan_user
SELECT la.customer_id FROM loan_application la JOIN loan_status ls ON la.status = ls.loan_status_code WHERE la.apply_date >= '2019-01-01' AND la.apply_date < '2020-01-01' AND ls.loan_status_code = 'APPROVED'	loan_user
SELECT dci.card_type, dci.card_type_nm, COUNT(DISTINCT dci.cust_no) AS customer_count, AVG(fp.wealth_bal) AS avg_wealth_bal FROM debit_card_information dci LEFT JOIN financial_products fp ON dci.cust_no = fp.cust_no GROUP BY dci.card_type, dci.card_type_nm	loan_user
SELECT c.customer_name, a.loan_amount FROM customer c JOIN loan_application a ON c.id = a.customer_id ORDER BY a.apply_date ASC	loan_user
SELECT SUM(acct_bal) AS total_acct_bal, SUM(act_year_avg_bal) AS total_act_year_avg_bal FROM deposit_account_info WHERE data_dt = '2024-07-19' AND cust_type = '对私'	loan_user
SELECT c.customer_name, o.occupation_name FROM customer c JOIN occupation o ON c.occupation_id = o.id JOIN loan_repayment lr ON c.id = lr.loan_application_id WHERE lr.repayment_amount < 500	loan_user
SELECT d.cust_name, d.acct_bal FROM deposit_account_info d WHERE d.data_dt = '2023-07-19 00:00:00'	loan_user
SELECT dai.cust_no, dai.acct_bal, la.loan_amount, la.apply_date FROM deposit_account_info dai LEFT JOIN loan_application la ON dai.cust_noeger = la.customer_id ORDER BY dai.acct_bal DESC, la.apply_date DESC LIMIT 1	loan_user
SELECT o.occupation_name, COUNT(c.id) AS customer_count FROM occupation o LEFT JOIN customer c ON o.id = c.occupation_id GROUP BY o.occupation_name	loan_user
SELECT c.customer_name, t.transfer_amount FROM transfer t JOIN customer c ON t.source_customer_id = c.id WHERE t.transfer_date = '2016-06-11' AND t.transfer_amount > 5000 ORDER BY t.transfer_amount DESC	loan_user
SELECT ldi.cust_id, ldi.loan_balance, ldi.loan_type, c.curr_full_name FROM loan_detail_info ldi JOIN currency c ON ldi.currency_type = c.curr_code WHERE ldi.loandate_s > '2024-07-01' AND ldi.loan_balance > 1000000 ORDER BY ldi.loan_balance DESC	loan_user
SELECT * FROM user_behavior WHERE behavior_date = '2018-06-26'	loan_user
SELECT * FROM loan_repayment WHERE EXTRACT(DOW FROM repayment_date) IN (0, 6)	loan_user
SELECT dt.deposit_name, lt.loan_type_name, COUNT(DISTINCT c.id) AS customer_count FROM customer c JOIN deposit_account_info dai ON c.id_number = dai.cert_code JOIN deposit_type dt ON dai.arl_pdp_code = dt.deposit_id LEFT JOIN loan_application la ON c.id = la.customer_id LEFT JOIN loan_type lt ON la.loan_type_id = lt.id GROUP BY dt.deposit_name, lt.loan_type_name ORDER BY customer_count DESC	loan_user
SELECT c.customer_name, lr.repayment_amount FROM loan_repayment lr JOIN loan_application la ON lr.loan_application_id = la.id JOIN customer c ON la.customer_id = c.id WHERE lr.repayment_date = '2021-11-10' AND lr.repayment_amount > 20 ORDER BY lr.repayment_amount DESC	loan_user
SELECT lt.loan_type_name, AVG(lc.credit_score) AS average_credit_score FROM loan_type lt JOIN loan_application la ON lt.id = la.loan_type_id JOIN loan_credit lc ON la.customer_id = lc.customer_id GROUP BY lt.loan_type_name	loan_user
SELECT loan_type_name, loan_type_code FROM loan_type WHERE loan_type_code IS NOT NULL	loan_user
SELECT ls.loan_status_name, COUNT(la.id) AS count FROM loan_status ls JOIN loan_application la ON ls.loan_status_code = la.status GROUP BY ls.loan_status_name	loan_user
SELECT customer_id, description FROM loan_credit	loan_user
SELECT dci.cust_nm, dci.cust_id, dci.tel_no, dci.card_no, dci.current_bal FROM debit_card_information dci WHERE dci.data_dt = '2024-07-15 00:00:00' AND dci.bank_nm = '北京东单支行'	loan_user
SELECT l.cust_type, SUM(l.loan_amount) AS total_amount FROM loan_detail_info l GROUP BY l.cust_type ORDER BY l.cust_type	loan_user
SELECT *, (loan_balance / loan_amount) AS balance_ratio FROM loan_detail_info ORDER BY balance_ratio DESC LIMIT 10	loan_user
SELECT la.customer_id, SUM(la.loan_amount) AS total_loan_amount FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id WHERE lt.loan_type_name = '住房贷款' AND la.status = 'REJECTED' AND EXTRACT(YEAR FROM la.apply_date) = 2019 GROUP BY la.customer_id	loan_user
SELECT * FROM bank_orgnization	loan_user
SELECT ldi.reportid, ldi.cust_id, ldi.loan_balance, ldi.blc_capital, c.curr_full_name, flc.rs_type_name FROM loan_detail_info ldi JOIN currency c ON ldi.currency_type = c.curr_code JOIN five_level_classification flc ON ldi.judgelevel = flc.rs_type_id WHERE ldi.blc_capital > 10000 AND ldi.dw_date = '2024-07-22'	loan_user
SELECT card_state, open_date FROM debit_card_information WHERE card_state = '正常'	loan_user
SELECT c.customer_name, t.transfer_amount, t.transfer_date FROM transfer t JOIN customer c ON t.source_customer_id = c.id WHERE t.transfer_date = '2023-06-30' ORDER BY t.transfer_amount DESC	loan_user
SELECT b.bank_name, b.bank_level FROM bank_orgnization b WHERE b.data_dt = '2023-06-30'	loan_user
SELECT cust_no, SUM(wealth_bal_f) AS total_wealth_bal_f FROM financial_products WHERE data_dt = '2024-07-02' GROUP BY cust_no ORDER BY total_wealth_bal_f DESC	loan_user
SELECT SUM(loan_amount) FROM loan_application WHERE status = 'REJECTED' AND apply_date >= '2019-01-01' AND apply_date <= '2019-12-31'	loan_user
SELECT d.org_nm, SUM(d.acct_bal) AS total_balance FROM deposit_account_info d JOIN bank_orgnization b ON d.bank_no = b.bank_id WHERE d.data_dt = '2024-07-21' AND d.bank_no = 'BANK_003' AND d.cust_type = '对公' GROUP BY d.org_nm	loan_user
SELECT lr.loan_application_id, SUM(lr.repayment_amount) AS total_repayment, COUNT(ub.id) AS behavior_count, AVG(lr.repayment_amount) AS avg_repayment_amount FROM loan_repayment lr LEFT JOIN user_behavior ub ON lr.loan_application_id = ub.customer_id GROUP BY lr.loan_application_id	loan_user
SELECT bank_name, bank_level, data_dt FROM bank_orgnization	loan_user
WITH top_depositors AS (SELECT c.id, c.customer_name, c.occupation_id, dai.acct_bal FROM customer c JOIN deposit_account_info dai ON c.id_number = dai.cert_code ORDER BY dai.acct_bal DESC LIMIT (SELECT COUNT(*) * 0.1 FROM customer)) SELECT td.customer_name, td.acct_bal AS deposit_balance, td.occupation_id FROM top_depositors td LEFT JOIN loan_application la ON td.id = la.customer_id WHERE la.id IS NULL	loan_user
SELECT dai.org_nm, COUNT(CASE WHEN la.status = 'APPROVED' THEN 1 END) / COUNT(*) as approval_rate FROM loan_application la JOIN deposit_account_info dai ON la.customer_id = dai.cust_noeger GROUP BY dai.org_nm	loan_user
SELECT cust_name, acct_bal FROM deposit_account_info WHERE data_dt BETWEEN '2023-07-01' AND '2023-07-31'	loan_user
SELECT b.bank_name, d.cust_name, d.acct_bal, d.cur_type FROM bank_orgnization b JOIN deposit_account_info d ON b.bank_id = d.bank_no WHERE d.acct_bal > 100000 AND d.cur_type = 'USD' AND b.data_dt = '2023-06-30'	loan_user
SELECT d.cust_name, d.acct_type_code, d.acct_bal, c.curr_full_name FROM deposit_account_info d JOIN currency c ON d.cur_type = c.curr_code WHERE d.data_dt = '2024-07-19' AND d.acct_bal > 100000	loan_user
SELECT cust_nm, card_no FROM debit_card_information WHERE card_state = '正常' AND open_date > '2024-07-01' ORDER BY open_date DESC	loan_user
SELECT deposit_name, deposit_type_id FROM deposit_type ORDER BY deposit_name	loan_user
SELECT source_customer_id, COUNT(*) AS transfer_count, MODE() WITHIN GROUP (ORDER BY transfer_amount) AS most_common_amount FROM transfer GROUP BY source_customer_id ORDER BY transfer_count DESC LIMIT 10	loan_user
SELECT COUNT(DISTINCT c.id) AS customer_count, SUM(ldi.loan_balance) AS total_loan_balance FROM customer c JOIN credit_card_data ccd ON c.id_number = ccd.custr_nbr JOIN loan_detail_info ldi ON c.id_number = ldi.cust_id WHERE c.province = '上海市' AND ccd.acct_sts = '正常'	loan_user
SELECT ldi.reportid, ldi.loan_balance, flc.rs_type_name, ldi.loan_type FROM loan_detail_info ldi JOIN five_level_classification flc ON ldi.judgelevel = flc.rs_type_id WHERE ldi.loan_balance > 15000 AND ldi.dw_date = '2024-07-22'	loan_user
WITH customer_loans AS (SELECT c.id, MAX(CASE WHEN lt.loan_type_name = '房贷' THEN l.loan_amount END) as house_loan, MAX(CASE WHEN lt.loan_type_name = '车贷' THEN l.loan_amount END) as car_loan FROM customer c JOIN loan_application l ON c.id = l.customer_id JOIN loan_type lt ON l.loan_type_id = lt.id WHERE lt.loan_type_name IN ('房贷', '车贷') GROUP BY c.id) SELECT COUNT(*) as customer_count FROM customer_loans WHERE house_loan IS NOT NULL AND car_loan IS NOT NULL AND house_loan > car_loan	loan_user
SELECT dci.cust_nm, SUM(dci.current_bal + dci.fixed_bal) AS total_balance FROM debit_card_information dci JOIN bank_orgnization bo ON dci.bank_no = bo.bank_id WHERE dci.data_dt = '2024-07-19' AND bo.bank_name = '杭州上城区支行' GROUP BY dci.cust_nm ORDER BY total_balance DESC	loan_user
SELECT vouch_type, AVG(loan_amount) AS avg_loan_amount, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY loan_amount) AS median_loan_amount, PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY loan_amount) - PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY loan_amount) AS iqr_loan_amount FROM loan_detail_info GROUP BY vouch_type	loan_user
SELECT SUM(t.transfer_amount) FROM transfer t JOIN loan_credit lc ON t.source_customer_id = lc.customer_id OR t.target_customer_id = lc.customer_id WHERE t.transfer_date = '2020-11-03' AND lc.credit_score > 0.8	loan_user
SELECT COUNT(DISTINCT c.id) FROM customer c JOIN loan_application la ON c.id = la.customer_id JOIN occupation o ON c.occupation_id = o.id WHERE la.loan_amount > 50000 AND o.occupation_name = '护士'	loan_user
SELECT ld.cust_id, ld.loan_amount FROM loan_detail_info ld WHERE ld.dw_date BETWEEN '2024-07-01' AND '2024-07-31'	loan_user
SELECT DATE_TRUNC('month', apply_date) as month, COUNT(*) as total_applications, SUM(CASE WHEN status = 'APPROVED' THEN 1 ELSE 0 END) / COUNT(*) as approval_rate FROM loan_application GROUP BY month ORDER BY month	loan_user
SELECT b.bank_name, SUM(f.wealth_bal) AS total_wealth_bal FROM financial_products f JOIN bank_orgnization b ON f.bank_no = b.bank_id WHERE f.data_dt = '2024-07-02' AND f.cast_type = '对公' GROUP BY b.bank_name	loan_user
SELECT c.customer_name, l.status FROM customer c LEFT JOIN loan_application l ON c.id = l.customer_id	loan_user
SELECT lt.loan_type_name, COUNT(la.customer_id) AS customer_count, SUM(la.loan_amount) AS total_loan_amount FROM loan_type lt JOIN loan_application la ON lt.id = la.loan_type_id GROUP BY lt.loan_type_name	loan_user
SELECT CASE WHEN DATE_PART('year', AGE(date('now'), c.birth_date)) BETWEEN 0 AND 20 THEN '0-20' WHEN DATE_PART('year', AGE(date('now'), c.birth_date)) BETWEEN 21 AND 40 THEN '21-40' WHEN DATE_PART('year', AGE(date('now'), c.birth_date)) BETWEEN 41 AND 60 THEN '41-60' ELSE '61+' END as age_group, COUNT(CASE WHEN l.status = 'APPROVED' THEN 1 END) / COUNT(*) as approval_rate FROM customer c JOIN loan_application l ON c.id = l.customer_id GROUP BY age_group ORDER BY age_group	loan_user
SELECT repayment_amount, repayment_date FROM loan_repayment WHERE loan_application_id = 323803	loan_user
SELECT lc.customer_id, lc.credit_score FROM loan_credit lc JOIN bank_orgnization bo ON lc.credit_date = bo.data_dt WHERE bo.bank_name = '杭州上城区支行' AND bo.data_dt = '2023-06-30' ORDER BY lc.credit_score DESC LIMIT 1	loan_user
SELECT * FROM loan_repayment WHERE repayment_date < '2020-02-25'	loan_user
SELECT t.transfer_amount, t.transfer_date FROM transfer t JOIN customer c ON t.source_customer_id = c.id WHERE c.customer_name = '关飞'	loan_user
SELECT c.customer_name, c.id_number, s.loan_status_name FROM customer c JOIN loan_application a ON c.id = a.customer_id JOIN loan_status s ON a.status = s.loan_status_code	loan_user
SELECT * FROM user_behavior WHERE behavior_type LIKE '%ILL%'	loan_user
SELECT * FROM transfer ORDER BY transfer_amount ASC	loan_user
SELECT * FROM user_behavior WHERE description IS NOT NULL	loan_user
SELECT current_bal FROM debit_card_information WHERE cust_nm = 'James Taylor' AND bank_nm = '杭州上城区支行' AND data_dt = '2024-07-09'	loan_user
SELECT * FROM loan_type WHERE description ILIKE '%Loan%'	loan_user
SELECT c.curr_code, c.curr_full_name, COUNT(ccd.curr_num) AS account_count FROM currency c LEFT JOIN credit_card_data ccd ON c.curr_code = ccd.curr_num GROUP BY c.curr_code, c.curr_full_name	loan_user
SELECT AVG(f.wealth_t_m_avg_bal_a) AS avg_guaranteed_balance FROM financial_products f	loan_user
SELECT lt.loan_type_name, lt.description FROM loan_status ls JOIN loan_type lt ON ls.id = lt.id WHERE ls.loan_status_code = 'APPROVED'	loan_user
SELECT c.customer_name, DATE_PART('year', AGE(date('now'), c.birth_date)) as age, l.loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id WHERE EXTRACT(YEAR FROM l.apply_date) = 2023 ORDER BY age DESC LIMIT 5	loan_user
SELECT COUNT(DISTINCT lc.customer_id) FROM loan_credit lc JOIN financial_products fp ON lc.customer_id = fp.cust_no JOIN bank_orgnization bo ON fp.bank_no = bo.bank_id WHERE bo.bank_name = '杭州上城区支行' AND bo.data_dt = '2023-06-30' AND lc.credit_score > 0.75	loan_user
SELECT rs_type, COUNT(*) as count FROM five_level_classification WHERE data_dt = '2024-07-22' GROUP BY rs_type ORDER BY count DESC	loan_user
SELECT flc.rs_type_name, COUNT(ub.id) AS behavior_count FROM five_level_classification flc LEFT JOIN user_behavior ub ON flc.rs_type_name = ub.behavior_type GROUP BY flc.rs_type_name	loan_user
SELECT * FROM transfer ORDER BY transfer_date	loan_user
SELECT card_type, card_type_nm, card_state FROM debit_card_information WHERE data_dt = '2024-07-09' AND bank_nm = '杭州上城区支行' AND cust_nm = 'James Taylor'	loan_user
SELECT SUM(wealth_bal) FROM financial_products WHERE data_dt = '2024-07-02' AND currency = 'USD'	loan_user
SELECT ub.customer_id, COUNT(ub.id) AS behavior_count, MAX(lc.credit_score) AS latest_credit_score FROM user_behavior ub JOIN loan_credit lc ON ub.customer_id = lc.customer_id GROUP BY ub.customer_id ORDER BY ub.customer_id	loan_user
SELECT t.transfer_amount, c1.customer_name AS source_customer_name, c2.customer_name AS target_customer_name FROM transfer t JOIN customer c1 ON t.source_customer_id = c1.id JOIN customer c2 ON t.target_customer_id = c2.id WHERE t.transfer_date = '2023-06-30' AND t.transfer_amount > 1000	loan_user
SELECT * FROM customer WHERE customer_name = '饶丽'	loan_user
SELECT d.card_no, d.cust_nm FROM debit_card_information d WHERE d.data_dt = '2024-07-14' AND d.card_state = '正常'	loan_user
SELECT ldi.cust_id, ldi.loan_balance, flc.rs_type_name, c.curr_full_name FROM loan_detail_info ldi JOIN five_level_classification flc ON ldi.judgelevel = flc.rs_type_id JOIN currency c ON ldi.currency_type = c.curr_code WHERE ldi.dw_date = '2024-07-19' AND ldi.loan_balance > 500000 ORDER BY ldi.loan_balance DESC	loan_user
SELECT COUNT(*) FROM deposit_account_info dai JOIN bank_orgnization bo ON dai.bank_no = bo.bank_id WHERE dai.data_dt = '2024-07-19' AND dai.acct_bal > 100000 AND dai.gender_code = '男' AND bo.bank_name = '沈阳分行'	loan_user
SELECT * FROM loan_type WHERE loan_type_name = '汽车贷款'	loan_user
SELECT c.customer_name, la.loan_amount FROM customer c JOIN loan_application la ON c.id = la.customer_id WHERE la.loan_amount > 10000	loan_user
WITH customer_scores AS (SELECT c.id, c.customer_name, COALESCE(SUM(dai.acct_bal), 0) AS total_deposit, AVG(lc.credit_score) AS avg_credit_score, AVG(CASE WHEN ldi.judgelevel = '1' THEN 100 WHEN ldi.judgelevel = '2' THEN 80 WHEN ldi.judgelevel = '3' THEN 60 WHEN ldi.judgelevel = '4' THEN 40 WHEN ldi.judgelevel = '5' THEN 20 ELSE 0 END) AS loan_repayment_score FROM customer c LEFT JOIN deposit_account_info dai ON c.id_number = dai.cert_code LEFT JOIN loan_credit lc ON c.id = lc.customer_id LEFT JOIN loan_detail_info ldi ON c.id_number = ldi.cust_id GROUP BY c.id, c.customer_name) SELECT customer_name, total_deposit, avg_credit_score, loan_repayment_score, (COALESCE(total_deposit / 1000000, 0) * 0.4 + COALESCE(avg_credit_score / 1000, 0) * 0.3 + COALESCE(loan_repayment_score / 100, 0) * 0.3) AS composite_score FROM customer_scores ORDER BY composite_score DESC LIMIT 20	loan_user
SELECT occupation_code, description FROM occupation WHERE occupation_name = '护士'	loan_user
SELECT ub.customer_id, ub.behavior_type, lc.credit_score FROM user_behavior ub JOIN loan_credit lc ON ub.customer_id = lc.customer_id WHERE ub.behavior_date BETWEEN '2021-08-01' AND '2021-08-31'	loan_user
SELECT lt.loan_type_name, ls.loan_status_name, ls.description FROM loan_type lt JOIN loan_status ls ON lt.id = ls.id	loan_user
SELECT f.bank_nm, SUM(f.wealth_bal) AS total_wealth_bal FROM financial_products f WHERE f.data_dt = '2024-07-02' AND f.cast_type = '对公' GROUP BY f.bank_nm	loan_user
SELECT la.customer_id, lt.loan_type_name, la.loan_amount, la.loan_term, la.apply_date, la.status FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id WHERE lt.loan_type_name = '住房贷款' AND la.apply_date >= '2019-01-01' AND la.apply_date <= '2019-12-31' AND la.status = 'REJECTED'	loan_user
SELECT cust_no, wealth_bal_f FROM financial_products WHERE data_dt = '2024-07-19' AND wealth_bal_f > 100000 ORDER BY wealth_bal_f DESC	loan_user
SELECT customer_name, email FROM customer	loan_user
WITH quarterly_stats AS (SELECT c.id, c.customer_name, DATE_TRUNC('quarter', l.apply_date) as quarter, COUNT(CASE WHEN l.status = 'APPROVED' THEN 1 END) / COUNT(*) as success_rate FROM customer c JOIN loan_application l ON c.id = l.customer_id GROUP BY c.id, c.customer_name, quarter) SELECT customer_name, quarter, success_rate, LAG(success_rate) OVER (PARTITION BY id ORDER BY quarter) as prev_quarter_rate, success_rate - LAG(success_rate) OVER (PARTITION BY id ORDER BY quarter) as rate_change FROM quarterly_stats ORDER BY customer_name, quarter	loan_user
SELECT dai.cust_name, dai.acct_bal FROM deposit_account_info dai WHERE dai.data_dt = '2024-07-19' AND dai.cur_type = 'USD' ORDER BY dai.acct_bal DESC	loan_user
SELECT customer_name, id_number, phone_number, email FROM customer WHERE birth_date > '1980-01-01'	loan_user
SELECT c.customer_name, o.occupation_name, la.loan_amount FROM customer c JOIN occupation o ON c.occupation_id = o.id JOIN loan_application la ON c.id = la.customer_id ORDER BY la.loan_amount DESC LIMIT 5	loan_user
SELECT cust_type, loan_balance FROM loan_detail_info	loan_user
SELECT SUM(d.current_bal) AS total_current_bal, SUM(d.fixed_bal) AS total_fixed_bal FROM debit_card_information d JOIN bank_orgnization b ON d.bank_no = b.bank_id WHERE b.bank_name = '杭州上城区支行' AND b.data_dt = '2023-06-30'	loan_user
SELECT flc.rs_type_name, ls.loan_status_name FROM five_level_classification flc JOIN loan_status ls ON flc.rs_type = '不良' WHERE flc.data_dt = '2024-07-22'	loan_user
SELECT * FROM customer WHERE id_number = 'c839d762-6392-4005-8386-ed4e2c50997a'	loan_user
SELECT credit_score, description FROM loan_credit WHERE credit_date = '2003-06-22'	loan_user
SELECT d.cust_name, d.acct_bal FROM deposit_account_info d JOIN bank_orgnization b ON d.bank_no = b.bank_id WHERE d.data_dt = '2024-07-21' AND d.acct_bal > 50000 AND b.bank_name = '杭州分行'	loan_user
SELECT l.cust_id, l.loan_balance, d.acct_bal FROM loan_detail_info l JOIN deposit_account_info d ON l.cust_id = d.cust_no WHERE l.loan_balance > 10000	loan_user
SELECT f.rs_type_name, COUNT(*) AS user_count, SUM(l.loan_balance) AS total_balance FROM five_level_classification f JOIN loan_detail_info l ON f.rs_type_id = l.judgelevel GROUP BY f.rs_type_name	loan_user
SELECT deposit_name FROM deposit_type WHERE data_dt = '2024-07-22'	loan_user
SELECT * FROM transfer WHERE transfer_amount > 500	loan_user
SELECT c.customer_name, c.id_number, lc.credit_score FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id WHERE c.province = '河北省' AND lc.credit_score > 0.8 ORDER BY lc.credit_score DESC	loan_user
WITH age_groups AS (SELECT c.id, CASE WHEN EXTRACT(YEAR FROM AGE(date('now'), c.birth_date)) BETWEEN 20 AND 30 THEN '20-30' WHEN EXTRACT(YEAR FROM AGE(date('now'), c.birth_date)) BETWEEN 31 AND 40 THEN '31-40' WHEN EXTRACT(YEAR FROM AGE(date('now'), c.birth_date)) BETWEEN 41 AND 50 THEN '41-50' ELSE '51+' END AS age_group FROM customer c) SELECT ag.age_group, lt.loan_type_name, COUNT(la.id) AS total_applications, SUM(CASE WHEN la.status = 'APPROVED' THEN 1 ELSE 0 END) / COUNT(la.id) AS success_rate FROM age_groups ag JOIN loan_application la ON ag.id = la.customer_id JOIN loan_type lt ON la.loan_type_id = lt.id GROUP BY ag.age_group, lt.loan_type_name ORDER BY ag.age_group, success_rate DESC	loan_user
SELECT ls.loan_status_name, o.occupation_name FROM loan_status ls JOIN occupation o ON ls.loan_status_code = 'APPROVED' AND o.occupation_code = 'NURSE'	loan_user
SELECT o.occupation_name, COUNT(DISTINCT c.id) as customer_count, AVG(l.loan_amount) as avg_loan_amount FROM occupation o JOIN customer c ON o.id = c.occupation_id JOIN loan_application l ON c.id = l.customer_id GROUP BY o.occupation_name HAVING COUNT(DISTINCT c.id) > 100 ORDER BY customer_count DESC	loan_user
SELECT f.cust_no, f.org_nm, f.currency, f.wealth_bal_f FROM financial_products f JOIN currency c ON f.currency = c.curr_code WHERE f.data_dt = '2024-07-14' AND f.org_nm = '沈阳余淮支行' AND f.currency = 'SGD'	loan_user
SELECT id_number, phone_number FROM customer	loan_user
SELECT cust_nm, open_date FROM debit_card_information WHERE open_date >= '2024-07-05'	loan_user
WITH top_customers AS (SELECT cust_no FROM financial_products WHERE wealth_bal > (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY wealth_bal) FROM financial_products)) SELECT COUNT(DISTINCT ub.customer_id) FROM top_customers tc JOIN user_behavior ub ON tc.cust_noeger = ub.customer_id WHERE ub.behavior_type = 'LOGIN' AND ub.behavior_date >= date('now') - INTERVAL '30 days'	loan_user
SELECT lc.customer_id, lc.credit_score, ub.description FROM loan_credit lc JOIN user_behavior ub ON lc.customer_id = ub.customer_id WHERE lc.credit_date = '2023-12-10'	loan_user
SELECT bank_id, bank_name FROM bank_orgnization	loan_user
SELECT lr.repayment_amount, la.loan_amount FROM loan_repayment lr JOIN loan_application la ON lr.loan_application_id = la.id WHERE lr.repayment_date = '2024-01-20'	loan_user
SELECT c.curr_code, c.curr_full_name, COUNT(t.id) AS transfer_count FROM currency c LEFT JOIN transfer t ON c.curr_code = t.source_customer_id AND t.transfer_date < c.data_dt WHERE c.data_dt = '2023-06-30' AND c.curr_class = '外币' GROUP BY c.curr_code, c.curr_full_name	loan_user
SELECT repayment_amount FROM loan_repayment WHERE loan_application_id = 742969 AND repayment_date = '2021-11-10'	loan_user
SELECT d.deposit_type_name, AVG(l.loan_amount) AS avg_loan_amount, STDDEV(l.loan_amount) AS stddev_loan_amount FROM deposit_type d JOIN loan_detail_info l ON d.data_dt = l.dw_date GROUP BY d.deposit_type_name	loan_user
SELECT c.customer_name, o.occupation_name, lr.repayment_date FROM customer c JOIN occupation o ON c.occupation_id = o.id JOIN loan_repayment lr ON c.id = lr.loan_application_id	loan_user
SELECT lt.loan_type_name, AVG(la.loan_amount) as avg_loan_amount, AVG(dai.acct_bal) as avg_deposit_balance FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id JOIN deposit_account_info dai ON la.customer_id = dai.cust_noeger GROUP BY lt.loan_type_name	loan_user
SELECT COUNT(DISTINCT lb.customer_id) FROM loan_application lb JOIN user_behavior ub ON lb.customer_id = ub.customer_id WHERE lb.apply_date = '2019-01-10' AND lb.status = 'REJECTED' AND ub.behavior_date = '2017-10-24' AND ub.behavior_type = 'LOGIN'	loan_user
SELECT c.customer_name, la.loan_amount FROM loan_application la JOIN customer c ON la.customer_id = c.id JOIN loan_credit lc ON c.id = lc.customer_id WHERE la.apply_date >= '2019-01-01' AND la.apply_date < '2020-01-01' AND lc.credit_score > 0.8 ORDER BY la.loan_amount DESC	loan_user
SELECT * FROM loan_detail_info WHERE loan_balance > 500000 ORDER BY loan_balance DESC	loan_user
SELECT customer_id, credit_score FROM loan_credit WHERE credit_date = '2003-06-22' AND credit_score > 0.75	loan_user
SELECT customer_name, birth_date FROM customer WHERE birth_date > '1990-01-01' ORDER BY birth_date	loan_user
WITH credit_change AS (SELECT customer_id, MAX(credit_score) - MIN(credit_score) as score_increase FROM loan_credit WHERE credit_date >= date('now') - INTERVAL '1 year' GROUP BY customer_id) SELECT cc.customer_id, cc.score_increase, lc.credit_score as current_score FROM credit_change cc JOIN loan_credit lc ON cc.customer_id = lc.customer_id WHERE lc.credit_date = (SELECT MAX(credit_date) FROM loan_credit WHERE customer_id = cc.customer_id) ORDER BY cc.score_increase DESC LIMIT 5	loan_user
SELECT ub.behavior_type, COUNT(DISTINCT ub.customer_id) AS user_count FROM user_behavior ub GROUP BY ub.behavior_type	loan_user
WITH deposit_customers AS (SELECT DISTINCT dt.deposit_name, dai.cust_no FROM deposit_type dt JOIN deposit_account_info dai ON dt.deposit_id = dai.arl_pdp_code WHERE dai.data_dt <= date('now') - INTERVAL '1 year'), recent_customers AS (SELECT DISTINCT dt.deposit_name, dai.cust_no FROM deposit_type dt JOIN deposit_account_info dai ON dt.deposit_id = dai.arl_pdp_code WHERE dai.data_dt > date('now') - INTERVAL '1 year') SELECT dc.deposit_name, COUNT(DISTINCT dc.cust_no) AS original_customers, COUNT(DISTINCT rc.cust_no) AS retained_customers, COUNT(DISTINCT rc.cust_no) / COUNT(DISTINCT dc.cust_no) AS retention_rate FROM deposit_customers dc LEFT JOIN recent_customers rc ON dc.deposit_name = rc.deposit_name AND dc.cust_no = rc.cust_no GROUP BY dc.deposit_name ORDER BY retention_rate DESC	loan_user
SELECT SUM(t.transfer_amount) FROM deposit_account_info d JOIN transfer t ON d.cust_noeger = t.source_customer_id WHERE d.data_dt = '2024-07-19' AND d.bank_nm = '沈阳分行'	loan_user
SELECT s.store_name, s.manager_name, MAX(ss.profit) AS max_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-06' GROUP BY s.store_name, s.manager_name ORDER BY max_profit DESC LIMIT 1	retail
SELECT profit, sales_quantity FROM salesstatistics	retail
SELECT * FROM salesorders WHERE order_date = '2023-05-08'	retail
SELECT e.name, e.position, s.store_name, so.total_amount FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '数码广场店' AND so.order_date = '2023-05-05' AND so.total_amount > 7000	retail
SELECT * FROM salesstatistics ORDER BY profit DESC LIMIT 1	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales, p.product_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND p.supplier_name = '苹果官方旗舰店' GROUP BY s.store_name, e.name, p.product_name HAVING SUM(od.quantity * od.unit_price) > 10000	retail
SELECT p.product_name, p.supplier_name FROM products p JOIN orderdetails od ON p.product_id = od.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores st ON so.store_id = st.store_id WHERE st.store_name = '电子城旗舰店'	retail
SELECT s.store_name, e.name AS employee_name, e.position FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'iPad Air' AND ss.date = '2023-05-09'	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-05' AND ss.sales_amount > 10000	retail
SELECT e.name, so.total_amount FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id WHERE so.order_date = '2023-05-07' AND so.total_amount > 10000	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name, e.name HAVING SUM(ss.profit) > 5000	retail
SELECT DISTINCT e.employee_id, e.name FROM employees e JOIN salesorders s ON e.employee_id = s.employee_id JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Nintendo Switch' AND s.order_date BETWEEN '2023-05-01' AND '2023-05-31' AND s.total_amount > 5000	retail
SELECT p.product_name, MAX(ss.sales_amount) AS max_sales_amount FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id GROUP BY p.product_name ORDER BY max_sales_amount DESC LIMIT 1	retail
SELECT od.order_detail_id, p.product_name, so.total_amount FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id	retail
SELECT e.name, st.store_name FROM employees e JOIN stores st ON e.store_id = st.store_id	retail
SELECT s.store_name, s.manager_name, SUM(ss.sales_amount) AS total_sales_amount FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-08' GROUP BY s.store_name, s.manager_name	retail
SELECT so.order_id, e.name FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id WHERE so.total_amount > 7000	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales, p.product_name FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id JOIN products p ON od.product_id = p.product_id WHERE p.supplier_name = '苹果官方旗舰店' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, e.name, p.product_name HAVING SUM(od.quantity * od.unit_price) > 10000	retail
SELECT s.store_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-06' AND p.product_name = 'iPhone 13' AND ss.profit > 4000	retail
SELECT * FROM salesorders WHERE order_id = 'b8b62bfe-a35d-4ff5-9bc9-654b5f67fed2'	retail
SELECT e.name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id GROUP BY e.name	retail
SELECT p.product_name, p.sale_price, p.purchase_price FROM products p	retail
SELECT e.name AS employee_name, s.manager_name AS store_manager_name FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND so.total_amount > 10000 GROUP BY e.name, s.manager_name	retail
SELECT employee_id, store_id FROM employees	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-07' AND p.product_name = 'Apple Watch Series 7'	retail
SELECT DISTINCT s.store_name, e.name AS manager_name FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-05' AND so.total_amount > 10000 AND p.sale_price > 5000 AND e.position = '销售经理'	retail
SELECT od.order_detail_id, p.product_name, od.quantity FROM orderdetails od JOIN products p ON od.product_id = p.product_id	retail
SELECT * FROM salesorders WHERE store_id = '0887d06a-27a8-46b4-98d6-514702e698da'	retail
SELECT e.employee_id, e.name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN orderdetails od ON ss.product_id = od.product_id WHERE ss.date >= '2023-05-01' AND ss.date < '2023-06-01' AND ss.sales_quantity > od.quantity GROUP BY e.employee_id, e.name	retail
SELECT s.store_name, e.name AS employee_name, SUM(so.total_amount) AS total_sales_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPad Air' AND so.order_date = '2023-05-01' GROUP BY s.store_name, e.name	retail
SELECT pd.product_name, SUM(od.quantity) AS total_quantity, so.order_date FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN products pd ON od.product_id = pd.product_id GROUP BY pd.product_name, so.order_date	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, s.manager_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT e.name, e.position, s.store_name, p.product_name, ss.sales_quantity FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE s.store_name = '数码广场店' AND p.product_name = 'iPhone 13' AND ss.date = '2023-05-03' AND ss.sales_quantity > 1	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-07' GROUP BY s.store_name, s.manager_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT s.store_name, e.name AS employee_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4' AND so.order_date = '2023-05-01' AND so.total_amount > 8000	retail
SELECT purchase_price, sale_price FROM products WHERE product_id = '9e847a4c-3927-45a2-9a3d-a400cdec1d6a'	retail
SELECT product_id, unit_price, quantity FROM orderdetails	retail
SELECT e.name AS employee_name, s.store_name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON e.store_id = s.store_id WHERE p.product_name = 'Apple Watch Series 7' AND ss.date = '2023-05-06'	retail
SELECT st.store_name, SUM(od.quantity) AS total_quantity, SUM(so.total_amount) AS total_sales FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN stores st ON so.store_id = st.store_id GROUP BY st.store_name ORDER BY total_quantity DESC LIMIT 1	retail
SELECT DISTINCT e.name AS employee_name, p.category_name AS product_category FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND so.total_amount > 10000	retail
SELECT e.name AS employee_name, s.store_name, SUM(so.total_amount) AS total_amount FROM employees e JOIN stores s ON e.store_id = s.store_id JOIN salesorders so ON s.store_id = so.store_id GROUP BY e.name, s.store_name	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, s.manager_name	retail
SELECT pd.product_name, SUM(od.quantity) AS total_quantity FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN products pd ON od.product_id = pd.product_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY pd.product_name HAVING SUM(od.quantity) > 5	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, p.sale_price FROM products p JOIN orderdetails od ON p.product_id = od.product_id GROUP BY p.product_name, p.sale_price	retail
SELECT s.store_name, e.name AS sales_manager_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-01' AND p.product_name = '佳能EOS R6' AND e.position = '销售经理'	retail
SELECT st.store_name, st.phone, st.address FROM stores st	retail
SELECT so.order_id, p.product_name FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.total_amount < 5000	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.sales_quantity) AS total_sales_quantity, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' AND e.position = '销售顾问' GROUP BY s.store_name, e.name ORDER BY total_sales_quantity DESC LIMIT 1	retail
SELECT s.store_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '小米电视4A' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name	retail
SELECT e.name AS employee_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-06' AND s.store_name = '智慧街店' AND p.product_name = '小米电视4A' GROUP BY e.name	retail
SELECT store_name, phone FROM stores	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-08' AND ss.profit > 1000	retail
SELECT p.category_name, SUM(ss.sales_quantity) AS total_sales FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id GROUP BY p.category_name	retail
SELECT s.store_name, e.name FROM stores s JOIN employees e ON s.store_id = e.store_id	retail
SELECT so.order_id FROM salesorders so WHERE so.total_amount > (SELECT AVG(total_amount) FROM salesorders)	retail
SELECT * FROM salesorders WHERE order_date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT e.name, so.order_date, so.total_amount FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id	retail
SELECT e.name, SUM(so.total_amount) AS total_sales FROM employees e LEFT JOIN salesorders so ON e.employee_id = so.employee_id GROUP BY e.name	retail
SELECT e.name, SUM(ss.sales_quantity) AS total_sales, SUM(ss.profi) AS, total_profit FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id GROUP BY e.name	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '佳能EOS R6' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND so.total_amount > 10000	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-05' GROUP BY s.store_name, s.manager_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT s.store_name, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.sales_amount) AS total_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT s.store_name, s.manager_name, SUM(ss.sales_quantity) AS total_sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name, s.manager_name ORDER BY total_sales_quantity DESC LIMIT 1	retail
SELECT so.order_id, so.total_amount FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id WHERE e.name = '王丽'	retail
SELECT od.order_detail_id, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '戴尔灵越15'	retail
SELECT s.store_name, ss.sales_amount, ss.date FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id	retail
SELECT p.product_name FROM products p JOIN orderdetails od ON p.product_id = od.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores s ON so.store_id = s.store_id WHERE p.purchase_price > 4000 AND s.store_name = '未来城店'	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-09' GROUP BY s.store_name, s.manager_name HAVING SUM(so.total_amount) > 10000	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-02' GROUP BY s.store_name, s.manager_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT s.store_name, s.manager_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-09' AND ss.sales_amount > 1000	retail
SELECT e.name AS employee_name, p.category_name AS product_category FROM salesorders s JOIN employees e ON s.employee_id = e.employee_id JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE s.order_date >= '2023-05-01' AND s.order_date < '2023-06-01' AND s.total_amount > 10000 GROUP BY e.name, p.category_name	retail
SELECT s.store_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT s.store_name, e.name AS employee_name, od.unit_price * od.quantity AS sales_amount, p.product_name FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND p.supplier_name = '索尼官方旗舰店' AND od.unit_price * od.quantity > 10000	retail
SELECT so.order_id, so.total_amount, od.product_id, od.quantity FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id WHERE so.total_amount > 5000	retail
SELECT p.product_name, ss.sales_amount FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id WHERE ss.date = '2023-05-02'	retail
SELECT ss.sales_quantity, s.store_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-01' OR ss.date = '2023-05-06'	retail
SELECT product_name, sale_price, purchase_price FROM products	retail
SELECT s.store_name, SUM(ss.sales_quantity) AS total_sales_quantity FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.category_name = '智能手表' AND p.supplier_name = '索尼官方旗舰店' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name HAVING SUM(ss.sales_quantity) > 10	retail
SELECT s.store_name, s.manager_name, AVG(so.total_amount) AS avg_order_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, s.manager_name HAVING AVG(so.total_amount) > 10000	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.sales_quantity, ss.sales_amount, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-02' AND p.product_name = 'iPad Air'	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND ss.date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, e.name	retail
SELECT s.store_name, SUM(ss.sales_quantity) AS total_sales_quantity, SUM(ss.sales_amount) AS total_sales_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name ORDER BY total_sales_quantity DESC LIMIT 1	retail
SELECT s.store_name, e.name AS employee_name, SUM(so.total_amount) AS total_sales_amount FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND so.order_date = '2023-05-09' GROUP BY s.store_name, e.name	retail
SELECT quantity, unit_price FROM orderdetails	retail
SELECT DISTINCT s.store_name, e.name AS employee_name, e.position FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'Nintendo Switch' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31'	retail
SELECT * FROM salesstatistics WHERE sales_quantity > 1	retail
SELECT s.store_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'Nintendo Switch' AND ss.date >= '2023-05-01' AND ss.date < '2023-06-01' GROUP BY s.store_name	retail
SELECT so.order_date, SUM(so.total_amount) AS total_sales FROM salesorders so GROUP BY so.order_date	retail
SELECT st.store_name, SUM(so.total_amount) AS total_sales, COUNT(so.order_id) AS total_orders FROM salesorders so JOIN stores st ON so.store_id = st.store_id GROUP BY st.store_name	retail
SELECT * FROM orderdetails WHERE quantity = 2	retail
SELECT s.store_name, e.name AS employee_name, e.position FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '戴尔灵越15' AND ss.date = '2023-05-01'	retail
SELECT e.name, e.position, st.store_name FROM employees e JOIN stores st ON e.store_id = st.store_id	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '佳能EOS R6' AND ss.date = '2023-05-03' GROUP BY s.store_name, e.name	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND ss.date = '2023-05-05' GROUP BY s.store_name, e.name	retail
SELECT s.store_name, e.name AS employee_name, ss.sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-06' AND p.product_name = '华为Mate 40 Pro' AND ss.sales_quantity > 1	retail
SELECT od.order_detail_id, p.product_name, od.quantity FROM orderdetails od JOIN products p ON od.product_id = p.product_id	retail
SELECT e.name, e.position, s.phone FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT s.store_name, e.name AS employee_name, od.quantity FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-05' AND p.product_name = '戴尔灵越15' AND od.quantity > 1	retail
SELECT so.order_id, so.total_amount, od.product_id, od.quantity FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id WHERE so.total_amount > 5000	retail
SELECT e.name, so.order_id, so.total_amount FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id	retail
SELECT ss.statistic_id, ss.date FROM salesstatistics ss WHERE ss.profit > 3000	retail
SELECT s.store_name, e.name AS employee_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND so.order_date = '2023-05-01' AND so.total_amount > 7000	retail
SELECT p.product_name, p.remaining_quantity, p.category_name FROM products p	retail
SELECT e.employee_id, e.name, e.position FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-07' AND p.category_name = '相机' AND so.total_amount > 15000	retail
SELECT s.store_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE p.product_name = 'iPhone 13' AND ss.date = '2023-05-03' GROUP BY s.store_name	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-08' GROUP BY s.store_id ORDER BY total_sales DESC LIMIT 1	retail
SELECT e.name AS employee_name, ss.sales_quantity, ss.sales_amount FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-03' AND s.store_name = '数字大道店' AND p.product_name = 'Nintendo Switch'	retail
SELECT s.store_name, e.name AS employee_name FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE ss.date = '2023-05-05' AND p.product_name = '戴森V11' AND ss.profit > 500	retail
SELECT s.store_name, s.manager_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-09' AND ss.sales_amount > 2000	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id WHERE so.order_date = '2023-05-01' AND so.total_amount > 10000	retail
SELECT s.store_name, s.manager_name, e.name AS employee_name FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-09' AND p.product_name = 'iPhone 13'	retail
SELECT sales_amount, remaining_quantity FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id WHERE p.product_id = '81bfd69e-1240-48bf-a302-313c0255a1c9'	retail
SELECT s.store_name, s.address, s.phone FROM stores s	retail
SELECT s.store_name, e.name, so.total_amount FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-02' AND so.total_amount > 2000	retail
SELECT store_id, SUM(sales_quantity) AS total_sales_quantity, SUM(profit) AS total_profit FROM salesstatistics GROUP BY store_id	retail
SELECT s.store_name, st.profit, s.manager_name FROM salesstatistics st JOIN stores s ON st.store_id = s.store_id WHERE st.date = '2023-05-07' AND st.profit > 1000	retail
SELECT s.store_name, s.manager_name, ss.sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-08' ORDER BY ss.sales_quantity DESC LIMIT 1	retail
SELECT ss.store_id, SUM(ss.profit) AS total_profit FROM salesstatistics ss WHERE ss.date = '2023-05-09' GROUP BY ss.store_id ORDER BY total_profit DESC LIMIT 1	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE p.product_name = '佳能EOS R6' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name HAVING SUM(od.quantity * od.unit_price) > 5000	retail
SELECT s.store_name, e.name AS employee_name, e.position FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'iPad Air' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31'	retail
SELECT category_name, sale_price FROM products	retail
SELECT s.store_name, COUNT(e.employee_id) AS sales_manager_count FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN employees e ON s.store_id = e.store_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' AND ss.sales_amount > 10000 AND e.position = '销售经理' GROUP BY s.store_name	retail
SELECT p.product_name, p.remaining_quantity, SUM(od.quantity) AS sold_quantity FROM products p LEFT JOIN orderdetails od ON p.product_id = od.product_id GROUP BY p.product_name, p.remaining_quantity	retail
SELECT so.order_id, so.order_date, so.total_amount FROM salesorders so	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-06' AND p.product_name = '华为Mate 40 Pro' AND ss.sales_quantity > 1	retail
SELECT s.store_name, e.name, e.position FROM stores s JOIN employees e ON s.store_id = e.store_id	retail
SELECT e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales_amount FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-01' AND s.store_name = '创客空间店' AND p.product_name = '华为Mate 40 Pro' GROUP BY e.name	retail
SELECT s.store_name, e.name AS employee_name, e.position FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '戴森V11' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31'	retail
SELECT od.order_detail_id, p.product_name, od.quantity FROM orderdetails od JOIN products p ON od.product_id = p.product_id	retail
SELECT DISTINCT e.employee_id, e.name FROM employees e JOIN salesstatistics s ON e.employee_id = s.employee_id JOIN products p ON s.product_id = p.product_id WHERE s.date = '2023-05-06' AND s.sales_quantity > 1 AND p.supplier_name = '戴尔官方旗舰店'	retail
SELECT product_name, sale_price FROM products	retail
SELECT manager_name, phone FROM stores	retail
SELECT so.total_amount, st.store_name FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores st ON so.store_id = st.store_id WHERE e.name = '范莹' AND so.order_date = '2023-05-07'	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name HAVING SUM(so.total_amount) > 10000	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name	retail
SELECT store_name, manager_name FROM stores	retail
SELECT p.product_name, p.sale_price, p.remaining_quantity FROM products p	retail
SELECT s.store_name, e.name AS employee_name, SUM(so.total_amount) AS total_sales_amount FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND so.order_date = '2023-05-01' GROUP BY s.store_name, e.name	retail
SELECT s.store_name, e.name AS employee_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4' AND so.order_date = '2023-05-08' AND so.total_amount > 15000	retail
SELECT s.store_name, s.manager_name, MAX(ss.sales_quantity) AS max_sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-09' GROUP BY s.store_name, s.manager_name ORDER BY max_sales_quantity DESC LIMIT 1	retail
SELECT SUM(profit) AS total_profit FROM salesstatistics	retail
SELECT so.order_id, s.store_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.employee_id = 'a4fddd73-a996-4afc-b014-4daf6a9c778a'	retail
SELECT s.store_name, SUM(ss.sales_quantity) AS total_sales_quantity FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON e.store_id = s.store_id WHERE e.name = '黄萍' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name ORDER BY total_sales_quantity DESC LIMIT 1	retail
SELECT s.store_name, e.name AS employee_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'Nintendo Switch' AND ss.date = '2023-05-08'	retail
SELECT s.store_name, e.name AS employee_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4' AND so.order_date = '2023-05-05'	retail
SELECT e.name, e.position, p.product_name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-05' AND s.store_name = '智能生活馆' AND p.supplier_name = '小米官方旗舰店'	retail
SELECT s.store_name, s.manager_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-07' ORDER BY ss.profit DESC LIMIT 1	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE p.product_name = '索尼WH-1000XM4' AND ss.date = '2023-05-09'	retail
SELECT p.product_name, od.quantity, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id WHERE p.product_name = '佳能EOS R6'	retail
SELECT s.store_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-03'	retail
SELECT * FROM orderdetails WHERE quantity > 1	retail
SELECT s.store_name, e.name AS employee_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND so.order_date = '2023-05-05'	retail
SELECT so.order_id, so.total_amount, s.store_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-05'	retail
SELECT p.product_name, od.order_id FROM orderdetails od JOIN products p ON od.product_id = p.product_id WHERE od.quantity > 1	retail
SELECT so.order_id, so.order_date, so.total_amount FROM salesorders so WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT employee_id, SUM(sales_quantity) FROM salesstatistics GROUP BY employee_id	retail
SELECT category_name, remaining_quantity FROM products	retail
SELECT e.name AS employee_name, SUM(ss.sales_quantity) AS total_sales, s.store_name FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id GROUP BY e.name, s.store_name	retail
SELECT od.order_id, od.product_id FROM orderdetails od	retail
SELECT * FROM salesstatistics WHERE date = '2023-05-05'	retail
SELECT e.name AS employee_name, ss.sales_quantity, ss.sales_amount FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON e.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE s.store_name = '科技园店' AND p.product_name = 'iPhone 13' AND ss.date = '2023-05-01'	retail
SELECT e.name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-09' AND p.product_name = 'Apple Watch Series 7' AND p.supplier_name = '任天堂官方旗舰店'	retail
SELECT so.total_amount, s.store_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-06'	retail
SELECT so.order_id, od.quantity, od.unit_price FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id WHERE so.order_date = '2023-05-06'	retail
SELECT e.name AS employee_name, s.store_name, p.product_name, SUM(o.total_amount) AS total_sales_amount FROM salesorders o JOIN employees e ON o.employee_id = e.employee_id JOIN stores s ON o.store_id = s.store_id JOIN orderdetails d ON o.order_id = d.order_id JOIN products p ON d.product_id = p.product_id WHERE o.order_date = '2023-05-07' AND s.store_name = '智慧街店' AND p.product_name = '佳能EOS R6' GROUP BY e.name, s.store_name, p.product_name	retail
SELECT st.store_name, SUM(od.quantity) AS total_quantity, SUM(od.quantity * od.unit_price) AS total_sales FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN stores st ON so.store_id = st.store_id GROUP BY st.store_name	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE p.product_name = '佳能EOS R6' AND so.order_date = '2023-05-05' GROUP BY s.store_name, e.name	retail
SELECT * FROM products WHERE sale_price > 15000	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-08' AND p.product_name = '索尼WH-1000XM4' AND ss.sales_quantity > 1	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.sales_amount FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-01' AND ss.sales_amount > 1000 AND p.supplier_name = '戴森官方旗舰店'	retail
SELECT od.order_id, od.quantity FROM orderdetails od WHERE od.product_id = 'fba9543e-90b3-4a3d-b29e-bcf4518c4e3d'	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id GROUP BY s.store_name	retail
SELECT so.order_id, SUM(od.quantity) AS total_quantity FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id WHERE so.order_date = '2023-05-06' GROUP BY so.order_id	retail
SELECT so.order_id, so.order_date, e.name FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id	retail
SELECT product_name, supplier_name FROM products	retail
SELECT p.sale_price, p.supplier_name FROM products p	retail
SELECT od.order_detail_id, p.product_name, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id	retail
SELECT s.store_name, s.phone FROM stores s JOIN salesorders so ON s.store_id = so.store_id WHERE so.total_amount > 3000 AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT store_name, manager_name FROM stores	retail
SELECT e.name, st.phone FROM employees e JOIN stores st ON e.store_id = st.store_id	retail
SELECT e.name AS employee_name, ss.sales_quantity, ss.profit FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-09' AND s.store_name = '创新路专卖店' AND p.product_name = 'iPad Air'	retail
SELECT e.name, e.position, s.store_name, so.total_amount FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-07' AND s.store_name = '未来城店' AND so.total_amount > 15000	retail
SELECT pd.product_name, pd.sale_price - pd.purchase_price AS price_difference FROM products pd	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_id HAVING SUM(so.total_amount) > 10000	retail
SELECT st.store_name, SUM(ss.profit) AS total_profit, SUM(ss.sales_quantity) AS total_sales_quantity FROM salesstatistics ss JOIN stores st ON ss.store_id = st.store_id GROUP BY st.store_name	retail
SELECT * FROM salesorders WHERE store_id = '64921abb-1d54-4e03-a15e-ea42f058f31c'	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, so.total_amount FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-06' AND p.product_name = '小米电视4A' AND so.total_amount > 10000	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'Nintendo Switch' AND ss.date >= '2023-05-01' AND ss.date < '2023-06-01' AND ss.profit > 1000	retail
SELECT s.store_name, e.name AS employee_name, od.quantity, od.unit_price * od.quantity AS total_amount FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4' AND so.order_date = '2023-05-09'	retail
SELECT so.order_id, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '科技中心店'	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-03' GROUP BY s.store_name, s.manager_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT s.store_name, s.manager_name, ss.sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-03' ORDER BY ss.sales_quantity DESC LIMIT 1	retail
SELECT s.store_name, e.name AS employee_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPad Air' AND so.order_date = '2023-05-01'	retail
SELECT store_id, SUM(total_amount) AS total_sales FROM salesorders GROUP BY store_id	retail
SELECT e.position, COUNT(so.order_id) AS order_count FROM employees e LEFT JOIN salesorders so ON e.employee_id = so.employee_id GROUP BY e.position	retail
SELECT * FROM salesstatistics WHERE store_id = 'eecdb2bd-fa18-4c73-84a2-35e3dc390ad5'	retail
SELECT s.store_name, s.manager_name, SUM(o.total_amount) AS total_sales FROM stores s JOIN salesorders o ON s.store_id = o.store_id WHERE o.order_date >= '2023-05-01' AND o.order_date <= '2023-05-31' GROUP BY s.store_id HAVING SUM(o.total_amount) > 10000	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-02' AND so.total_amount > 10000 AND p.supplier_name = '华为官方旗舰店'	retail
SELECT pd.product_name, SUM(od.quantity) AS total_quantity, so.order_id FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN products pd ON od.product_id = pd.product_id WHERE so.order_date = '2023-05-02' GROUP BY pd.product_name, so.order_id ORDER BY total_quantity DESC LIMIT 1	retail
SELECT so.order_id, so.order_date, so.total_amount FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id WHERE e.employee_id = '8282299e-10e9-48e4-b28e-a57fbd96cd4d'	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-04' GROUP BY s.store_name, s.manager_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT s.store_name, e.name AS employee_name, e.position FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND ss.date = '2023-05-01'	retail
SELECT e.name AS employee_name, s.manager_name AS store_manager_name FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id WHERE ss.date = '2023-05-06' AND ss.sales_amount > 10000	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_amount FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '戴尔灵越15' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, e.name HAVING SUM(od.quantity * od.unit_price) > 5000	retail
SELECT product_id, remaining_quantity, sale_price FROM products	retail
SELECT s.store_name, COUNT(e.employee_id) AS employee_count FROM stores s LEFT JOIN employees e ON s.store_id = e.store_id GROUP BY s.store_name	retail
SELECT e.name AS employee_name, e.position, od.quantity FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-05' AND s.store_name = '科技中心店' AND p.product_name = '戴森V11' AND od.quantity > 1	retail
SELECT so.order_id, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '数码广场店'	retail
SELECT a.assessment_id, a.risk_level, a.impact_score, e.event_type, e.event_description FROM risk_assessments a JOIN risk_events e ON a.event_id = e.event_id WHERE a.risk_level = '高' AND a.impact_score > 8	risk_control
SELECT event_id FROM risk_events WHERE event_type = '合规风险'	risk_control
SELECT re.event_description, a.status FROM alerts a JOIN risk_events re ON a.event_id = re.event_id WHERE a.alert_type = '欺诈嫌疑'	risk_control
SELECT r.report_type, AVG(e.severity) as avg_severity FROM risk_reports r JOIN risk_events e ON r.event_id = e.event_id WHERE r.approval_status = '已批准' GROUP BY r.report_type ORDER BY avg_severity DESC	risk_control
SELECT risk_level, COUNT(*) AS customer_count, AVG(credit_score) AS avg_credit_score FROM customers GROUP BY risk_level ORDER BY customer_count DESC	risk_control
SELECT ri.indicator_id, ri.indicator_name, ml.monitoring_date, ml.actual_value FROM risk_indicators ri JOIN risk_monitoring_logs ml ON ri.indicator_id = ml.indicator_id WHERE ml.monitoring_date >= '2023-10-01' AND ml.monitoring_date < '2023-11-01'	risk_control
SELECT rr.report_id, rr.report_date, rr.author, rr.event_id FROM risk_reports rr WHERE rr.approval_status = '已批准'	risk_control
SELECT c.risk_level, t.transaction_type, CASE WHEN t.amount <= 1000 THEN '低额' WHEN t.amount <= 10000 THEN '中额' ELSE '高额' END as amount_range, COUNT(*) as transaction_count, AVG(t.risk_score) as avg_risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.risk_level, t.transaction_type, CASE WHEN t.amount <= 1000 THEN '低额' WHEN t.amount <= 10000 THEN '中额' ELSE '高额' END ORDER BY c.risk_level, t.transaction_type, amount_range	risk_control
SELECT a.audit_id, a.audit_result, al.alert_content FROM audit_logs a JOIN alerts al ON a.alert_id = al.alert_id WHERE a.event_id = 'RE4692'	risk_control
SELECT r.report_id, r.report_type, e.event_description, a.risk_level FROM risk_reports r JOIN risk_events e ON r.event_id = e.event_id LEFT JOIN risk_assessments a ON e.event_id = a.event_id WHERE r.author = '周婷'	risk_control
SELECT rr.report_id, rr.report_date, rr.author, rr.approval_status FROM risk_reports rr WHERE rr.report_date > '2023-01-01'	risk_control
SELECT e.event_id, e.event_description, a.risk_level, a.impact_score, a.probability_score, a.mitigation_plan FROM risk_events e LEFT JOIN risk_assessments a ON e.event_id = a.event_id WHERE e.event_description LIKE '%系统%' ORDER BY a.risk_level DESC, e.occurrence_time DESC	risk_control
WITH current_values AS (SELECT indicator_id, actual_value as current_value FROM risk_monitoring_logs rml WHERE monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = rml.indicator_id)), past_values AS (SELECT indicator_id, actual_value as past_value FROM risk_monitoring_logs rml WHERE monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = rml.indicator_id AND monitoring_date <= date('now') - INTERVAL '30 days')) SELECT ri.indicator_id, ri.indicator_name, cv.current_value, pv.past_value, (cv.current_value - pv.past_value) / pv.past_value * 100 as change_percentage FROM risk_indicators ri LEFT JOIN current_values cv ON ri.indicator_id = cv.indicator_id LEFT JOIN past_values pv ON ri.indicator_id = pv.indicator_id	risk_control
SELECT re.event_id, re.event_description, ra.risk_level, ra.mitigation_plan FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE ra.risk_level = '高' AND ra.assessor = '曾强'	risk_control
SELECT DISTINCT c.customer_name FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_type = '投资' AND t.risk_score > 60	risk_control
SELECT re.event_id, re.created_at, re.status FROM risk_events re	risk_control
SELECT c.customer_name, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.credit_score < 600	risk_control
SELECT t.amount, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.transaction_date >= '2023-12-01' AND t.transaction_date < '2024-01-01' AND t.status = '成功'	risk_control
SELECT alert_type, alert_content FROM alerts	risk_control
SELECT report_id, report_type, approved_by FROM risk_reports	risk_control
SELECT transaction_type, COUNT(*) as total_count, SUM(CASE WHEN status = '成功' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) as success_rate, AVG(risk_score) as avg_risk_score FROM transactions GROUP BY transaction_type ORDER BY avg_risk_score DESC	risk_control
SELECT a.alert_id, a.alert_content, rc.rule_description FROM alerts a JOIN rule_configurations rc ON a.rule_id = rc.rule_id	risk_control
SELECT c.customer_id, c.customer_name, t.status FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id ORDER BY t.transaction_date DESC LIMIT 1	risk_control
SELECT i.indicator_id, i.indicator_name, AVG(l.actual_value) as avg_value, STDDEV(l.actual_value) as std_dev, CASE WHEN AVG(l.actual_value) != 0 THEN STDDEV(l.actual_value) / AVG(l.actual_value) ELSE NULL END as coefficient_of_variation FROM risk_indicators i JOIN risk_monitoring_logs l ON i.indicator_id = l.indicator_id GROUP BY i.indicator_id, i.indicator_name ORDER BY coefficient_of_variation DESC NULLS LAST	risk_control
SELECT DISTINCT c.customer_id, c.customer_name FROM customers c JOIN transactions t1 ON c.customer_id = t1.customer_id JOIN transactions t2 ON c.customer_id = t2.customer_id JOIN audit_logs a ON t2.transaction_id = a.transaction_id WHERE t1.risk_score > 80 AND t2.amount > 500000 AND a.audit_result = '拒绝' AND t1.transaction_date >= date('now') - INTERVAL '1 year' AND t2.transaction_date >= date('now') - INTERVAL '1 year'	risk_control
SELECT AVG(impact_score) AS average_impact_score FROM risk_assessments WHERE mitigation_plan IS NULL	risk_control
SELECT alert_id, alert_content, status FROM alerts	risk_control
WITH customer_risks AS (SELECT c.customer_id, c.customer_name, COUNT(CASE WHEN t.risk_score > 80 AND t.transaction_date >= date('now') - INTERVAL '90 days' THEN 1 END) as high_risk_transactions, COUNT(CASE WHEN a.status = '未处理' THEN 1 END) as unresolved_alerts, c.credit_score FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id LEFT JOIN alerts a ON t.event_id = a.event_id GROUP BY c.customer_id, c.customer_name) SELECT customer_name, (high_risk_transactions * 2 + unresolved_alerts * 3 + 1000.0 / NULLIF(credit_score, 0)) as risk_index FROM customer_risks ORDER BY risk_index DESC LIMIT 10	risk_control
SELECT event_type, COUNT(*) as occurrence_count, AVG(severity) as avg_severity FROM risk_events WHERE EXTRACT(YEAR FROM occurrence_time) = 2023 GROUP BY event_type ORDER BY occurrence_count DESC, avg_severity DESC	risk_control
SELECT rr.*, re.event_type, re.event_description FROM risk_reports rr LEFT JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.report_content LIKE '%合规风险%'	risk_control
SELECT ri.indicator_id, ri.update_frequency, ri.data_source FROM risk_indicators ri	risk_control
SELECT re.event_id, re.event_type, re.status, rr.report_content, rr.report_date FROM risk_events re LEFT JOIN risk_reports rr ON re.event_id = rr.event_id WHERE re.status != '已解决' AND rr.report_date = (SELECT MAX(report_date) FROM risk_reports WHERE event_id = re.event_id)	risk_control
SELECT r.rule_type, AVG(alert_count) as avg_alert_count, MAX(r.updated_at) as last_update_time FROM rule_configurations r LEFT JOIN (SELECT rule_id, COUNT(*) as alert_count FROM alerts GROUP BY rule_id) a ON r.rule_id = a.rule_id GROUP BY r.rule_type ORDER BY avg_alert_count DESC	risk_control
SELECT event_type, COUNT(event_id) AS event_count FROM risk_events GROUP BY event_type ORDER BY event_count DESC	risk_control
SELECT c.customer_id, c.customer_name, c.credit_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date >= '2023-01-01' AND t.transaction_date < '2024-01-01' AND c.credit_score < 700	risk_control
SELECT re.event_id, re.event_type, rr.report_id FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id	risk_control
SELECT COUNT(*) FROM risk_reports WHERE EXTRACT(YEAR FROM report_date) = 2023 AND approval_status = '已拒绝'	risk_control
SELECT ra.assessment_id, ra.mitigation_plan, ra.assessor FROM risk_assessments ra	risk_control
SELECT m.log_id, m.actual_value, m.is_exceeding_threshold FROM risk_monitoring_logs m JOIN risk_indicators i ON m.indicator_id = i.indicator_id	risk_control
SELECT rc.rule_id, rc.rule_name, COUNT(a.alert_id) as alert_count FROM rule_configurations rc LEFT JOIN alerts a ON rc.rule_id = a.rule_id GROUP BY rc.rule_id, rc.rule_name ORDER BY alert_count DESC	risk_control
SELECT re.event_id, re.event_description, t.transaction_id, t.amount FROM risk_events re JOIN transactions t ON re.event_id = t.event_id WHERE re.event_type = '信用风险' AND t.status = '成功'	risk_control
SELECT c.risk_level, COUNT(c.customer_id) AS customer_count FROM customers c GROUP BY c.risk_level	risk_control
SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY total_amount) AS median_transaction_amount FROM ( SELECT c.customer_id, SUM(t.amount) AS total_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.registration_date < '2019-01-01' AND c.risk_level = '高' GROUP BY c.customer_id ) AS customer_transactions	risk_control
SELECT rc.rule_name, re.event_description FROM rule_configurations rc JOIN alerts a ON rc.rule_id = a.rule_id JOIN risk_events re ON a.event_id = re.event_id WHERE a.alert_level = '高'	risk_control
SELECT event_id, created_at, status FROM risk_events	risk_control
WITH monthly_events AS (SELECT DATE_TRUNC('month', created_at) as month, event_type, COUNT(*) as event_count FROM risk_events GROUP BY DATE_TRUNC('month', created_at), event_type) SELECT current_month.month, current_month.event_type, current_month.event_count, previous_month.event_count as previous_month_count, CASE WHEN previous_month.event_count > 0 THEN ROUND((current_month.event_count - previous_month.event_count) / previous_month.event_count * 100, 2) ELSE NULL END as month_over_month_growth FROM monthly_events current_month LEFT JOIN monthly_events previous_month ON current_month.event_type = previous_month.event_type AND current_month.month = previous_month.month + INTERVAL '1 month' ORDER BY current_month.month DESC, current_month.event_type	risk_control
SELECT DATE_TRUNC('month', transaction_date) as month, AVG(amount) as avg_amount, COUNT(*) as transaction_count FROM transactions GROUP BY DATE_TRUNC('month', transaction_date) ORDER BY month	risk_control
SELECT rr.report_id, rr.report_type, rr.approved_by, re.event_description, re.severity FROM risk_reports rr LEFT JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.approval_status = '已批准' ORDER BY re.severity DESC, rr.report_date DESC	risk_control
SELECT c.customer_name, c.risk_level, t.status FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id	risk_control
SELECT c.customer_name, t.transaction_type, t.status FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高'	risk_control
SELECT * FROM risk_reports WHERE author = '孙宇' AND approval_status = '待审批'	risk_control
SELECT a.alert_content, e.event_description FROM alerts a JOIN risk_events e ON a.event_id = e.event_id WHERE a.status = '未处理'	risk_control
SELECT risk_level, COUNT(*) AS customer_count FROM customers WHERE risk_level IN ('中', '高') GROUP BY risk_level	risk_control
SELECT c.customer_id, c.customer_name, COUNT(t.transaction_id) AS transaction_count, AVG(t.risk_score) AS avg_risk_score FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_id	risk_control
SELECT DATE_TRUNC('month', registration_date,) as month, COUNT(*) as new_high_risk_customers FROM customers WHERE risk_level = '高' GROUP BY DATE_TRUNC('month', registration_date) ORDER BY month	risk_control
WITH latest_logs AS (SELECT indicator_id, MAX(monitoring_date) AS latest_date FROM risk_monitoring_logs GROUP BY indicator_id) SELECT i.indicator_name, l.monitoring_date, l.actual_value, a.alert_id, a.alert_level, a.alert_content, au.audit_result, au.audit_comments FROM risk_indicators i JOIN latest_logs ll ON i.indicator_id = ll.indicator_id JOIN risk_monitoring_logs l ON ll.indicator_id = l.indicator_id AND ll.latest_date = l.monitoring_date LEFT JOIN alerts a ON l.log_id = a.rule_id LEFT JOIN audit_logs au ON a.alert_id = au.alert_id WHERE i.threshold_value < l.actual_value ORDER BY l.monitoring_date DESC	risk_control
SELECT risk_level, COUNT(*) as customer_count, AVG(credit_score) as avg_credit_score FROM customers GROUP BY risk_level	risk_control
SELECT alert_type, MAX(EXTRACT(EPOCH FROM (resolved_time - alert_time))) AS max_processing_time FROM (SELECT a.alert_type, a.alert_time, l.audit_time AS resolved_time FROM alerts a JOIN audit_logs l ON a.alert_id = l.alert_id WHERE a.status = '已解决') AS resolved_alerts GROUP BY alert_type ORDER BY max_processing_time DESC	risk_control
SELECT c.customer_name, t.amount, t.transaction_date FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.transaction_date >= '2023-11-01' AND t.transaction_date < '2023-12-01' AND t.amount > 100000	risk_control
SELECT SUM(threshold_value) FROM risk_indicators WHERE indicator_name LIKE '%财务%'	risk_control
SELECT customer_name, credit_score FROM customers	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.transaction_date, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id ORDER BY t.transaction_date DESC	risk_control
SELECT log_id, actual_value FROM risk_monitoring_logs WHERE is_exceeding_threshold = TRUE	risk_control
SELECT t.transaction_id, t.transaction_date, t.amount, t.risk_score, AVG(t.risk_score) OVER () AS avg_risk_score FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.risk_level = '高'	risk_control
SELECT t.transaction_id, t.risk_score FROM transactions t JOIN customers c ON t.customer_id = c.customer_id	risk_control
SELECT report_type, COUNT(*) AS count FROM risk_reports WHERE approval_status = '已拒绝' GROUP BY report_type	risk_control
SELECT c.customer_id, c.customer_name, c.credit_score, c.risk_level FROM customers c WHERE c.risk_level = '高' AND c.credit_score < 600	risk_control
SELECT c.risk_level, AVG(t.amount) as avg_transaction_amount, COUNT(t.transaction_id) / COUNT(DISTINCT c.customer_id) as avg_transaction_count FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date >= datetime('now') - INTERVAL '1 year' GROUP BY c.risk_level	risk_control
SELECT rr.* FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id WHERE re.event_type = '流动性风险'	risk_control
SELECT COUNT(DISTINCT c.customer_id) AS customer_count, SUM(t.amount) AS total_transaction_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.credit_score BETWEEN 600 AND 800	risk_control
SELECT report_content FROM risk_reports WHERE approved_by = '王思远' AND report_date >= '2023-03-01' AND report_date < '2023-04-01'	risk_control
SELECT re.event_id, rr.report_id, rr.approval_status FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id WHERE re.event_type = '合规风险'	risk_control
SELECT * FROM transactions WHERE transaction_date BETWEEN '2023-06-01' AND '2023-06-30'	risk_control
SELECT re.event_id, re.event_type, re.event_description, al.audit_id, al.audit_type, al.audit_result FROM risk_events re JOIN audit_logs al ON re.event_id = al.event_id WHERE re.severity = 3	risk_control
SELECT ri.indicator_name, ri.threshold_value, rml.actual_value FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.actual_value > ri.threshold_value	risk_control
SELECT c.customer_id, c.customer_name, c.credit_score, t.status FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id	risk_control
SELECT re.event_id, re.event_description, a.alert_level, a.alert_content FROM risk_events re JOIN alerts a ON re.event_id = a.event_id WHERE a.alert_level = '高'	risk_control
SELECT re.event_id, re.event_description, a.alert_id, a.alert_time FROM risk_events re JOIN alerts a ON re.event_id = a.event_id ORDER BY a.alert_time	risk_control
SELECT c.risk_level, AVG(t.amount) as avg_transaction_amount, COUNT(t.transaction_id) / COUNT(DISTINCT c.customer_id) as avg_transaction_count FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id AND t.transaction_date >= date('now') - INTERVAL '90 days' GROUP BY c.risk_level	risk_control
SELECT c.customer_id, c.customer_name, c.credit_score FROM customers c WHERE c.risk_level = '高' AND c.credit_score < 700	risk_control
SELECT c.customer_id, c.credit_score, t.transaction_id, t.status FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.status = '失败'	risk_control
SELECT ra.assessment_id, ra.event_id, c.customer_id, c.customer_name, c.credit_score FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id JOIN transactions t ON re.event_id = t.event_id JOIN customers c ON t.customer_id = c.customer_id WHERE ra.risk_level = '高' AND c.credit_score > 700	risk_control
SELECT * FROM customers WHERE customer_type = '企业' ORDER BY credit_score DESC LIMIT 10	risk_control
SELECT DATE_TRUNC('month', created_at) as month, COUNT(*) as new_rules, AVG(SUM(CASE WHEN is_active THEN 1 ELSE 0 END)) OVER (ORDER BY DATE_TRUNC('month', created_at) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as avg_active_rules FROM rule_configurations GROUP BY DATE_TRUNC('month', created_at) ORDER BY month	risk_control
SELECT rr.author, rr.approval_status FROM risk_reports rr WHERE rr.approval_status = '已批准'	risk_control
SELECT c.customer_name, t.amount, t.status FROM customers c JOIN transactions t ON c.customer_id = t.customer_id	risk_control
SELECT re.event_id, ra.assessment_id, ra.risk_level FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id	risk_control
SELECT ri.indicator_id, ri.indicator_name, ri.threshold_value, AVG(rml.actual_value) as avg_actual_value FROM risk_indicators ri LEFT JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id GROUP BY ri.indicator_id, ri.indicator_name, ri.threshold_value	risk_control
SELECT rr.report_id, rr.report_type, rr.report_content, re.event_type, re.event_description FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.approval_status = '已批准'	risk_control
SELECT DISTINCT c.customer_id, c.customer_name, t.transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN alerts a ON t.event_id = a.event_id WHERE t.risk_score > 80 AND a.alert_level = '高' AND DATE(t.transaction_date) = DATE(a.alert_time)	risk_control
SELECT t.transaction_id, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.risk_score > 15	risk_control
SELECT re.event_description, ra.assessment_date FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE ra.risk_level = '高'	risk_control
SELECT c.customer_name, t.status FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.status = '失败'	risk_control
SELECT re.event_id, COUNT(t.transaction_id) AS transaction_count FROM risk_events re LEFT JOIN transactions t ON re.event_id = t.event_id GROUP BY re.event_id	risk_control
SELECT t.transaction_id, t.amount, t.transaction_date, c.customer_name, c.risk_level FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.risk_level = '高' AND t.amount > 500000 AND t.transaction_date BETWEEN '2023-01-01' AND '2023-03-31' ORDER BY t.amount DESC	risk_control
SELECT re.event_id, re.event_description, re.severity, ra.risk_level, ra.mitigation_plan FROM risk_events re LEFT JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE EXTRACT(YEAR FROM re.occurrence_time) = 2023 AND re.severity IN (4, 5) ORDER BY re.severity DESC, re.occurrence_time	risk_control
SELECT ml.log_id, ml.notes FROM risk_monitoring_logs ml WHERE ml.is_exceeding_threshold = FALSE	risk_control
SELECT r.report_id, r.report_type, r.author, e.event_type, e.severity, al.audit_result, al.audit_comments FROM risk_reports r JOIN risk_events e ON r.event_id = e.event_id LEFT JOIN (SELECT event_id, audit_result, audit_comments, ROW_NUMBER() OVER (PARTITION BY event_id ORDER BY audit_time DESC) as rn FROM audit_logs) al ON e.event_id = al.event_id AND al.rn = 1 WHERE r.approval_status = '待审批' ORDER BY e.severity DESC, r.report_date DESC	risk_control
SELECT c.customer_id, c.customer_name, c.credit_score, c.risk_level FROM customers c WHERE c.registration_date >= '2021-01-01' AND c.registration_date < '2022-01-01' AND c.risk_level = '高' AND c.credit_score < 550	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.amount, t.transaction_date, CASE WHEN al.alert_id IS NOT NULL THEN 'Yes' ELSE 'No' END as triggered_alert FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id LEFT JOIN alerts al ON t.transaction_id = al.event_id WHERE t.transaction_date = (SELECT MAX(transaction_date) FROM transactions WHERE customer_id = c.customer_id)	risk_control
SELECT re.event_type, COUNT(re.event_id) AS event_count FROM risk_events re GROUP BY re.event_type	risk_control
SELECT c.customer_name, rc.rule_name, COUNT(*) AS trigger_count FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN alerts a ON t.event_id = a.event_id JOIN rule_configurations rc ON a.rule_id = rc.rule_id WHERE c.risk_level = '高' GROUP BY c.customer_id, c.customer_name, rc.rule_id, rc.rule_name ORDER BY trigger_count DESC, c.customer_name	risk_control
SELECT DATE_TRUNC('month', re.occurrence_time) as month, re.event_type, COUNT(*) as event_count, AVG(re.severity) as avg_severity, SUM(CASE WHEN re.status = '已解决' THEN 1 ELSE 0 END) / COUNT(*) as resolution_rate FROM risk_events re GROUP BY DATE_TRUNC('month', re.occurrence_time), re.event_type ORDER BY month, re.event_type	risk_control
SELECT ml.monitoring_date, ml.actual_value, ri.threshold_value FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id	risk_control
SELECT c.risk_level, t.transaction_type, AVG(t.amount) AS avg_transaction_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.risk_level, t.transaction_type ORDER BY c.risk_level, avg_transaction_amount DESC	risk_control
SELECT COUNT(*) FROM rule_configurations WHERE is_active = true	risk_control
SELECT customer_id, customer_name, risk_level, credit_score FROM customers	risk_control
SELECT COUNT(*), AVG(update_frequencyerval) FROM risk_indicators WHERE threshold_value > 100	risk_control
SELECT customer_name, registration_date FROM customers	risk_control
SELECT ri.indicator_id, ri.indicator_name, ml.log_id, ml.actual_value, ml.is_exceeding_threshold FROM risk_indicators ri JOIN risk_monitoring_logs ml ON ri.indicator_id = ml.indicator_id	risk_control
SELECT ri.indicator_id, ri.indicator_name, ri.data_source, AVG(rml.actual_value) AS avg_value, STDDEV(rml.actual_value) AS stddev_value FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id GROUP BY ri.indicator_id, ri.indicator_name, ri.data_source	risk_control
SELECT al.audit_id, al.audit_result, al.auditor FROM audit_logs al WHERE al.audit_result = '拒绝'	risk_control
SELECT alert_type, alert_content FROM alerts	risk_control
SELECT a.alert_id, a.alert_type, a.alert_content, e.event_description, al.audit_result, al.audit_comments FROM alerts a JOIN risk_events e ON a.event_id = e.event_id LEFT JOIN (SELECT alert_id, audit_result, audit_comments, ROW_NUMBER() OVER (PARTITION BY alert_id ORDER BY audit_time DESC) as rn FROM audit_logs) al ON a.alert_id = al.alert_id AND al.rn = 1 WHERE a.status = '未处理' ORDER BY a.alert_time DESC	risk_control
SELECT AVG(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - alert_time))) AS average_alert_time FROM alerts WHERE status = '未处理'	risk_control
WITH risk_stats AS (SELECT c.customer_id, COUNT(ra.assessment_id) AS assessment_count, AVG(CASE WHEN ra.risk_level = '高' THEN 3 WHEN ra.risk_level = '中' THEN 2 ELSE 1 END) AS avg_risk_score, COUNT(a.alert_id) AS alert_count FROM customers c LEFT JOIN risk_assessments ra ON c.customer_id = ra.event_id LEFT JOIN alerts a ON c.customer_id = a.event_id GROUP BY c.customer_id) SELECT rs.customer_id, c.customer_name, c.risk_level, (rs.assessment_count * rs.avg_risk_score + rs.alert_count * 2) AS risk_index FROM risk_stats rs JOIN customers c ON rs.customer_id = c.customer_id ORDER BY risk_index DESC	risk_control
SELECT event_type, COUNT(*) as event_count FROM risk_events WHERE status = '未处理' GROUP BY event_type	risk_control
SELECT t.* FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '低' AND c.credit_score > 700	risk_control
SELECT a.alert_id, a.alert_type, a.alert_content, a.alert_level, re.event_id, re.event_type, re.severity FROM alerts a LEFT JOIN risk_events re ON a.event_id = re.event_id WHERE a.status = '未处理' AND a.alert_level = '高'	risk_control
SELECT alert_content, status FROM alerts WHERE rule_id IN (SELECT rule_id FROM rule_configurations WHERE rule_type = '合规检查')	risk_control
SELECT c.customer_id, c.risk_level, SUM(t.amount) AS total_transaction_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' GROUP BY c.customer_id, c.risk_level	risk_control
SELECT report_content FROM risk_reports WHERE report_type = '月度风险报告' AND approval_status = '已拒绝'	risk_control
SELECT re.event_type, COUNT(re.event_id) AS event_count FROM risk_events re GROUP BY re.event_type	risk_control
SELECT c.customer_name, t.amount, t.transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_type = '转账' AND t.amount > 200000 AND t.transaction_date >= '2023-05-04 00:00:00' AND t.transaction_date < '2023-05-05 00:00:00'	risk_control
SELECT a.alert_id, a.alert_content, a.alert_level, a.assigned_to, e.event_description FROM alerts a JOIN risk_events e ON a.event_id = e.event_id WHERE a.status = '未处理' AND a.alert_level = '高'	risk_control
SELECT rr.report_id, rr.report_content FROM risk_reports rr WHERE rr.approval_status = '已批准' AND rr.approved_by = '高志远' AND rr.report_date = '2023-04-01'	risk_control
SELECT transaction_type, COUNT(CASE WHEN status = '成功' THEN 1 END) AS success_count, COUNT(CASE WHEN status = '失败' THEN 1 END) AS failure_count FROM transactions GROUP BY transaction_type	risk_control
SELECT re.event_id, ra.risk_level FROM risk_events re LEFT JOIN risk_assessments ra ON re.event_id = ra.event_id ORDER BY ra.assessment_date DESC	risk_control
SELECT c.customer_name, COUNT(DISTINCT ra.assessment_id) as high_risk_assessment_count, COUNT(DISTINCT t.transaction_id) as large_transaction_count FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN risk_assessments ra ON t.event_id = ra.event_id WHERE ra.risk_level = '高' AND t.amount > 500000 AND t.transaction_date >= date('now') - INTERVAL '1 year' GROUP BY c.customer_id, c.customer_name HAVING COUNT(DISTINCT ra.assessment_id) > 0 AND COUNT(DISTINCT t.transaction_id) > 0 ORDER BY high_risk_assessment_count DESC, large_transaction_count DESC	risk_control
SELECT * FROM transactions WHERE customer_id = 'CU2534'	risk_control
SELECT event_id, MAX(severity) AS max_severity FROM risk_events GROUP BY event_id	risk_control
SELECT c.risk_level, COUNT(DISTINCT c.customer_id) as customer_count, AVG(t.amount) as avg_transaction_amount FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.risk_level	risk_control
SELECT audit_time, audit_result FROM audit_logs WHERE auditor = '张强'	risk_control
SELECT ml.log_id, ml.actual_value, ml.is_exceeding_threshold, ri.indicator_name FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id	risk_control
SELECT ri.indicator_name, COUNT(*) as exceed_count, AVG((rml.actual_value - ri.threshold_value) / ri.threshold_value * 100) as avg_exceed_percentage FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.is_exceeding_threshold = true AND EXTRACT(YEAR FROM rml.monitoring_date) = 2023 GROUP BY ri.indicator_id, ri.indicator_name ORDER BY exceed_count DESC	risk_control
SELECT a.alert_id, a.alert_content, a.status FROM alerts a WHERE a.alert_time >= '2023-01-01' AND a.alert_time < '2024-01-01'	risk_control
SELECT ri.indicator_id, ri.indicator_name, ml.monitoring_date, ml.actual_value FROM risk_indicators ri JOIN risk_monitoring_logs ml ON ri.indicator_id = ml.indicator_id ORDER BY ml.monitoring_date DESC	risk_control
WITH indicator_stats AS (SELECT ri.indicator_id, ri.indicator_name, ri.threshold_value, COUNT(*) as total_checks, SUM(CASE WHEN rml.is_exceeding_threshold THEN 1 ELSE 0 END) as times_exceeded FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.monitoring_date >= date('now') - INTERVAL '1 year' GROUP BY ri.indicator_id, ri.indicator_name, ri.threshold_value) SELECT indicator_name, threshold_value, times_exceeded, total_checks, ROUND(times_exceeded / total_checks * 100, 2) as exceed_percentage FROM indicator_stats ORDER BY times_exceeded DESC LIMIT 10	risk_control
SELECT risk_level, COUNT(customer_id) AS customer_count FROM customers GROUP BY risk_level	risk_control
SELECT customer_id, risk_score, status FROM transactions	risk_control
SELECT ra.assessment_id, ra.risk_level, t.transaction_id, t.risk_score FROM risk_assessments ra JOIN transactions t ON ra.event_id = t.event_id WHERE ra.risk_level = '高' AND t.risk_score < 50	risk_control
SELECT transaction_type, COUNT(*) as success_count FROM transactions WHERE status = '成功' GROUP BY transaction_type ORDER BY success_count DESC LIMIT 1	risk_control
SELECT t.transaction_id, t.amount, re.status FROM transactions t JOIN risk_events re ON t.event_id = re.event_id WHERE t.status = '失败' AND re.status = '已解决'	risk_control
SELECT t.transaction_id, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.status = '处理中'	risk_control
SELECT t.transaction_id, t.amount, re.event_description FROM transactions t JOIN risk_events re ON t.event_id = re.event_id WHERE t.amount > 1000	risk_control
SELECT t.transaction_id, t.amount, t.transaction_date, c.customer_name, re.event_type, re.event_description FROM transactions t JOIN customers c ON t.customer_id = c.customer_id JOIN risk_events re ON t.event_id = re.event_id WHERE t.amount > 100000 AND c.risk_level = '高' AND t.transaction_date >= datetime('now') - INTERVAL '1 year'	risk_control
SELECT assessment_id, mitigation_plan FROM risk_assessments WHERE mitigation_plan IS NOT NULL	risk_control
SELECT t.transaction_id, t.risk_score FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.risk_level = '高'	risk_control
SELECT rml.actual_value, ri.indicator_name FROM risk_monitoring_logs rml JOIN risk_indicators ri ON rml.indicator_id = ri.indicator_id WHERE rml.actual_value < ri.threshold_value	risk_control
SELECT rr.report_content, re.event_type, re.status FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.approval_status = '已拒绝'	risk_control
SELECT DISTINCT c.customer_name, c.credit_score, c.registration_date, t.transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.customer_type = '企业' AND c.registration_date >= '2021-01-01' AND c.registration_date < '2022-01-01' AND c.credit_score > 700 AND t.transaction_date >= datetime('now') - INTERVAL '1 year'	risk_control
SELECT a.alert_id, a.alert_type, a.alert_content, re.event_id, re.event_type, t.transaction_id, t.amount FROM alerts a LEFT JOIN risk_events re ON a.event_id = re.event_id LEFT JOIN transactions t ON re.event_id = t.event_id WHERE a.assigned_to = '陈强'	risk_control
SELECT * FROM risk_reports WHERE report_content LIKE '%合规%'	risk_control
SELECT DATE_TRUNC('month', re.occurrence_time) as month, COUNT(DISTINCT re.event_id) as event_count, AVG(re.severity) as avg_severity, COUNT(a.alert_id) as alert_count FROM risk_events re LEFT JOIN alerts a ON re.event_id = a.event_id GROUP BY DATE_TRUNC('month', re.occurrence_time) ORDER BY month	risk_control
SELECT indicator_name, threshold_value FROM risk_indicators	risk_control
SELECT ri.indicator_name, rml.* FROM risk_indicators ri LEFT JOIN LATERAL (SELECT * FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id ORDER BY monitoring_date DESC LIMIT 1) rml ON true	risk_control
SELECT t.transaction_id, t.amount, c.customer_name, c.customer_type FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.amount > 100000	risk_control
SELECT * FROM risk_reports WHERE approval_status = '已批准'	risk_control
SELECT transaction_type, AVG(risk_score) as avg_risk_score FROM transactions GROUP BY transaction_type ORDER BY avg_risk_score DESC	risk_control
WITH event_timelines AS (SELECT event_id, event_type, created_at, MAX(CASE WHEN status = '处理中' THEN occurrence_time END) as processing_start, MAX(CASE WHEN status = '已解决' THEN occurrence_time END) as resolved_time FROM risk_events GROUP BY event_id, event_type, created_at) SELECT event_type, AVG(EXTRACT(EPOCH FROM (resolved_time - created_at))/3600) as avg_total_time_hours, AVG(EXTRACT(EPOCH FROM (processing_start - created_at))/3600) as avg_unprocessed_time_hours, AVG(EXTRACT(EPOCH FROM (resolved_time - processing_start))/3600) as avg_processing_time_hours FROM event_timelines WHERE resolved_time IS NOT NULL GROUP BY event_type	risk_control
SELECT alert_type, COUNT(*) AS alert_count, AVG(EXTRACT(EPOCH FROM (resolved_time - alert_time))) AS avg_processing_time FROM (SELECT a.alert_type, a.alert_time, l.audit_time AS resolved_time FROM alerts a LEFT JOIN audit_logs l ON a.alert_id = l.alert_id WHERE a.status = '已解决') AS resolved_alerts GROUP BY alert_type	risk_control
SELECT event_type, AVG(EXTRACT(EPOCH FROM (CASE WHEN status = '已解决' THEN CURRENT_TIMESTAMP ELSE NULL END - created_at))/86400) as avg_resolution_days FROM risk_events WHERE status = '已解决' GROUP BY event_type	risk_control
SELECT a.alert_content, re.status FROM alerts a JOIN risk_events re ON a.event_id = re.event_id WHERE a.rule_id IS NOT NULL	risk_control
SELECT c.customer_name, COUNT(DISTINCT t.transaction_id) as high_risk_transactions, COUNT(DISTINCT a.alert_id) as high_level_alerts FROM customers c JOIN transactions t ON c.customer_id = t.customer_id LEFT JOIN alerts a ON t.event_id = a.event_id WHERE t.risk_score > 80 AND a.alert_level = '高' AND EXTRACT(YEAR FROM t.transaction_date) = 2023 GROUP BY c.customer_id, c.customer_name HAVING COUNT(DISTINCT t.transaction_id) > 0 AND COUNT(DISTINCT a.alert_id) > 0 ORDER BY high_risk_transactions DESC, high_level_alerts DESC	risk_control
SELECT re.event_id, re.severity, ra.risk_level FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id	risk_control
SELECT transaction_id, transaction_type FROM transactions WHERE event_id = 'RE9297'	risk_control
SELECT c.customer_type, COUNT(c.customer_id) AS customer_count FROM customers c GROUP BY c.customer_type	risk_control
SELECT ra.assessment_id, re.event_description FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id	risk_control
SELECT c.customer_id, c.customer_name, c.risk_level FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id AND t.transaction_date >= date('now') - INTERVAL '30 days' WHERE c.risk_level = '高' AND t.transaction_id IS NULL	risk_control
SELECT c.customer_id, c.customer_name, c.risk_level, t.transaction_date, t.amount, t.risk_score FROM customers c LEFT JOIN (SELECT customer_id, transaction_date, amount, risk_score, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY transaction_date DESC) as rn FROM transactions) t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.rn = 1 ORDER BY t.risk_score DESC, t.amount DESC	risk_control
SELECT t.transaction_type, COUNT(t.transaction_id) AS transaction_count, COUNT(CASE WHEN t.status = '成功' THEN 1 END) AS success_count FROM transactions t GROUP BY t.transaction_type	risk_control
SELECT e.event_id, e.event_type, a.risk_level, a.mitigation_plan, a.assessor FROM risk_events e JOIN risk_assessments a ON e.event_id = a.event_id WHERE a.risk_level = '高'	risk_control
SELECT c.customer_id, c.customer_name, c.credit_score FROM customers c WHERE c.risk_level = '高' AND c.credit_score < 700	risk_control
SELECT * FROM customers WHERE risk_level = '高' AND credit_score < 600	risk_control
SELECT c.customer_id, c.risk_level, SUM(t.amount) AS total_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.status = '成功' GROUP BY c.customer_id, c.risk_level	risk_control
SELECT rr.report_id, rr.report_type, rr.approval_status, re.event_type, re.event_description FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.approval_status = '已批准'	risk_control
SELECT author, COUNT(*) as report_count FROM risk_reports GROUP BY author ORDER BY report_count DESC LIMIT 1	risk_control
SELECT event_id, event_type, reporter FROM risk_events WHERE status = '未处理'	risk_control
SELECT c.customer_name, c.last_update_date FROM customers c WHERE c.registration_date > '2021-01-01'	risk_control
SELECT rr.*, re.event_type, re.event_description FROM risk_reports rr LEFT JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.approved_by = '高志远'	risk_control
SELECT ri.indicator_id, ri.indicator_name, ri.threshold_value, rml.actual_value, rml.monitoring_date as last_update_time FROM risk_indicators ri LEFT JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id)	risk_control
SELECT ml.log_id, ml.actual_value, ri.indicator_name FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id	risk_control
SELECT AVG(impact_score) AS avg_impact, AVG(probability_score) AS avg_probability FROM risk_assessments	risk_control
SELECT re.event_id, re.event_description, ra.assessor FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE ra.assessor IS NOT NULL	risk_control
SELECT SUM(amount) FROM transactions WHERE transaction_type = '退款'	risk_control
SELECT ri.*, rml.actual_value, rml.monitoring_date FROM risk_indicators ri LEFT JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id)	risk_control
SELECT re.event_type, AVG(ra.assessment_date - re.occurrence_time) as avg_mitigation_time FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id GROUP BY re.event_type	risk_control
SELECT event_type, COUNT(*) as event_count FROM risk_events GROUP BY event_type	risk_control
SELECT ra.assessment_id, re.event_description, ra.assessor FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id	risk_control
SELECT * FROM risk_monitoring_logs WHERE is_exceeding_threshold = TRUE; SELECT COUNT(*) FROM risk_monitoring_logs WHERE is_exceeding_threshold = TRUE	risk_control
SELECT re.event_id, ra.assessment_id, ra.mitigation_plan FROM risk_events re LEFT JOIN risk_assessments ra ON re.event_id = ra.event_id	risk_control
SELECT report_id, report_type, report_date, author FROM risk_reports WHERE approval_status = '已批准'	risk_control
SELECT c.* FROM customers c WHERE c.risk_level = '高' AND c.credit_score > (SELECT AVG(credit_score) FROM customers)	risk_control
SELECT alert_id, alert_content, assigned_to FROM alerts	risk_control
SELECT re.event_id, re.event_description, re.severity, re.created_at, MAX(ra.assessment_date) AS resolved_date, MAX(ra.assessment_date) - re.created_at AS resolution_time FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE re.status = '已解决' GROUP BY re.event_id, re.event_description, re.severity, re.created_at ORDER BY resolution_time DESC LIMIT 10	risk_control
SELECT rc.*, ri.indicator_name FROM rule_configurations rc LEFT JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id WHERE rc.is_active = TRUE	risk_control
SELECT risk_level, COUNT(*) AS customer_count FROM customers GROUP BY risk_level	risk_control
SELECT event_id, event_description, reporter FROM risk_events WHERE status = '未处理'	risk_control
SELECT created_at FROM risk_events WHERE severity >= 3	risk_control
SELECT ra.assessment_id, ra.mitigation_plan, ra.assessor FROM risk_assessments ra	risk_control
SELECT a.alert_id, a.alert_content, a.alert_level, re.event_description, al.audit_comments, al.audit_time FROM alerts a JOIN risk_events re ON a.event_id = re.event_id LEFT JOIN audit_logs al ON a.alert_id = al.alert_id WHERE a.status != '已解决' AND a.alert_level = '高' AND al.audit_time = (SELECT MAX(audit_time) FROM audit_logs WHERE alert_id = a.alert_id)	risk_control
SELECT ra.assessment_id, ra.risk_level, ra.mitigation_plan, re.event_id, re.event_type, re.event_description FROM risk_assessments ra INNER JOIN risk_events re ON ra.event_id = re.event_id WHERE ra.risk_level = '高'	risk_control
SELECT DISTINCT c.customer_id, c.customer_name, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.amount > 100000 AND t.transaction_date >= date('now') - INTERVAL '1 year'	risk_control
SELECT assessment_id, event_id FROM risk_assessments WHERE impact_score > 8 AND risk_level = '高'	risk_control
SELECT re.event_id, rr.report_type, rr.report_content FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id	risk_control
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND rr.report_date BETWEEN '2023-07-01' AND '2023-09-30' AND npl.npl_ratio > 2.0	supervise
SELECT * FROM regulatory_reports WHERE submission_date = '2023-11-01'	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE car.report_date = '2023-06-01' AND npl.report_date = '2023-06-01' AND car.total_car < 12 AND npl.npl_ratio > 2	supervise
SELECT fi.institution_name FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id ORDER BY (re.market_risk_exposure / re.total_risk_exposure) DESC LIMIT 1	supervise
SELECT fii.institution_name, rr.report_id, rr.report_type, rr.approval_status, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND rr.submission_date >= '2023-07-01' AND rr.submission_date < '2023-10-01' AND fii.registered_capital > 50000000	supervise
SELECT fi.institution_name, (car.risk_weighted_assets / bs.total_assets * 100) AS rwa_density FROM financial_institution_info fi JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id JOIN balance_sheet bs ON fi.institution_id = bs.institution_id ORDER BY rwa_density DESC LIMIT 1	supervise
SELECT liquidity_coverage_ratio, net_stable_funding_ratio FROM liquidity_ratio	supervise
SELECT institution_id FROM compliance_records WHERE record_date >= '2023-12-01' AND record_date < '2024-01-01' AND status = '未解决'	supervise
SELECT institution_id, SUM(loans_and_advances) AS total_loans, SUM(deposits) AS total_deposits FROM balance_sheet WHERE EXTRACT(YEAR FROM report_date) = 2024 GROUP BY institution_id	supervise
SELECT * FROM balance_sheet WHERE report_date = '2039-06-08'	supervise
SELECT COUNT(DISTINCT institution_id) FROM non_performing_loans WHERE npl_ratio > 3	supervise
SELECT net_interest_income, non_interest_income FROM income_statement WHERE report_date = '2023-03-01'	supervise
SELECT npl_amount / total_loans AS npl_ratio FROM non_performing_loans	supervise
SELECT fi.institution_name FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01' AND npl.npl_ratio > 1.00	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND rr.approval_status = '待审核'	supervise
SELECT institution_name, registered_capital FROM financial_institution_info WHERE institution_type != '商业银行' ORDER BY registered_capital DESC LIMIT 5	supervise
SELECT COUNT(*) FROM (SELECT institution_id FROM balance_sheet ORDER BY total_assets DESC LIMIT 500) AS top500 INNER JOIN non_performing_loans ON top500.institution_id = non_performing_loans.institution_id WHERE npl_ratio < 1 AND provision_coverage_ratio > 200	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id WHERE car.report_date = '2023-12-01' AND car.core_tier_1_ratio < 10 AND rr.approval_status = '待审核'	supervise
WITH income_growth AS (SELECT institution_id, (MAX(net_interest_income + non_interest_income) - MIN(net_interest_income + non_interest_income)) / MIN(net_interest_income + non_interest_income) * 100 AS income_growth_rate FROM income_statement WHERE report_date >= date('now') - INTERVAL '2 years' GROUP BY institution_id), profit_growth AS (SELECT institution_id, (MAX(net_profit) - MIN(net_profit)) / MIN(net_profit) * 100 AS profit_growth_rate FROM income_statement WHERE report_date >= date('now') - INTERVAL '2 years' GROUP BY institution_id) SELECT fii.institution_name FROM financial_institution_info fii JOIN income_growth ig ON fii.institution_id = ig.institution_id JOIN profit_growth pg ON fii.institution_id = pg.institution_id ORDER BY ig.income_growth_rate DESC, pg.profit_growth_rate ASC LIMIT 1	supervise
SELECT report_id, approval_status FROM regulatory_reports WHERE report_date = '2023-07-01'	supervise
SELECT DISTINCT fi.institution_id, fi.institution_name FROM financial_institution_info fi JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id WHERE car.core_tier_1_ratio > (SELECT AVG(core_tier_1_ratio) FROM capital_adequacy_ratio) AND car.tier_1_ratio > (SELECT AVG(tier_1_ratio) FROM capital_adequacy_ratio) AND car.total_car > (SELECT AVG(total_car) FROM capital_adequacy_ratio)	supervise
SELECT * FROM compliance_records WHERE record_date >= '2023-01-01' AND record_date < '2024-01-01' AND status = '已解决'	supervise
SELECT report_type, COUNT(*) AS submission_count FROM regulatory_reports WHERE submission_date BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY report_type ORDER BY submission_count DESC LIMIT 1	supervise
SELECT tier_1_ratio FROM capital_adequacy_ratio	supervise
SELECT fii.institution_name, lr.report_date FROM liquidity_ratio lr JOIN financial_institution_info fii ON lr.institution_id = fii.institution_id WHERE lr.liquidity_coverage_ratio > 100	supervise
WITH asset_liability_ratio AS (SELECT institution_id, report_date, total_liabilities / total_assets AS al_ratio FROM balance_sheet WHERE report_date >= date('now') - INTERVAL '2 years'), al_volatility AS (SELECT institution_id, MAX(al_ratio) - MIN(al_ratio) AS al_volatility FROM asset_liability_ratio GROUP BY institution_id), liquidity_trend AS (SELECT institution_id, report_date, liquidity_coverage_ratio, ROW_NUMBER() OVER (PARTITION BY institution_id ORDER BY report_date) AS row_num FROM liquidity_ratio WHERE report_date >= date('now') - INTERVAL '2 years') SELECT fi.institution_name, av.al_volatility, COALESCE(ROUND((last.liquidity_coverage_ratio - first.liquidity_coverage_ratio) / first.liquidity_coverage_ratio * 100, 2), 0) AS lcr_change_percentage FROM financial_institution_info fi JOIN al_volatility av ON fi.institution_id = av.institution_id LEFT JOIN liquidity_trend first ON fi.institution_id = first.institution_id AND first.row_num = 1 LEFT JOIN liquidity_trend last ON fi.institution_id = last.institution_id AND last.row_num = (SELECT MAX(row_num) FROM liquidity_trend WHERE institution_id = fi.institution_id) ORDER BY av.al_volatility DESC LIMIT 5	supervise
SELECT record_id, institution_id, record_date, resolution_date, description, severity, status, compliance_type FROM compliance_records WHERE record_date >= '2023-03-01' AND record_date < '2023-04-01'	supervise
SELECT institution_id, record_date, description, severity FROM compliance_records WHERE record_date >= '2024-01-01' AND record_date < '2025-01-01'	supervise
SELECT report_type FROM regulatory_reports WHERE report_date = '2023-10-01'	supervise
SELECT * FROM compliance_records WHERE record_date >= '2023-01-01' AND record_date < '2024-01-01' AND severity = '中'	supervise
SELECT * FROM compliance_records WHERE record_date = '2023-10-01'	supervise
SELECT DISTINCT lr.institution_id FROM liquidity_ratio lr WHERE lr.liquidity_coverage_ratio > (SELECT AVG(liquidity_coverage_ratio) FROM liquidity_ratio) AND lr.net_stable_funding_ratio > (SELECT AVG(net_stable_funding_ratio) FROM liquidity_ratio) AND lr.loan_to_deposit_ratio > (SELECT AVG(loan_to_deposit_ratio) FROM liquidity_ratio)	supervise
SELECT fii.institution_name, rr.report_type, rr.submission_date FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.approval_status = '需修改' AND rr.submission_date >= '2023-07-01' AND rr.submission_date < '2023-10-01' ORDER BY rr.submission_date DESC	supervise
SELECT fii.institution_name FROM capital_adequacy_ratio car JOIN non_performing_loans npl ON car.institution_id = npl.institution_id AND car.report_date = npl.report_date JOIN financial_institution_info fii ON car.institution_id = fii.institution_id WHERE car.total_car <= (SELECT PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY total_car) FROM capital_adequacy_ratio) AND npl.npl_ratio < (SELECT AVG(npl_ratio) FROM non_performing_loans)	supervise
SELECT registered_capital, institution_type FROM financial_institution_info	supervise
SELECT establishment_date, legal_representative FROM financial_institution_info	supervise
SELECT * FROM compliance_records WHERE status = '已解决'	supervise
SELECT fii.institution_name, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id AND rr.report_date = npl.report_date WHERE rr.report_date = '2023-07-01' AND rr.approval_status = '需修改' AND npl.npl_ratio > 1.00	supervise
SELECT institution_id FROM liquidity_ratio ORDER BY ABS(loan_to_deposit_ratio - 1) LIMIT 1	supervise
SELECT institution_id FROM non_performing_loans WHERE total_loans > 100000000000	supervise
SELECT cash_and_equivalents FROM balance_sheet WHERE report_date = '2026-04-27'	supervise
SELECT institution_id FROM capital_adequacy_ratio WHERE core_tier_1_ratio < 9	supervise
SELECT fi.institution_name, rr.report_type, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝' AND npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01' AND npl.npl_ratio > 2.00	supervise
SELECT COUNT(*) FROM (SELECT institution_id FROM capital_adequacy_ratio ORDER BY risk_weighted_assets / (SELECT total_assets FROM balance_sheet WHERE balance_sheet.institution_id = capital_adequacy_ratio.institution_id AND balance_sheet.report_date = capital_adequacy_ratio.report_date) DESC LIMIT 10) AS top_institutions WHERE institution_id IN (SELECT institution_id FROM risk_exposure WHERE market_risk_exposure > (SELECT AVG(market_risk_exposure) FROM risk_exposure))	supervise
SELECT AVG(branch_count) AS average_branch_count FROM (SELECT institution_id, COUNT(*) AS branch_count FROM financial_institution_info GROUP BY institution_id) AS branch_counts	supervise
SELECT fi.institution_id, fi.institution_name FROM financial_institution_info fi JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id JOIN risk_exposure re ON fi.institution_id = re.institution_id WHERE car.core_tier_1_ratio < 8.5 AND (re.market_risk_exposure / re.total_risk_exposure) > 0.2	supervise
SELECT fii.institution_name, car.core_tier_1_ratio, car.tier_1_ratio, car.total_car FROM capital_adequacy_ratio car JOIN financial_institution_info fii ON car.institution_id = fii.institution_id WHERE car.report_date = '2023-12-01' AND car.core_tier_1_ratio < 10 AND car.total_car < 12	supervise
SELECT COUNT(*) FROM compliance_records WHERE record_date >= '2023-01-01' AND record_date < '2024-01-01' AND severity = '高'	supervise
SELECT fii.institution_name FROM balance_sheet bs JOIN financial_institution_info fii ON bs.institution_id = fii.institution_id ORDER BY (bs.cash_and_equivalents / bs.total_assets) DESC LIMIT 1	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN risk_exposure re ON fi.institution_id = re.institution_id WHERE (re.market_risk_exposure / re.total_risk_exposure) > 0.4	supervise
SELECT fi.institution_name, rr.approval_status, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id WHERE rr.report_date >= '2023-01-01' AND rr.report_date < '2024-01-01' ORDER BY rr.approval_status DESC, rr.comments DESC	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id WHERE car.report_date >= '2023-01-01' AND car.report_date < '2024-01-01' AND car.core_tier_1_ratio < 8 AND rr.approval_status = '已批准'	supervise
SELECT institution_id, credit_risk_exposure, operational_risk_exposure FROM risk_exposure WHERE report_date >= '2024-01-01' AND report_date < '2024-02-01'	supervise
SELECT record_id, institution_id, record_date, resolution_date, description, severity, status, compliance_type FROM compliance_records WHERE record_date = '2023-04-02'	supervise
SELECT npl.report_date, npl.npl_ratio, car.total_car FROM non_performing_loans npl JOIN capital_adequacy_ratio car ON npl.institution_id = car.institution_id AND npl.report_date = car.report_date ORDER BY npl.report_date	supervise
SELECT institution_id, provision_coverage_ratio FROM non_performing_loans WHERE provision_coverage_ratio > 150	supervise
SELECT * FROM related_party_transactions WHERE transaction_date = '2023-12-22'	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN liquidity_ratio lr ON fi.institution_id = lr.institution_id JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE lr.liquidity_coverage_ratio > 110 AND npl.npl_ratio < 1.5	supervise
SELECT r.institution_id, f.institution_name, r.report_type, r.approval_status, n.npl_ratio FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND n.npl_ratio > 2.00	supervise
SELECT institution_id, AVG(net_profit / (net_interest_income + non_interest_income)) AS avg_net_profit_margin FROM income_statement WHERE report_date >= date('now') - INTERVAL '2 years' GROUP BY institution_id ORDER BY avg_net_profit_margin DESC LIMIT 5	supervise
SELECT fi.institution_type, AVG(npl.npl_ratio) as avg_npl_ratio FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id WHERE EXTRACT(YEAR FROM npl.report_date) = 2023 GROUP BY fi.institution_type	supervise
SELECT COUNT(DISTINCT re.institution_id) FROM risk_exposure re JOIN capital_adequacy_ratio car ON re.institution_id = car.institution_id AND re.report_date = car.report_date WHERE re.market_risk_exposure > (SELECT market_risk_exposure * 1.5 FROM risk_exposure WHERE institution_id = re.institution_id AND report_date < re.report_date ORDER BY report_date DESC LIMIT 1) AND car.total_car < (SELECT total_car + 1 FROM capital_adequacy_ratio WHERE institution_id = car.institution_id AND report_date < car.report_date ORDER BY report_date DESC LIMIT 1)	supervise
SELECT institution_id, SUM(total_assets) AS total_assets, SUM(total_liabilities) AS total_liabilities FROM balance_sheet GROUP BY institution_id	supervise
SELECT fii.institution_name, rr.approval_status, rpt.transaction_amount FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN related_party_transactions rpt ON rr.institution_id = rpt.institution_id WHERE rr.approval_status = '需修改' AND rr.report_date = '2023-07-01' AND rpt.transaction_amount > 5000000	supervise
SELECT AVG(total_car) FROM capital_adequacy_ratio WHERE institution_id IN (SELECT institution_id FROM balance_sheet WHERE total_assets > 10000000000000)	supervise
SELECT * FROM risk_exposure WHERE report_date = '2023-10-01'	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN related_party_transactions rpt ON fii.institution_id = rpt.institution_id JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id WHERE rpt.transaction_amount > 5000000 AND rpt.transaction_date = '2023-06-01' AND rr.approval_status = '已批准'	supervise
SELECT corr(b.total_assets, c.total_car) AS correlation_coefficient FROM balance_sheet b JOIN capital_adequacy_ratio c ON b.institution_id = c.institution_id AND b.report_date = c.report_date	supervise
WITH transaction_stats AS ( SELECT institution_id, COUNT(*) as total_transactions, SUM(CASE WHEN approval_status != '已批准' THEN 1 ELSE 0 END) as unapproved_transactions FROM related_party_transactions WHERE EXTRACT(YEAR FROM transaction_date) = 2023 GROUP BY institution_id ) SELECT fi.institution_name, (ts.unapproved_transactions / NULLIF(ts.total_transactions, 0)) * 100 as unapproved_ratio FROM transaction_stats ts JOIN financial_institution_info fi ON ts.institution_id = fi.institution_id WHERE (ts.unapproved_transactions / NULLIF(ts.total_transactions, 0)) > 0.2 ORDER BY unapproved_ratio DESC	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_date = '2023-07-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND npl.npl_ratio > 2.00	supervise
SELECT r.institution_id, r.approval_status, c.compliance_type, c.severity, c.status FROM regulatory_reports r JOIN compliance_records c ON r.institution_id = c.institution_id WHERE EXTRACT(YEAR FROM r.report_date) = 2023	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND npl.npl_ratio > 2.0	supervise
SELECT institution_id, liquidity_coverage_ratio, net_stable_funding_ratio FROM liquidity_ratio WHERE report_date >= '2023-05-01' AND report_date < '2023-06-01'	supervise
SELECT institution_id, SUM(non_interest_income) AS total_non_interest_income FROM income_statement WHERE report_date = '2023-03-01' GROUP BY institution_id	supervise
SELECT * FROM risk_exposure WHERE report_date = '2023-02-01'	supervise
SELECT COUNT(*) FROM related_party_transactions WHERE transaction_amount > 500000000 AND transaction_type = '资产转移' AND EXTRACT(YEAR FROM transaction_date) = 2023	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN related_party_transactions rpt ON rr.institution_id = rpt.institution_id WHERE rr.approval_status = '需修改' AND rr.submission_date = '2023-08-01' AND rpt.transaction_amount > 5000000	supervise
SELECT r.institution_id, f.institution_name FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN income_statement i ON r.institution_id = i.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '已拒绝' AND i.report_date >= '2023-01-01' AND i.report_date < '2023-04-01' AND i.net_profit > 10000000	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_date = '2023-07-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT * FROM compliance_records WHERE compliance_type = '内控管理'	supervise
SELECT fii.institution_name, rr.report_type, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_type = '半年度报告' AND rr.approval_status = '待审核' AND rr.report_date >= '2023-10-01' AND rr.report_date < '2023-11-01' AND npl.npl_ratio > 1.00	supervise
SELECT institution_type, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY npl_ratio) AS median_npl_ratio FROM non_performing_loans JOIN financial_institution_info ON non_performing_loans.institution_id = financial_institution_info.institution_id GROUP BY institution_type	supervise
SELECT * FROM capital_adequacy_ratio WHERE core_tier_1_ratio < 8	supervise
SELECT r.institution_id, f.institution_name, f.registered_capital, r.report_type, r.approval_status FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '半年度报告' AND r.approval_status = '待审核' AND f.registered_capital > 50000000	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN related_party_transactions rpt ON fii.institution_id = rpt.institution_id WHERE rpt.transaction_date = '2023-06-01' AND rpt.transaction_amount > 5000000 AND rpt.approval_status = '待审批'	supervise
SELECT lr.institution_id FROM liquidity_ratio lr WHERE lr.loan_to_deposit_ratio > (SELECT AVG(loan_to_deposit_ratio) FROM liquidity_ratio) AND lr.liquidity_coverage_ratio < (SELECT AVG(liquidity_coverage_ratio) FROM liquidity_ratio)	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN income_statement i ON f.institution_id = i.institution_id WHERE i.report_date = '2023-04-01' AND i.net_interest_income > 10000000000	supervise
SELECT r.institution_id, r.report_id, r.report_type, r.approval_status, n.npl_ratio FROM regulatory_reports r JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND n.report_date >= '2023-01-01' AND n.report_date < '2024-01-01' AND n.npl_ratio > 1.00	supervise
SELECT fii.institution_name, re.total_risk_exposure, car.core_tier_1_ratio FROM financial_institution_info fii JOIN risk_exposure re ON fii.institution_id = re.institution_id JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE re.report_date = '2023-10-01' AND re.total_risk_exposure > 300000000000 AND car.core_tier_1_ratio < 8	supervise
SELECT COUNT(DISTINCT re.institution_id) FROM risk_exposure re JOIN risk_exposure re_prev ON re.institution_id = re_prev.institution_id AND re.report_date = date('now') - INTERVAL '1 year' AND re_prev.report_date = date('now') - INTERVAL '2 years' WHERE (re.market_risk_exposure / re.credit_risk_exposure) / (re_prev.market_risk_exposure / re_prev.credit_risk_exposure) > 1.1 OR (re.market_risk_exposure / re.credit_risk_exposure) / (re_prev.market_risk_exposure / re_prev.credit_risk_exposure) < 0.9	supervise
SELECT b.institution_id FROM balance_sheet b WHERE b.loans_and_advances > b.deposits	supervise
SELECT fii.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date <= '2023-12-31' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN income_statement i ON f.institution_id = i.institution_id WHERE i.report_date = '2023-04-01' AND i.non_interest_income > 200000000	supervise
SELECT institution_id, COUNT(*) AS transaction_count FROM related_party_transactions WHERE transaction_date >= date('now') - INTERVAL '1 year' GROUP BY institution_id ORDER BY transaction_count DESC LIMIT 1	supervise
SELECT fi.institution_name, (re.credit_risk_exposure / re.total_risk_exposure * 100) AS credit_risk_percentage FROM financial_institution_info fi JOIN risk_exposure re ON fi.institution_id = re.institution_id ORDER BY credit_risk_percentage DESC LIMIT 1	supervise
SELECT DISTINCT institution_id FROM risk_exposure WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01'	supervise
SELECT institution_id FROM capital_adequacy_ratio WHERE report_date = '2023-11-01' AND risk_weighted_assets > 120000000000	supervise
SELECT severity, AVG(resolution_date - record_date) AS avg_resolution_time FROM compliance_records GROUP BY severity	supervise
SELECT COUNT(DISTINCT institution_id) FROM liquidity_ratio WHERE liquidity_coverage_ratio > 100 AND net_stable_funding_ratio > 100	supervise
SELECT AVG(npl_ratio) AS average_npl_ratio, AVG(provision_coverage_ratio) AS average_provision_coverage_ratio, AVG(total_car) AS average_total_car FROM (SELECT b.institution_id, n.npl_ratio, n.provision_coverage_ratio, c.total_car FROM balance_sheet b JOIN non_performing_loans n ON b.institution_id = n.institution_id AND b.report_date = n.report_date JOIN capital_adequacy_ratio c ON b.institution_id = c.institution_id AND b.report_date = c.report_date ORDER BY b.total_assets DESC LIMIT 1000) AS top_institutions	supervise
SELECT fii.institution_name, rr.report_type, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_date = '2023-07-01' AND rr.report_type = '季度报告' AND npl.npl_ratio > 1.5	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_date = '2024-01-01' AND rr.report_type = '年度报告' AND rr.approval_status = '已批准' AND npl.report_date = '2024-01-01' AND npl.npl_ratio > 1.0	supervise
SELECT lr.liquidity_coverage_ratio, lr.net_stable_funding_ratio, lr.loan_to_deposit_ratio FROM liquidity_ratio lr	supervise
SELECT fi.institution_name FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id WHERE npl.report_date >= '2023-12-01' AND npl.report_date < '2024-01-01' AND npl.npl_ratio > 1.5	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN liquidity_ratio lr ON fi.institution_id = lr.institution_id WHERE lr.loan_to_deposit_ratio > 75 AND lr.liquidity_coverage_ratio < 120	supervise
SELECT * FROM regulatory_reports WHERE report_type = '半年度报告'	supervise
SELECT * FROM compliance_records ORDER BY resolution_date - record_date DESC LIMIT 5	supervise
SELECT r.institution_id, r.report_id, r.report_type, r.approval_status, n.npl_ratio FROM regulatory_reports r JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '已拒绝' AND n.report_date >= '2023-01-01' AND n.report_date < '2024-01-01' AND n.npl_ratio > 2.00	supervise
SELECT fii.institution_name, rr.report_id, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN liquidity_ratio l ON f.institution_id = l.institution_id WHERE l.loan_to_deposit_ratio BETWEEN 60 AND 80	supervise
SELECT institution_id FROM capital_adequacy_ratio ORDER BY ABS(core_tier_1_ratio - total_car) LIMIT 1	supervise
SELECT b.institution_id, b.total_liabilities, f.registered_capital FROM balance_sheet b JOIN financial_institution_info f ON b.institution_id = f.institution_id WHERE EXTRACT(YEAR FROM b.report_date) = 2024	supervise
SELECT corr(npl_ratio, credit_risk_exposure) AS correlation_coefficient FROM non_performing_loans JOIN risk_exposure USING (institution_id, report_date)	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE rr.report_type = '年度报告' AND rr.approval_status = '已批准' AND car.report_date >= '2023-01-01' AND car.report_date < '2024-01-01' AND car.total_car > 10	supervise
SELECT npl_ratio, institution_id FROM non_performing_loans WHERE report_date = '2023-06-01'	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN risk_exposure re ON fi.institution_id = re.institution_id WHERE re.report_date = '2023-05-01' AND re.market_risk_exposure > 20000000000	supervise
SELECT fii.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2024-01-01' AND rr.report_type = '年度报告' AND rr.approval_status = '已批准'	supervise
SELECT * FROM capital_adequacy_ratio WHERE report_date = '2023-11-01'	supervise
SELECT corr(l.net_stable_funding_ratio, c.core_tier_1_ratio) AS correlation FROM liquidity_ratio l JOIN capital_adequacy_ratio c ON l.institution_id = c.institution_id AND l.report_date = c.report_date	supervise
SELECT fii.institution_name, rr.report_date FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2024-01-01' AND rr.submission_date < '2025-01-01' AND rr.report_type = '年度报告' AND rr.approval_status = '已批准'	supervise
SELECT * FROM capital_adequacy_ratio WHERE report_date = '2023-11-01'	supervise
SELECT core_tier_1_ratio, tier_1_ratio, total_car, risk_weighted_assets, report_date FROM capital_adequacy_ratio WHERE institution_id = 2162	supervise
SELECT institution_id, SUM(total_loans) AS total_loans_2023, SUM(npl_amount) AS total_npl_amount_2023 FROM non_performing_loans WHERE EXTRACT(YEAR FROM report_date) = 2023 GROUP BY institution_id	supervise
SELECT corr(market_risk_exposure / total_risk_exposure, non_interest_income / (net_interest_income + non_interest_income)) AS correlation FROM risk_exposure JOIN income_statement USING (institution_id, report_date)	supervise
SELECT institution_id, provision_coverage_ratio FROM non_performing_loans ORDER BY provision_coverage_ratio DESC LIMIT 1	supervise
SELECT lr.institution_id, lr.report_date, lr.liquidity_coverage_ratio, lr.net_stable_funding_ratio, lr.loan_to_deposit_ratio, car.core_tier_1_ratio, car.tier_1_ratio, car.total_car FROM liquidity_ratio lr JOIN capital_adequacy_ratio car ON lr.institution_id = car.institution_id AND lr.report_date = car.report_date WHERE lr.report_date >= '2023-01-01' AND lr.report_date < '2024-01-01'	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN income_statement i ON f.institution_id = i.institution_id WHERE i.report_date = '2023-04-01' ORDER BY i.operating_expenses DESC LIMIT 1	supervise
SELECT institution_id, SUM(non_interest_income) AS total_non_interest_income, SUM(net_profit) AS total_net_profit FROM income_statement WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01' GROUP BY institution_id	supervise
SELECT fi.institution_name, rr.report_type, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝' AND npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01' AND npl.npl_ratio > 2.00	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id WHERE car.report_date = '2023-12-01' AND car.core_tier_1_ratio < 9	supervise
SELECT institution_id FROM liquidity_ratio WHERE report_date = '2023-11-01' AND liquidity_coverage_ratio < 110	supervise
SELECT re.market_risk_exposure, npl.provision_coverage_ratio FROM risk_exposure re JOIN non_performing_loans npl ON re.institution_id = npl.institution_id WHERE re.report_date = '2023-03-01' AND npl.report_date = '2023-03-01'	supervise
SELECT legal_representative, contact_number FROM financial_institution_info	supervise
SELECT fi.institution_name, COUNT(DISTINCT rpt.related_party) AS distinct_related_parties FROM financial_institution_info fi JOIN related_party_transactions rpt ON fi.institution_id = rpt.institution_id WHERE EXTRACT(YEAR FROM rpt.transaction_date) = 2023 GROUP BY fi.institution_name ORDER BY distinct_related_parties DESC LIMIT 1	supervise
SELECT fi.address AS region, AVG(lr.liquidity_coverage_ratio) AS avg_liquidity_coverage_ratio FROM liquidity_ratio lr JOIN financial_institution_info fi ON lr.institution_id = fi.institution_id GROUP BY fi.address ORDER BY avg_liquidity_coverage_ratio DESC LIMIT 1	supervise
SELECT EXTRACT(QUARTER FROM report_date) AS quarter, AVG(LENGTH(comments)) AS avg_word_count FROM regulatory_reports WHERE EXTRACT(YEAR FROM report_date) = 2023 GROUP BY quarter ORDER BY quarter	supervise
SELECT fi.institution_name, npl.provision_coverage_ratio FROM financial_institution_info fi JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id ORDER BY npl.provision_coverage_ratio DESC LIMIT 1	supervise
SELECT legal_representative, contact_number FROM financial_institution_info	supervise
SELECT fii.institution_name, rr.report_date, rr.submission_date FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND EXTRACT(YEAR FROM rr.submission_date) = 2023	supervise
SELECT fi.institution_name, car.total_car, npl.npl_ratio FROM financial_institution_info fi JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE car.total_car > 12 AND npl.npl_ratio < 2	supervise
SELECT institution_id FROM liquidity_ratio ORDER BY net_stable_funding_ratio DESC, loan_to_deposit_ratio ASC LIMIT 10	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN risk_exposure re ON fi.institution_id = re.institution_id WHERE re.report_date >= '2023-01-01' AND re.report_date < '2024-01-01' AND re.credit_risk_exposure > 500000000000	supervise
SELECT fi.institution_name FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id WHERE npl.npl_ratio > 2	supervise
SELECT * FROM capital_adequacy_ratio WHERE report_date = '2023-05-01'	supervise
SELECT institution_id, severity, COUNT(*) AS severity_count FROM compliance_records WHERE EXTRACT(YEAR FROM record_date) = 2023 GROUP BY institution_id, severity	supervise
SELECT fii.institution_name, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT institution_id, transaction_id, transaction_amount FROM related_party_transactions	supervise
SELECT fi.institution_name, rr.report_type, SUM(rpt.transaction_amount) AS total_transaction_amount FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id JOIN related_party_transactions rpt ON rr.institution_id = rpt.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' GROUP BY fi.institution_name, rr.report_type HAVING SUM(rpt.transaction_amount) > 10000000	supervise
SELECT fii.institution_name, rr.report_id, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date <= '2023-12-31' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT fii.institution_name, rr.report_type, rr.approval_status, rr.submission_date FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT npl_ratio, address FROM non_performing_loans JOIN financial_institution_info ON non_performing_loans.institution_id = financial_institution_info.institution_id	supervise
SELECT report_id, institution_id, report_date, report_type, approval_status FROM regulatory_reports WHERE submission_date >= '2024-01-01' AND submission_date < '2025-01-01'	supervise
SELECT institution_type, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY liquidity_coverage_ratio) AS median_liquidity_coverage_ratio FROM liquidity_ratio lr JOIN financial_institution_info fii ON lr.institution_id = fii.institution_id GROUP BY institution_type	supervise
SELECT r.institution_id, r.report_id, r.report_type, r.approval_status, c.core_tier_1_ratio FROM regulatory_reports r JOIN capital_adequacy_ratio c ON r.institution_id = c.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '已拒绝' AND c.report_date = '2023-06-01' AND c.core_tier_1_ratio < 8	supervise
SELECT AVG(npl_ratio) AS average_npl_ratio FROM (SELECT npl.institution_id, npl.npl_ratio FROM non_performing_loans npl JOIN capital_adequacy_ratio car ON npl.institution_id = car.institution_id AND npl.report_date = car.report_date WHERE npl.report_date >= '2023-07-01' AND npl.report_date < '2023-10-01' ORDER BY car.total_car DESC LIMIT 10) AS top_institutions	supervise
SELECT fii.institution_name FROM compliance_records cr JOIN financial_institution_info fii ON cr.institution_id = fii.institution_id WHERE cr.status = '未解决' GROUP BY fii.institution_name ORDER BY COUNT(*) DESC LIMIT 1	supervise
SELECT * FROM related_party_transactions WHERE transaction_date >= '2023-01-01' AND transaction_date < '2024-01-01' AND transaction_amount > 5000000	supervise
SELECT institution_id FROM risk_exposure WHERE market_risk_exposure / total_risk_exposure > 0.25	supervise
SELECT fii.institution_name, rpt.transaction_amount, rpt.transaction_type FROM related_party_transactions rpt JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id WHERE rpt.transaction_date >= '2023-08-01' AND rpt.transaction_date < '2023-09-01' AND rpt.transaction_amount > 5000000 AND rpt.approval_status = '待审批'	supervise
SELECT r.institution_id, f.institution_name FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN income_statement i ON r.institution_id = i.institution_id WHERE r.report_type = '季度报告' AND r.approval_status = '需修改' AND r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND i.report_date >= '2023-01-01' AND i.report_date < '2023-04-01' AND i.net_profit > 50000000	supervise
SELECT fi.institution_name FROM financial_institution_info fi WHERE fi.institution_id IN (SELECT npl.institution_id FROM non_performing_loans npl WHERE npl.npl_ratio > (SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY npl_ratio) FROM non_performing_loans) AND npl.provision_coverage_ratio > (SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY provision_coverage_ratio) FROM non_performing_loans) AND npl.institution_id IN (SELECT car.institution_id FROM capital_adequacy_ratio car WHERE car.total_car > (SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY total_car) FROM capital_adequacy_ratio)))	supervise
SELECT related_party FROM related_party_transactions ORDER BY transaction_amount DESC LIMIT 1	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN related_party_transactions r ON f.institution_id = r.institution_id WHERE r.transaction_date = '2023-10-01' AND r.approval_status = '待审批'	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN risk_exposure re ON fi.institution_id = re.institution_id WHERE re.report_date = '2023-05-01' AND re.total_risk_exposure > 150000000000	supervise
SELECT r.institution_id, f.institution_name, f.registered_capital FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND f.registered_capital > 50000000	supervise
SELECT institution_id, report_date, market_risk_exposure, credit_risk_exposure FROM risk_exposure WHERE report_date >= '2023-11-01' AND report_date < '2023-12-01'	supervise
SELECT institution_id, credit_risk_exposure FROM risk_exposure WHERE report_date = '2023-09-01'	supervise
SELECT fii.institution_name, rpt.transaction_amount, rpt.approval_status FROM related_party_transactions rpt JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id WHERE rpt.transaction_amount > 5000000 AND rpt.approval_status = '已批准' AND rpt.transaction_date >= '2023-05-01' AND rpt.transaction_date < '2023-06-01'	supervise
SELECT institution_id FROM capital_adequacy_ratio WHERE risk_weighted_assets > 800000000000	supervise
SELECT COUNT(*) FROM financial_institution_info fii JOIN balance_sheet bs ON fii.institution_id = bs.institution_id WHERE fii.registered_capital < 1000000000 AND bs.total_assets > 100000000000	supervise
SELECT fii.institution_name, car.total_car, npl.npl_ratio FROM capital_adequacy_ratio car JOIN non_performing_loans npl ON car.institution_id = npl.institution_id AND car.report_date = npl.report_date JOIN financial_institution_info fii ON car.institution_id = fii.institution_id WHERE car.report_date BETWEEN '2023-07-01' AND '2023-09-30' AND car.total_car < 12 AND npl.npl_ratio > 2	supervise
SELECT report_date, approval_status FROM regulatory_reports	supervise
SELECT fi.institution_name FROM balance_sheet bs JOIN financial_institution_info fi ON bs.institution_id = fi.institution_id WHERE bs.report_date >= '2024-01-01' AND bs.report_date < '2025-01-01' ORDER BY bs.total_assets DESC LIMIT 1	supervise
SELECT compliance_type, AVG(resolution_date - record_date) AS avg_resolution_time FROM compliance_records WHERE EXTRACT(YEAR FROM record_date) = 2023 AND severity = '严重' GROUP BY compliance_type ORDER BY avg_resolution_time DESC LIMIT 1	supervise
SELECT fii.institution_name, rr.report_type, rpt.transaction_amount FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN related_party_transactions rpt ON rr.institution_id = rpt.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND rpt.transaction_amount > 5000000	supervise
SELECT AVG(non_interest_income) FROM income_statement WHERE report_date = '2023-01-01'	supervise
SELECT report_date, npl_amount FROM non_performing_loans WHERE report_date >= '2023-06-01' AND report_date < '2023-07-01'	supervise
SELECT institution_id FROM non_performing_loans WHERE provision_coverage_ratio < 200	supervise
SELECT AVG(total_car) AS average_capital_adequacy_ratio FROM capital_adequacy_ratio WHERE institution_id IN (SELECT institution_id FROM income_statement WHERE report_date BETWEEN '2023-10-01' AND '2023-12-31' ORDER BY net_profit DESC LIMIT 10)	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN compliance_records c ON f.institution_id = c.institution_id WHERE c.description LIKE '%客户投诉%'	supervise
SELECT institution_id, net_interest_income, non_interest_income FROM income_statement WHERE report_date = '2023-07-01'	supervise
SELECT r.institution_id, r.report_id, r.report_type, r.approval_status, n.npl_ratio FROM regulatory_reports r JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '已拒绝' AND n.report_date >= '2023-01-01' AND n.report_date < '2024-01-01' AND n.npl_ratio > 1.00	supervise
SELECT npl_amount, provision_coverage_ratio FROM non_performing_loans WHERE report_date = '2023-03-01'	supervise
SELECT fii.institution_id, fii.registered_capital, car.total_car, lr.liquidity_coverage_ratio, npl.npl_ratio FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN liquidity_ratio lr ON fii.institution_id = lr.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE car.report_date = lr.report_date AND lr.report_date = npl.report_date	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT COUNT(DISTINCT b1.institution_id) FROM balance_sheet b1 JOIN balance_sheet b2 ON b1.institution_id = b2.institution_id AND b1.report_date = b2.report_date + INTERVAL '1 year' JOIN capital_adequacy_ratio c1 ON b1.institution_id = c1.institution_id AND b1.report_date = c1.report_date JOIN capital_adequacy_ratio c2 ON b1.institution_id = c2.institution_id AND b1.report_date = c2.report_date + INTERVAL '1 year' WHERE (b2.loans_and_advances - b1.loans_and_advances) / b1.loans_and_advances > 0.2 AND (b1.loans_and_advances - b2.loans_and_advances) / b2.loans_and_advances > 0.2 AND c2.total_car < c1.total_car	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND rr.submission_date >= '2023-07-01' AND rr.submission_date < '2023-10-01'	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_date = '2023-07-01' AND rr.report_type = '季度报告' AND npl.npl_ratio > 1.00 AND npl.report_date = '2023-07-01'	supervise
SELECT DISTINCT institution_id FROM related_party_transactions	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.report_date = '2023-07-01' AND npl.report_date = '2023-07-01' AND npl.npl_ratio > 2.0	supervise
SELECT c.report_date, c.total_car, c.risk_weighted_assets FROM capital_adequacy_ratio c ORDER BY c.report_date	supervise
SELECT lr.institution_id, lr.liquidity_coverage_ratio, rr.approval_status FROM liquidity_ratio lr JOIN regulatory_reports rr ON lr.institution_id = rr.institution_id AND lr.report_date = rr.report_date WHERE EXTRACT(YEAR FROM lr.report_date) = 2023	supervise
SELECT fii.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND rr.submission_date > '2023-07-01'	supervise
SELECT COUNT(*) FROM regulatory_reports WHERE report_type = '季度报告' AND submission_date BETWEEN '2023-04-01' AND '2023-06-30' AND approval_status = '已拒绝'	supervise
SELECT * FROM risk_exposure WHERE report_date = '2023-10-01'	supervise
WITH loan_growth AS (SELECT institution_id, (MAX(loans_and_advances) - MIN(loans_and_advances)) / MIN(loans_and_advances) * 100 AS growth_rate FROM balance_sheet GROUP BY institution_id) SELECT fi.institution_name, lg.growth_rate FROM financial_institution_info fi JOIN loan_growth lg ON fi.institution_id = lg.institution_id ORDER BY lg.growth_rate DESC LIMIT 1	supervise
SELECT fi.institution_name, (re.market_risk_exposure / NULLIF(car.risk_weighted_assets, 0)) * 100 as market_risk_capital_ratio FROM risk_exposure re JOIN capital_adequacy_ratio car ON re.institution_id = car.institution_id JOIN financial_institution_info fi ON re.institution_id = fi.institution_id WHERE EXTRACT(YEAR FROM re.report_date) = 2023 AND EXTRACT(YEAR FROM car.report_date) = 2023 AND (re.market_risk_exposure / NULLIF(car.risk_weighted_assets, 0)) > 0.15 ORDER BY market_risk_capital_ratio DESC	supervise
SELECT fii.institution_name, rr.report_type, rr.submission_date FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.approval_status = '需修改' AND EXTRACT(YEAR FROM rr.submission_date) = 2023 ORDER BY rr.submission_date DESC	supervise
SELECT DISTINCT fi.institution_name FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id JOIN related_party_transactions rpt ON rr.institution_id = rpt.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND rpt.transaction_date >= '2023-01-01' AND rpt.transaction_date < '2024-01-01' AND rpt.transaction_amount > 1000	supervise
SELECT lr.liquidity_coverage_ratio, fii.institution_type FROM liquidity_ratio lr JOIN financial_institution_info fii ON lr.institution_id = fii.institution_id	supervise
SELECT DISTINCT institution_id FROM related_party_transactions WHERE transaction_date >= '2023-10-01' AND transaction_date < '2023-11-01' AND transaction_amount > 10000000	supervise
SELECT fi.institution_name, COUNT(rpt.approval_status) FILTER (WHERE rpt.approval_status = '未通过') * 1.0 / COUNT(rpt.approval_status) AS failure_rate FROM related_party_transactions rpt JOIN financial_institution_info fi ON rpt.institution_id = fi.institution_id WHERE rpt.transaction_date >= '2023-01-01' GROUP BY fi.institution_name ORDER BY failure_rate DESC LIMIT 1	supervise
SELECT fi.institution_name, re.operational_risk_exposure / re.total_risk_exposure AS op_risk_ratio FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id WHERE EXTRACT(YEAR FROM re.report_date) = 2023 ORDER BY op_risk_ratio DESC LIMIT 1	supervise
SELECT DISTINCT institution_id FROM regulatory_reports WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01' AND comments IS NOT NULL	supervise
SELECT npl.*, fi.institution_name FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id WHERE npl.report_date = '2023-03-01'	supervise
SELECT institution_name FROM financial_institution_info WHERE legal_representative LIKE '王%'	supervise
SELECT fii.institution_name, car.total_car FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE car.report_date >= '2023-01-01' AND car.report_date < '2023-04-01' AND car.total_car > 10.0	supervise
