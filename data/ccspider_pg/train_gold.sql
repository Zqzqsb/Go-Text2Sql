SELECT d.name AS department_name, COUNT(e.employee_id) AS employee_count FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.rating = 'A+' GROUP BY d.name ORDER BY employee_count DESC LIMIT 1	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-06' AND ar.check_in > '09:30:00' AND pe.rating = 'A+' AND pe.evaluation_date <= '2024-10-06'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-08' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND a.check_in > '09:30:00' AND a.check_out < '21:00:00'	hr
SELECT e.employee_id, e.name FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND pe.evaluation_date >= '2023-01-01' AND pe.evaluation_date < '2024-01-01' AND pe.rating = 'A'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-06' AND d.name = '法务部' AND a.check_in > '08:00:00'	hr
SELECT COUNT(DISTINCT employee_id) FROM employees WHERE major IS NOT NULL AND major <> '' AND employee_id IN (SELECT employee_id FROM employees WHERE major IS NOT NULL AND major <> '' GROUP BY employee_id HAVING COUNT(DISTINCT major) > 1)	hr
SELECT e.name, d.name AS department_name, ar.check_out FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-19' AND e.remaining_annual_leave > 10	hr
SELECT e.name, e.employee_id FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.year = 2024 AND a.award_name = '最佳团队奖'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-27' AND p.rating = 'B+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-06' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'A+'	hr
SELECT ar.id, ar.employee_id, ar.date, ar.check_in, ar.check_out FROM attendance_records ar JOIN awards a ON ar.employee_id = a.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2022 AND ar.date = '2024-09-17'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '最佳团队奖' AND a.year = 2022 AND pe.rating = 'D' AND pe.evaluation_date >= '2023-01-01'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-10-13' AND a.check_in < '09:00:00' AND e.university = '清华大学'	hr
SELECT e.name, e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-08' AND p.rating = 'A'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '行政部' AND a.date = '2024-09-16' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-18' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 10 AND p.rating = 'A+'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-30' AND a.check_in > '09:00:00' AND p.rating = 'B+'	hr
SELECT e.name, e.remaining_annual_leave FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-22' AND e.remaining_annual_leave < 10	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-17' ORDER BY d.name	hr
SELECT university, AVG(EXTRACT(YEAR FROM AGE(date('now'), hire_date))) AS avg_tenure FROM employees GROUP BY university ORDER BY avg_tenure DESC LIMIT 1	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-21' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND d.name = '客户服务部'	hr
SELECT pe.rating FROM performance_evaluations pe JOIN awards a ON pe.employee_id = a.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2022 AND pe.evaluation_date >= '2023-01-01' AND pe.evaluation_date < '2024-01-01'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-06' AND a.check_in > '09:00:00' AND p.rating = 'D'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '最佳团队奖' AND a.year = 2022 AND ar.date = '2024-10-09' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-03' AND d.name = '人力资源部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-24' AND a.check_in > '09:00:00' AND p.rating = 'D'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '人力资源部' AND a.date = '2024-09-19' AND a.check_in > '08:30:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, d.manager_id FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-21' AND ar.check_in > '09:00:00'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05' AND e.hire_date > '2022-01-25'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-23' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'D'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-06' AND p.rating = 'D'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND a.award_name = '领导力奖' AND pe.rating = 'B+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-09-06' AND pe.rating = 'B+'	hr
SELECT d.name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE pe.evaluation_date >= date('now') - INTERVAL '2 years' GROUP BY d.name ORDER BY COUNT(e.employee_id) DESC	hr
SELECT e.name, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-21' AND a.check_in = '08:54:58' AND a.check_out = '18:05:12'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-21'	hr
SELECT ar.id, ar.employee_id, ar.date, ar.check_in, ar.check_out FROM attendance_records ar JOIN awards a ON ar.employee_id = a.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2022 AND ar.date = '2024-09-17'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '创新奖' AND a.year = 2023	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-02' AND ar.check_in > '09:30:00'	hr
SELECT d.department_id, d.name AS department_name, COUNT(a.id) AS innovation_count, SUM(e.remaining_annual_leave) AS budget_investment FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id LEFT JOIN awards a ON e.employee_id = a.employee_id AND a.year >= EXTRACT(YEAR FROM date('now')) - 5 GROUP BY d.department_id, d.name	hr
SELECT e.remaining_annual_leave, a.date, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.employee_id = 'H03961' AND EXTRACT(YEAR FROM a.date) = 2024	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-30' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_out, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-30' AND a.check_out > '16:00:00' AND p.rating = 'C'	hr
SELECT AVG(interview_count) FROM interviews WHERE employee_id IN (SELECT employee_id FROM performance_evaluations WHERE rating IN ('A+', 'A', 'B+'))	hr
SELECT e.department_id, AVG(EXTRACT(HOUR FROM a.check_in) * 60 + EXTRACT(MINUTE FROM a.check_in)) AS avg_commute_time FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id GROUP BY e.department_id	hr
SELECT e.name, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.date = '2024-09-25'	hr
SELECT e.name, e.hire_date, a.award_name, a.year FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '创新奖' AND a.year = 2020 AND e.hire_date > '2019-12-22'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-27' AND d.name = '行政部'	hr
SELECT * FROM performance_evaluations ORDER BY evaluation_date	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-28' AND a.check_in > '09:00:00' AND p.rating = 'A'	hr
SELECT COUNT(*) FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.manager_id = 'H03372' AND e.car_plate IS NULL	hr
SELECT e.name, e.employee_id, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-07' AND a.check_in > '09:30:00' AND d.manager_id = 'H05487'	hr
SELECT d.name AS department_name, COUNT(DISTINCT e.employee_id) AS total_employees, COUNT(DISTINCT le.employee_id) AS lost_employees, COUNT(DISTINCT le.employee_id) * 1.0 / COUNT(DISTINCT e.employee_id) AS turnover_rate FROM departments d JOIN employees e ON d.department_id = e.department_id LEFT JOIN ( SELECT a.employee_id FROM awards a WHERE a.year = EXTRACT(YEAR FROM date('now')) - 1 GROUP BY a.employee_id ORDER BY COUNT(a.id) DESC LIMIT 1 ) aw ON e.employee_id = aw.employee_id LEFT JOIN ( SELECT pe.employee_id FROM probation_employees pe WHERE pe.status = '离职' ) le ON e.employee_id = le.employee_id GROUP BY d.name	hr
SELECT e.department_id, d.name AS department_name, AVG(EXTRACT(EPOCH FROM (a.check_out - a.check_in)) / 3600) AS avg_overtime_hours FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id JOIN departments d ON e.department_id = d.department_id WHERE p.rating = 'A+' GROUP BY e.department_id, d.name ORDER BY avg_overtime_hours DESC LIMIT 1	hr
SELECT e.name, e.remaining_annual_leave FROM employees e WHERE e.department_id = 'D00003' AND EXTRACT(YEAR FROM e.hire_date) = 2024 ORDER BY e.remaining_annual_leave DESC LIMIT 1	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2022 AND ar.date = '2024-09-26'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '客户满意度奖' AND a.year = 2020 AND ar.date = '2024-10-05' AND ar.check_in > '09:00:00'	hr
SELECT d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-07-14' AND pe.rating = 'C'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-15' AND a.check_in > '09:00:00' AND d.name = '行政部'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '技术突破奖' AND a.year = 2022 AND ar.date = '2024-09-19' AND ar.check_in > '09:00:00'	hr
SELECT e.department_id, d.name AS department_name, COUNT(p.employee_id) * 1.0 / COUNT(e.employee_id) AS probation_ratio FROM employees e LEFT JOIN probation_employees p ON e.employee_id = p.employee_id JOIN departments d ON e.department_id = d.department_id GROUP BY e.department_id, d.name ORDER BY probation_ratio DESC LIMIT 1	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-26' ORDER BY d.name	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '领导力奖' AND aw.year = 2023 AND a.date = '2024-10-04' AND a.check_in > '09:00:00'	hr
SELECT e.employee_id, e.name, AVG(e.remaining_annual_leave) AS avg_remaining_annual_leave FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.year = 2023 GROUP BY e.employee_id, e.name	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-17' AND d.name = '运营部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-26' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.name AS employee_name, d.name AS department_name, a.award_name FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN awards a ON e.employee_id = a.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.year = 2023	hr
SELECT e.name, e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-01' AND p.rating = 'B'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND d.name = '财务部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-13' AND d.name = '行政部' AND a.check_in > '09:00:00'	hr
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.department_id = 'D00003' AND a.date >= '2024-01-01' AND a.date <= '2024-12-31' AND a.check_in < '09:00:00'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-04-09' AND pe.rating = 'A'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-26' AND a.check_in BETWEEN '08:00:00' AND '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-26' AND a.check_in > '09:00:00' AND p.rating = 'A'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-22' AND a.check_in BETWEEN '08:00:00' AND '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '客户满意度奖' AND pe.rating = 'A' AND a.year = 2023	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-01' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.employee_id, e.name, pe.start_date, pe.end_date, pe.status, p.rating FROM employees e JOIN probation_employees pe ON e.employee_id = pe.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE p.rating IN ('A+', 'A', 'B+') AND p.evaluation_date > pe.end_date	hr
SELECT e.name AS employee_name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-09' AND a.check_in > '09:00:00' AND d.name = '行政部'	hr
SELECT e.name, a.award_name, p.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.year = 2023 AND a.award_name = '项目管理奖' AND p.rating IN ('B', 'A+')	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-09' AND d.name = '行政部' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) > 9	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '领导力奖' AND a.year = 2023	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-16' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08' AND d.name = '人力资源部' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-29'	hr
SELECT e.name, e.employee_id, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-03' AND a.check_in > '09:00:00' AND d.name = '市场部'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-23' AND d.name = '法务部'	hr
SELECT e.name, e.employee_id FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-04-26' AND pe.rating = 'B' AND d.name = '客户服务部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '人力资源部' AND a.date = '2024-09-21' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-10-13' AND a.check_in < '09:30:00'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-29' AND d.name = '法务部' AND (a.check_out - a.check_in) > '12:00:00'	hr
SELECT d.name AS department_name, e.employee_type, e.position, e.university, e.major, e.remaining_annual_leave, a.award_name, i.interview_count, p.status FROM departments d JOIN employees e ON d.department_id = e.department_id LEFT JOIN awards a ON e.employee_id = a.employee_id LEFT JOIN interviews i ON e.employee_id = i.employee_id LEFT JOIN probation_employees p ON e.employee_id = p.employee_id WHERE d.department_id = ( SELECT e.department_id FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id WHERE pe.evaluation_date >= date('now') - INTERVAL '3 years' GROUP BY e.department_id ORDER BY AVG(CASE WHEN pe.rating = 'A+' THEN 5 WHEN pe.rating = 'A' THEN 4 WHEN pe.rating = 'B' THEN 3 WHEN pe.rating = 'C' THEN 2 WHEN pe.rating = 'D' THEN 1 ELSE 0 END) DESC LIMIT 1 )	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-26' AND EXTRACT(EPOCH FROM (a.check_out - a.check_in)) / 3600 > 12 AND p.rating = 'C'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-09-25' AND a.check_in > '08:30:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-06' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name, d.manager_id FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-05' AND ar.check_in > '08:30:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-11' AND a.check_in > '09:00:00' AND d.name = '质量控制部'	hr
SELECT employee_id, check_in, check_out FROM attendance_records WHERE date = '2024-10-02'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '复旦大学' AND a.date = '2024-10-08' AND a.check_in > '09:00:00'	hr
SELECT AVG(EXTRACT(YEAR FROM age(date('now'), e.start_work_date))) AS average_work_years FROM ( SELECT a.employee_id, COUNT(*) AS award_count FROM awards a GROUP BY a.employee_id ORDER BY award_count DESC LIMIT 3 ) top_employees JOIN employees e ON top_employees.employee_id = e.employee_id	hr
SELECT e.name, e.position, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-10-08' AND a.check_in > '09:00:00' AND e.position = '助理'	hr
SELECT e.name, pe.rating FROM employees e JOIN attendance_records ar ON e.employee_id = ar.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-08' AND d.name = '销售部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '运营部' AND a.date = '2024-09-19' AND a.check_in > '09:00:00'	hr
SELECT e.employee_id, e.name, COUNT(ar.id) AS attendance_count FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '最佳团队奖' GROUP BY e.employee_id, e.name HAVING COUNT(a.id) >= 2 ORDER BY attendance_count DESC LIMIT 1	hr
SELECT e.university, e.major, e.employee_type, e.position, e.hire_date, e.start_work_date, e.remaining_annual_leave FROM employees e JOIN ( SELECT p.employee_id, AVG(CASE WHEN p.rating = 'A+' THEN 5 WHEN p.rating = 'A' THEN 4 WHEN p.rating = 'B' THEN 3 WHEN p.rating = 'C' THEN 2 WHEN p.rating = 'D' THEN 1 ELSE 0 END) AS avg_rating FROM performance_evaluations p GROUP BY p.employee_id ORDER BY avg_rating DESC LIMIT 5 ) AS top_performers ON e.employee_id = top_performers.employee_id	hr
SELECT employee_id FROM attendance_records WHERE date = '2024-10-02'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-24' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-09-09' AND pe.rating = 'B'	hr
SELECT e.name AS employee_name, d.name AS department_name, FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '创新奖' AND a.year = 2023	hr
SELECT e.department_id, AVG(EXTRACT(EPOCH FROM (a.check_out - a.check_in))) AS avg_attendance_duration FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id GROUP BY e.department_id	hr
SELECT e.name AS employee_name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-29' AND (a.check_out - a.check_in) > '12:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2024	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-25' AND d.name = '客户服务部' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '创新奖' AND a.year = 2023	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-27' AND a.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-28' AND p.rating = 'A'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-15' ORDER BY d.name	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-29' AND d.name = '人力资源部'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND pe.rating = 'B'	hr
SELECT name FROM employees WHERE hire_date > '2020-01-01' AND car_plate = '沪V60523'	hr
SELECT department_id, AVG(remaining_annual_leave) AS avg_remaining_annual_leave FROM employees GROUP BY department_id ORDER BY avg_remaining_annual_leave DESC LIMIT 1	hr
SELECT d.name AS department_name, e.name AS manager_name FROM departments d JOIN employees e ON d.manager_id = e.employee_id	hr
SELECT COUNT(DISTINCT CASE WHEN a.employee_id IS NOT NULL THEN e.employee_id END) / COUNT(DISTINCT e.employee_id) AS award_ratio FROM employees e LEFT JOIN ( SELECT a1.employee_id FROM awards a1 JOIN awards a2 ON a1.employee_id = a2.employee_id AND a1.award_name = '创新奖' AND a2.award_name = '团队合作奖' WHERE a1.year >= EXTRACT(YEAR FROM date('now')) - 3 AND a2.year >= EXTRACT(YEAR FROM date('now')) - 3 ) a ON e.employee_id = a.employee_id	hr
SELECT e.department_id, e.position FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id WHERE pe.evaluation_date >= '2024-10-01' AND pe.evaluation_date < '2024-11-01' AND pe.rating = 'A+'	hr
SELECT d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-30' AND ar.check_in > '09:00:00' AND pe.rating = 'C'	hr
SELECT e.name AS employee_name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN probation_employees p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-27' AND p.status = '在职'	hr
SELECT e.name, e.remaining_annual_leave FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '客户满意度奖' AND a.year = 2024 AND e.remaining_annual_leave > 10	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-28' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.employee_id, e.name FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2021-01-01' AND e.hire_date < '2022-01-01' AND pe.evaluation_date >= '2021-01-01' AND pe.evaluation_date < '2022-01-01' AND pe.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '行政部' AND a.date = '2024-09-20' AND (a.check_out - a.check_in) > '08:00:00'	hr
SELECT e.name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-03' AND ar.check_in > '08:30:00'	hr
SELECT e.name, e.hire_date FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2023 AND e.hire_date < '2020-01-01'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-01' AND d.name = '财务部' AND a.check_in > '09:00:00'	hr
SELECT d.name AS department_name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE pe.evaluation_date = '2022-07-10' AND pe.rating = 'C'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN probation_employees pe ON e.employee_id = pe.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2023 AND pe.end_date <= '2022-04-21'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-10' AND a.check_in > '09:30:00' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-18' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'A'	hr
SELECT a.employee_id, e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND pe.rating = 'A+' AND a.award_name = '领导力奖'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-08-26' AND pe.rating = 'A'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-04' AND d.name = '行政部' AND (a.check_out - a.check_in) > '12:00:00'	hr
SELECT e.name, a.award_name, p.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2024 AND p.rating = 'A'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND a.award_name = '最佳团队奖' AND pe.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.year = 2021	hr
SELECT e.name, e.hire_date, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.hire_date > '2024-09-23' AND a.date = '2024-09-23'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-09-28'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-10-04' AND a.check_in < '08:30:00' AND e.university = '清华大学'	hr
SELECT e.department_id, d.name AS department_name, COUNT(*) AS total_employees, SUM(CASE WHEN pe.status = '离职' THEN 1 ELSE 0 END) AS resigned_employees, SUM(CASE WHEN pe.status = '离职' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) AS resignation_rate FROM probation_employees pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id GROUP BY e.department_id, d.name ORDER BY resignation_rate DESC LIMIT 1	hr
SELECT e.department_id, d.name AS department_name, COUNT(DISTINCT e.employee_id) AS total_employees, COUNT(DISTINCT CASE WHEN pe.status = '离职' THEN pe.employee_id END) AS离职人数, COUNT(DISTINCT CASE WHEN pe.status = '转正' THEN pe.employee_id END) AS入职人数, COUNT(DISTINCT CASE WHEN pe.status = '离职' THEN pe.employee_id END) * 1.0 / COUNT(DISTINCT e.employee_id) AS离职率, COUNT(DISTINCT CASE WHEN pe.status = '转正' THEN pe.employee_id END) * 1.0 / COUNT(DISTINCT e.employee_id) AS入职率 FROM employees e LEFT JOIN probation_employees pe ON e.employee_id = pe.employee_id AND pe.end_date >= date('now') - INTERVAL '3 years' JOIN departments d ON e.department_id = d.department_id GROUP BY e.department_id, d.name	hr
SELECT e.name AS employee_name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-24' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-03' AND d.name = '销售部' AND a.check_in > '09:00:00'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-16' AND e.employee_type = '实习生'	hr
SELECT e.name, COUNT(*) AS late_count FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id WHERE ar.date >= date('now') - INTERVAL '3 months' AND ar.check_in > '09:00:00' GROUP BY e.name ORDER BY late_count DESC LIMIT 1	hr
SELECT e.name, e.university, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-09-20' AND a.check_in > '08:30:00'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-19' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05' AND a.check_in > '08:30:00' AND d.name = '人力资源部'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND d.name = '运营部'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-01' AND p.rating = 'B+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-16' AND d.name = '财务部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-09' AND d.name = '人力资源部' AND p.rating = 'A'	hr
SELECT e.name, e.remaining_annual_leave FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE pe.evaluation_date = '2022-01-08' AND ar.date = '2024-09-30'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-06' AND d.name = '人力资源部' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 9	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2022-01-01' AND e.hire_date < '2023-01-01' AND a.year = 2023 AND pe.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-01' AND d.name = '质量控制部' AND a.check_in > '09:00:00'	hr
SELECT employee_id, AVG(EXTRACT(HOUR FROM check_in)) AS avg_check_in_hour, AVG(EXTRACT(HOUR FROM check_out)) AS avg_check_out_hour FROM attendance_records GROUP BY employee_id ORDER BY ABS(AVG(EXTRACT(HOUR FROM check_in)) - 9) + ABS(AVG(EXTRACT(HOUR FROM check_out)) - 18) DESC LIMIT 1	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-13' AND a.check_in > '09:00:00' AND d.name = '客户服务部'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-02' AND ar.check_in > '09:00:00' AND pe.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-27' AND d.name = '人力资源部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05' AND d.name = '客户服务部' AND a.check_in > '09:00:00'	hr
SELECT a.employee_id, e.name, a.award_name, p.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.year = 2024 AND a.award_name = '领导力奖' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND d.name = '行政部' AND a.check_in > '09:00:00'	hr
WITH overtime_records AS (SELECT employee_id, date_trunc('quarter', date) AS quarter, EXTRACT(EPOCH FROM (check_out - check_in)) / 3600 AS work_hours FROM attendance_records WHERE check_out - check_in > '08:00:00' AND date >= date('now') - INTERVAL '3 years'), department_overtime AS (SELECT e.department_id, o.quarter, SUM(o.work_hours) AS total_overtime FROM overtime_records o JOIN employees e ON o.employee_id = e.employee_id GROUP BY e.department_id, o.quarter), max_overtime AS (SELECT quarter, MAX(total_overtime) AS max_overtime FROM department_overtime GROUP BY quarter) SELECT d.quarter, d.department_id FROM department_overtime d JOIN max_overtime m ON d.quarter = m.quarter AND d.total_overtime = m.max_overtime ORDER BY d.quarter	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-10' AND d.name = '研发部'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08' AND d.name = '运营部' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 9	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-09-19' AND (a.check_out - a.check_in) > '08:00:00'	hr
SELECT d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date >= '2022-01-01' AND pe.evaluation_date < '2023-01-01' ORDER BY pe.rating DESC LIMIT 1	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05' AND a.check_in < '09:30:00' AND d.name = '研发部'	hr
SELECT e.name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '最佳团队奖' AND a.year = 2020 AND pe.evaluation_date > '2020-02-23'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-10' AND e.remaining_annual_leave < 5	hr
SELECT e.name, d.name AS department_name, CASE WHEN a.check_in > '09:30:00' THEN '迟到' ELSE '正常' END AS attendance_status FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-06'	hr
SELECT pe.employee_id, pe.status, pe.end_date, pe.status, p.rating FROM probation_employees pe JOIN performance_evaluations p ON pe.employee_id = p.employee_id WHERE pe.end_date >= '2024-01-01' AND pe.end_date <= '2024-12-31' AND pe.status = '转正' ORDER BY pe.employee_id	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2024 AND pe.rating = 'D'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND d.name = '行政部'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-25' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 12 AND p.rating = 'A+'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-13' AND ar.check_in > '08:30:00' AND pe.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-03' AND a.check_in > '09:00:00' AND d.name = '质量控制部'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-20' AND a.check_in > '09:00:00' AND d.name = '人力资源部'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out, (a.check_out - a.check_in) AS work_duration FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-07' AND d.name = '销售部' AND (a.check_out - a.check_in) > '10:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-06' AND a.check_in > '09:00:00' AND d.name = '法务部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-23' AND d.name = '质量控制部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, d.name AS department_name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND a.check_in > '09:00:00' AND d.manager_id = 'H00842'	hr
SELECT e.name AS employee_name, d.name AS department_name, m.name AS manager_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN employees m ON d.manager_id = m.employee_id WHERE pe.evaluation_date = '2023-06-08' AND pe.rating = 'D'	hr
SELECT COUNT(*) FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE e.phone_number LIKE '125%' AND d.name = '销售部'	hr
SELECT d.name AS department_name, e.name AS employee_name, p.rating, a.check_in FROM performance_evaluations p JOIN employees e ON p.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN attendance_records a ON e.employee_id = a.employee_id AND a.date = '2023-09-18' WHERE p.evaluation_date = '2023-10-07' AND p.rating = 'A+' AND (a.check_in > '08:30:00' OR a.check_in IS NULL)	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '销售冠军' AND aw.year = 2024 AND a.date = '2024-09-15' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND d.name = '客户服务部' AND a.check_in > '09:00:00'	hr
SELECT e.name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-08-12' AND pe.rating = 'B'	hr
SELECT employee_id, award_name FROM awards WHERE year = 2024	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-06' AND a.check_in > '09:00:00' AND a.check_out < '23:00:00'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN interviews i ON e.employee_id = i.employee_id WHERE a.year = 2023 AND a.award_name = '质量改进奖' AND i.interview_date BETWEEN '2022-01-01' AND '2022-12-31' AND pe.rating = 'B+'	hr
SELECT * FROM employees WHERE hire_date > '2020-12-31' AND phone_number LIKE '125%'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-17' AND ar.check_in > '09:00:00'	hr
SELECT e.name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-08' AND (ar.check_out - ar.check_in) > '12:00:00'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-21' AND a.check_in > '08:30:00' AND e.university = '复旦大学'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-05' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-10' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-04' AND a.check_in > '09:00:00' AND d.name = '运营部'	hr
SELECT d.department_id, AVG(EXTRACT(YEAR FROM age(e.start_work_date))) AS avg_work_years FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_id	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-09-19' AND (a.check_out - a.check_in) > '12:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-30' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-18' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-13' AND d.name = '行政部' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 9	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND a.award_name = '领导力奖' AND pe.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05' AND a.check_in > '09:00:00' AND d.name = '法务部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-29' AND d.name = '客户服务部' AND a.check_in > '09:00:00'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-12' AND ar.check_in > '09:00:00' AND pe.rating = 'C'	hr
SELECT e.name AS employee_name, d.name AS department_name, ar.check_in, ar.check_out FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-11'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-27' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'A+'	hr
SELECT COUNT(DISTINCT e.employee_id) * 1.0 / COUNT(DISTINCT a.employee_id) AS retention_rate FROM awards a JOIN employees e ON a.employee_id = e.employee_id WHERE a.year = EXTRACT(YEAR FROM date('now')) - 1 AND EXISTS (SELECT 1 FROM attendance_records ar WHERE ar.employee_id = a.employee_id AND EXTRACT(YEAR FROM ar.date) = EXTRACT(YEAR FROM date('now')))	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '技术突破奖' AND aw.year = 2023 AND a.date = '2024-10-14' AND a.check_in > '08:30:00'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.year = 2023	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.year = 2023 AND pe.rating = 'A+'	hr
SELECT e.employee_id, e.department_id, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.department_id ORDER BY e.hire_date ASC LIMIT 10	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-22' AND a.check_in > '09:00:00' AND e.university = '清华大学'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-01' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 12 AND p.rating = 'A'	hr
SELECT e.employee_id, e.name FROM employees e LEFT JOIN awards a ON e.employee_id = a.employee_id WHERE e.hire_date >= '2023-01-01' AND (a.employee_id IS NULL OR a.year != 2023)	hr
SELECT e.name, e.position, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id WHERE a.date = '2024-10-12' AND a.check_in > '09:00:00' AND e.position = '总监'	hr
SELECT e.name, a.check_in, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-20' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND a.check_in > '09:00:00' AND d.name = '质量控制部'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-08' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-19' AND ar.check_in > '09:00:00'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-01' AND a.check_in < '09:00:00'	hr
SELECT e.name, p.status FROM employees e JOIN probation_employees p ON e.employee_id = p.employee_id WHERE p.status = '在职'	hr
SELECT hire_date, remaining_annual_leave FROM employees	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-14' AND a.check_in < '09:00:00' AND p.rating = 'A'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out, (a.check_out - a.check_in) AS work_duration FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-27' AND d.name = '客户服务部' AND (a.check_out - a.check_in) > '10:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-03' AND a.check_in > '08:30:00' AND d.name = '质量控制部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-09-15' AND a.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '技术突破奖' AND a.year = 2022 AND pe.rating = 'A+' AND pe.evaluation_date >= '2022-01-01' AND pe.evaluation_date < '2023-01-01'	hr
SELECT COUNT(*) FROM performance_evaluations pe JOIN probation_employees p ON pe.employee_id = p.employee_id WHERE pe.rating = 'C' AND p.status = '离职' AND p.end_date >= pe.evaluation_date AND p.end_date <= pe.evaluation_date + INTERVAL '6 months'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-10-28' AND pe.rating = 'D'	hr
SELECT e.employee_id, e.name, e.remaining_annual_leave, SUM(EXTRACT(EPOCH FROM (a.check_out - a.check_in)) / 3600) AS total_overtime_hours FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id GROUP BY e.employee_id, e.name, e.remaining_annual_leave ORDER BY e.remaining_annual_leave DESC, total_overtime_hours DESC LIMIT 1	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-09-19' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-07-13' AND pe.rating = 'D'	hr
SELECT EXTRACT(YEAR FROM AGE(date('now'), e.birth_date)) AS age_group, AVG(EXTRACT(EPOCH FROM (a.check_out - a.check_in)) / 3600) AS avg_overtime_hours, AVG(CASE WHEN pe.rating = 'A+' THEN 5 WHEN pe.rating = 'A' THEN 4 WHEN pe.rating = 'B' THEN 3 WHEN pe.rating = 'C' THEN 2 WHEN pe.rating = 'D' THEN 1 ELSE 0 END) AS avg_performance_rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id GROUP BY age_group ORDER BY age_group	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '创新奖' AND a.year = 2023	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id ORDER BY e.hire_date DESC LIMIT 1	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-23' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-20' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-10-14' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.date, a.check_in, a.check_out, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-06' AND p.rating = 'A'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-07' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-12' AND ar.check_in > '09:00:00' AND pe.rating = 'A+'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2022 AND ar.date = '2024-10-07' AND ar.check_in > '08:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '销售冠军' AND aw.year = 2023 AND a.date = '2024-09-22' AND a.check_in > '09:00:00'	hr
SELECT CASE WHEN (SELECT employee_id FROM awards WHERE award_name = '创新奖' GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1) = (SELECT employee_id FROM awards WHERE award_name = '专利奖' GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1) THEN '是' ELSE '否' END AS result	hr
SELECT e.employee_id, e.start_work_date, e.remaining_annual_leave FROM employees e WHERE (EXTRACT(YEAR FROM AGE(date('now'), e.start_work_date)) * 5) <> e.remaining_annual_leave	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2020 AND a.award_name = '技术突破奖' AND pe.evaluation_date = '2023-09-25' AND pe.rating = 'D'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-19' AND a.check_in > '09:00:00' AND p.rating = 'A'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-21' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-13' AND ar.check_in > '09:00:00'	hr
SELECT e.name, COUNT(i.id) AS interview_count FROM interviews i JOIN employees e ON i.employee_id = e.employee_id WHERE i.interview_date >= datetime('now') - INTERVAL '1 year' GROUP BY e.name ORDER BY interview_count DESC LIMIT 5	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-29' ORDER BY d.name	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-29' AND p.rating = 'C'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-10' AND a.check_in > '09:00:00' AND d.name = '行政部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-23' AND a.check_in > '09:00:00' AND d.name = '质量控制部'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '创新奖' AND a.year = 2022 AND ar.date = '2024-10-09' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, d.name AS department_name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-14' AND a.check_in > '09:30:00' AND d.manager_id = 'H05487'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.year = 2023	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.year = 2021 AND a.award_name = '优秀员工'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-17' AND a.check_in > '09:00:00' AND d.name = '财务部'	hr
SELECT e.name AS employee_name, d.name AS department_name, a.award_name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.year = 2023	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-14' AND d.name = '行政部' AND (a.check_out - a.check_in) > '08:00:00'	hr
SELECT e.name, a.award_name, p.evaluation_date, p.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.year = 2022 AND a.award_name = '质量改进奖' AND p.evaluation_date > '2022-01-01'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out, (a.check_out - a.check_in) AS work_duration FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-19' AND d.name = '法务部' AND (a.check_out - a.check_in) > '10:00:00'erval	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-15' AND ar.check_in > '08:30:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-14' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.year = 2023 AND aw.award_name = '领导力奖' AND a.date = '2024-10-14' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-12' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2022-01-01' AND e.hire_date < '2023-01-01' AND a.year = 2022	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '销售冠军' AND a.year = 2022	hr
SELECT department_id FROM employees GROUP BY department_id ORDER BY MAX(EXTRACT(YEAR FROM AGE(birth_date))) - MIN(EXTRACT(YEAR FROM AGE(birth_date))) DESC LIMIT 1	hr
SELECT e.name, e.employee_id, AVG(EXTRACT(EPOCH FROM (ar.check_out - ar.check_in)) / 3600) AS avg_work_hours FROM employees e JOIN attendance_records ar ON e.employee_id = ar.employee_id JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2022 GROUP BY e.name, e.employee_id HAVING AVG(EXTRACT(EPOCH FROM (ar.check_out - ar.check_in)) / 3600) > 9	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '技术突破奖' AND a.year = 2023 AND pe.evaluation_date = '2023-10-04' AND pe.rating = 'B+'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-03' AND a.check_in > '09:00:00' AND p.rating = 'A'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-06' AND d.name = '财务部' AND a.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2023 AND ar.date = '2024-10-08' AND ar.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN interviews i ON e.employee_id = i.employee_id WHERE a.award_name = '客户满意度奖' AND a.year = 2022 AND i.interview_date > '2022-10-12'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '技术突破奖' AND a.year = 2023	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '客户满意度奖' AND a.year = 2022	hr
SELECT e.name AS employee_name, d.name AS department_name, d.manager_id FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-30' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-20' AND d.name = '行政部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-09' AND d.name = '销售部' AND a.check_in > '09:00:00'	hr
SELECT e.name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-26' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, d.name AS department_name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-27' AND a.check_in > '09:00:00' AND d.manager_id = 'H04319'	hr
SELECT AVG(e.remaining_annual_leave) AS avg_remaining_annual_leave FROM awards a JOIN employees e ON a.employee_id = e.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2023 AND e.hire_date < '2015-01-01'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-19' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-07' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'A+'	hr
SELECT e.name, e.employee_id FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE pe.evaluation_date = '2023-09-23' AND ar.date = '2024-10-12'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-09-23' AND a.check_in > '09:00:00'	hr
SELECT DISTINCT pe.employee_id FROM performance_evaluations pe JOIN (SELECT employee_id, COUNT(*) AS training_count FROM attendance_records WHERE check_in IS NOT NULL AND check_out IS NOT NULL GROUP BY employee_id HAVING COUNT(*) > 1) ar ON pe.employee_id = ar.employee_id WHERE pe.rating IN ('A+', 'A', 'B+', 'B') ORDER BY pe.employee_id	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-01' AND a.check_in > '09:00:00' AND p.rating = 'B+'	hr
SELECT e.name, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-09' AND a.check_out > '21:00:00' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '行政部' AND a.date = '2024-10-07' AND a.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '客户满意度奖' AND a.year = 2023 AND pe.rating = 'B+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '行政部' AND a.date = '2024-09-19' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-07-21' AND pe.rating = 'D'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2023 AND ar.date = '2024-10-13'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-07-09' AND pe.rating = 'B'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-10-18' AND pe.rating = 'A'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-16' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2022 AND ar.date = '2024-09-21'	hr
SELECT e.name, i.interview_count FROM employees e JOIN probation_employees pe ON e.employee_id = pe.employee_id JOIN interviews i ON e.employee_id = i.employee_id WHERE pe.status = '离职' ORDER BY i.interview_count DESC LIMIT 1	hr
SELECT EXTRACT(MONTH FROM birth_date) AS birth_month, COUNT(*) AS employee_count FROM employees GROUP BY birth_month ORDER BY employee_count DESC LIMIT 1	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-05-20' AND pe.rating = 'B'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-17' AND ar.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2024 AND ar.date = '2024-10-12'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-09-20' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-06-12' AND pe.rating = 'A'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2021 AND a.award_name = '质量改进奖' AND pe.rating = 'B'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-10-15' AND pe.rating = 'D'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-16' AND d.name = '行政部' AND (a.check_out - a.check_in) > '12:00:00'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND d.name = '人力资源部' AND a.check_in < '09:00:00'	hr
SELECT d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-04-12' AND pe.rating = 'A+'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2022 AND a.award_name = '最佳团队奖' AND pe.rating = 'A' AND pe.evaluation_date >= '2022-01-01' AND pe.evaluation_date < '2023-01-01'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-02' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-30' AND a.check_in > '09:00:00' AND p.rating = 'B+'	hr
SELECT e.name AS employee_name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-17'	hr
SELECT e.name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-25' AND ar.check_in > '09:00:00' AND pe.rating = 'B'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-07' ORDER BY d.name	hr
SELECT pe.rating FROM performance_evaluations pe JOIN awards a ON pe.employee_id = a.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2024 AND pe.evaluation_date BETWEEN '2023-01-01' AND '2023-12-31'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '客户满意度奖' AND a.year = 2023 AND pe.evaluation_date = '2023-06-01' AND pe.rating = 'B+'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-03' AND d.name = '法务部' AND (a.check_out - a.check_in) > '10:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-10-11' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, d.name AS department_name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND d.name = '财务部'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-10' AND a.check_in > '09:00:00' AND d.name = '财务部'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-17' AND d.name = '销售部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-13' AND d.name = '财务部' AND p.rating = 'A'	hr
SELECT e.employee_id, e.name, pe.start_date, pe.end_date, pe.status, p.evaluation_date, p.rating FROM employees e JOIN probation_employees pe ON e.employee_id = pe.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE pe.start_date >= datetime('now') - INTERVAL '2 years' AND pe.status = '转正' ORDER BY e.employee_id, p.evaluation_date	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-23' AND a.check_in > '09:00:00' AND d.name = '销售部'	hr
SELECT e.name, a.award_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN awards a ON e.employee_id = a.employee_id WHERE ar.date = '2024-09-24' AND ar.check_in > '09:00:00' AND a.year = 2021	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id AND pe.evaluation_date = '2024-10-14' WHERE ar.date = '2024-10-14'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '法务部' AND a.date = '2024-09-24' AND a.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN departments d ON e.employee_id = d.manager_id JOIN probation_employees pe ON e.employee_id = pe.employee_id WHERE pe.status = '转正' GROUP BY e.name ORDER BY COUNT(*) DESC LIMIT 1	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-08-16'	hr
SELECT e.name, e.hire_date, a.award_name FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '新人奖' AND a.year = 2024 AND e.hire_date >= '2021-01-01' AND e.hire_date <= '2021-12-31'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2021 AND a.award_name = '技术突破奖' AND pe.rating = 'B+' AND pe.evaluation_date >= '2021-01-01' AND pe.evaluation_date < '2022-01-01'	hr
SELECT department_id, COUNT(*) FILTER (WHERE employee_type = '本科生') * 1.0 / COUNT(*) AS undergraduate_ratio, COUNT(*) FILTER (WHERE employee_type = '硕士生') * 1.0 / COUNT(*) AS master_ratio, COUNT(*) FILTER (WHERE employee_type = '博士生') * 1.0 / COUNT(*) AS doctoral_ratio FROM employees GROUP BY department_id	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08' AND a.check_in > '08:30:00' AND d.name = '销售部'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-16' AND a.check_in > '09:00:00' AND p.rating = 'B+'	hr
SELECT d.name AS department_name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE pe.evaluation_date = '2023-03-12' AND pe.rating = 'C'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-08-12' ORDER BY d.name	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-10-11' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '质量控制部' AND a.date = '2024-10-11' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-13' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'B'	hr
SELECT ar.id, ar.employee_id, ar.date, ar.check_in, ar.check_out FROM attendance_records ar JOIN awards a ON ar.employee_id = a.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2021 AND ar.date = '2024-10-10'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2020 AND pe.rating = 'A+'	hr
SELECT e.name, d.name AS department_name, ar.check_in, ar.check_out FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-24' AND d.name = '人力资源部'	hr
SELECT e.name, e.remaining_annual_leave FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.year = 2021 AND a.award_name = '项目管理奖' AND d.name = '客户服务部' AND e.remaining_annual_leave > 10	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND a.award_name = '新人奖' AND pe.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-16' AND d.name = '销售部'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-06' AND a.check_in > '08:30:00' AND p.rating = 'C'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2023 AND ar.date = '2024-10-13' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-13' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-27' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-04' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT e.name, a.date, p.rating FROM awards a1 JOIN employees e ON a1.employee_id = e.employee_id JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a1.year = 2024 AND a1.award_name = '新人奖' AND a.date = '2024-10-05'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '领导力奖' AND a.year = 2023 AND ar.date >= '2024-01-01' AND ar.date <= '2024-12-31'	hr
SELECT e.name, a.award_name, p.evaluation_date, p.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.year = 2021 AND a.award_name = '创新奖' AND p.evaluation_date > '2021-09-12'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-18' AND e.university = '清华大学'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '行政部' AND a.date = '2024-09-23'	hr
SELECT employee_id, phone_number, car_plate, major FROM employees	hr
SELECT e.name, COUNT(i.id) AS interview_count FROM interviews i JOIN employees e ON i.employee_id = e.employee_id WHERE EXTRACT(YEAR FROM i.interview_date) = EXTRACT(YEAR FROM date('now')) GROUP BY e.name ORDER BY interview_count DESC LIMIT 1	hr
SELECT a.employee_id, e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND pe.rating = 'A+' AND a.award_name = '新人奖'	hr
SELECT e.name, e.hire_date, p.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.year = 2024 AND a.award_name = '新人奖' AND e.hire_date > '2023-11-26' AND p.rating = 'C'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-09-20' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '领导力奖' AND a.year = 2023 AND pe.rating = 'A+'	hr
WITH yearly_counts AS (SELECT d.department_id, EXTRACT(YEAR FROM i.interview_date) AS year, COUNT(*) AS interview_count FROM interviews i JOIN employees e ON i.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE i.interview_date >= date('now') - INTERVAL '3 years' GROUP BY d.department_id, EXTRACT(YEAR FROM i.interview_date)), yearly_growth AS (SELECT yc1.department_id, yc1.year, yc1.interview_count, yc1.interview_count - COALESCE(yc2.interview_count, 0) AS growth FROM yearly_counts yc1 LEFT JOIN yearly_counts yc2 ON yc1.department_id = yc2.department_id AND yc1.year = yc2.year + 1) SELECT yg.department_id FROM yearly_growth yg JOIN departments d ON yg.department_id = d.department_id GROUP BY yg.department_id ORDER BY SUM(yg.growth) DESC LIMIT 1	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2021-07-12' AND pe.rating = 'A'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2022-01-01' AND e.hire_date <= '2022-12-31' AND a.year = 2022 AND pe.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-01' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-10' AND ar.check_in > '08:30:00' AND pe.rating = 'B'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out, (a.check_out - a.check_in) AS work_duration FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-21' AND d.name = '财务部' AND (a.check_out - a.check_in) > '10:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2023 AND a.award_name = '技术突破奖' AND pe.evaluation_date >= '2023-01-01' AND pe.evaluation_date < '2024-01-01' AND pe.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-27' AND d.name = '行政部'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-07' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE p.evaluation_date = '2023-08-01' AND a.date = '2024-10-02' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-16' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '销售冠军' AND aw.year = 2024 AND a.date = '2024-10-11' AND a.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '领导力奖' AND a.year = 2023 AND pe.rating = 'C' AND pe.evaluation_date >= '2022-01-01' AND pe.evaluation_date < '2023-01-01'	hr
SELECT e.name, e.hire_date, a.award_name FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '最佳团队奖' AND a.year = 2022 AND e.hire_date >= '2021-01-01'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-09' AND a.check_in > '09:00:00' AND p.rating = 'A'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE e.employee_type = '实习生' AND a.date = '2024-09-20' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2023 AND ar.date = '2024-10-07'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-15' AND a.check_in > '09:00:00' AND p.rating = 'D'	hr
SELECT d.name AS department_name FROM ( SELECT e.department_id, AVG(EXTRACT(EPOCH FROM (a.check_out - a.check_in)) / 3600) AS avg_overtime FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id GROUP BY e.department_id ORDER BY avg_overtime DESC LIMIT 5 ) AS top_departments JOIN departments d ON top_departments.department_id = d.department_id	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-01' AND a.check_in > '08:00:00' AND p.rating = 'B+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '项目管理奖' AND aw.year = 2022 AND a.date = '2024-09-29' AND a.check_in > '09:00:00'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-15' AND a.check_in > '08:00:00' AND a.check_out < '02:00:00'	hr
SELECT e.name, e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-10-02' AND a.check_in > '09:30:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-14' AND ar.check_in > '09:00:00'	hr
SELECT e.name, p.start_date, p.end_date FROM employees e JOIN probation_employees p ON e.employee_id = p.employee_id JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '创新奖' ORDER BY (p.end_date - p.start_date) LIMIT 1	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-26' AND p.rating = 'B'	hr
SELECT e.name, a.award_name, p.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.year = 2024 AND a.award_name = '项目管理奖' AND p.rating IN ('A+', 'A', 'B')	hr
SELECT d.name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN interviews i ON e.employee_id = i.employee_id GROUP BY d.name ORDER BY COUNT(i.id) / (EXTRACT(YEAR FROM AGE(MAX(i.interview_date), MIN(i.interview_date))) * 12 + EXTRACT(MONTH FROM AGE(MAX(i.interview_date), MIN(i.interview_date)))) DESC LIMIT 1	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND a.award_name = '新人奖' AND pe.rating = 'B+'	hr
SELECT e.name, p.status FROM employees e JOIN probation_employees p ON e.employee_id = p.employee_id WHERE p.status = '在职'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-01' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'B+'	hr
SELECT d.department_id, d.name, AVG(e.remaining_annual_leave) AS avg_annual_leave, SUM(EXTRACT(EPOCH FROM (a.check_out - a.check_in)) / 3600) AS total_overtime_hours FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_id, d.name ORDER BY avg_annual_leave DESC, total_overtime_hours DESC LIMIT 1	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-17' AND p.rating = 'A+' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 10	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '客户满意度奖' AND pe.rating = 'A+' AND a.year = 2023	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '技术突破奖' AND a.year = 2023 AND ar.date = '2024-09-22'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '行政部' AND a.date = '2024-09-19' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id WHERE a.date = '2024-10-02' AND a.check_in > '08:30:00' AND e.employee_type = '实习生'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-18' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-23' AND d.name = '运营部' AND p.rating = 'C'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-01' AND d.name = '客户服务部' AND a.check_in > '09:00:00'	hr
SELECT COUNT(*) FROM employees e WHERE e.hire_date <= date('now') - INTERVAL '5 years' AND NOT EXISTS (SELECT 1 FROM performance_evaluations pe WHERE pe.employee_id = e.employee_id AND pe.rating = 'A+')	hr
SELECT e.name, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.date = '2024-10-02'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '最佳团队奖' AND pe.rating = 'A+' AND a.year = 2023	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-19' AND ar.check_in > '09:00:00' AND pe.rating = 'D'	hr
SELECT e.employee_id, e.name FROM employees e WHERE e.hire_date <= date('now') - INTERVAL '5 years' AND NOT EXISTS (SELECT 1 FROM employees e2 WHERE e2.employee_id = e.employee_id AND e2.department_id <> e.department_id AND e2.hire_date < e.hire_date)	hr
SELECT e.employee_id, e.name, pe.rating FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.employee_id IN ( SELECT a.employee_id FROM awards a WHERE a.award_name = '创新奖' ) ORDER BY pe.evaluation_date DESC	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '客户满意度奖' AND a.year = 2022 AND pe.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-04' AND ar.check_in > '09:00:00'	hr
SELECT e.name, pe.start_date, pe.end_date, a.award_name, pe.status, p.rating FROM employees e JOIN probation_employees pe ON e.employee_id = pe.employee_id JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.award_name = '技术突破奖' AND p.rating = 'A+' AND a.year = 2023 AND pe.start_date <= '2023-12-31' AND pe.end_date >= '2023-01-01'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-15' AND EXTRACT(EPOCH FROM (a.check_out - a.check_in)) / 3600 > 12	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-24' AND p.rating = 'B'	hr
SELECT e.employee_id, e.name FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE pe.rating = 'A' AND pe.evaluation_date >= '2024-01-01' AND pe.evaluation_date < '2025-01-01' AND e.birth_date > '1980-12-31'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-24' AND a.check_in > '09:00:00' AND p.rating = 'B+'	hr
SELECT e.name AS employee_name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-29' AND d.name = '行政部'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2024-01-01' AND e.hire_date <= '2024-12-31' AND a.year = 2024 AND pe.rating = 'B'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-07-13' AND pe.rating = 'D'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-30' AND a.check_in > '09:30:00' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-27' AND d.name = '财务部'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-24' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '研发部' AND a.date = '2024-10-05' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.award_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN awards a ON e.employee_id = a.employee_id WHERE ar.date = '2024-10-08' AND ar.check_in > '09:00:00' AND a.year = 2019	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id WHERE a.date = '2024-10-10' AND a.check_in > '09:00:00' AND e.employee_type = '实习生'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-30' AND d.name = '财务部' AND (a.check_out - a.check_in) > '12:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-09' AND d.name = '法务部' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-02' AND ar.check_out > '13:00:00'	hr
SELECT e.name, p.rating FROM employees e JOIN performance_evaluations p ON e.employee_id = p.employee_id JOIN departments d ON e.department_id = d.department_id WHERE p.evaluation_date = '2024-09-19' AND d.name = '财务部'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2023 AND ar.date = '2024-09-20'	hr
SELECT e.name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-27' AND ar.check_out - ar.check_in > '14:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-26'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-10-08' AND a.check_in > '09:00:00' AND e.university = '清华大学'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '新人奖' AND a.year = 2024	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '新人奖' AND aw.year = 2024 AND a.date = '2024-10-10' AND a.check_in > '09:00:00'	hr
SELECT e.name, p.end_date FROM probation_employees p JOIN employees e ON p.employee_id = e.employee_id	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-18' AND a.check_in > '09:00:00' AND d.name = '法务部'	hr
SELECT COUNT(*) FILTER (WHERE end_date <= hire_date + INTERVAL '1 year' AND status = '离职') / COUNT(*) AS turnover_rate FROM probation_employees JOIN employees ON probation_employees.employee_id = employees.employee_id	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-27' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT a.employee_id, a.award_name, p.rating FROM awards a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2024	hr
SELECT evaluation_date FROM performance_evaluations WHERE employee_id = 'H08734'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-03' AND d.name = '人力资源部'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-12' AND d.name = '研发部' AND (a.check_out - a.check_in) > '08:00:00'	hr
SELECT e.name, p.start_date FROM probation_employees p JOIN employees e ON p.employee_id = e.employee_id WHERE p.status = '在职'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05' AND d.name = '行政部' AND a.check_in > '08:30:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-09-23' AND pe.rating = 'A'	hr
SELECT e.name, e.hire_date FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2022-03-08' AND pe.rating = 'C'	hr
SELECT e.employee_id, e.name, p.rating, a.check_in, a.check_out, EXTRACT(EPOCH FROM (a.check_out - a.check_in)) / 3600 AS commute_time_hours FROM employees e JOIN performance_evaluations p ON e.employee_id = p.employee_id JOIN attendance_records a ON e.employee_id = a.employee_id ORDER BY e.employee_id	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '运营部' AND a.date = '2024-10-14' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08' AND d.name = '财务部' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 9	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-16' AND ar.check_in > '09:00:00' AND pe.rating = 'C'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2023 AND pe.rating = 'A' AND pe.evaluation_date >= '2022-01-01' AND pe.evaluation_date < '2023-01-01'	hr
SELECT e.name, a.award_name, p.evaluation_date, p.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.year = 2022 AND a.award_name = '技术突破奖' AND p.evaluation_date > '2022-07-23'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-09-22' AND a.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2019 AND pe.rating = 'B' AND pe.evaluation_date >= '2019-01-01' AND pe.evaluation_date < '2020-01-01'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-10' AND ar.check_in > '09:30:00'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-05' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT d.name AS department_name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE pe.evaluation_date = '2023-06-20' AND pe.rating = 'B' AND e.remaining_annual_leave < 5	hr
SELECT department_id, position FROM employees WHERE hire_date BETWEEN '2024-10-01' AND '2024-10-31'	hr
SELECT e.name, a.award_name FROM employees e JOIN (SELECT employee_id, COUNT(*) AS award_count FROM awards WHERE year = EXTRACT(YEAR FROM date('now')) - 1 GROUP BY employee_id ORDER BY award_count DESC LIMIT 1) AS top_employee ON e.employee_id = top_employee.employee_id JOIN awards a ON e.employee_id = a.employee_id AND a.year = EXTRACT(YEAR FROM date('now')) - 1	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '领导力奖' AND aw.year = 2023 AND a.date = '2024-09-19' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.date, a.check_in, a.check_out, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-29' AND p.rating = 'A+'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2024-01-01' AND e.hire_date < '2025-01-01' AND a.year = 2024 AND pe.rating = 'A+'	hr
SELECT e.name, a.award_name, p.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.award_name = '技术突破奖' AND p.rating = 'A+' AND a.year = 2024	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-30' AND d.name = '法务部' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-01' AND ar.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-11-21' AND pe.rating = 'A+'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-19' AND a.check_in > '09:00:00' AND p.rating = 'A'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-17' AND p.rating = 'B+'	hr
SELECT AVG(CAST(pe.rating AS INTEGER)) AS average_development_speed FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.university LIKE '%海外%' OR e.university LIKE '%国外%'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-06' AND a.check_in > '09:00:00' AND p.rating = 'D'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2022-09-28' AND pe.rating = 'B+'	hr
SELECT COUNT(*) FILTER (WHERE pe.status = '离职' AND pe.end_date >= date('now') - INTERVAL '6 months' AND pe.end_date <= date('now') AND pe.employee_id IN (SELECT employee_id FROM performance_evaluations WHERE rating IN ('A', 'A+'))) * 1.0 / COUNT(*) FILTER (WHERE pe.status = '离职' AND pe.end_date >= date('now') - INTERVAL '6 months' AND pe.end_date <= date('now')) AS a_plus_ratio FROM probation_employees pe	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-09-23' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '优秀员工' AND a.year = 2023 AND pe.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-09-19' AND a.check_in > '09:00:00'	hr
SELECT e.employee_id, e.name FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE pe.rating = 'B' AND e.department_id = 'D00007'	hr
SELECT COUNT(DISTINCT pe.employee_id) * 1.0 / COUNT(DISTINCT e.employee_id) AS award_ratio FROM employees e LEFT JOIN probation_employees pe ON e.employee_id = pe.employee_id LEFT JOIN awards a ON pe.employee_id = a.employee_id AND a.year = EXTRACT(YEAR FROM pe.end_date) WHERE pe.status = '转正'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-12' AND a.check_in > '09:00:00' AND d.name = '财务部'	hr
SELECT COUNT(DISTINCT e.employee_id) * 1.0 / (SELECT COUNT(DISTINCT employee_id) FROM employees) AS ratio FROM employees e LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id AND pe.rating = 'A+' WHERE e.hire_date <= date('now') - INTERVAL '5 years' AND pe.employee_id IS NULL	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-08' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2022-06-19' AND pe.rating = 'B+' AND d.name = '研发部'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-04' AND p.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-11' AND a.check_in BETWEEN '08:00:00' AND '09:00:00' AND d.name = '财务部'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '南京大学' AND a.date = '2024-09-15' AND (a.check_out - a.check_in) > '08:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '技术突破奖' AND a.year = 2022 AND ar.date = '2024-09-19'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2023 AND a.award_name = '销售冠军' AND pe.evaluation_date = '2023-08-22' AND pe.rating = 'C'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '优秀员工' AND a.year = 2024	hr
SELECT e.employee_id, e.name, e.position, e.hire_date, e.department_id, p.evaluation_date, p.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.award_name = '最佳团队奖' AND a.year >= EXTRACT(YEAR FROM date('now')) - 5 ORDER BY a.year, e.employee_id	hr
SELECT e.name, e.employee_id, a.date, a.check_in, a.check_out, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-21' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-03' AND a.check_in > '09:00:00' AND d.name = '质量控制部'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-19' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-25' AND a.check_in > '08:30:00' AND d.name = '法务部'	hr
SELECT e.name, e.employee_id, a.date, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '行政部' AND a.date = '2024-09-23'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-09-18' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-26' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-07' AND a.check_in > '09:00:00' AND d.name = '质量控制部'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-09-22' AND (a.check_out - a.check_in) > '09:00:00'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-25' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-09-25' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-09-16' AND a.check_in > '08:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, d.manager_id FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-02' AND ar.check_in > '09:00:00'	hr
SELECT d.name AS department_name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE pe.evaluation_date = '2024-10-07' AND pe.rating = 'B'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '研发部' AND a.date = '2024-09-29' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-07' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-17' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, d.name AS department_name, pe.rating FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE ar.date = '2024-10-10' AND d.name = '质量控制部' AND pe.rating = 'B'	hr
SELECT name, remaining_annual_leave FROM employees WHERE employee_type = '正式员工'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '运营部' AND a.date = '2024-10-13' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-13' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '优秀员工' AND a.year = 2022 AND pe.rating = 'A+' AND pe.evaluation_date >= '2022-01-01' AND pe.evaluation_date < '2023-01-01'	hr
SELECT e.name, d.name AS department_name, ar.check_in, ar.check_out, a.award_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN awards a ON ar.employee_id = a.employee_id WHERE ar.date = '2024-09-25' AND ar.check_in > '09:00:00' AND a.year = 2024	hr
SELECT e.name, a.check_in, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-10' AND a.check_in > '09:00:00' AND p.rating = 'D'	hr
SELECT pe.employee_id FROM probation_employees pe WHERE pe.status = '在职' AND pe.start_date >= '2024-01-01' AND pe.end_date <= '2024-12-31'	hr
SELECT e.name, a.date, a.check_in, a.check_out, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-29' AND p.rating = 'B+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-16' AND d.name = '行政部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-22' AND a.check_in BETWEEN '08:00:00' AND '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name, p.rating FROM employees e JOIN performance_evaluations p ON e.employee_id = p.employee_id	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-21' AND a.check_in > '09:00:00' AND p.rating = 'A'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2022-08-18' AND pe.rating = 'A'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-21' AND a.check_in > '09:00:00' AND d.name = '客户服务部'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2023 AND pe.rating = 'A+'	hr
SELECT COUNT(*) FROM interviews WHERE employee_id = 'H05584'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '最佳团队奖' AND a.year = 2022 AND pe.rating = 'A' AND pe.evaluation_date >= '2023-01-01' AND pe.evaluation_date < '2024-01-01'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-29' AND ar.check_in > '09:00:00' AND pe.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-05' ORDER BY d.name	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '人力资源部' AND a.date = '2024-10-01' AND a.check_in > '08:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, d.manager_id FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-09' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-09-18' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-08' AND a.check_in > '08:30:00' AND p.rating = 'B+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-17' AND a.check_in > '09:00:00' AND d.name = '质量控制部'	hr
SELECT e.name, e.remaining_annual_leave FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '领导力奖' AND a.year = 2023 AND d.name = '客户服务部' AND e.remaining_annual_leave > 10	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-11' AND ar.check_in > '09:00:00' AND pe.rating = 'A+'	hr
SELECT a.employee_id, e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2023 AND pe.rating = 'A+'	hr
SELECT e.name, a.award_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN awards a ON e.employee_id = a.employee_id WHERE ar.date = '2024-09-29' AND ar.check_in > '09:00:00' AND a.year = 2018	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-04' AND a.check_in < '08:30:00' AND d.name = '研发部'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-16' AND a.check_in > '08:30:00' AND p.rating = 'B+'	hr
SELECT e.name, d.name AS department_name, pe.rating FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-09-03'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-27'	hr
SELECT e.name FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-03-23' AND pe.rating = 'A' AND d.name = '客户服务部'	hr
SELECT department_id, AVG(EXTRACT(YEAR FROM AGE(birth_date))) AS average_age FROM employees GROUP BY department_id	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-26' AND a.check_in > '09:00:00' AND p.rating = 'B+'	hr
SELECT award_name FROM awards WHERE employee_id = 'H08699' AND year = 2024	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-01' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '新人奖' AND a.year = 2024 AND ar.date = '2024-10-04' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-19' AND a.check_in > '09:00:00' AND p.rating = 'D'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-21' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'B+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '技术突破奖' AND a.year = 2023	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-10-02' ORDER BY a.check_in LIMIT 1	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-17' AND a.check_in > '08:00:00' AND d.name = '财务部'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-18' AND e.university = '清华大学'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-22' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-08' AND p.rating = 'A+' AND a.check_out - a.check_in > '12:00:00'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-16' ORDER BY d.name	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-14' AND EXTRACT(EPOCH FROM (a.check_out - a.check_in)) / 3600 > 12 AND p.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-05' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-16' AND a.check_in > '09:00:00' AND d.name = '法务部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-30' AND d.name = '行政部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '领导力奖' AND aw.year = 2023 AND a.date = '2024-10-12' AND a.check_in > '08:30:00'	hr
SELECT pe.rating FROM performance_evaluations pe JOIN awards a ON pe.employee_id = a.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2020 AND pe.evaluation_date >= '2021-01-01' AND pe.evaluation_date < '2022-01-01'	hr
SELECT e.name, e.remaining_annual_leave FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE pe.evaluation_date = '2023-03-01' AND ar.date = '2024-09-26'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-09-16' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-16' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2022 AND a.award_name = '质量改进奖' AND pe.evaluation_date >= '2023-01-01' AND pe.rating = 'D'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-23' AND d.name = '质量控制部' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 9	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-16' AND a.check_in BETWEEN '08:00:00' AND '09:00:00' AND p.rating = 'A'	hr
SELECT COUNT(DISTINCT e.employee_id) * 1.0 / (SELECT COUNT(DISTINCT employee_id) FROM employees) AS proportion FROM employees e LEFT JOIN awards a ON e.employee_id = a.employee_id AND a.year >= EXTRACT(YEAR FROM date('now')) - 3 WHERE a.employee_id IS NULL	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-15' AND d.name = '运营部' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-07-22' AND pe.rating = 'B+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-14' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-21' AND a.check_in > '09:00:00' AND d.name = '法务部'	hr
SELECT e.name AS employee_name, d.name AS department_name, d.manager_id FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-08' AND ar.check_in > '08:30:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-28' AND d.name = '客户服务部' AND a.check_in > '09:00:00'	hr
WITH yearly_hires AS (SELECT EXTRACT(YEAR FROM hire_date) AS hire_year, department_id, COUNT(*) AS hire_count FROM employees WHERE hire_date >= date('now') - INTERVAL '5 years' GROUP BY hire_year, department_id), yearly_growth AS (SELECT y1.department_id, y1.hire_year, y1.hire_count - COALESCE(y2.hire_count, 0) AS growth FROM yearly_hires y1 LEFT JOIN yearly_hires y2 ON y1.department_id = y2.department_id AND y1.hire_year = y2.hire_year + 1), max_growth AS (SELECT department_id, hire_year, growth FROM (SELECT department_id, hire_year, growth, RANK() OVER (PARTITION BY hire_year ORDER BY growth DESC) AS rank FROM yearly_growth) ranked WHERE rank = 1) SELECT d.name AS department_name, mg.hire_year, mg.growth FROM max_growth mg JOIN departments d ON mg.department_id = d.department_id ORDER BY mg.hire_year	hr
SELECT COUNT(DISTINCT e.employee_id) * 1.0 / (SELECT COUNT(DISTINCT employee_id) FROM employees) AS promotion_and_award_ratio FROM employees e JOIN ( SELECT pe.employee_id FROM performance_evaluations pe WHERE pe.evaluation_date >= date('now') - INTERVAL '1 year' GROUP BY pe.employee_id HAVING COUNT(DISTINCT pe.rating) > 1 ) promotions ON e.employee_id = promotions.employee_id JOIN ( SELECT a.employee_id FROM awards a WHERE a.year >= EXTRACT(YEAR FROM date('now')) - 1 GROUP BY a.employee_id ) awards ON e.employee_id = awards.employee_id	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-09' AND ar.check_in BETWEEN '08:30:00' AND '09:00:00'	hr
SELECT COUNT(*) FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '客户满意度奖' AND d.name = '人力资源部'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-22' AND a.check_in > '09:30:00' AND e.university = '清华大学'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05' AND d.name = '人力资源部' AND a.check_in > '09:00:00'	hr
SELECT e.department_id, d.name AS department_name, AVG((e.remaining_annual_leave / 25.0) * 100) AS avg_annual_leave_usage_rate FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY e.department_id, d.name ORDER BY avg_annual_leave_usage_rate DESC LIMIT 1	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2023 AND ar.date = '2024-10-14'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-09-26' AND a.check_in > '09:00:00'	hr
SELECT rating FROM performance_evaluations WHERE employee_id = 'H08734'	hr
SELECT e.name, e.remaining_annual_leave, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-07-13' AND e.remaining_annual_leave < 5	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-18' AND a.check_in BETWEEN '08:30:00' AND '09:00:00' AND p.rating = 'A+'	hr
SELECT phone_number, car_plate FROM employees	hr
SELECT e.name, d.name AS department_name, a.award_name, ar.check_in AS late_time FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.year = 2023 AND ar.date = '2024-10-13' AND ar.check_in > '09:00:00'	hr
SELECT department_id FROM employees WHERE hire_date >= date('now') - INTERVAL '1 year' GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-02' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
WITH Quarterly_Attendance AS (SELECT employee_id, EXTRACT(YEAR FROM date) AS year, EXTRACT(QUARTER FROM date) AS quarter, COUNT(*) AS total_days FROM attendance_records WHERE date >= date('now') - INTERVAL '3 years' GROUP BY employee_id, year, quarter), Quarterly_Max_Attendance AS (SELECT year, quarter, MAX(total_days) AS max_days FROM Quarterly_Attendance GROUP BY year, quarter), Quarterly_Top_Employees AS (SELECT qa.employee_id, qa.year, qa.quarter FROM Quarterly_Attendance qa JOIN Quarterly_Max_Attendance qma ON qa.year = qma.year AND qa.quarter = qma.quarter AND qa.total_days = qma.max_days), Performance_Ranking AS (SELECT employee_id, RANK() OVER (ORDER BY rating DESC) AS performance_rank FROM performance_evaluations WHERE evaluation_date >= date('now') - INTERVAL '3 years'), Top_Performers AS (SELECT employee_id FROM Performance_Ranking WHERE performance_rank = 1) SELECT qte.employee_id AS top_attendance_employee, tp.employee_id AS top_performer FROM Quarterly_Top_Employees qte JOIN Top_Performers tp ON qte.employee_id = tp.employee_id LIMIT 1	hr
SELECT employee_id, rating FROM performance_evaluations WHERE evaluation_date = '2024-05-10'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-20' AND d.name = '法务部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-30'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '优秀员工' AND a.year = 2024	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-15' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-09' AND a.check_in > '09:00:00' AND p.rating = 'D'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-30' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '创新奖' AND a.year = 2020 AND ar.date = '2024-10-11'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-16' AND a.check_in BETWEEN '08:00:00' AND '09:00:00' AND p.rating = 'A+'	hr
SELECT COUNT(*) FROM attendance_records WHERE employee_id = 'H05598' AND date >= '2024-01-01' AND date <= '2024-12-31' AND check_in IS NULL AND check_out IS NULL	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2023 AND pe.rating = 'A+' AND pe.evaluation_date >= '2023-01-01' AND pe.evaluation_date < '2024-01-01'	hr
SELECT e.name, d.name AS department_name, ar.check_in, ar.check_out FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-18'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '质量控制部' AND a.date = '2024-10-10' AND a.check_in > '08:30:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-20' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.name, d.name AS department_name, EXTRACT(EPOCH FROM (ar.check_out - ar.check_in)) / 3600 AS work_hours FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-03' AND EXTRACT(EPOCH FROM (ar.check_out - ar.check_in)) / 3600 > 10	hr
SELECT e.name AS manager_name, d.name AS department_name FROM departments d JOIN employees e ON d.manager_id = e.employee_id	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-12' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'B'	hr
SELECT e.employee_id, e.name FROM employees e WHERE e.employee_id IN (SELECT pe.employee_id FROM performance_evaluations pe WHERE pe.rating = 'A+' AND pe.evaluation_date >= (date('now') - INTERVAL '1 year') AND pe.evaluation_date < date('now')) AND e.employee_id NOT IN (SELECT a.employee_id FROM awards a WHERE a.year = EXTRACT(YEAR FROM date('now')))	hr
SELECT e.department_id, d.name AS department_name, COUNT(CASE WHEN pe.status = '转正' THEN 1 END) * 1.0 / COUNT(pe.employee_id) AS conversion_rate FROM probation_employees pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id GROUP BY e.department_id, d.name ORDER BY conversion_rate DESC LIMIT 1	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-09-28' AND (a.check_out - a.check_in) > '10:00:00'	hr
SELECT employee_id, COUNT(*) AS late_days FROM attendance_records WHERE check_in > '09:00:00' GROUP BY employee_id	hr
SELECT d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-06-16' AND pe.rating = 'C'	hr
SELECT e.name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-05' AND ar.check_in > '08:30:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND d.name = '人力资源部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '新人奖' AND a.year = 2024 AND pe.rating = 'B+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '质量控制部' AND a.date = '2024-09-16' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '客户满意度奖' AND pe.rating = 'A+' AND pe.evaluation_date >= '2023-01-01' AND pe.evaluation_date <= '2023-12-31'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '质量控制部' AND a.date = '2024-09-30' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '领导力奖' AND aw.year = 2024 AND a.date = '2024-09-29' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '人力资源部' AND a.date = '2024-09-15'	hr
SELECT a.employee_id, e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND a.award_name = '优秀员工' AND pe.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '技术突破奖' AND aw.year = 2020 AND a.date = '2024-10-01' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-29' AND a.check_in > '09:00:00'	hr
SELECT e.employee_id, e.university, e.major, e.position FROM employees e LEFT JOIN (SELECT major, COUNT(*) AS major_count FROM employees GROUP BY major) m ON e.major = m.major ORDER BY m.major_count ASC	hr
SELECT year, award_name FROM awards WHERE employee_id = 'H08699'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-17' AND a.check_in > '09:00:00' AND p.rating = 'A'	hr
SELECT COUNT(*) FROM probation_employees WHERE status = '转正' AND end_date >= date('now') - INTERVAL '1 year'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05' AND a.check_in > '09:00:00' AND d.name = '质量控制部'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-17' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT d.name AS department_name, e.name AS employee_name, pe.rating, ar.check_in FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN attendance_records ar ON e.employee_id = ar.employee_id AND ar.date = '2023-09-15' WHERE pe.evaluation_date = '2023-10-01' AND pe.rating = 'A+' AND (ar.check_in > '09:00:00' OR ar.check_in IS NULL)	hr
SELECT e.name, e.employee_id FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-11-19' AND pe.rating = 'C' AND d.name = '人力资源部'	hr
SELECT e1.name AS employee_name, e1.department_id, d.name AS department_name FROM employees e1 JOIN employees e2 ON e1.id <> e2.id AND e1.birth_date = e2.birth_date JOIN departments d ON e1.department_id = d.department_id GROUP BY e1.name, e1.department_id, d.name ORDER BY e1.name	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-06' AND d.name = '财务部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-20' AND a.check_in > '08:30:00' AND d.name = '客户服务部'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '领导力奖' AND a.year = 2023 AND ar.date = '2024-10-14' AND ar.check_in > '08:00:00'	hr
SELECT d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-11' AND ar.check_in > '09:00:00' AND pe.rating = 'B'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-06' AND ar.check_in > '09:30:00' AND pe.rating = 'A+'	hr
SELECT e.name, a.award_name, p.evaluation_date, p.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2022 AND p.evaluation_date > '2022-01-01'	hr
SELECT e.name, e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-09' AND d.name = '质量控制部' AND p.rating = 'D'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '技术突破奖' AND a.year = 2020 AND ar.date = '2024-09-19'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-12' AND d.name = '财务部'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '运营部' AND a.date = '2024-09-30' AND EXTRACT(EPOCH FROM (a.check_out - a.check_in)) / 3600 > 8	hr
SELECT COUNT(DISTINCT a.employee_id) * 1.0 / COUNT(DISTINCT p.employee_id) AS award_ratio FROM probation_employees p LEFT JOIN awards a ON p.employee_id = a.employee_id	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-10-15' AND pe.rating = 'C'	hr
SELECT e.department_id, COUNT(*) AS conversion_count FROM employees e JOIN probation_employees pe ON e.employee_id = pe.employee_id WHERE pe.status = '转正' AND pe.end_date >= date('now') - INTERVAL '3 years' GROUP BY e.department_id ORDER BY conversion_count DESC LIMIT 1	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-11' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT d.name AS department_name, COUNT(e.employee_id) AS employee_count FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.name HAVING COUNT(e.employee_id) > 5	hr
SELECT e.employee_id, e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '创新奖'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-13'	hr
SELECT e.name, e.employee_id, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND d.name = '客户服务部' AND p.rating = 'B'	hr
SELECT pe.employee_id FROM probation_employees pe WHERE pe.end_date >= '2024-01-01' AND pe.end_date <= '2024-12-31' AND pe.status = '转正'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-23' AND d.name = '行政部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-07' AND d.name = '市场部' AND p.rating = 'A'	hr
SELECT e.employee_id, e.name, AVG(e.remaining_annual_leave) AS avg_remaining_annual_leave FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE e.hire_date >= '2024-01-01' AND a.year = 2024 GROUP BY e.employee_id, e.name	hr
SELECT e.employee_id, e.name FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE pe.evaluation_date >= '2024-01-01' AND pe.evaluation_date < '2025-01-01' AND pe.rating = 'A+' AND e.birth_date >= '1970-01-01'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-20' AND a.check_in > '09:30:00' AND p.rating = 'C'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-26' AND d.name = '人力资源部' AND a.check_in > '09:00:00'	hr
SELECT e.employee_id, e.name FROM employees e WHERE e.hire_date <= date('now') - INTERVAL '10 years' AND (SELECT COUNT(*) FROM employees WHERE employee_id = e.employee_id AND position <> e.position) < 3	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2020 AND ar.date = '2024-10-11'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-10-10' AND a.check_in > '08:30:00' AND e.university = '清华大学'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-28' AND a.check_in > '09:00:00' AND p.rating = 'B+'	hr
SELECT e.name, e.remaining_annual_leave, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.year = 2024 AND a.award_name = '新人奖' AND d.name = '客户服务部' AND e.remaining_annual_leave < 10	hr
SELECT e.name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2022 AND pe.evaluation_date > '2022-08-04'	hr
SELECT COUNT(DISTINCT pe.employee_id) FROM probation_employees pe JOIN awards a ON pe.employee_id = a.employee_id WHERE pe.status = '转正' AND a.award_name = '技术突破奖' AND pe.start_date >= '2023-01-01' AND pe.start_date < '2024-01-01'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.year = 2022 AND a.award_name = '领导力奖' AND ar.date = '2024-09-19' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-10-08' AND e.university = '复旦大学' AND a.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-10-14' AND a.check_in < '09:00:00' AND e.university = '清华大学'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '最佳团队奖' AND a.year = 2023 AND ar.date = '2024-09-19'	hr
SELECT e.name, a.date, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '领导力奖' AND aw.year = 2023 AND a.date = '2024-10-05'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-14' AND ar.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '领导力奖' AND a.year = 2024 AND ar.date = '2024-10-05'	hr
SELECT e.employee_id, e.name, pe.status FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN probation_employees pe ON e.employee_id = pe.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2020 AND pe.status = '在职'	hr
SELECT * FROM employees WHERE remaining_annual_leave > 15 AND department_id = 'D00007'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-28' AND a.check_in > '08:30:00' AND p.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-08' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-10-06' AND a.check_in > '09:00:00'	hr
SELECT e.name, d.name AS department_name, ar.check_in, ar.check_out FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-05' AND d.name = '市场部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-20' AND a.check_in > '09:00:00' AND d.name = '法务部'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-10' AND d.name = '运营部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.year = 2023 AND pe.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-22' AND ar.check_in > '08:30:00'	hr
SELECT AVG(remaining_annual_leave) FROM employees WHERE hire_date >= '2023-01-01'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id AND pe.evaluation_date = '2024-10-03' WHERE ar.date = '2024-10-03'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-09' AND a.check_in > '09:00:00' AND d.name = '客户服务部'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-23' AND a.check_in > '09:00:00' AND p.rating = 'A'	hr
SELECT e.name, e.employee_id, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-02' AND ar.check_in > '08:30:00' AND d.manager_id = 'H05487'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-25' AND d.name = '运营部' AND a.check_in > '09:00:00'	hr
SELECT AVG(attendance_days) AS average_attendance_days FROM (SELECT employee_id, COUNT(*) AS attendance_days FROM attendance_records WHERE employee_id IN (SELECT employee_id FROM employees WHERE employee_type = '正式员工') GROUP BY employee_id) AS subquery	hr
SELECT e.department_id, e.employee_id, e.name, MAX(a.work_hours) AS max_overtime_hours FROM (SELECT employee_id, (EXTRACT(EPOCH FROM (check_out - check_in)) / 3600) AS work_hours FROM attendance_records WHERE (EXTRACT(EPOCH FROM (check_out - check_in)) / 3600) > 8) a JOIN employees e ON a.employee_id = e.employee_id GROUP BY e.department_id, e.employee_id, e.name	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-29' AND p.rating = 'A'	hr
SELECT DISTINCT employee_id FROM attendance_records WHERE EXTRACT(DOW FROM date) IN (0, 6)	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-09' AND d.name = '行政部' AND a.check_in > '08:30:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2020 AND pe.rating = 'C' AND pe.evaluation_date >= '2023-01-01' AND pe.evaluation_date < '2024-01-01'	hr
SELECT hire_date, end_date FROM employees JOIN probation_employees ON employees.employee_id = probation_employees.employee_id WHERE employees.employee_id = 'H08699' AND EXTRACT(YEAR FROM employees.hire_date) = 2024	hr
SELECT a.employee_id, e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND pe.rating = 'A'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-12-28'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '新人奖' AND a.year = 2023 AND ar.date = '2024-09-22'	hr
SELECT e.name, e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-24' AND p.rating = 'A'	hr
SELECT birth_date, department_id FROM employees WHERE employee_id = 'H05598'	hr
SELECT e.name, e.employee_id, a.date, a.check_in, a.check_out, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-20' AND p.rating = 'B+'	hr
SELECT d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-03' AND ar.check_in > '09:00:00' AND pe.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-29' AND d.name = '运营部' AND a.check_in > '09:30:00'	hr
SELECT e.name, e.remaining_annual_leave, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.year = 2024 AND a.award_name = '领导力奖' AND d.name = '客户服务部' AND e.remaining_annual_leave < 10	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.year = 2023 AND pe.rating = 'A+'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '客户满意度奖' AND a.year = 2023 AND pe.rating IN ('A', 'A+')	hr
SELECT e.name, e.employee_id, d.name AS department_name, pe.rating FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE d.name = '质量控制部' AND pe.rating = 'D' AND ar.date = '2024-09-23'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-10' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-01' AND ar.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '创新奖' AND a.year = 2023 AND ar.date = '2024-10-14'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-16' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id FROM employees e JOIN probation_employees pe ON e.employee_id = pe.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE pe.status = '在职' GROUP BY e.name, e.employee_id ORDER BY COUNT(ar.id) DESC LIMIT 5	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-18'	hr
SELECT e.name, e.employee_id, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-24' AND ar.check_in > '08:30:00' AND d.manager_id = 'H00842'	hr
SELECT COUNT(DISTINCT pe.employee_id) * 1.0 / COUNT(DISTINCT e.employee_id) AS a_plus_performance_ratio FROM employees e JOIN probation_employees pe ON e.employee_id = pe.employee_id JOIN performance_evaluations pev ON e.employee_id = pev.employee_id WHERE pev.evaluation_date BETWEEN pe.end_date AND pe.end_date + INTERVAL '3 months' AND pev.rating = 'A+'	hr
SELECT e.position, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id AND pe.evaluation_date = (SELECT MAX(evaluation_date) FROM performance_evaluations WHERE employee_id = e.employee_id) WHERE a.award_name = '新人奖' AND a.year >= EXTRACT(YEAR FROM date('now')) - 5	hr
SELECT e.name, e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08' AND p.rating = 'B+' AND d.name = '运营部'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-04' AND d.name = '质量控制部' AND (a.check_out - a.check_in) > '10 hours'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND pe.rating = 'A'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-04' AND a.check_in > '09:00:00' AND d.name = '质量控制部'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08' ORDER BY d.name	hr
SELECT COUNT(DISTINCT a.employee_id) * 1.0 / COUNT(DISTINCT e.employee_id) AS first_year_award_ratio FROM employees e LEFT JOIN ( SELECT a.employee_id FROM awards a JOIN employees e ON a.employee_id = e.employee_id WHERE a.year = EXTRACT(YEAR FROM e.hire_date) ) a ON e.employee_id = a.employee_id	hr
SELECT e.department_id, e.employee_id, e.name, MIN(a.check_in) AS earliest_check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id GROUP BY e.department_id, e.employee_id, e.name ORDER BY e.department_id, earliest_check_in	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-29' AND a.check_in > '09:00:00' AND p.rating = 'B+'	hr
SELECT university, AVG(EXTRACT(YEAR FROM age(date('now'), hire_date))) AS avg_tenure FROM employees GROUP BY university	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-01' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '客户满意度奖' AND aw.year = 2023 AND a.date = '2024-10-03' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, d.manager_id FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-04-14' AND pe.rating = 'C'	hr
SELECT e.name, a.award_name, p.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.award_name = '创新奖' AND a.year = 2023 AND p.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-27' AND a.check_in > '09:00:00' AND p.evaluation_date = '2022-01-25' AND p.rating = 'A+'	hr
SELECT e.employee_id, e.name, e.hire_date, e.department_id, e.position, pe.start_date, pe.end_date, pe.status, p.evaluation_date, p.rating, a.year, a.award_name FROM employees e LEFT JOIN probation_employees pe ON e.employee_id = pe.employee_id LEFT JOIN performance_evaluations p ON e.employee_id = p.employee_id LEFT JOIN awards a ON e.employee_id = a.employee_id WHERE e.employee_type = '正式员工' ORDER BY e.hire_date, p.evaluation_date, a.year	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND d.name = '财务部' AND (a.check_out - a.check_in) > '10:00:00'	hr
SELECT e.name, e.position, e.hire_date, pe.rating FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE d.name = '市场部' ORDER BY pe.evaluation_date DESC LIMIT 1	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-04'	hr
SELECT e.name, e.employee_id FROM employees e JOIN (SELECT pe.employee_id, COUNT(*) AS eval_count FROM performance_evaluations pe WHERE pe.evaluation_date >= datetime('now') - INTERVAL '1 year' GROUP BY pe.employee_id) p ON e.employee_id = p.employee_id JOIN (SELECT a.employee_id, COUNT(*) AS award_count FROM awards a WHERE a.year >= EXTRACT(YEAR FROM datetime('now')) - 1 GROUP BY a.employee_id) a ON e.employee_id = a.employee_id ORDER BY ABS(p.eval_count - a.award_count) DESC LIMIT 1	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '人力资源部' AND a.date = '2024-10-05' AND a.check_in > '09:00:00'	hr
SELECT name, position, hire_date FROM employees	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND d.name = '客户服务部' AND a.check_in > '09:00:00'	hr
SELECT e.employee_id, e.name, AVG(e.remaining_annual_leave) AS avg_remaining_annual_leave FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE e.hire_date >= '2024-01-01' AND a.year = 2024 GROUP BY e.employee_id, e.name	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-09' AND a.check_in > '09:00:00' AND d.name = '行政部'	hr
SELECT e.name, e.employee_id, a.check_in, d.name AS department_name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND a.check_in > '09:00:00' AND d.name = '研发部'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-05-11'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-08' AND ar.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN interviews i ON e.employee_id = i.employee_id WHERE a.award_name = '客户满意度奖' AND a.year = 2021 AND i.interview_date BETWEEN '2020-01-01' AND '2020-12-31'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05' ORDER BY d.name	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-19' AND d.name = '法务部' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 9	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND d.name = '客户服务部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-21' AND p.rating = 'A'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-12' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 12 AND p.rating = 'A+'	hr
SELECT hire_date, name FROM employees WHERE EXTRACT(YEAR FROM hire_date) = 2024	hr
SELECT e.name AS 员工姓名, d.name AS 部门名称, a.check_in AS 上班时间, a.check_out AS 下班时间 FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-06' AND d.name = '人力资源部'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-23' AND p.rating = 'B+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-10-13' AND a.check_in > '09:30:00'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-09'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2022 AND a.award_name = '优秀员工' AND pe.evaluation_date > '2022-11-09' AND pe.rating <= 'C'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-20' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.year = 2021 AND a.award_name = '创新奖'	hr
SELECT COUNT(DISTINCT e.employee_id) * 1.0 / (SELECT COUNT(*) FROM employees) AS employee_ratio FROM employees e LEFT JOIN interviews i ON e.employee_id = i.employee_id WHERE e.hire_date <= date('now') - INTERVAL '3 years' AND i.employee_id IS NULL	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE a.date = '2024-10-14' AND a.check_in > '09:00:00' AND aw.year = 2024 AND aw.award_name = '新人奖'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-17' AND p.rating = 'B'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-26' AND ar.check_in BETWEEN '09:00:00' AND '10:00:00'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-09' AND a.check_in > '09:00:00' AND p.rating = 'A'	hr
SELECT e.name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2023 AND a.award_name = '技术突破奖' AND pe.rating = 'A'	hr
SELECT e.name, a.award_name, p.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.year = 2024 AND p.rating = 'B+'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-29' AND p.rating = 'B'	hr
SELECT e.name, a.award_name, p.evaluation_date FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2023 AND p.evaluation_date > '2022-11-04'	hr
SELECT e.name AS employee_name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND d.name = '人力资源部'	hr
SELECT DISTINCT e.employee_id FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN awards a ON e.employee_id = a.employee_id WHERE a.year = EXTRACT(YEAR FROM date('now')) - 1 AND pe.evaluation_date >= date('now') - INTERVAL '1 year'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-20' AND a.check_in > '08:00:00' AND p.rating = 'C'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-16' AND a.check_in > '08:30:00' AND p.rating = 'A'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-12' AND a.check_in BETWEEN '08:00:00' AND '09:00:00' AND p.rating = 'B'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-29' AND a.check_in < '08:30:00' AND e.university = '清华大学'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-17' AND a.check_in > '08:30:00' AND p.rating = 'B'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-03' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-18' AND d.name = '人力资源部' AND (a.check_out - a.check_in) > '12:00:00'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2022-01-01' AND e.hire_date < '2023-01-01' AND a.year = 2023 AND pe.rating = 'A'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.year = 2023 AND pe.rating IN ('A', 'A+')	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-06' AND a.check_in > '09:00:00' AND a.check_out < '18:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-10-02' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-09-25' AND a.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2023 AND ar.date = '2024-10-09' AND ar.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-25' AND ar.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-27' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '销售冠军' AND a.year = 2022	hr
SELECT e.name, d.name AS department_name FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN departments d ON e.department_id = d.department_id WHERE e.hire_date >= '2021-01-01' AND e.hire_date < '2022-01-01' AND pe.evaluation_date >= '2021-01-01' AND pe.evaluation_date < '2022-01-01' AND pe.rating IN ('B', 'A+')	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '创新奖' AND aw.year = 2024 AND a.date = '2024-09-22' AND a.check_in > '09:00:00'	hr
SELECT employee_id, COUNT(*) AS position_change_count FROM employees GROUP BY employee_id ORDER BY position_change_count DESC LIMIT 1	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-17' AND d.name = '人力资源部' AND a.check_in > '09:00:00'	hr
SELECT e.name, d.name AS department_name, ar.check_in, ar.check_out FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN awards a ON e.employee_id = a.employee_id WHERE ar.date = '2024-10-03' AND a.year = 2024	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-30' AND d.name = '销售部' AND a.check_in < '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '运营部' AND a.date = '2024-09-26' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-01' AND d.name = '客户服务部' AND a.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '技术突破奖' AND a.year = 2024 AND ar.date = '2024-09-23'	hr
SELECT e.name, e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-06' AND d.name = '行政部'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-09-30' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-13' AND a.check_in BETWEEN '08:00:00' AND '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name AS 员工姓名, d.name AS 部门名称, a.date AS 考勤日期 FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.date = '2024-09-28' ORDER BY d.name	hr
SELECT * FROM employees WHERE car_plate LIKE '沪%' AND department_id = 'D00003'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-02' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.date, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '客户满意度奖' AND aw.year = 2023 AND a.date = '2024-10-01' AND a.check_in > '09:00:00'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN probation_employees p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-04' AND p.status = '在职'	hr
SELECT d.name AS department_name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE pe.evaluation_date = '2023-04-04' AND pe.rating = 'D'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-01' AND a.check_in > '09:30:00' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '领导力奖' AND aw.year = 2023 AND a.date = '2024-09-25' AND a.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE pe.rating = 'A+' GROUP BY e.name HAVING COUNT(DISTINCT EXTRACT(YEAR FROM pe.evaluation_date)) >= 3	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND pe.rating = 'B+'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-29' AND a.check_in < '08:30:00' AND p.rating = 'A+'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-30' AND ar.check_in > '09:00:00' AND pe.rating = 'C'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2022 AND a.award_name = '创新奖' AND pe.evaluation_date > '2022-08-27' AND pe.rating >= 'B'	hr
SELECT e.name, p.status FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN probation_employees p ON e.employee_id = p.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2022 AND p.status = '在职'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-14' AND ar.check_in > '09:30:00'	hr
SELECT e.name, e.hire_date FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '领导力奖' AND a.year = 2023 AND e.hire_date < '2012-01-01'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '行政部' AND a.date = '2024-09-25' AND (a.check_out - a.check_in) > '08:00:00'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2022-01-01' AND e.hire_date < '2023-01-01' AND a.year = 2023 AND pe.rating = 'A+'	hr
SELECT ar.id, ar.employee_id, ar.date, ar.check_in, ar.check_out FROM attendance_records ar JOIN awards a ON ar.employee_id = a.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2022 AND ar.date = '2024-10-14'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-28' ORDER BY d.name	hr
SELECT e.name AS employee_name, d.name AS department_name, d.manager_id FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-20' AND (ar.check_out - ar.check_in) > '14:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-23' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-25' AND a.check_in > '09:00:00' AND d.name = '人力资源部'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.year = 2023 AND pe.rating = 'A+'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-21' AND ar.check_in > '08:00:00' AND pe.rating = 'B'	hr
SELECT e.name, p.status, a.check_in, a.check_out FROM employees e JOIN probation_employees p ON e.employee_id = p.employee_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE p.status = '在职' AND a.date = '2024-09-22'	hr
SELECT DISTINCT e.employee_id FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = EXTRACT(YEAR FROM date('now')) - 1 AND pe.evaluation_date >= date('now') - INTERVAL '1 year' AND pe.rating <> 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '行政部' AND a.date = '2024-10-08' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-04' AND a.check_in BETWEEN '08:00:00' AND '09:00:00' AND p.rating = 'A'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-13' AND a.check_in > '09:00:00' AND d.name = '人力资源部'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-28' AND ar.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-07' AND ar.check_in > '09:00:00'	hr
SELECT COUNT(*) FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2023-01-01' AND e.university IN ('清华大学', '北京大学', '浙江大学', '上海交通大学', '复旦大学') AND pe.rating = 'A+' AND pe.evaluation_date = (SELECT MIN(evaluation_date) FROM performance_evaluations WHERE employee_id = e.employee_id)	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-10' AND ar.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, a.award_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.year = 2022 ORDER BY d.name	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2022 AND pe.rating = 'B+'	hr
SELECT ar.date, ar.check_in, ar.check_out FROM attendance_records ar JOIN awards a ON ar.employee_id = a.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2022 AND ar.date = '2024-09-30'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id AND pe.evaluation_date = '2024-09-22' WHERE ar.date = '2024-09-22'	hr
SELECT e.name, d.name AS department_name, ar.check_in, ar.check_out FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-26' AND ar.employee_id = 'H08291'	hr
SELECT e.employee_id, p.rating, SUM(CASE WHEN a.employee_id IS NOT NULL THEN 1 ELSE 0 END) AS award_count, SUM(CASE WHEN i.employee_id IS NOT NULL THEN 1 ELSE 0 END) AS interview_count, SUM(CASE WHEN ar.check_out > '18:00:00' THEN 1 ELSE 0 END) AS overtime_days FROM employees e LEFT JOIN performance_evaluations p ON e.employee_id = p.employee_id LEFT JOIN awards a ON e.employee_id = a.employee_id LEFT JOIN interviews i ON e.employee_id = i.employee_id LEFT JOIN attendance_records ar ON e.employee_id = ar.employee_id GROUP BY e.employee_id, p.rating	hr
SELECT e.name AS employee_name, d.name AS department_name, d.manager_id FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-27' AND ar.check_out > '13:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-04' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT COUNT(DISTINCT a.employee_id) FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2023 AND a.award_name = '项目管理奖' AND ar.date = '2024-09-28' AND ar.check_in > '08:30:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-11' AND a.check_in > '09:00:00' AND d.name = '客户服务部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-28' AND d.name = '行政部' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-18' AND ar.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id AND pe.evaluation_date = '2024-09-16' WHERE ar.date = '2024-09-16'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2023 AND pe.rating = 'C'	hr
SELECT COUNT(DISTINCT date) FROM attendance_records WHERE employee_id = 'H03961' AND date >= '2024-01-01' AND date <= '2024-12-31' AND check_out > '20:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-04' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-25' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT e.name, a.award_name, p.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2024 AND p.rating = 'A'	hr
SELECT e.name, AVG(EXTRACT(EPOCH FROM (ar.check_out - ar.check_in)) / 3600) AS avg_work_hours FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2023 GROUP BY e.name HAVING AVG(EXTRACT(EPOCH FROM (ar.check_out - ar.check_in)) / 3600) > 10	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-14' AND a.check_in BETWEEN '08:00:00' AND '09:00:00' AND p.rating = 'B'	hr
SELECT e.employee_id, e.name FROM employees e JOIN attendance_records ar ON e.employee_id = ar.employee_id GROUP BY e.employee_id, e.name HAVING COUNT(CASE WHEN ar.check_in > '09:00:00' THEN 1 END) > COUNT(CASE WHEN ar.check_out < '18:00:00' THEN 1 END)	hr
SELECT e.name, e.employee_id, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-03' AND d.name = '行政部' AND p.rating = 'B+'	hr
SELECT e.employee_id, e.name FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.start_work_date <= date('now') - INTERVAL '5 years' AND pe.rating IN ('A+', 'A', 'B')	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-04' AND a.check_in > '09:00:00' AND d.name = '质量控制部'	hr
SELECT e.name, e.hire_date, a.award_name FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '优秀员工' AND a.year = 2022 AND e.hire_date > '2020-05-12'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND d.name = '财务部' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 8	hr
SELECT e.name, e.hire_date, a.date, a.check_in, a.check_out, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE e.hire_date >= '2023-01-01' AND e.hire_date < '2024-01-01' AND a.date = '2024-09-27'	hr
SELECT d.name AS department_name, COUNT(e.employee_id) AS demoted_employee_count FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE e.employee_id IN (SELECT p.employee_id FROM performance_evaluations p WHERE p.evaluation_date >= datetime('now') - INTERVAL '2 years' AND p.rating IN ('D', 'E')) GROUP BY d.name ORDER BY demoted_employee_count DESC	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-10' AND p.rating = 'A+'	hr
SELECT name, position, hire_date FROM employees	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-16' AND d.name = '运营部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-03' AND a.check_in > '09:00:00' AND d.name = '法务部'	hr
SELECT e.name, d.name AS department_name, ar.check_in, ar.check_out FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-09' AND e.employee_type = '实习生'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '最佳团队奖' AND a.year = EXTRACT(YEAR FROM date('now')) ORDER BY pe.rating DESC LIMIT 1	hr
SELECT e.name, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-06' AND d.name = '财务部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-15' AND d.name = '质量控制部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-29' AND p.rating = 'C'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.employee_type = '实习生' AND a.date = '2024-10-01' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.hire_date, a.award_name FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '技术突破奖' AND a.year = 2023 AND e.hire_date > '2022-11-04'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-20' AND ar.check_in > '09:00:00'	hr
SELECT DISTINCT e.employee_id, e.name FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN awards a ON e.employee_id = a.employee_id WHERE pe.rating = 'A+' AND a.year >= EXTRACT(YEAR FROM date('now')) - 1	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2024 AND ar.date = '2024-10-03'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-11-18' AND pe.rating = 'D'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-09-24' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '运营部' AND a.date = '2024-09-18' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '最佳团队奖' AND a.year = 2024 AND pe.rating = 'B'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '最佳团队奖' AND a.year = 2023 AND ar.date = '2024-09-22'	hr
SELECT pe.employee_id FROM probation_employees pe WHERE pe.end_date < date('now') AND pe.status = '在职'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-12' AND d.name = '质量控制部' AND a.check_in > '09:00:00'	hr
WITH ranked_attendance AS (SELECT employee_id, date, ROW_NUMBER() OVER (PARTITION BY employee_id ORDER BY date) AS row_num FROM attendance_records), consecutive_days AS (SELECT a1.employee_id, COUNT(*) AS consecutive_days FROM ranked_attendance a1 JOIN ranked_attendance a2 ON a1.employee_id = a2.employee_id AND a1.row_num = a2.row_num - 1 AND a1.date = a2.date - INTERVAL '1 day' GROUP BY a1.employee_id, a1.date) SELECT employee_id FROM consecutive_days ORDER BY consecutive_days DESC LIMIT 1	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-11' AND ar.check_in > '09:00:00' AND pe.rating = 'D'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05' ORDER BY d.name	hr
SELECT d.name AS department_name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE pe.evaluation_date = '2023-06-17' AND pe.rating = 'C'	hr
SELECT e.employee_id, e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2022-01-01' AND e.hire_date < '2023-01-01' AND a.year = 2023 AND pe.rating = 'A+'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '最佳团队奖' AND pe.rating = 'A+' AND a.year = 2023	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND pe.rating = 'A+'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2022-01-01' AND e.hire_date < '2023-01-01' AND a.year = 2023 AND pe.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-09-29' AND a.check_in > '09:00:00'	hr
SELECT ar.id, ar.employee_id, ar.date, ar.check_in, ar.check_out FROM attendance_records ar JOIN awards a ON ar.employee_id = a.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2021 AND ar.date = '2024-10-01'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-05' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 10 AND p.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '优秀员工' AND a.year = 2023	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-10' AND a.check_in > '09:30:00' AND p.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2022-05-18' AND pe.rating = 'B'	hr
SELECT e.name, a.award_name, p.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2023 AND p.rating = 'A+'	hr
SELECT e.name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-01' AND ar.check_in BETWEEN '08:50:00' AND '09:00:00'	hr
SELECT university FROM employees WHERE employee_id IN (SELECT employee_id FROM performance_evaluations WHERE evaluation_date >= date('now') - INTERVAL '2 years' AND rating IN ('A+', 'A', 'B+')) GROUP BY university ORDER BY COUNT(*) DESC	hr
SELECT e.name AS employee_name, d.name AS department_name, ar.check_in, ar.check_out FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-26' ORDER BY d.name, e.name	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-27' AND d.name = '研发部' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, ar.check_in, ar.check_out FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN awards a ON e.employee_id = a.employee_id WHERE ar.date = '2024-09-30' AND a.year = 2024	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out, (a.check_out - a.check_in) AS work_duration FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-04' AND d.name = '行政部' AND (a.check_out - a.check_in) > '10:00:00'	hr
SELECT e.employee_id, e.name, ABS(AVG(EXTRACT(HOUR FROM a.check_out - a.check_in)) OVER (PARTITION BY e.department_id) - AVG(EXTRACT(HOUR FROM a.check_out - a.check_in)) OVER (PARTITION BY e.employee_id)) AS attendance_difference FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id ORDER BY attendance_difference DESC LIMIT 1	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2020 AND pe.rating = 'A+' AND pe.evaluation_date >= '2020-01-01' AND pe.evaluation_date < '2021-01-01'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-10-21' AND pe.rating = 'D'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '领导力奖' AND a.year = 2024 AND ar.date = '2024-10-05'	hr
SELECT e.name, e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-10' AND p.rating = 'A'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-05' AND a.check_in > '08:00:00' AND p.rating = 'D'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-15' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'A+'	hr
SELECT COUNT(DISTINCT pe.employee_id) FROM probation_employees pe JOIN awards a ON pe.employee_id = a.employee_id WHERE pe.status = '在职' AND a.year = 2023	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-26' AND a.check_in > '08:30:00' AND p.rating = 'A+'	hr
SELECT e.name, e.employee_id, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-26' AND d.name = '财务部' AND p.rating = 'B'	hr
SELECT e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND pe.rating = 'B'	hr
SELECT e.name, a.date, a.check_out - a.check_in AS work_duration FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '质量改进奖' AND aw.year = 2022 AND (a.check_out - a.check_in) > '10:00:00'erval	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-14' AND a.check_in > '09:00:00' AND d.name = '法务部'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '创新奖' AND a.year = 2022 AND ar.date = '2024-10-08' AND ar.check_in > '08:30:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-25' AND a.check_in > '09:00:00' AND d.name = '人力资源部'	hr
SELECT d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-07-22' AND pe.rating = 'C'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND a.award_name = '新人奖' AND pe.evaluation_date = '2021-01-01' AND pe.rating = 'A'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-14' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'C'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-23' AND a.check_in > '08:30:00' AND a.check_out < '17:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id AND pe.evaluation_date = '2024-10-08' WHERE ar.date = '2024-10-08'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2023 AND pe.rating = 'A'	hr
SELECT a.employee_id, e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2024 AND pe.rating = 'B+'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '客户满意度奖' AND a.year = 2024	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-18' AND a.check_in > '08:00:00' AND p.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-11' AND d.name = '财务部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND d.name = '财务部' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 9	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '项目管理奖' AND aw.year = 2022 AND a.date = '2024-09-20' AND a.check_in > '09:00:00'	hr
SELECT e.name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2022 AND pe.evaluation_date >= '2022-01-01' AND pe.evaluation_date <= '2022-12-31'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-11' AND ar.check_in > '08:30:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-15' AND a.check_in > '09:00:00' AND d.name = '质量控制部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-28' AND a.check_in > '08:30:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-02' AND d.name = '财务部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-14' AND p.rating = 'A'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-10' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-27' AND a.check_in BETWEEN '08:00:00' AND '09:00:00' AND p.rating = 'B'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-16' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-09-22' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.award_name, ar.date FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2022 AND ar.date > '2023-01-11'	hr
SELECT e.name, e.remaining_annual_leave, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.year = 2024 AND a.award_name = '新人奖' AND d.name = '运营部' AND e.remaining_annual_leave < 10	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-02' AND a.check_in < '08:30:00' AND p.rating = 'A+'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2024 AND ar.date = '2024-09-16'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2023 AND pe.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-10-10' AND a.check_in > '08:30:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '销售冠军' AND a.year = 2021	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-10-08' AND a.check_in > '08:30:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-10-14' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-09-28' AND pe.rating = 'C' AND d.name = '客户服务部'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-11' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.employee_id, e.name, pe.rating, e.employee_type FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id ORDER BY e.employee_type, pe.rating	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND d.name = '法务部' AND a.check_in > '09:00:00'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-16' ORDER BY d.name	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-29' AND d.name = '客户服务部' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) >= 8	hr
SELECT EXTRACT(YEAR FROM AGE(date('now'), birth_date)) / 10 * 10 AS age_group, AVG(EXTRACT(YEAR FROM AGE(date('now'), hire_date))) AS avg_years_in_company, AVG(CASE WHEN rating = 'A+' THEN 5 WHEN rating = 'A' THEN 4 WHEN rating = 'B' THEN 3 WHEN rating = 'C' THEN 2 WHEN rating = 'D' THEN 1 ELSE 0 END) AS avg_performance_rating FROM employees JOIN performance_evaluations ON employees.employee_id = performance_evaluations.employee_id GROUP BY age_group ORDER BY age_group	hr
SELECT e.department_id, AVG(a.award_count) AS avg_award_count FROM employees e JOIN (SELECT employee_id, COUNT(*) AS award_count FROM awards GROUP BY employee_id) a ON e.employee_id = a.employee_id GROUP BY e.department_id ORDER BY avg_award_count DESC LIMIT 1	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-13' AND e.hire_date < '2011-01-01'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '销售冠军' AND pe.rating = 'A' AND a.year = 2023	hr
SELECT e.name, p.status FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN probation_employees p ON e.employee_id = p.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2020 AND p.status = '在职'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '项目管理奖' AND aw.year = 2023 AND a.date = '2024-10-07' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-11' AND d.name = '人力资源部' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.year = 2020 AND a.award_name = '优秀员工'	hr
SELECT DISTINCT e.department_id FROM employees e JOIN probation_employees pe ON e.employee_id = pe.employee_id WHERE pe.status = '转正' AND pe.end_date >= datetime('now') - INTERVAL '6 months' AND e.department_id IN (SELECT e2.department_id FROM employees e2 WHERE e2.employee_type = '正式员工' AND e2.hire_date <= datetime('now') - INTERVAL '6 months' AND e2.employee_id NOT IN (SELECT e3.employee_id FROM employees e3 WHERE e3.hire_date > datetime('now') - INTERVAL '6 months'))	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-27' AND a.check_in > '09:30:00' AND p.rating = 'A+'	hr
SELECT e.major, COUNT(p.employee_id) * 100.0 / (SELECT COUNT(*) FROM performance_evaluations WHERE rating = 'A+') AS a_plus_percentage FROM employees e JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE p.rating = 'A+' GROUP BY e.major	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-25' AND EXTRACT(EPOCH FROM (a.check_out - a.check_in)) / 3600 > 12 AND p.rating = 'C'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-03' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-13' AND a.check_in > '08:45:00' AND p.rating = 'C'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '新人奖' AND a.year = 2024	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-07' AND d.name = '人力资源部' AND (a.check_out - a.check_in) > '08:00:00'	hr
WITH quarterly_best_performers AS (SELECT EXTRACT(YEAR FROM evaluation_date) AS year, EXTRACT(QUARTER FROM evaluation_date) AS quarter, employee_id FROM performance_evaluations WHERE evaluation_date >= date('now') - INTERVAL '3 years' AND rating = (SELECT MAX(rating) FROM performance_evaluations pe WHERE pe.evaluation_date >= date('now') - INTERVAL '3 years' AND EXTRACT(YEAR FROM pe.evaluation_date) = EXTRACT(YEAR FROM evaluation_date) AND EXTRACT(QUARTER FROM pe.evaluation_date) = EXTRACT(QUARTER FROM evaluation_date)) GROUP BY year, quarter, employee_id), repeated_best_performers AS (SELECT year, quarter, COUNT(DISTINCT employee_id) FILTER (WHERE employee_id IN (SELECT employee_id FROM quarterly_best_performers qbp WHERE qbp.year = qbp2.year AND qbp.quarter <> qbp2.quarter)) AS repeated_count, COUNT(DISTINCT employee_id) AS total_count FROM quarterly_best_performers qbp2 GROUP BY year, quarter) SELECT year, quarter, (repeated_count / total_count) AS repeat_ratio FROM repeated_best_performers	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-14' AND e.employee_type = '外包员工'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-10' AND e.hire_date > '2016-09-01'	hr
SELECT e.name, e.employee_id, a.check_in, d.name AS department_name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-12' AND a.check_in > '08:30:00' AND d.name = '市场部'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08' AND d.name = '客户服务部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-19' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-11-09' AND pe.rating = 'C'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-10-01' AND a.check_in > '08:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '行政部' AND a.date = '2024-09-24' AND a.check_in > '09:00:00'	hr
SELECT d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-12' AND ar.check_in > '09:00:00' AND pe.rating = 'D'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-12' AND a.check_in > '09:00:00' AND d.name = '人力资源部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '研发部' AND a.date = '2024-09-17' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-14' AND a.check_in > '08:30:00' AND p.rating = 'B'	hr
SELECT e.name, a.award_name, p.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.award_name = '领导力奖' AND a.year = 2024 AND p.rating = 'B+'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-15' AND ar.check_in > '09:00:00' AND pe.rating = 'A+'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2021 AND a.award_name = '优秀员工' AND pe.evaluation_date >= '2022-01-01' AND pe.evaluation_date < '2023-01-01' AND pe.rating <= 'C'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE aw.award_name = '项目管理奖' AND aw.year = 2023 AND a.date = '2024-10-06' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-03-14' AND pe.rating = 'D'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2023 AND ar.date = '2024-09-22'	hr
SELECT e.employee_id, e.name, e.major, e.position FROM employees e WHERE e.major <> e.position	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-01' AND ar.check_in > '09:00:00'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE e.hire_date >= '2023-01-01' AND a.award_name = '优秀员工' AND pe.rating = 'A+' AND pe.evaluation_date >= '2022-01-01'	hr
SELECT e.position, COUNT(a.employee_id) AS count, a.year FROM awards a JOIN employees e ON a.employee_id = e.employee_id WHERE a.award_name = '创新奖' AND a.year >= EXTRACT(YEAR FROM date('now')) - 5 GROUP BY e.position, a.year ORDER BY a.year, e.position	hr
SELECT e.name AS employee_name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08' ORDER BY d.name	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND d.name = '销售部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-21' AND a.check_in > '08:30:00' AND p.rating = 'C'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND d.name = '人力资源部'	hr
SELECT e.name, e.employee_id FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-09-14' AND pe.rating = 'C' AND d.name = '财务部'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-09' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-28' AND a.check_in > '08:30:00' AND d.name = '财务部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-28' AND a.check_in > '09:00:00' AND d.name = '法务部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-02' AND a.check_in > '09:00:00' AND d.name = '客户服务部'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-03-08' AND pe.rating = 'C'	hr
SELECT ar.id, ar.employee_id, ar.date, ar.check_in, ar.check_out FROM attendance_records ar JOIN awards a ON ar.employee_id = a.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2020 AND ar.date = '2024-09-28'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-02' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'A+'	hr
SELECT pe.rating FROM performance_evaluations pe JOIN awards a ON pe.employee_id = a.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2021 AND pe.evaluation_date >= '2021-01-01' AND pe.evaluation_date <= '2021-12-31'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-28' AND EXTRACT(EPOCH FROM (a.check_out - a.check_in)) / 3600 > 10 AND p.rating = 'A+' AND p.evaluation_date <= '2024-09-28'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-13' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'A'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-23' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT e.name, a.award_name, p.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.year = 2024 AND a.award_name = '创新奖' AND p.rating = 'B+'	hr
SELECT d.name AS department_name, COUNT(*) AS turnover_count FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE e.hire_date >= date('now') - INTERVAL '1 year' GROUP BY d.name ORDER BY turnover_count DESC LIMIT 3	hr
SELECT e.name AS employee_name, d.name AS department_name, d.manager_id FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-16' AND ar.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '优秀员工' AND a.year = 2023	hr
SELECT AVG(remaining_annual_leave) AS average_remaining_annual_leave FROM employees WHERE EXTRACT(YEAR FROM date('now')) = 2024	hr
SELECT e.name, e.hire_date FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2022 AND e.hire_date >= '2019-01-01'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '销售冠军' AND a.year = 2023 AND pe.rating = 'A+' AND pe.evaluation_date >= '2022-01-01' AND pe.evaluation_date < '2023-01-01'	hr
SELECT e.name, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-20' AND a.check_out > '13:00:00' AND p.rating = 'A+'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-09' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'A'	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '技术突破奖' AND a.year = 2023 AND pe.rating = 'B+'	hr
SELECT a.employee_id, e.name, a.award_name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.year = 2023 AND a.award_name = '新人奖' AND pe.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-20' AND ar.check_in > '08:30:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '法务部' AND a.date = '2024-09-19' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE e.employee_type = '实习生' AND d.name = '客户服务部' AND a.date = '2024-10-04' AND a.check_in > '08:30:00'	hr
SELECT e.name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-20' AND (ar.check_out - ar.check_in) > '10:00:00'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-13' AND a.check_in > '09:00:00' AND d.name = '销售部'	hr
SELECT e.name FROM interviews i JOIN employees e ON i.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE i.interview_date >= '2024-01-01' AND i.interview_date < '2025-01-01' AND d.name = '销售部' ORDER BY i.interview_count DESC LIMIT 1	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '优秀员工' AND a.year = 2022 AND ar.date = '2024-10-09' AND ar.check_in > '08:00:00'	hr
SELECT d.name AS department_name, AVG(i.interview_count) AS avg_interview_count FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN interviews i ON e.employee_id = i.employee_id WHERE e.hire_date IS NOT NULL GROUP BY d.name ORDER BY avg_interview_count DESC LIMIT 1	hr
SELECT e.name, a.date, a.check_in, a.check_out, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-27' AND p.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-20' AND ar.check_in > '09:00:00'	hr
SELECT e.name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date >= '2024-01-01' AND pe.evaluation_date < '2025-01-01' AND pe.rating = 'A+'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-14' AND p.rating = 'B'	hr
SELECT major, AVG(EXTRACT(YEAR FROM AGE(date('now'), hire_date))) AS average_years_of_service FROM employees GROUP BY major	hr
SELECT e.department_id, d.name AS department_name, COUNT(a.id) * 1.0 / COUNT(e.id) AS award_probability FROM employees e LEFT JOIN awards a ON e.employee_id = a.employee_id AND a.year = EXTRACT(YEAR FROM e.hire_date) + 1 LEFT JOIN departments d ON e.department_id = d.department_id GROUP BY e.department_id, d.name ORDER BY award_probability DESC LIMIT 1	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-02' AND a.check_in BETWEEN '08:00:00' AND '09:00:00' AND p.rating = 'A+'	hr
SELECT e.name, e.employee_id FROM employees e JOIN attendance_records ar ON e.employee_id = ar.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-19' AND e.employee_type = '实习生' AND e.remaining_annual_leave = 0 AND d.name = '财务部'	hr
SELECT e.name, e.employee_id FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '质量改进奖' AND a.year = 2022 AND pe.evaluation_date > '2021-10-07'	hr
SELECT d.name AS department_name, AVG(EXTRACT(EPOCH FROM (ar.check_out - ar.check_in)) / 3600) AS avg_overtime_hours FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id GROUP BY d.name ORDER BY avg_overtime_hours DESC LIMIT 3	hr
SELECT e.name, e.hire_date FROM employees e JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE pe.rating = 'B' AND pe.evaluation_date >= '2024-01-01' AND pe.evaluation_date < '2025-01-01'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-19' AND a.check_in < '09:00:00' AND e.university = '清华大学'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-30' AND d.name = '法务部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-04' AND d.name = '人力资源部'	hr
SELECT COUNT(DISTINCT employee_id) FROM employees WHERE hire_date >= date('now') - INTERVAL '6 months'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-23' AND a.check_in > '08:30:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-11' AND a.check_in BETWEEN '09:00:00' AND '10:00:00' AND p.rating = 'B'	hr
SELECT e.employee_id, e.name, e.position, COUNT(a.id) AS activity_count FROM employees e LEFT JOIN attendance_records a ON e.employee_id = a.employee_id GROUP BY e.employee_id, e.name, e.position ORDER BY activity_count DESC	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '行政部' AND a.date = '2024-09-18' AND a.check_in > '08:30:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-05' AND a.check_in BETWEEN '08:00:00' AND '09:00:00' AND p.rating = 'B'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-05' AND a.check_in > '09:00:00' AND p.rating = 'A'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-21' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.name, e.employee_id, d.name AS department_name, pe.rating FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE d.name = '销售部' AND pe.rating = 'A+' AND ar.date = '2024-10-07'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '质量控制部' AND a.date = '2024-09-27' AND a.check_in > '09:00:00'	hr
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-22' AND a.check_in < '09:00:00' AND e.university = '复旦大学'	hr
SELECT e.employee_id, e.name, AVG(e.remaining_annual_leave) AS avg_remaining_annual_leave FROM awards a JOIN employees e ON a.employee_id = e.employee_id WHERE a.award_name = '技术突破奖' AND a.year = 2023 AND e.hire_date > '2020-01-01' GROUP BY e.employee_id, e.name	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-16' AND d.name = '人力资源部' AND a.check_in > '08:30:00'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '质量控制部' AND a.date = '2024-09-16' AND (a.check_out - a.check_in) > '10:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-21' AND a.check_in > '08:30:00' AND d.name = '客户服务部'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-02' AND p.rating = 'A'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND d.name = '人力资源部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN awards aw ON e.employee_id = aw.employee_id WHERE a.date = '2024-09-22' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) > 12 AND aw.year = 2017	hr
SELECT e.name, a.award_name, pe.rating FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '创新奖' AND a.year = 2023 AND pe.rating = 'B'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-03-12' AND pe.rating = 'C'	hr
SELECT e.name, e.employee_id, d.name AS department_name, pe.rating FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE ar.date = '2024-10-06' AND d.name = '质量控制部' AND pe.rating = 'B'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-14' AND ar.check_in > '09:00:00' AND pe.rating = 'D'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-09-21' AND a.check_in < '09:00:00'	hr
SELECT e.department_id, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM employees WHERE hire_date >= date('now') - INTERVAL '1 year') AS turnover_rate FROM employees e WHERE e.hire_date >= date('now') - INTERVAL '1 year' GROUP BY e.department_id ORDER BY turnover_rate DESC LIMIT 1	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-12'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-01' AND a.check_in > '09:00:00' AND p.rating = 'A'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-09-22' AND a.check_in < '09:00:00'	hr
SELECT employee_id, status, end_date FROM probation_employees	hr
SELECT e.name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-10-08' AND ar.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-23'	hr
SELECT e.employee_id, e.name, e.university, e.major, e.employee_type, a.award_name, a.year FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '创新奖' ORDER BY a.year DESC	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '研发部' AND a.date = '2024-10-04' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '优秀员工' AND a.year = 2022	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-20' AND d.name = '客户服务部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-30' AND a.check_in > '09:00:00' AND d.name = '财务部'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-15' AND ar.check_in > '09:00:00' AND pe.rating = 'C'	hr
SELECT e.name, e.employee_id FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-10' AND ar.check_out - ar.check_in > '12:00:00' AND pe.rating = 'A+'	hr
SELECT e.name AS employee_name, d.name AS department_name, ar.check_in, ar.check_out FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-20' AND d.name = '运营部'	hr
SELECT e.name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-28'	hr
SELECT DISTINCT e.employee_id FROM employees e JOIN interviews i ON e.employee_id = i.employee_id WHERE i.interview_count > 3 AND i.interview_date > '2016-12-31' AND i.interview_date < '2025-01-01' AND i.interview_date = (SELECT MAX(interview_date) FROM interviews WHERE employee_id = e.employee_id)	hr
SELECT name FROM employees WHERE department_id = 'D00007' AND position = '工程师' ORDER BY hire_date ASC LIMIT 1	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-18' AND d.name = '研发部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-09-16' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-19' AND d.name = '研发部'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-20' AND d.name = '行政部' AND a.check_in > '09:00:00'	hr
SELECT e.name AS employee_name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-19' AND e.hire_date > '2013-07-30'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-02' AND a.check_in > '09:00:00' AND p.rating = 'B+'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '客户满意度奖' AND a.year = 2021	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-17' AND a.check_in > '09:00:00' AND p.rating = 'D'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.award_name = '领导力奖' AND a.year = 2024	hr
SELECT AVG(e.remaining_annual_leave) AS avg_remaining_annual_leave FROM awards a JOIN employees e ON a.employee_id = e.employee_id WHERE a.award_name = '客户满意度奖' AND a.year = 2023 AND e.hire_date < '2018-01-01'	hr
SELECT e.name AS employee_name, d.name AS department_name, pe.rating AS performance_rating FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-02'	hr
SELECT e.name, e.employee_id, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '运营部' AND a.date = '2024-09-28' AND (a.check_out - a.check_in) > '10:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-09' AND d.name = '客户服务部' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-16' AND p.rating = 'B+'	hr
SELECT e.name, e.employee_id, d.name AS department_name, pe.rating FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2022-08-08' AND d.name = '人力资源部' AND pe.rating = 'D'	hr
SELECT e.name, d.name AS department_name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08' ORDER BY d.name	hr
SELECT e.name, a.date, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-18' AND p.rating = 'C'	hr
SELECT e.name, a.check_in FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-23' AND a.check_in > '09:00:00' AND p.rating = 'C'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-11' AND a.check_in > '09:00:00' AND d.name = '客户服务部'	hr
SELECT e.name, e.employee_id, a.date, a.check_in, a.check_out, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-25' AND p.rating = 'B+'	hr
SELECT d.name AS department_name, e.name AS employee_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-15' AND ar.check_in > '09:00:00' AND pe.rating = 'B'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-18' AND a.check_in < '09:00:00' AND d.name = '研发部'	hr
SELECT e.name, d.name AS department_name, ar.check_in, a.award_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN awards a ON ar.employee_id = a.employee_id WHERE ar.date = '2024-09-24' AND ar.check_in > '08:00:00'	hr
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.award_name = '项目管理奖' AND a.year = 2023 AND ar.date = '2024-10-02' AND ar.check_in > '09:00:00'	hr
SELECT COUNT(*) FROM employees WHERE hire_date >= '2022-01-01' AND hire_date < '2023-01-01' AND major ILIKE '%计算机%'	hr
SELECT e.name, pe.rating FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE a.award_name = '客户满意度奖' AND a.year = 2020 AND pe.evaluation_date > '2020-05-12'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '法务部' AND a.date = '2024-10-10' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-15' AND d.name = '财务部' AND p.rating = 'B+'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-16' AND d.name = '法务部' AND a.check_in > '09:00:00'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-09-27' AND a.check_in > '09:00:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08' AND a.check_in > '09:00:00' AND d.name = '客户服务部'	hr
SELECT COUNT(*) FROM probation_employees pe JOIN employees e ON pe.employee_id = e.employee_id WHERE pe.status = '在职' AND e.hire_date < '2023-01-01'	hr
SELECT e.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-23' AND EXTRACT(HOUR FROM (a.check_out - a.check_in)) > 12 AND p.rating = 'C'	hr
SELECT e.name, e.employee_id, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-27' AND d.name = '行政部' AND a.check_in > '08:30:00'	hr
SELECT e.name, e.remaining_annual_leave FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '领导力奖' AND a.year = 2023 AND e.remaining_annual_leave > 10	hr
SELECT department_id, name FROM departments	hr
SELECT e.name, e.employee_id, a.date, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-22' AND p.rating = 'A'	hr
SELECT university, COUNT(*) AS employee_count FROM employees WHERE university IS NOT NULL GROUP BY university ORDER BY employee_count DESC LIMIT 1	hr
SELECT e.name AS employee_name, d.name AS department_name, a.award_name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.year = 2023	hr
SELECT e.name AS employee_name, d.name AS department_name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-21' ORDER BY d.name	hr
SELECT evaluation_date, rating FROM performance_evaluations WHERE employee_id = 'H08734'	hr
SELECT e.name, d.name AS department_name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN interviews i ON e.employee_id = i.employee_id WHERE pe.rating = 'A' AND pe.evaluation_date >= '2022-01-01' AND pe.evaluation_date < '2023-01-01' AND i.interview_date >= '2021-01-01' AND i.interview_date < '2022-01-01'	hr
SELECT e.name, e.position, a.check_in, a.check_out FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '市场部' AND a.date = '2024-10-06'	hr
SELECT e.name, a.check_in, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-17' AND a.check_in > '09:00:00' AND p.rating = 'B'	hr
SELECT e.name AS employee_name, d.name AS department_name FROM attendance_records ar JOIN employees e ON ar.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE ar.date = '2024-09-27' AND ar.check_in > '08:30:00'	hr
SELECT e.name, a.check_in FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-11' AND a.check_in > '09:00:00' AND p.rating = 'A+'	hr
SELECT c.province, COUNT(*) AS customer_count, AVG(cr.credit_score) AS avg_credit_score FROM customer c JOIN loan_credit cr ON c.id = cr.customer_id GROUP BY c.province	loan_user
SELECT d.bank_nm, d.org_nm, d.card_state FROM debit_card_information d WHERE d.data_dt = '2024-07-07 00:00:00'	loan_user
SELECT f.bank_nm, f.wealth_bal_f FROM financial_products f	loan_user
SELECT deposit_name, data_dt FROM deposit_type	loan_user
SELECT * FROM deposit_type WHERE deposit_id = 'D_007'	loan_user
SELECT * FROM loan_application WHERE loan_amount > 30000	loan_user
SELECT province, SUM(CASE WHEN gender = 'MALE' THEN 1 ELSE 0 END) / COUNT(*) as male_ratio, SUM(CASE WHEN gender = 'FEMALE' THEN 1 ELSE 0 END) / COUNT(*) as female_ratio FROM customer GROUP BY province ORDER BY province	loan_user
SELECT corporation, xaccount, bank, acc_name1 FROM credit_card_data WHERE day_opened = '2024-07-07' AND close_code = '正常'	loan_user
SELECT c.customer_name, c.id_number, lr.repayment_amount, lr.repayment_date FROM customer c JOIN loan_repayment lr ON c.id = lr.loan_application_id WHERE lr.repayment_date > '2023-06-30' ORDER BY lr.repayment_date DESC	loan_user
SELECT c.customer_name, la.loan_amount, la.loan_term, SUM(lr.repayment_amount) AS total_repayment_amount FROM loan_application la JOIN customer c ON la.customer_id = c.id JOIN loan_type lt ON la.loan_type_id = lt.id JOIN loan_repayment lr ON la.id = lr.loan_application_id WHERE lt.loan_type_name = '住房贷款' AND la.apply_date > '2024-07-19' GROUP BY c.customer_name, la.loan_amount, la.loan_term ORDER BY total_repayment_amount DESC	loan_user
SELECT ld.cust_id, ld.loan_balance FROM loan_detail_info ld WHERE ld.loandate_e = '2027-12-01'	loan_user
SELECT la.customer_id, la.loan_amount, lc.credit_score FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id JOIN loan_credit lc ON la.customer_id = lc.customer_id WHERE lt.loan_type_name = '住房贷款' AND la.apply_date >= '2019-01-01' AND la.apply_date < '2020-01-01' AND lc.credit_score > 0.75 ORDER BY la.loan_amount DESC	loan_user
SELECT c.customer_name, la.loan_amount FROM loan_application la JOIN customer c ON la.customer_id = c.id WHERE la.apply_date = '2020-11-24' AND la.status = 'REJECTED' ORDER BY la.loan_amount DESC	loan_user
SELECT la.id, la.status FROM loan_application la WHERE la.apply_date = '2012-10-31'	loan_user
SELECT lt.loan_type_name, AVG(la.loan_amount) AS avg_loan_amount, AVG(lc.credit_score) AS avg_credit_score FROM loan_type lt JOIN loan_application la ON lt.id = la.loan_type_id JOIN loan_credit lc ON la.customer_id = lc.customer_id GROUP BY lt.loan_type_name ORDER BY avg_loan_amount DESC	loan_user
SELECT o.occupation_name, o.description AS occupation_description, ls.loan_status_name, ls.description AS loan_status_description FROM occupation o JOIN loan_status ls ON o.occupation_code = 'NURSE' AND ls.loan_status_code = 'APPROVED'	loan_user
SELECT lc.customer_id, lc.credit_score FROM loan_credit lc WHERE lc.credit_date >= date('now') - INTERVAL '1 year'	loan_user
SELECT f.rs_type_name, COUNT(*) AS user_count FROM five_level_classification f JOIN loan_detail_info l ON f.rs_type_id = l.judgelevel GROUP BY f.rs_type_name ORDER BY f.rs_type_name	loan_user
SELECT * FROM loan_status WHERE loan_status_code = 'REJECTED'	loan_user
SELECT f.rs_type_name, COUNT(DISTINCT l.cust_id) AS customer_count FROM five_level_classification f JOIN loan_detail_info l ON f.rs_type_id = l.judgelevel GROUP BY f.rs_type_name	loan_user
SELECT * FROM loan_detail_info WHERE loan_balance > 1000000 ORDER BY loan_balance DESC	loan_user
SELECT l.cust_id, l.cust_type, l.loan_balance, b.bank_name FROM loan_detail_info l JOIN bank_orgnization b ON l.loan_orgno = b.bank_id WHERE l.loan_balance > 1000000 ORDER BY l.loan_balance DESC	loan_user
SELECT o.occupation_name, ls.loan_status_name FROM occupation o JOIN loan_status ls ON o.id = ls.id ORDER BY o.occupation_name	loan_user
SELECT lr.repayment_amount, lr.repayment_date FROM loan_repayment lr WHERE lr.repayment_date = '2024-10-14'	loan_user
SELECT deposit_name, data_dt FROM deposit_type	loan_user
SELECT loan_type_name, description FROM loan_type	loan_user
SELECT d.card_no, d.current_bal FROM debit_card_information d WHERE d.open_date = '2024-07-14'	loan_user
SELECT la.customer_id, lt.loan_type_name, la.loan_amount FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id WHERE la.apply_date = '2020-11-24' AND la.status = 'REJECTED' ORDER BY la.loan_amount DESC	loan_user
WITH customer_stats AS (SELECT c.id, c.customer_name, COUNT(CASE WHEN l.status = 'APPROVED' THEN 1 END) / COUNT(*) as approval_rate, SUM(l.loan_amount) as total_loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id GROUP BY c.id, c.customer_name) SELECT customer_name, (approval_rate * 50 + (1 - LEAST(total_loan_amount / 100000, 1)) * 50) as credit_score FROM customer_stats ORDER BY credit_score DESC	loan_user
SELECT o.occupation_name, AVG(la.loan_amount) as avg_loan_amount, AVG(fp.wealth_bal) as avg_wealth_balance FROM occupation o LEFT JOIN loan_application la ON o.occupation_code = la.customer_id LEFT JOIN financial_products fp ON o.occupation_code = fp.cust_no GROUP BY o.occupation_name	loan_user
SELECT c.customer_name, cr.credit_score FROM customer c JOIN loan_credit cr ON c.id = cr.customer_id ORDER BY cr.credit_score DESC	loan_user
SELECT dci.current_bal FROM debit_card_information dci JOIN loan_application la ON dci.cust_no = 'C1000009' AND la.apply_date = '2019-01-10' AND la.status = 'REJECTED' WHERE dci.cust_no = 'C1000009'	loan_user
SELECT lt.loan_type_name, COUNT(ub.id) AS behavior_count FROM loan_type lt LEFT JOIN user_behavior ub ON lt.id = ub.customer_id GROUP BY lt.loan_type_name	loan_user
SELECT l.loan_type_id, c.customer_name FROM loan_application l JOIN customer c ON l.customer_id = c.id	loan_user
SELECT * FROM transfer ORDER BY transfer_date DESC	loan_user
SELECT customer_id, credit_score FROM loan_credit WHERE credit_score > 0.6	loan_user
SELECT c.customer_name, c.phone_number FROM customer c JOIN occupation o ON c.occupation_id = o.id WHERE o.occupation_name = '护士'	loan_user
SELECT wealth_bal FROM financial_products WHERE data_dt = '2024-07-07' AND bank_nm = '北京王府井支行' AND cust_no = 'C007'	loan_user
SELECT bank_level, data_dt FROM bank_orgnization	loan_user
SELECT c.customer_name, c.id_number, lc.credit_score, lc.credit_date FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id WHERE lc.credit_score > 0.8 ORDER BY lc.credit_score DESC	loan_user
SELECT customer_name, gender, birth_date FROM customer WHERE birth_date > '1980-01-01' ORDER BY birth_date DESC	loan_user
SELECT * FROM loan_detail_info WHERE vouch_type = '信用担保'	loan_user
SELECT f.currency, f.cust_no FROM financial_products f	loan_user
SELECT vouch_type, SUM(loan_amount) AS total_loan, AVG(loan_amount) AS avg_loan FROM loan_detail_info GROUP BY vouch_type	loan_user
SELECT l.loan_type_name, COUNT(la.id) AS application_count FROM loan_application la JOIN loan_type l ON la.loan_type_id = l.id GROUP BY l.loan_type_name ORDER BY l.loan_type_name	loan_user
SELECT COUNT(DISTINCT l.cust_id) FROM loan_detail_info l JOIN loan_repayment r ON l.reportid = r.loan_application_id WHERE l.loan_balance > 500000 AND r.repayment_amount < 1000	loan_user
SELECT ld.cust_id, ld.loan_amount FROM loan_detail_info ld	loan_user
SELECT la.customer_id, la.loan_amount, la.loan_term FROM loan_application la WHERE la.apply_date >= '2020-11-01' AND la.apply_date < '2020-12-01' AND la.status = 'REJECTED' ORDER BY la.loan_amount DESC	loan_user
SELECT description FROM loan_credit WHERE customer_id = 533302	loan_user
SELECT o.occupation_name, o.description FROM loan_status ls JOIN occupation o ON ls.id = o.id WHERE ls.loan_status_code = 'APPROVED'	loan_user
SELECT d.deposit_type_name, COUNT(DISTINCT l.cust_id) AS customer_count FROM deposit_type d JOIN loan_detail_info l ON d.data_dt = l.dw_date GROUP BY d.deposit_type_name ORDER BY customer_count DESC	loan_user
SELECT transfer_amount FROM transfer WHERE transfer_date = '2020-11-03' AND source_customer_id = 655655 AND target_customer_id = 655655	loan_user
SELECT ldi.cust_type, ldi.loan_balance, ldi.loan_orgno, bo.bank_name FROM loan_detail_info ldi JOIN bank_orgnization bo ON ldi.loan_orgno = bo.bank_id WHERE ldi.loandate_s > '2024-07-01' AND ldi.loan_balance > 500000	loan_user
SELECT bank_id, bank_name, bank_level FROM bank_orgnization	loan_user
WITH branch_balances AS (SELECT d.bank_nm, SUM(d.current_bal + d.fixed_bal) AS total_deposit, SUM(CASE WHEN lt.loan_type_name IS NOT NULL THEN d.current_bal + d.fixed_bal ELSE 0 END) AS total_loan FROM debit_card_information d LEFT JOIN loan_type lt ON d.cust_no = lt.loan_type_code GROUP BY d.bank_nm) SELECT bank_nm, ABS(total_deposit / NULLIF(total_loan, 0) - 1) AS ratio_difference FROM branch_balances ORDER BY ratio_difference ASC LIMIT 1	loan_user
WITH avg_balance AS (SELECT AVG(acct_bal) FROM deposit_account_info), avg_credit AS (SELECT AVG(credit_score) FROM loan_credit) SELECT c.customer_name, dai.acct_bal AS deposit_balance, lc.credit_score FROM customer c JOIN deposit_account_info dai ON c.id_number = dai.cert_code JOIN loan_credit lc ON c.id = lc.customer_id LEFT JOIN loan_application la ON c.id = la.customer_id WHERE dai.acct_bal > (SELECT * FROM avg_balance) AND lc.credit_score > (SELECT * FROM avg_credit) AND (la.id IS NULL OR la.apply_date < date('now') - INTERVAL '1 year')	loan_user
SELECT o.occupation_name, COUNT(*) as customer_count, AVG(EXTRACT(YEAR FROM AGE(date('now'), c.birth_date))) as avg_age FROM occupation o JOIN customer c ON o.id = c.occupation_id GROUP BY o.occupation_name ORDER BY customer_count DESC	loan_user
SELECT c.customer_name, ls.loan_status_name FROM customer c JOIN loan_application la ON c.id = la.customer_id JOIN loan_status ls ON la.status = ls.loan_status_code WHERE la.id = (SELECT MAX(id) FROM loan_application WHERE customer_id = c.id)	loan_user
SELECT c.customer_name, a.loan_amount FROM customer c JOIN loan_application a ON c.id = a.customer_id ORDER BY a.loan_amount DESC	loan_user
SELECT dci.cust_nm, dci.card_no, dci.current_bal FROM debit_card_information dci WHERE dci.data_dt = '2024-07-09' AND dci.card_state = '正常' AND dci.current_bal > 2000	loan_user
SELECT CASE WHEN EXTRACT(YEAR FROM AGE(date('now'), c.birth_date)) BETWEEN 20 AND 30 THEN '20-30' WHEN EXTRACT(YEAR FROM AGE(date('now'), c.birth_date)) BETWEEN 31 AND 40 THEN '31-40' WHEN EXTRACT(YEAR FROM AGE(date('now'), c.birth_date)) BETWEEN 41 AND 50 THEN '41-50' ELSE '51+' END AS age_group, COUNT(DISTINCT c.id) AS customer_count, AVG(dai.acct_bal) AS avg_deposit_balance, AVG(la.loan_amount) AS avg_loan_amount FROM customer c LEFT JOIN deposit_account_info dai ON c.id_number = dai.cert_code LEFT JOIN loan_application la ON c.id = la.customer_id GROUP BY age_group ORDER BY age_group	loan_user
SELECT c.customer_name, dai.acct_bal AS deposit_balance, la.status AS latest_loan_status, la.loan_amount AS latest_loan_amount FROM customer c JOIN deposit_account_info dai ON c.id_number = dai.cert_code LEFT JOIN loan_application la ON c.id = la.customer_id WHERE la.apply_date = (SELECT MAX(apply_date) FROM loan_application WHERE customer_id = c.id) ORDER BY dai.acct_bal DESC LIMIT 5	loan_user
SELECT c.birth_date, o.occupation_name FROM customer c JOIN occupation o ON c.occupation_id = o.id	loan_user
SELECT f.cast_type, COUNT(*) AS product_count FROM financial_products f GROUP BY f.cast_type	loan_user
SELECT f.rs_type_name, COUNT(ld.reportid) AS loan_count, ld.cust_id FROM five_level_classification f JOIN loan_detail_info ld ON f.rs_type_id = ld.judgelevel WHERE f.rs_type_name = '损失' GROUP BY f.rs_type_name, ld.cust_id	loan_user
SELECT * FROM deposit_account_info WHERE data_dt = '2024-07-20' AND acct_bal > 100000	loan_user
SELECT COUNT(DISTINCT la.customer_id) FROM debit_card_information dci JOIN loan_application la ON dci.cust_no = la.customer_id JOIN loan_type lt ON la.loan_type_id = lt.id WHERE dci.data_dt = '2024-07-09' AND dci.bank_nm = '杭州上城区支行' AND lt.loan_type_name = '住房贷款'	loan_user
SELECT dci.card_type_nm, dci.current_bal FROM debit_card_information dci WHERE dci.open_date = '2024-07-09' AND dci.residential_address = '987 Willow Street'	loan_user
SELECT bank_name, bank_parent FROM bank_orgnization WHERE bank_level = '2'	loan_user
SELECT l.vouch_type, COUNT(*) AS bad_loan_count FROM loan_detail_info l JOIN five_level_classification f ON l.judgelevel = f.rs_type_id WHERE f.rs_type = '不良' GROUP BY l.vouch_type	loan_user
SELECT c.customer_name, o.occupation_name FROM customer c JOIN occupation o ON c.occupation_id = o.id	loan_user
SELECT loan_application_id, SUM(repayment_amount) AS total_repayment FROM loan_repayment GROUP BY loan_application_id	loan_user
SELECT deposit_id, data_dt FROM deposit_type WHERE deposit_type_name = '存款基础类型'	loan_user
SELECT c.curr_full_name, SUM(l.loan_balance) AS total_loan_balance FROM loan_detail_info l JOIN currency c ON l.currency_type = c.curr_code WHERE c.data_dt = '2023-06-30' AND c.curr_class = '外币' GROUP BY c.curr_full_name	loan_user
SELECT SUM(wealth_bal) AS total_wealth_bal FROM financial_products WHERE data_dt = '2024-07-02' AND currency = 'USD' AND cast_type = '对公'	loan_user
SELECT c.customer_name, o.occupation_name FROM customer c JOIN occupation o ON c.occupation_id = o.id JOIN loan_repayment lr ON c.id = lr.loan_application_id WHERE lr.repayment_date BETWEEN '2019-01-01' AND '2019-12-31'	loan_user
SELECT bank_name, bank_level FROM bank_orgnization	loan_user
SELECT lr.loan_application_id, lr.repayment_amount FROM loan_repayment lr WHERE lr.repayment_date = '2021-11-10'	loan_user
SELECT bank_nm FROM financial_products WHERE data_dt = '2024-07-02T00:00:00' AND wealth_bal > 5000000 AND cast_type = '对公'	loan_user
SELECT corporation, xaccount, bank, acc_name1 FROM credit_card_data WHERE day_opened = '2024-07-07' AND addr_type = 'Home'	loan_user
SELECT b.bank_level, SUM(f.wealth_bal) AS total_wealth_balance FROM bank_orgnization b JOIN financial_products f ON b.bank_id = f.bank_no GROUP BY b.bank_level	loan_user
SELECT l.*, c.birth_date FROM loan_application l JOIN customer c ON l.customer_id = c.id	loan_user
SELECT lc.customer_id, lc.credit_score, ub.description FROM loan_credit lc JOIN user_behavior ub ON lc.customer_id = ub.customer_id ORDER BY lc.customer_id	loan_user
SELECT lt.loan_type_name, COUNT(lr.loan_application_id) AS application_count FROM loan_type lt LEFT JOIN loan_repayment lr ON lt.id = lr.loan_application_id GROUP BY lt.loan_type_name	loan_user
SELECT lr.id, lr.loan_application_id, lr.repayment_amount, lr.repayment_date, la.customer_id, lt.loan_type_name FROM loan_repayment lr JOIN loan_application la ON lr.loan_application_id = la.id JOIN loan_type lt ON la.loan_type_id = lt.id WHERE lr.repayment_date = '2021-11-10'	loan_user
SELECT description FROM loan_type WHERE loan_type_name = '住房贷款'	loan_user
SELECT u.customer_id, u.behavior_date FROM user_behavior u ORDER BY u.behavior_date	loan_user
SELECT c.customer_name, lc.credit_score, la.status AS latest_loan_status, la.loan_amount AS latest_loan_amount FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id LEFT JOIN loan_application la ON c.id = la.customer_id WHERE la.apply_date = (SELECT MAX(apply_date) FROM loan_application WHERE customer_id = c.id) ORDER BY lc.credit_score DESC LIMIT 10	loan_user
SELECT d.cust_name, l.loan_type, l.loan_balance FROM deposit_account_info d JOIN loan_detail_info l ON d.cust_no = l.cust_id WHERE l.dw_date = '2024-07-19' AND l.loan_balance > 500000 ORDER BY l.loan_balance DESC	loan_user
SELECT lc.customer_id, lc.credit_score, la.status FROM loan_credit lc JOIN loan_application la ON lc.customer_id = la.customer_id WHERE lc.credit_score < 500	loan_user
SELECT cust_no, cast_type, currency, wealth_bal, wealth_bal_t, wealth_bal_f FROM financial_products WHERE data_dt = '2024-07-02' AND currency = 'USD' AND wealth_bal > 1000000	loan_user
SELECT c.customer_name, o.occupation_name, l.loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id JOIN occupation o ON c.occupation_id = o.id ORDER BY l.loan_amount DESC LIMIT 3	loan_user
SELECT c.customer_name, COUNT(l.id) as application_count FROM customer c JOIN loan_application l ON c.id = l.customer_id GROUP BY c.id, c.customer_name ORDER BY application_count DESC LIMIT 5	loan_user
SELECT l.repayment_date, l.description FROM loan_repayment l WHERE l.repayment_date BETWEEN '2023-01-01' AND '2023-12-31'	loan_user
SELECT f.rs_type_name, SUM(l.loan_amount) AS total_amount FROM five_level_classification f JOIN loan_detail_info l ON f.rs_type_id = l.judgelevel GROUP BY f.rs_type_name ORDER BY f.rs_type_name	loan_user
SELECT fp.cast_type, fp.wealth_bal, fp.bank_nm FROM financial_products fp ORDER BY fp.bank_nm	loan_user
SELECT c.customer_name, l.status FROM loan_application l JOIN customer c ON l.customer_id = c.id	loan_user
SELECT c.customer_name, lr.repayment_amount FROM loan_repayment lr JOIN loan_application la ON lr.loan_application_id = la.id JOIN customer c ON la.customer_id = c.id WHERE lr.repayment_date = '2021-11-10' AND lr.repayment_amount > 20 ORDER BY lr.repayment_amount DESC	loan_user
SELECT lt.loan_type_name, AVG(la.loan_amount) as avg_loan_amount, COUNT(*) as application_count FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id GROUP BY lt.loan_type_name	loan_user
SELECT bank_name, bank_parent FROM bank_orgnization	loan_user
SELECT dai.bank_nm, SUM(la.loan_amount) / SUM(dai.acct_bal) as loan_to_deposit_ratio FROM loan_application la JOIN deposit_account_info dai ON la.customer_id = dai.cust_noeger GROUP BY dai.bank_nm	loan_user
SELECT dai.cust_name, dai.cert_code, dai.acct_bal, c.curr_full_name FROM deposit_account_info dai JOIN currency c ON dai.cur_type = c.curr_code WHERE dai.data_dt = '2024-07-19' AND dai.cust_type = '对私' AND dai.cur_type = 'USD'	loan_user
SELECT corporation, xaccount, bank, category, custr_nbr FROM credit_card_data WHERE age1 > 5000	loan_user
SELECT c.customer_name, o.occupation_name, ub.behavior_type FROM customer c JOIN user_behavior ub ON c.id = ub.customer_id JOIN occupation o ON c.occupation_id = o.id WHERE ub.behavior_date = '2017-10-24'	loan_user
SELECT lc.customer_id, lt.loan_type_name, la.loan_amount FROM loan_credit lc JOIN loan_application la ON lc.customer_id = la.customer_id JOIN loan_type lt ON la.loan_type_id = lt.id WHERE lc.credit_score > 0.8 ORDER BY la.loan_amount DESC	loan_user
SELECT la.customer_id, la.apply_date AS loan_apply_date, MIN(t.transfer_date) AS first_transfer_date FROM loan_application la JOIN transfer t ON la.customer_id = t.source_customer_id WHERE la.apply_date >= '2019-01-01' AND la.apply_date < '2020-01-01' AND t.transfer_date > la.apply_date GROUP BY la.customer_id, la.apply_date ORDER BY la.customer_id	loan_user
WITH avg_loan AS (SELECT AVG(loan_amount) as avg_amount FROM loan_application) SELECT c.customer_name, l.loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id, avg_loan ORDER BY ABS(l.loan_amount - avg_loan.avg_amount) ASC LIMIT 5	loan_user
WITH occupation_stats AS (SELECT c.occupation_id, AVG(dai.acct_bal) AS avg_deposit, AVG(la.loan_amount) AS avg_loan, AVG(lc.credit_score) AS avg_credit FROM customer c LEFT JOIN deposit_account_info dai ON c.id_number = dai.cert_code LEFT JOIN loan_application la ON c.id = la.customer_id LEFT JOIN loan_credit lc ON c.id = lc.customer_id GROUP BY c.occupation_id), overall_avg AS (SELECT AVG(avg_deposit) AS overall_avg_deposit, AVG(avg_loan) AS overall_avg_loan, AVG(avg_credit) AS overall_avg_credit FROM occupation_stats) SELECT os.occupation_id FROM occupation_stats os, overall_avg oa WHERE os.avg_deposit > oa.overall_avg_deposit AND os.avg_loan > oa.overall_avg_loan AND os.avg_credit > oa.overall_avg_credit	loan_user
SELECT b.bank_level, f.wealth_bal, f.cust_no FROM bank_orgnization b JOIN financial_products f ON b.bank_id = f.bank_no	loan_user
SELECT COUNT(DISTINCT lc.customer_id) FROM loan_application la JOIN loan_credit lc ON la.customer_id = lc.customer_id WHERE la.apply_date = '2019-01-10' AND la.status = 'REJECTED' AND lc.credit_score < 0.5	loan_user
SELECT cust_name, cert_typ, cert_code, acct_bal FROM deposit_account_info WHERE cust_type = '对私' AND acct_bal > 100000	loan_user
SELECT SUM(lr.repayment_amount) AS total_repayment_amount FROM loan_repayment lr JOIN occupation o ON lr.loan_application_id = o.id WHERE o.occupation_code = 'NURSE' AND lr.repayment_date = '2021-11-10'	loan_user
SELECT customer_id, loan_type_id, loan_amount FROM loan_application WHERE status = 'REJECTED'	loan_user
SELECT fp.currency, c.curr_class, fp.wealth_bal FROM financial_products fp JOIN currency c ON fp.currency = c.curr_code WHERE fp.data_dt = '2024-07-02' AND fp.wealth_bal > 1000000	loan_user
SELECT loan_type_code, loan_type_name, description FROM loan_type	loan_user
SELECT la.customer_id, COUNT(la.id) AS application_count, ls.loan_status_name FROM loan_application la JOIN loan_status ls ON la.status = ls.loan_status_code GROUP BY la.customer_id, ls.loan_status_name	loan_user
SELECT lt.loan_type_name, c.customer_name, la.loan_amount FROM loan_type lt JOIN loan_application la ON lt.id = la.loan_type_id JOIN customer c ON la.customer_id = c.id	loan_user
SELECT loan_type_name, description FROM loan_type	loan_user
SELECT fp.org_nm, fp.wealth_bal_f FROM financial_products fp JOIN bank_orgnization bo ON fp.org_no = bo.bank_id WHERE bo.bank_name = '杭州上城区支行' AND bo.data_dt = '2023-06-30' ORDER BY fp.wealth_bal_f DESC LIMIT 1	loan_user
SELECT la.id, ub.behavior_type, lt.loan_type_name FROM loan_application la JOIN user_behavior ub ON la.customer_id = ub.customer_id JOIN loan_type lt ON la.loan_type_id = lt.id	loan_user
SELECT l.*, c.customer_name FROM loan_application l JOIN customer c ON l.customer_id = c.id	loan_user
SELECT * FROM transfer WHERE source_customer_id = target_customer_id	loan_user
SELECT cust_no, card_no, open_date, current_bal FROM debit_card_information WHERE open_date > '2024-07-01' AND current_bal > 1000 ORDER BY current_bal DESC	loan_user
SELECT l.repayment_date, SUM(l.repayment_amount) AS total_repayment FROM loan_repayment l GROUP BY l.repayment_date	loan_user
SELECT o.occupation_name, AVG(l.loan_amount) as avg_loan_amount FROM occupation o JOIN customer c ON o.id = c.occupation_id JOIN loan_application l ON c.id = l.customer_id GROUP BY o.occupation_name ORDER BY avg_loan_amount DESC	loan_user
SELECT la.customer_id, lc.credit_score, lt.loan_type_name, la.loan_amount FROM loan_application la JOIN loan_credit lc ON la.customer_id = lc.customer_id JOIN loan_type lt ON la.loan_type_id = lt.id WHERE la.apply_date >= '2020-11-01' AND la.apply_date < '2020-12-01' AND lc.credit_score > 0.8 AND la.status = 'REJECTED'	loan_user
SELECT la.customer_id, lr.repayment_amount, lc.credit_score, la.status FROM loan_repayment lr JOIN loan_application la ON lr.loan_application_id = la.id JOIN loan_credit lc ON la.customer_id = lc.customer_id WHERE lr.repayment_date = '2021-11-10' AND lr.repayment_amount > 20 ORDER BY lr.repayment_amount DESC	loan_user
SELECT lc.customer_id, lc.credit_score, la.loan_amount FROM loan_credit lc JOIN loan_application la ON lc.customer_id = la.customer_id ORDER BY lc.credit_score ASC	loan_user
SELECT deposit_id, data_dt FROM deposit_type	loan_user
SELECT currency, SUM(wealth_bal) AS total_wealth_bal FROM financial_products WHERE data_dt = '2024-07-02' AND cast_type = '对公' GROUP BY currency	loan_user
SELECT la.loan_amount, la.status FROM loan_application la	loan_user
SELECT behavior_type, description FROM user_behavior WHERE behavior_date = '2017-10-24'	loan_user
SELECT COUNT(*) FROM loan_detail_info l JOIN loan_repayment r ON l.reportid = r.loan_application_id WHERE r.repayment_amount > l.loan_balance * 0.1	loan_user
SELECT loan_type_name, description FROM loan_type ORDER BY loan_type_name	loan_user
SELECT credit_score, description FROM loan_credit WHERE customer_id = 533302	loan_user
SELECT behavior_type, COUNT(DISTINCT customer_id) AS user_count FROM user_behavior GROUP BY behavior_type	loan_user
SELECT ldi.cust_id, ldi.loan_balance, ldi.loan_type, c.curr_full_name, flc.rs_type_name FROM loan_detail_info ldi JOIN currency c ON ldi.currency_type = c.curr_code JOIN five_level_classification flc ON ldi.judgelevel = flc.rs_type_id WHERE ldi.loandate_s > '2024-07-01' AND ldi.loan_balance > 500000 ORDER BY ldi.loan_balance DESC	loan_user
WITH occupation_avg AS (SELECT o.id as occupation_id, o.occupation_name, AVG(l.loan_amount) as avg_loan_amount FROM occupation o JOIN customer c ON o.id = c.occupation_id JOIN loan_application l ON c.id = l.customer_id GROUP BY o.id, o.occupation_name), closest_customer AS (SELECT oa.occupation_name, c.customer_name, l.loan_amount, oa.avg_loan_amount, ROW_NUMBER() OVER (PARTITION BY oa.occupation_id ORDER BY ABS(l.loan_amount - oa.avg_loan_amount)) as rank FROM occupation_avg oa JOIN customer c ON oa.occupation_id = c.occupation_id JOIN loan_application l ON c.id = l.customer_id) SELECT occupation_name, customer_name, loan_amount, avg_loan_amount FROM closest_customer WHERE rank = 1 ORDER BY occupation_name	loan_user
SELECT loan_type_name, loan_type_code FROM loan_type WHERE loan_type_name IS NOT NULL	loan_user
SELECT d.deposit_type_name, SUM(l.loan_amount) AS total_loan_amount FROM deposit_type d JOIN loan_detail_info l ON d.data_dt = l.dw_date GROUP BY d.deposit_type_name	loan_user
SELECT SUM(t.transfer_amount) + SUM(lr.repayment_amount) AS total_amount FROM transfer t LEFT JOIN loan_repayment lr ON t.source_customer_id = lr.loan_application_id WHERE t.source_customer_id = 655655 AND t.transfer_date BETWEEN '2020-11-01' AND '2020-11-30'	loan_user
SELECT dai.bank_nm, AVG(la.loan_amount) as avg_loan_amount, AVG(lr.repayment_amount) as avg_repayment_amount FROM loan_application la JOIN deposit_account_info dai ON la.customer_id = dai.cust_noeger LEFT JOIN loan_repayment lr ON la.id = lr.loan_application_id GROUP BY dai.bank_nm	loan_user
SELECT dt.deposit_name, flc.rs_type_name FROM deposit_type dt JOIN five_level_classification flc ON dt.data_dt = flc.data_dt WHERE dt.data_dt = '2024-07-22'	loan_user
SELECT cust_name, acct_bal, cur_type FROM deposit_account_info WHERE data_dt = '2024-07-17' AND acct_bal > 100000 ORDER BY acct_bal DESC	loan_user
SELECT MAX(loan_amount) as max_loan_amount FROM loan_application WHERE apply_date = '2018-03-06'	loan_user
SELECT lr.repayment_date, lr.repayment_amount FROM loan_repayment lr JOIN loan_application la ON lr.loan_application_id = la.id	loan_user
SELECT ccd.corporation, ccd.acc_name1, ccd.category, c.curr_full_name FROM credit_card_data ccd JOIN currency c ON ccd.curr_num = c.curr_code ORDER BY ccd.corporation, ccd.acc_name1	loan_user
SELECT DATE_TRUNC('month', LEAST(c.birth_date, dai.data_dt, la.apply_date)) AS month, COUNT(DISTINCT c.id) AS new_customers, SUM(dai.acct_bal) AS new_deposits, SUM(la.loan_amount) AS new_loan_applications FROM customer c LEFT JOIN deposit_account_info dai ON c.id_number = dai.cert_code LEFT JOIN loan_application la ON c.id = la.customer_id GROUP BY month ORDER BY month	loan_user
SELECT d.cust_nm, d.residential_address FROM debit_card_information d JOIN bank_orgnization b ON d.org_nm = b.bank_name WHERE d.card_state = '正常' AND d.data_dt = '2024-07-09' AND b.bank_name = '杭州上城区支行'	loan_user
SELECT lt.loan_type_name, c.customer_name, la.status FROM loan_type lt JOIN loan_application la ON lt.id = la.loan_type_id JOIN customer c ON la.customer_id = c.id	loan_user
SELECT la.customer_id, lr.repayment_amount FROM loan_application la JOIN loan_repayment lr ON la.id = lr.loan_application_id WHERE la.status = 'APPROVED' AND lr.repayment_date = '2021-11-10' AND lr.repayment_amount > 20	loan_user
SELECT COUNT(DISTINCT dci.cust_no) FROM debit_card_information dci JOIN financial_products fp ON dci.cust_no = fp.cust_no WHERE dci.bank_no = 'BANK_00301' AND dci.data_dt = '2023-06-30' AND fp.wealth_bal > 10000 AND fp.data_dt = '2023-06-30'	loan_user
SELECT loan_type_name, description FROM loan_type WHERE description IS NOT NULL	loan_user
SELECT ccd.custr_nbr, ccd.bal_free AS credit_card_balance, fp.wealth_bal AS financial_product_balance FROM credit_card_data ccd JOIN financial_products fp ON ccd.curr_num = fp.currency WHERE ccd.bal_free > fp.wealth_bal AND ccd.dw_date >= '2024-07-01' AND ccd.dw_date < '2024-08-01' AND fp.data_dt >= '2024-07-01' AND fp.data_dt < '2024-08-01'	loan_user
SELECT COUNT(DISTINCT lc.customer_id) FROM loan_credit lc JOIN transfer t ON lc.customer_id = t.source_customer_id OR lc.customer_id = t.target_customer_id WHERE lc.credit_date = '2017-10-31' AND lc.credit_score > 0.8	loan_user
SELECT loan_type_name, description FROM loan_type WHERE loan_type_code = 'MORTGAGE'	loan_user
SELECT cust_id, COUNT(*) AS loan_count, SUM(loan_amount) AS total_loan FROM loan_detail_info GROUP BY cust_id	loan_user
SELECT loan_status_code, description FROM loan_status	loan_user
SELECT rs_type_name, rs_type FROM five_level_classification WHERE data_dt = '2024-07-22'	loan_user
SELECT COUNT(*) FROM deposit_account_info dai JOIN bank_orgnization bo ON dai.bank_no = bo.bank_id WHERE bo.bank_name = '杭州上城区支行' AND dai.data_dt = '2023-06-30' AND dai.acct_bal > 100000	loan_user
SELECT CASE WHEN credit_score < 600 THEN 'Low' WHEN credit_score BETWEEN 600 AND 700 THEN 'Medium' ELSE 'High' END AS credit_level, COUNT(*) FROM loan_credit GROUP BY credit_level	loan_user
SELECT l.vouch_type, COUNT(CASE WHEN f.rs_type = '不良' THEN 1 END) / COUNT(*) AS bad_loan_ratio FROM loan_detail_info l JOIN five_level_classification f ON l.judgelevel = f.rs_type_id GROUP BY l.vouch_type	loan_user
WITH avg_loan AS (SELECT AVG(loan_amount) as avg_amount FROM loan_application) SELECT c.customer_name, la.loan_amount, ABS(la.loan_amount - avg_loan.avg_amount) as difference FROM customer c JOIN loan_application la ON c.id = la.customer_id, avg_loan ORDER BY difference ASC LIMIT 10	loan_user
SELECT deposit_type_id FROM deposit_type WHERE deposit_name = '协定存款' AND data_dt = '2024-07-22'	loan_user
SELECT ld.vouch_type, COUNT(ld.reportid) AS loan_count FROM loan_detail_info ld GROUP BY ld.vouch_type	loan_user
SELECT c.curr_code, c.curr_full_name, fp.wealth_bal, fp.cast_type FROM currency c JOIN financial_products fp ON c.curr_code = fp.currency WHERE c.data_dt = '2023-06-30' AND fp.wealth_bal > 1000000 AND fp.cast_type = '对公'	loan_user
SELECT dt.deposit_name, COUNT(DISTINCT dai.cust_no) as customer_count, SUM(dai.acct_bal) as total_balance FROM deposit_account_info dai JOIN deposit_type dt ON dai.arl_pdp_code = dt.deposit_id GROUP BY dt.deposit_name	loan_user
SELECT d.deposit_name, d.data_dt FROM deposit_type d	loan_user
SELECT d.cust_name, d.acct_type_code FROM deposit_account_info d WHERE d.acct_bal > 10000	loan_user
SELECT COUNT(DISTINCT la.customer_id) FROM loan_application la JOIN credit_card_data ccd ON la.customer_id = CAST(ccd.custr_nbr AS INTEGER) WHERE la.apply_date BETWEEN '2024-07-01' AND '2024-07-31' AND la.status = 'REJECTED' AND la.loan_amount > 10000 AND ccd.age1 > 5000	loan_user
SELECT customer_id, COUNT(DISTINCT behavior_type) AS behavior_type_count FROM user_behavior GROUP BY customer_id	loan_user
SELECT * FROM loan_detail_info WHERE cust_type = '对公'	loan_user
SELECT COUNT(*) FROM credit_card_data c JOIN bank_orgnization b ON c.bank = b.bank_id WHERE b.bank_name = '沈阳余淮支行' AND b.data_dt = '2023-06-30' AND c.age1 > 5000	loan_user
SELECT o.occupation_name, COUNT(ub.customer_id) AS user_count, ARRAY_AGG(DISTINCT ub.behavior_type) AS behavior_types FROM occupation o LEFT JOIN user_behavior ub ON o.id = ub.customer_id GROUP BY o.occupation_name	loan_user
SELECT b.bank_name, SUM(f.wealth_bal_f) AS total_non_guaranteed_wealth_bal FROM bank_orgnization b JOIN financial_products f ON b.bank_id = f.bank_no WHERE f.data_dt >= '2024-07-01' AND f.data_dt < '2024-08-01' AND f.cast_type = '对私' AND f.wealth_bal_f > 500000 GROUP BY b.bank_name	loan_user
SELECT behavior_type, COUNT(*) AS occurrence_count FROM user_behavior WHERE DATE_TRUNC('month', behavior_date) = '2018-06-01' GROUP BY behavior_type	loan_user
SELECT di.acct_type_code, AVG(di.acct_bal) AS avg_balance FROM deposit_account_info di GROUP BY di.acct_type_code	loan_user
SELECT d.cust_no, d.card_state FROM debit_card_information d	loan_user
SELECT * FROM user_behavior WHERE description LIKE '%用户%'	loan_user
SELECT c.customer_name, c.id_number, c.phone_number, c.email, c.address FROM customer c JOIN occupation o ON c.occupation_id = o.id WHERE o.occupation_name = '护士' ORDER BY c.customer_name	loan_user
SELECT c.customer_name, o.occupation_name, c.phone_number FROM customer c JOIN occupation o ON c.occupation_id = o.id	loan_user
SELECT c.customer_name, a.loan_amount FROM customer c JOIN loan_application a ON c.id = a.customer_id ORDER BY a.loan_amount DESC	loan_user
SELECT cust_no FROM financial_products WHERE data_dt = '2024-07-02' AND wealth_bal > 5000000 AND wealth_t_y_avg_bal_b > 150000	loan_user
SELECT c.province, COUNT(DISTINCT c.id) AS customer_count, AVG(dai.acct_bal) AS avg_deposit_balance, AVG(la.loan_amount) AS avg_loan_amount, AVG(lc.credit_score) AS avg_credit_score FROM customer c LEFT JOIN deposit_account_info dai ON c.id_number = dai.cert_code LEFT JOIN loan_application la ON c.id = la.customer_id LEFT JOIN loan_credit lc ON c.id = lc.customer_id GROUP BY c.province ORDER BY avg_credit_score DESC	loan_user
SELECT d.cust_no, d.cust_nm, d.card_no, d.current_bal FROM debit_card_information d WHERE d.data_dt = '2024-07-09' AND d.card_state = '正常' AND d.current_bal > 2000	loan_user
SELECT SUM(ldi.loan_balance) AS total_loan_balance, SUM(ccd.card_fees) AS total_card_fees FROM loan_detail_info ldi JOIN credit_card_data ccd ON ldi.cust_id = ccd.custr_nbr WHERE ldi.cust_type = '01' AND ldi.loan_balance > 500000	loan_user
SELECT l.vouch_type, COUNT(*) AS user_count FROM loan_detail_info l GROUP BY l.vouch_type ORDER BY l.vouch_type	loan_user
SELECT source_customer_id, target_customer_id, transfer_amount, description FROM transfer	loan_user
SELECT loan_status_name, COUNT(*) FROM loan_status GROUP BY loan_status_name	loan_user
SELECT customer_id, credit_score FROM loan_credit WHERE credit_score BETWEEN 0.5 AND 0.8	loan_user
SELECT la.customer_id, la.loan_amount FROM loan_application la JOIN loan_credit lc ON la.customer_id = lc.customer_id WHERE la.apply_date = '2019-01-10' AND lc.credit_score > 0.75 ORDER BY la.loan_amount DESC	loan_user
SELECT COUNT(DISTINCT d.cust_no) FROM debit_card_information d JOIN bank_orgnization b ON d.bank_no = b.bank_id WHERE b.bank_name = '杭州上城区支行' AND b.data_dt = '2023-06-30' AND d.current_bal > 1000	loan_user
SELECT b.bank_name, SUM(f.wealth_bal) AS total_wealth_bal FROM bank_orgnization b JOIN financial_products f ON b.bank_id = f.bank_no WHERE b.data_dt = '2023-06-30' AND b.bank_name = '杭州上城区支行' GROUP BY b.bank_name	loan_user
SELECT card_state, COUNT(*) FROM debit_card_information GROUP BY card_state	loan_user
SELECT DISTINCT repayment_date FROM loan_repayment	loan_user
SELECT c.customer_name, la.loan_amount FROM loan_application la JOIN customer c ON la.customer_id = c.id WHERE la.apply_date >= '2019-01-01' AND la.apply_date < '2020-01-01' AND la.status = 'REJECTED' ORDER BY la.loan_amount DESC	loan_user
SELECT la.customer_id, SUM(lr.repayment_amount) AS total_repayment FROM loan_application la JOIN loan_repayment lr ON la.id = lr.loan_application_id WHERE la.apply_date >= '2019-01-01' AND la.apply_date < '2020-01-01' GROUP BY la.customer_id HAVING SUM(lr.repayment_amount) > 5000	loan_user
SELECT l.loan_type, COUNT(*) AS user_count FROM loan_detail_info l GROUP BY l.loan_type ORDER BY l.loan_type	loan_user
SELECT l.reportid, l.cust_id, l.loan_balance, l.blc_capital, f.rs_type_name FROM loan_detail_info l JOIN five_level_classification f ON l.judgelevel = f.rs_type_id WHERE l.dw_date = '2024-07-19' AND l.blc_capital > 500000	loan_user
SELECT la.loan_amount FROM loan_application la WHERE la.apply_date = '2017-05-01' AND la.status = 'REJECTED'	loan_user
SELECT c.province, AVG(la.loan_amount) as avg_loan_amount FROM customer c JOIN loan_application la ON c.id = la.customer_id GROUP BY c.province ORDER BY avg_loan_amount DESC LIMIT 3	loan_user
SELECT cust_nm, card_no, open_date, current_bal FROM debit_card_information WHERE open_date = '2024-07-09' AND current_bal > 2000	loan_user
SELECT cust_nm, current_bal FROM debit_card_information WHERE current_bal > 2000.0	loan_user
SELECT lt.description, COUNT(la.id) AS application_count FROM loan_type lt LEFT JOIN loan_application la ON lt.id = la.loan_type_id GROUP BY lt.description	loan_user
SELECT rs_type_name FROM five_level_classification WHERE rs_type = '不良' AND data_dt = '2024-07-22'	loan_user
WITH monthly_applications AS (SELECT c.province, DATE_TRUNC('month', l.apply_date) as apply_month, COUNT(*) as application_count FROM customer c JOIN loan_application l ON c.id = l.customer_id GROUP BY c.province, apply_month), growth_rate AS (SELECT province, apply_month, application_count, LAG(application_count) OVER (PARTITION BY province ORDER BY apply_month) as prev_month_count, (application_count - LAG(application_count) OVER (PARTITION BY province ORDER BY apply_month)) / LAG(application_count) OVER (PARTITION BY province ORDER BY apply_month) as growth_rate FROM monthly_applications) SELECT province, apply_month, growth_rate FROM growth_rate WHERE prev_month_count IS NOT NULL ORDER BY province, apply_month DESC	loan_user
SELECT loan_application_id, repayment_amount, description FROM loan_repayment	loan_user
SELECT curr_class, curr_code, curr_full_name, COUNT(*) OVER (PARTITION BY curr_class) AS class_count FROM currency WHERE data_dt = '2023-06-30' AND curr_class = '外币'	loan_user
SELECT ld.currency_type, COUNT(DISTINCT ld.cust_id) AS customer_count, SUM(ld.loan_amount) AS total_loan_amount FROM loan_detail_info ld GROUP BY ld.currency_type	loan_user
SELECT ub.* FROM user_behavior ub LEFT JOIN loan_repayment lr ON ub.customer_id = lr.loan_application_id WHERE lr.id IS NULL	loan_user
SELECT loan_type_name, COUNT(*) FROM loan_type GROUP BY loan_type_name	loan_user
SELECT current_bal, open_date FROM debit_card_information WHERE cust_nm = 'Daniel Lee'	loan_user
SELECT c.customer_name, la.loan_amount, o.occupation_name FROM customer c JOIN loan_application la ON c.id = la.customer_id JOIN occupation o ON c.occupation_id = o.id WHERE la.loan_amount BETWEEN 20000 AND 50000	loan_user
SELECT loan_status_name, description FROM loan_status	loan_user
SELECT la.loan_amount, ls.loan_status_name FROM loan_application la JOIN loan_status ls ON la.status = ls.loan_status_code WHERE la.loan_amount > 10000	loan_user
SELECT COUNT(DISTINCT c.id) FROM customer c JOIN loan_application l ON c.id = l.customer_id WHERE l.apply_date >= '2019-01-01' AND l.apply_date <= '2019-12-31' AND l.status = 'REJECTED' AND c.province = '上海市'	loan_user
SELECT occupation_name, description FROM occupation	loan_user
SELECT deposit_name, deposit_type_name FROM deposit_type WHERE deposit_type_id = 'D_001'	loan_user
SELECT c.customer_name, lc.credit_score FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id WHERE lc.credit_score < 500	loan_user
SELECT COUNT(DISTINCT l.cust_id) FROM loan_detail_info l JOIN five_level_classification f ON l.judgelevel = f.rs_type_id WHERE l.loan_balance > 90000 AND f.rs_type_name = '关注'	loan_user
SELECT c.customer_name, s.loan_status_name FROM customer c JOIN loan_application a ON c.id = a.customer_id JOIN loan_status s ON a.status = s.loan_status_code ORDER BY c.customer_name ASC	loan_user
SELECT la.id, ub.behavior_type FROM loan_application la JOIN user_behavior ub ON la.customer_id = ub.customer_id WHERE la.status = 'PENDING'	loan_user
SELECT l.vouch_type, SUM(CASE WHEN f.rs_type = '不良' THEN l.loan_amount ELSE 0 END) AS bad_loan_amount, SUM(CASE WHEN f.rs_type = '不良' THEN l.loan_amount ELSE 0 END) / SUM(l.loan_amount) AS bad_loan_ratio FROM loan_detail_info l JOIN five_level_classification f ON l.judgelevel = f.rs_type_id GROUP BY l.vouch_type	loan_user
SELECT dai.bank_nm, SUM(dai.acct_bal) as total_deposit_balance, AVG(la.loan_amount) as avg_loan_amount FROM deposit_account_info dai LEFT JOIN loan_application la ON dai.cust_noeger = la.customer_id GROUP BY dai.bank_nm ORDER BY total_deposit_balance DESC LIMIT 5	loan_user
SELECT lc.customer_id, lc.credit_score, la.loan_amount FROM loan_credit lc JOIN loan_application la ON lc.customer_id = la.customer_id WHERE lc.credit_score > 0.8 AND la.apply_date >= '2015-01-01' AND la.apply_date < '2016-01-01'	loan_user
SELECT t.source_customer_id AS customer_id, t.transfer_amount, c.curr_full_name FROM transfer t JOIN currency c ON t.transfer_date = c.data_dt WHERE t.transfer_date = '2023-06-30' AND t.transfer_amount > 1000	loan_user
SELECT * FROM user_behavior WHERE description LIKE '%根据%'	loan_user
SELECT * FROM user_behavior WHERE behavior_date = '2018-06-26'	loan_user
SELECT d.cust_nm, d.card_no, SUM(d.current_bal) AS total_current_bal FROM debit_card_information d WHERE d.open_date = '2024-07-15' AND d.current_bal > 3000 GROUP BY d.cust_nm, d.card_no	loan_user
SELECT wealth_bal_f, wealth_f_m_avg_bal_a FROM financial_products WHERE data_dt = '2024-07-14' AND bank_nm = '沈阳余淮支行' AND cust_no = 'C014'	loan_user
SELECT * FROM loan_type WHERE loan_type_name LIKE '%贷款%'	loan_user
SELECT lt.loan_type_name, la.status FROM loan_type lt LEFT JOIN loan_application la ON lt.id = la.loan_type_id	loan_user
SELECT cust_name, acct_bal, acct_type_code FROM deposit_account_info WHERE data_dt = '2024-07-19' AND acct_bal > 100000 ORDER BY acct_bal DESC	loan_user
SELECT dt.deposit_name, MAX(la.loan_amount) as max_loan_amount FROM loan_application la JOIN deposit_account_info dai ON la.customer_id = dai.cust_noeger JOIN deposit_type dt ON dai.arl_pdp_code = dt.deposit_id GROUP BY dt.deposit_name ORDER BY max_loan_amount DESC LIMIT 5	loan_user
SELECT c.customer_name, c.id_number, c.phone_number, lc.credit_score FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id JOIN occupation o ON c.occupation_id = o.id WHERE o.occupation_name = '护士' ORDER BY lc.credit_score DESC	loan_user
SELECT dai.cust_name, dai.acct_bal, dai.reality_ir_y, dt.deposit_name FROM deposit_account_info dai JOIN deposit_type dt ON dai.arl_pdp_code = dt.deposit_id WHERE dai.data_dt = '2024-07-19' AND dai.cust_type = '对私' ORDER BY dai.acct_bal DESC	loan_user
SELECT ub.customer_id, lr.repayment_amount FROM user_behavior ub JOIN loan_repayment lr ON ub.customer_id = lr.loan_application_id	loan_user
SELECT customer_name, email FROM customer	loan_user
SELECT o.occupation_name, COUNT(c.id) AS user_count FROM occupation o LEFT JOIN customer c ON o.id = c.occupation_id GROUP BY o.occupation_name	loan_user
SELECT customer_id, credit_score FROM loan_credit	loan_user
SELECT b.bank_name, c.curr_class FROM bank_orgnization b JOIN currency c ON b.data_dt = c.data_dt WHERE b.data_dt = '2023-06-30' AND c.curr_class = '外币'	loan_user
SELECT * FROM loan_detail_info WHERE loandate_e > '2024-07-22'	loan_user
SELECT customer_id, credit_score, credit_date FROM loan_credit WHERE credit_score > 0.75	loan_user
SELECT c.customer_name, o.occupation_name, MAX(lr.repayment_date) AS last_repayment_date FROM customer c JOIN occupation o ON c.occupation_id = o.id LEFT JOIN loan_repayment lr ON c.id = lr.loan_application_id GROUP BY c.customer_name, o.occupation_name	loan_user
SELECT dt.deposit_name, AVG(la.loan_amount) as avg_loan_amount, AVG(fp.wealth_bal) as avg_wealth_balance FROM deposit_account_info dai JOIN deposit_type dt ON dai.arl_pdp_code = dt.deposit_id LEFT JOIN loan_application la ON dai.cust_noeger = la.customer_id LEFT JOIN financial_products fp ON dai.cust_no = fp.cust_no GROUP BY dt.deposit_name	loan_user
SELECT loan_status_name, description FROM loan_status	loan_user
SELECT DISTINCT lc.customer_id FROM loan_credit lc JOIN transfer t ON lc.customer_id = t.source_customer_id OR lc.customer_id = t.target_customer_id WHERE lc.credit_score > 0.8 AND t.transfer_date BETWEEN '2020-01-01' AND '2020-12-31'	loan_user
SELECT l.* FROM loan_detail_info l JOIN five_level_classification f ON l.judgelevel = f.rs_type_id WHERE f.rs_type_name = '关注'	loan_user
SELECT o.occupation_name, AVG(la.loan_term) as avg_loan_term, MIN(la.loan_term) as min_loan_term, MAX(la.loan_term) as max_loan_term FROM occupation o JOIN customer c ON o.id = c.occupation_id JOIN loan_application la ON c.id = la.customer_id GROUP BY o.occupation_name ORDER BY avg_loan_term DESC	loan_user
SELECT c.customer_name, a.loan_amount, s.loan_status_name FROM customer c JOIN loan_application a ON c.id = a.customer_id JOIN loan_status s ON a.status = s.loan_status_code	loan_user
SELECT l.cust_id, l.cust_type, l.loan_balance, d.acct_bal FROM loan_detail_info l JOIN deposit_account_info d ON l.cust_id = d.cust_no JOIN bank_orgnization b ON l.loan_orgno = b.bank_id WHERE b.bank_name = '沈阳余淮支行' AND d.data_dt = '2024-07-17' ORDER BY l.loan_balance DESC	loan_user
SELECT acc_name1, corporation, bank, close_code FROM credit_card_data WHERE day_opened = '2024-07-07' AND acc_name1 LIKE '%Account 7%' AND close_code = '正常'	loan_user
SELECT c.customer_name, lr.repayment_date FROM customer c JOIN loan_application la ON c.id = la.customer_id JOIN loan_repayment lr ON la.id = lr.loan_application_id WHERE lr.repayment_date = (SELECT MAX(repayment_date) FROM loan_repayment WHERE loan_application_id = la.id)	loan_user
SELECT c.curr_full_name, SUM(fp.wealth_bal) AS total_balance FROM financial_products fp JOIN currency c ON fp.currency = c.curr_code WHERE fp.data_dt = '2024-07-07' GROUP BY c.curr_full_name	loan_user
SELECT d.deposit_type_name, COUNT(CASE WHEN f.rs_type = '不良' THEN 1 END) / COUNT(*) AS bad_loan_ratio FROM deposit_type d JOIN loan_detail_info l ON d.data_dt = l.dw_date JOIN five_level_classification f ON l.judgelevel = f.rs_type_id GROUP BY d.deposit_type_name	loan_user
SELECT o.occupation_name, AVG(application_count) as avg_application_count FROM occupation o JOIN (SELECT c.occupation_id, COUNT(*) as application_count FROM customer c JOIN loan_application l ON c.id = l.customer_id GROUP BY c.id, c.occupation_id) as customer_applications ON o.id = customer_applications.occupation_id GROUP BY o.occupation_name ORDER BY avg_application_count DESC LIMIT 5	loan_user
SELECT l.loan_application_id, l.repayment_amount FROM loan_repayment l WHERE l.repayment_date BETWEEN '2023-10-01' AND '2023-10-31'	loan_user
SELECT DATE_TRUNC('month', repayment_date) AS month, SUM(repayment_amount) AS total_repayment FROM loan_repayment GROUP BY DATE_TRUNC('month', repayment_date) ORDER BY month	loan_user
SELECT d.bank_nm, SUM(d.current_bal) AS total_current_bal FROM debit_card_information d GROUP BY d.bank_nm	loan_user
SELECT d.card_no, d.cust_nm FROM debit_card_information d WHERE d.data_dt = '2024-07-14' AND d.current_bal > 1000	loan_user
SELECT lc.customer_id, lc.credit_score FROM loan_credit lc JOIN bank_orgnization bo ON lc.credit_date = bo.data_dt WHERE bo.bank_name = '杭州上城区支行' AND bo.data_dt = '2023-06-30' ORDER BY lc.credit_score DESC LIMIT 5	loan_user
SELECT FLOOR(EXTRACT(YEAR FROM AGE(date('now'), c.birth_date))/10)*10 as age_group, COUNT(*) as application_count FROM customer c JOIN loan_application la ON c.id = la.customer_id GROUP BY age_group ORDER BY application_count DESC LIMIT 1	loan_user
SELECT * FROM loan_detail_info WHERE currency_type = 'AUD'	loan_user
SELECT * FROM loan_credit WHERE credit_date BETWEEN '2009-11-01' AND '2009-11-30'	loan_user
SELECT c.customer_name, c.id_number, c.phone_number FROM customer c JOIN occupation o ON c.occupation_id = o.id WHERE o.occupation_name = '工程师' ORDER BY c.customer_name	loan_user
SELECT COUNT(*) FROM loan_detail_info WHERE loan_balance > (SELECT AVG(loan_balance) FROM loan_detail_info)	loan_user
WITH monthly_max_loans AS (SELECT DATE_TRUNC('month', l.apply_date) as month, c.customer_name, l.loan_amount, ROW_NUMBER() OVER (PARTITION BY DATE_TRUNC('month', l.apply_date) ORDER BY l.loan_amount DESC) as rank FROM customer c JOIN loan_application l ON c.id = l.customer_id) SELECT month, customer_name, loan_amount FROM monthly_max_loans WHERE rank = 1 ORDER BY month DESC	loan_user
SELECT c.customer_name, c.phone_number, s.loan_status_name FROM customer c JOIN loan_application a ON c.id = a.customer_id JOIN loan_status s ON a.status = s.loan_status_code	loan_user
SELECT rs_type_id, rs_type_name FROM five_level_classification	loan_user
SELECT customer_id, credit_score FROM loan_credit WHERE credit_date = '2011-04-13' AND credit_score > 0.8	loan_user
SELECT c.customer_name, lc.credit_score FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id WHERE c.province = '上海市' AND lc.credit_score > 0.8 ORDER BY lc.credit_score DESC	loan_user
SELECT customer_name, birth_date FROM customer	loan_user
SELECT f.rs_type_name, AVG(l.loan_balance) AS avg_loan_balance FROM five_level_classification f JOIN loan_detail_info l ON f.rs_type_id = l.judgelevel GROUP BY f.rs_type_name	loan_user
SELECT rs_type_name FROM five_level_classification WHERE rs_type = '不良' AND data_dt = '2024-07-22'	loan_user
SELECT repayment_amount, repayment_date FROM loan_repayment	loan_user
SELECT t.loan_type_name, COUNT(a.id) AS application_count, MAX(a.apply_date) AS last_application_date FROM loan_application a JOIN loan_type t ON a.loan_type_id = t.id GROUP BY t.loan_type_name	loan_user
SELECT la.customer_id, la.loan_amount, dai.bank_nm FROM loan_application la JOIN deposit_account_info dai ON la.customer_id = dai.cust_noeger ORDER BY la.loan_amount DESC LIMIT 10	loan_user
SELECT lt.loan_type_name, AVG(la.loan_term) as avg_loan_term, AVG(lc.credit_score) as avg_credit_score FROM loan_type lt JOIN loan_application la ON lt.id = la.loan_type_id JOIN loan_credit lc ON la.customer_id = lc.customer_id GROUP BY lt.loan_type_name ORDER BY avg_credit_score DESC	loan_user
SELECT l.cust_id, SUM(l.loan_balance) AS total_loan_balance, SUM(d.acct_bal) AS total_deposit_balance FROM loan_detail_info l JOIN deposit_account_info d ON l.cust_id = d.cust_no WHERE l.cust_type = '对私' GROUP BY l.cust_id	loan_user
SELECT * FROM occupation WHERE occupation_name LIKE '%老师%'	loan_user
SELECT ub.description, lc.credit_score FROM user_behavior ub JOIN loan_credit lc ON ub.customer_id = lc.customer_id WHERE ub.customer_id = 530806	loan_user
SELECT dai.cust_no, dai.acct_bal, la.loan_amount, la.apply_date, o.occupation_name FROM deposit_account_info dai LEFT JOIN loan_application la ON dai.cust_noeger = la.customer_id LEFT JOIN occupation o ON dai.cert_code = o.occupation_code ORDER BY dai.acct_bal DESC LIMIT 10	loan_user
SELECT rs_type_name FROM five_level_classification WHERE rs_type = '不良'	loan_user
SELECT currency_type, SUM(loan_amount) AS total_loan_amount, AVG(loan_amount) AS avg_loan_amount FROM loan_detail_info GROUP BY currency_type	loan_user
SELECT f.cast_type, SUM(f.wealth_sta_y_avg_bal_a) AS yearly_avg_balance FROM financial_products f GROUP BY f.cast_type	loan_user
SELECT ld.cust_id, ld.loan_amount FROM loan_detail_info ld WHERE ld.loan_balance >= 50000	loan_user
SELECT bank_nm, SUM(acct_bal) AS total_balance, AVG(acct_bal) AS avg_balance FROM deposit_account_info WHERE data_dt = '2024-07-19' AND cust_type = '对私' GROUP BY bank_nm	loan_user
WITH customer_durations AS (SELECT d.bank_nm, AVG(EXTRACT(DAY FROM AGE(d.data_dt, d.open_date))) AS avg_deposit_duration, AVG(CASE WHEN lt.loan_type_name IS NOT NULL THEN EXTRACT(DAY FROM AGE(d.data_dt, d.open_date)) ELSE NULL END) AS avg_loan_duration FROM debit_card_information d LEFT JOIN loan_type lt ON d.cust_no = lt.loan_type_code GROUP BY d.bank_nm) SELECT bank_nm, ABS(avg_deposit_duration - avg_loan_duration) AS duration_difference FROM customer_durations ORDER BY duration_difference DESC LIMIT 1	loan_user
SELECT bank_name, bank_level, bank_id FROM bank_orgnization	loan_user
SELECT la.customer_id, lc.credit_score FROM loan_application la JOIN loan_credit lc ON la.customer_id = lc.customer_id JOIN loan_repayment lr ON la.id = lr.loan_application_id WHERE la.status = 'APPROVED' AND lc.credit_score > 0.75 AND lr.repayment_date = '2021-11-10'	loan_user
SELECT s.loan_status_name, COUNT(a.customer_id) AS customer_count, SUM(a.loan_amount) AS total_loan_amount FROM loan_application a JOIN loan_status s ON a.status = s.loan_status_code GROUP BY s.loan_status_name	loan_user
SELECT c.customer_name, cr.credit_score FROM customer c JOIN loan_credit cr ON c.id = cr.customer_id WHERE cr.credit_date = (SELECT MAX(credit_date) FROM loan_credit WHERE customer_id = c.id)	loan_user
SELECT c.customer_name, lc.description FROM loan_credit lc JOIN customer c ON lc.customer_id = c.id WHERE lc.credit_date = '2003-06-22' AND lc.credit_score > 0.75	loan_user
SELECT fp.bank_no, fp.bank_nm, SUM(fp.wealth_bal) + SUM(dci.current_bal) AS total_balance FROM financial_products fp JOIN debit_card_information dci ON fp.bank_no = dci.bank_no GROUP BY fp.bank_no, fp.bank_nm ORDER BY total_balance DESC	loan_user
SELECT c.customer_name, c.birth_date, la.loan_amount, EXTRACT(YEAR FROM AGE(date('now'), c.birth_date)) as age FROM customer c JOIN loan_application la ON c.id = la.customer_id WHERE la.loan_amount > 1000 * EXTRACT(YEAR FROM AGE(date('now'), c.birth_date)) ORDER BY (la.loan_amount / EXTRACT(YEAR FROM AGE(date('now'), c.birth_date))) DESC	loan_user
SELECT DISTINCT loan_application_id FROM loan_repayment WHERE repayment_date >= date('now') - INTERVAL '30 days'	loan_user
SELECT ld.cust_id, ld.loan_amount FROM loan_detail_info ld WHERE ld.dw_date BETWEEN '2024-07-01' AND '2024-07-31'	loan_user
WITH type_combinations AS (SELECT dt.deposit_name, lt.loan_type_name, AVG(EXTRACT(YEAR FROM AGE(date('now'), c.birth_date))) AS avg_age, AVG(lc.credit_score) AS avg_credit_score FROM customer c JOIN deposit_account_info dai ON c.id_number = dai.cert_code JOIN deposit_type dt ON dai.arl_pdp_code = dt.deposit_id LEFT JOIN loan_application la ON c.id = la.customer_id LEFT JOIN loan_type lt ON la.loan_type_id = lt.id LEFT JOIN loan_credit lc ON c.id = lc.customer_id GROUP BY dt.deposit_name, lt.loan_type_name), overall_avg AS (SELECT AVG(avg_age) AS overall_avg_age, AVG(avg_credit_score) AS overall_avg_credit_score FROM type_combinations) SELECT tc.deposit_name, tc.loan_type_name, tc.avg_age, tc.avg_credit_score FROM type_combinations tc, overall_avg oa WHERE tc.avg_age > oa.overall_avg_age AND tc.avg_credit_score > oa.overall_avg_credit_score ORDER BY tc.avg_age DESC, tc.avg_credit_score DESC	loan_user
SELECT * FROM loan_detail_info WHERE (loandate_e - loandate_s) > 365 * 5	loan_user
SELECT customer_id, credit_score, description FROM loan_credit	loan_user
SELECT * FROM transfer WHERE transfer_amount > 2000	loan_user
WITH customer_loan_types AS (SELECT c.id, c.customer_name, COUNT(DISTINCT l.loan_type_id) as distinct_loan_types, COUNT(*) as total_applications FROM customer c JOIN loan_application l ON c.id = l.customer_id GROUP BY c.id, c.customer_name) SELECT customer_name, distinct_loan_types / total_applications as diversity_index FROM customer_loan_types ORDER BY diversity_index DESC	loan_user
SELECT vouch_type, AVG(loan_amount) AS avg_loan_amount, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY loan_amount) AS median_loan_amount FROM loan_detail_info GROUP BY vouch_type	loan_user
SELECT c.province, AVG(la.loan_amount) as avg_loan_amount FROM customer c JOIN loan_application la ON c.id = la.customer_id GROUP BY c.province ORDER BY avg_loan_amount DESC	loan_user
SELECT d.cust_nm, d.card_type_nm FROM debit_card_information d	loan_user
SELECT ccd.corporation, ccd.acc_name1, ccd.bal_free, curr.curr_full_name FROM credit_card_data ccd JOIN currency curr ON ccd.curr_num = curr.curr_code ORDER BY ccd.bal_free DESC	loan_user
WITH new_customers AS (SELECT DISTINCT ON (ldi.cust_id) ldi.cust_id, ldi.loan_orgno, ldi.loan_amount, dci.current_bal + dci.fixed_bal as total_balance FROM loan_detail_info ldi JOIN debit_card_information dci ON ldi.cust_id = dci.cust_no WHERE ldi.loandate_s BETWEEN '2024-01-01' AND '2024-03-31' AND ldi.cust_id NOT IN (SELECT cust_id FROM loan_detail_info WHERE loandate_s < '2024-01-01')) SELECT bo.bank_name, COUNT(nc.cust_id) as new_customer_count, AVG(nc.loan_amount / NULLIF(nc.total_balance, 0)) as avg_loan_balance_ratio, PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY nc.loan_amount / NULLIF(nc.total_balance, 0)) as q1_ratio, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY nc.loan_amount / NULLIF(nc.total_balance, 0)) as median_ratio, PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY nc.loan_amount / NULLIF(nc.total_balance, 0)) as q3_ratio FROM bank_orgnization bo LEFT JOIN new_customers nc ON bo.bank_id = nc.loan_orgno GROUP BY bo.bank_name ORDER BY new_customer_count DESC	loan_user
WITH ranked_customers AS (SELECT c.customer_name, o.occupation_name, la.loan_amount, ROW_NUMBER() OVER (PARTITION BY o.id ORDER BY la.loan_amount DESC) as rank FROM customer c JOIN occupation o ON c.occupation_id = o.id JOIN loan_application la ON c.id = la.customer_id) SELECT customer_name, occupation_name, loan_amount FROM ranked_customers WHERE rank = 1 ORDER BY loan_amount DESC	loan_user
SELECT f.rs_type_name, COUNT(*) AS customer_count FROM five_level_classification f JOIN loan_detail_info l ON f.rs_type_id = l.judgelevel WHERE l.dw_date = '2024-07-22' AND l.cust_id IN (SELECT cust_id FROM loan_detail_info WHERE dw_date = '2024-07-22' ORDER BY loan_amount DESC LIMIT 10) GROUP BY f.rs_type_name	loan_user
SELECT COUNT(*) FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id WHERE lt.loan_type_name = '住房贷款' AND la.loan_amount > 50000 AND EXTRACT(YEAR FROM la.apply_date) = 2019	loan_user
SELECT c.customer_name, la.loan_amount FROM customer c JOIN loan_application la ON c.id = la.customer_id WHERE la.loan_amount > 15000 AND la.apply_date > '2023-01-01'	loan_user
SELECT SUM(ldi.blc_capital) AS total_capital_balance FROM loan_detail_info ldi JOIN bank_orgnization bo ON ldi.loan_orgno = bo.bank_id WHERE bo.bank_name = '杭州上城区支行' AND bo.data_dt = '2023-06-30'	loan_user
SELECT * FROM user_behavior WHERE description IS NOT NULL	loan_user
SELECT lt.loan_type_name, COUNT(la.id) AS application_count, STRING_AGG(c.customer_name, ', ') AS customers FROM loan_type lt JOIN loan_application la ON lt.id = la.loan_type_id JOIN customer c ON la.customer_id = c.id GROUP BY lt.loan_type_name	loan_user
SELECT COUNT(DISTINCT fp.cust_no) FROM financial_products fp JOIN bank_orgnization bo ON fp.bank_no = bo.bank_id WHERE bo.bank_name = '杭州上城区支行' AND bo.data_dt = '2023-06-30' AND fp.cast_type = '对公' AND fp.wealth_bal_f > 0	loan_user
SELECT c.customer_name, lt.loan_type_name, la.apply_date FROM loan_application la JOIN customer c ON la.customer_id = c.id JOIN loan_type lt ON la.loan_type_id = lt.id WHERE la.status = 'REJECTED'	loan_user
SELECT occupation_name, description FROM occupation	loan_user
SELECT card_state, COUNT(*) FROM debit_card_information GROUP BY card_state ORDER BY card_state ASC	loan_user
SELECT c.customer_name, c.phone_number FROM customer c JOIN loan_type lt ON c.occupation_id = lt.id WHERE lt.loan_type_code = 'MORTGAGE' ORDER BY c.customer_name	loan_user
SELECT wealth_bal, wealth_bal_t, wealth_bal_f FROM financial_products WHERE data_dt = '2024-07-14' AND bank_nm = '沈阳余淮支行' AND cust_no = 'C014'	loan_user
SELECT corporation, xaccount, bank, category, day_opened FROM credit_card_data WHERE day_opened > '2024-07-01' ORDER BY day_opened DESC	loan_user
SELECT l.cust_type, l.loan_amount FROM loan_detail_info l WHERE l.judgelevel = 'RS_004'	loan_user
SELECT cust_id, loan_balance, loan_amount, (loan_balance / loan_amount) AS balance_ratio FROM loan_detail_info ORDER BY balance_ratio DESC LIMIT 5	loan_user
SELECT c.customer_name FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id JOIN loan_repayment lr ON lc.customer_id = lr.loan_application_id WHERE lc.credit_score > 0.8 AND lc.credit_date <= '2023-06-30' AND lr.repayment_date < '2023-06-30'	loan_user
WITH branch_total AS (SELECT bank_nm, SUM(current_bal + fixed_bal) AS total_deposit FROM debit_card_information GROUP BY bank_nm), customer_deposit AS (SELECT cust_nm, bank_nm, current_bal + fixed_bal AS deposit FROM debit_card_information) SELECT cd.cust_nm, cd.bank_nm, cd.deposit / bt.total_deposit AS deposit_ratio FROM customer_deposit cd JOIN branch_total bt ON cd.bank_nm = bt.bank_nm ORDER BY deposit_ratio DESC LIMIT 10	loan_user
SELECT SUM(t.transfer_amount) FROM transfer t JOIN customer c ON t.source_customer_id = c.id WHERE c.province = '上海市' AND t.transfer_date > '2023-06-30'	loan_user
SELECT la.customer_id, la.loan_amount, la.status FROM loan_application la	loan_user
SELECT fp.cust_no, fp.wealth_bal, c.curr_full_name FROM financial_products fp JOIN currency c ON fp.currency = c.curr_code WHERE fp.data_dt = '2024-07-14' AND fp.bank_nm = '沈阳余淮支行' AND fp.cast_type = '对公' AND fp.wealth_bal > 1000000	loan_user
WITH top_loans AS (SELECT c.id, c.birth_date, l.loan_amount, NTILE(10) OVER (ORDER BY l.loan_amount DESC) as percentile FROM customer c JOIN loan_application l ON c.id = l.customer_id) SELECT AVG(DATE_PART('year', AGE(date('now'), birth_date))) as avg_age, AVG(loan_amount) as avg_loan_amount FROM top_loans WHERE percentile = 1	loan_user
SELECT cust_nm, card_no FROM debit_card_information WHERE fixed_bal > 3000.0	loan_user
SELECT SUM(fp.wealth_bal) AS total_wealth_balance FROM customer c JOIN financial_products fp ON c.id_number = fp.cust_no WHERE c.province = '辽宁省' AND fp.data_dt = '2024-07-14'	loan_user
SELECT SUM(ldi.loan_balance) AS total_loan_balance FROM bank_orgnization bo JOIN loan_detail_info ldi ON bo.bank_id = ldi.loan_orgno WHERE bo.bank_name = '杭州上城区支行' AND bo.data_dt = '2023-06-30'	loan_user
SELECT phone_number, email FROM customer	loan_user
SELECT s.loan_status_name, COUNT(a.customer_id) AS customer_count, SUM(a.loan_amount) AS total_loan_amount FROM loan_application a JOIN loan_status s ON a.status = s.loan_status_code GROUP BY s.loan_status_name	loan_user
SELECT loan_type_name, description FROM loan_type	loan_user
SELECT status, loan_amount FROM loan_application	loan_user
SELECT lr.loan_application_id, COUNT(lr.id) AS repayment_count FROM loan_repayment lr GROUP BY lr.loan_application_id	loan_user
SELECT o.occupation_name, COUNT(ub.id) AS behavior_count FROM occupation o LEFT JOIN user_behavior ub ON o.id = ub.customer_id GROUP BY o.occupation_name	loan_user
SELECT b.bank_name, d.acct_bal, d.cust_name FROM bank_orgnization b JOIN deposit_account_info d ON b.bank_id = d.bank_no WHERE b.data_dt = '2023-06-30' ORDER BY d.acct_bal DESC	loan_user
SELECT rs_type_name, rs_type_id FROM five_level_classification WHERE rs_type = '不良' AND data_dt = '2024-07-22'	loan_user
SELECT COUNT(*) FROM loan_detail_info l JOIN occupation o ON l.cust_ideger = o.id WHERE l.dw_date = '2024-07-22' AND o.occupation_name = '护士'	loan_user
SELECT c.curr_code, c.curr_full_name, SUM(f.wealth_bal) AS total_wealth_bal FROM currency c JOIN financial_products f ON c.curr_code = f.currency WHERE c.data_dt = '2023-06-30' AND c.curr_class = '外币' GROUP BY c.curr_code, c.curr_full_name ORDER BY total_wealth_bal DESC	loan_user
SELECT ub.customer_id, ub.behavior_type, lr.repayment_amount FROM user_behavior ub LEFT JOIN loan_repayment lr ON ub.customer_id = lr.loan_application_id	loan_user
WITH deposit_volatility AS (SELECT cust_no, STDDEV(current_bal + fixed_bal) AS volatility FROM debit_card_information WHERE data_dt >= date('now') - INTERVAL '1 year' GROUP BY cust_no) SELECT d.cust_nm, dv.volatility FROM debit_card_information d JOIN deposit_volatility dv ON d.cust_no = dv.cust_no ORDER BY dv.volatility DESC LIMIT 10	loan_user
SELECT d.card_type_nm, COUNT(d.card_no) AS card_count FROM debit_card_information d GROUP BY d.card_type_nm	loan_user
SELECT wealth_bal, wealth_bal_t, wealth_bal_f FROM financial_products WHERE data_dt = '2024-07-07T00:00:00' AND bank_nm = '北京王府井支行' AND cust_no = 'C007'	loan_user
WITH ranked_customers AS (SELECT c.province, c.customer_name, la.loan_amount, ROW_NUMBER() OVER (PARTITION BY c.province ORDER BY la.loan_amount DESC) as rank FROM customer c JOIN loan_application la ON c.id = la.customer_id) SELECT province, customer_name, loan_amount, rank FROM ranked_customers WHERE rank <= 3 ORDER BY province, rank	loan_user
SELECT dt.deposit_name, COUNT(DISTINCT dai.cust_no) AS customer_count, SUM(dai.acct_bal) AS total_deposit, AVG(dai.acct_bal) AS avg_deposit FROM deposit_type dt JOIN deposit_account_info dai ON dt.deposit_id = dai.arl_pdp_code GROUP BY dt.deposit_name ORDER BY customer_count DESC	loan_user
SELECT lt.loan_type_name, la.customer_id, la.apply_date FROM loan_type lt JOIN loan_application la ON lt.id = la.loan_type_id	loan_user
SELECT * FROM loan_detail_info WHERE loandate_e > '2029-01-01'	loan_user
SELECT * FROM user_behavior WHERE behavior_date BETWEEN '2018-06-01' AND '2018-06-30'	loan_user
SELECT COUNT(DISTINCT lc.customer_id) FROM loan_credit lc JOIN loan_application la ON lc.customer_id = la.customer_id WHERE la.status = 'REJECTED' AND la.apply_date BETWEEN '2020-11-01' AND '2020-11-30' AND lc.credit_score < 0.5	loan_user
SELECT c.curr_full_name, AVG(la.loan_amount) as avg_loan_amount, AVG(fp.wealth_bal) as avg_wealth_balance FROM loan_application la JOIN deposit_account_info dai ON la.customer_id = dai.cust_noeger JOIN currency c ON dai.cur_type = c.curr_code LEFT JOIN financial_products fp ON dai.cust_no = fp.cust_no GROUP BY c.curr_full_name	loan_user
SELECT cust_no, wealth_bal, wealth_t_m_avg_bal_a FROM financial_products WHERE data_dt = '2024-07-02' AND wealth_bal > 5000000 AND wealth_t_m_avg_bal_a > 150000	loan_user
SELECT c.customer_name, c.phone_number, cr.credit_score FROM customer c JOIN loan_credit cr ON c.id = cr.customer_id ORDER BY cr.credit_score DESC	loan_user
SELECT lc.customer_id, lc.credit_score, la.loan_amount, la.apply_date FROM loan_credit lc JOIN loan_application la ON lc.customer_id = la.customer_id WHERE lc.credit_score > 0.8 AND la.apply_date BETWEEN '2023-05-30' AND '2023-06-30'	loan_user
SELECT c.customer_name, c.gender, s.loan_status_name FROM customer c JOIN loan_application a ON c.id = a.customer_id JOIN loan_status s ON a.status = s.loan_status_code	loan_user
SELECT ld.cust_id, ld.loan_type, ld.loan_amount FROM loan_detail_info ld	loan_user
SELECT l.loan_type_name, AVG(a.loan_amount) AS avg_loan_amount FROM loan_application a JOIN loan_type l ON a.loan_type_id = l.id GROUP BY l.loan_type_name	loan_user
SELECT c.gender, c.customer_name FROM customer c GROUP BY c.gender, c.customer_name	loan_user
SELECT * FROM deposit_type WHERE data_dt = '2024-07-22'	loan_user
SELECT c.gender, AVG(la.loan_amount) as avg_loan_amount FROM customer c JOIN loan_application la ON c.id = la.customer_id GROUP BY c.gender ORDER BY avg_loan_amount DESC	loan_user
SELECT o.occupation_name, AVG(la.loan_term) as avg_loan_term FROM occupation o JOIN customer c ON o.id = c.occupation_id JOIN loan_application la ON c.id = la.customer_id GROUP BY o.occupation_name ORDER BY avg_loan_term DESC LIMIT 1	loan_user
SELECT SUM(ldi.blc_capital + ldi.blc_inner) AS total_balance FROM loan_detail_info ldi JOIN bank_orgnization bo ON ldi.loan_orgno = bo.bank_id WHERE bo.bank_name = '杭州上城区支行' AND bo.data_dt = '2023-06-30'	loan_user
SELECT * FROM loan_credit WHERE credit_date = '2009-11-07'	loan_user
SELECT la.customer_id, la.loan_amount, SUM(la.loan_amount) OVER () AS total_loan_amount FROM loan_application la WHERE la.apply_date = '2019-01-10' AND la.status = 'REJECTED'	loan_user
SELECT c.curr_code, c.curr_full_name, d.acct_bal FROM currency c JOIN deposit_account_info d ON c.curr_code = d.cur_type WHERE c.data_dt = '2023-06-30' AND c.curr_class = '外币' ORDER BY d.acct_bal DESC	loan_user
SELECT b.bank_name, SUM(f.wealth_bal_f) AS total_non_guaranteed FROM bank_orgnization b JOIN financial_products f ON b.bank_id = f.bank_no GROUP BY b.bank_name	loan_user
SELECT * FROM loan_status WHERE loan_status_code = 'PENDING'	loan_user
SELECT ldi.cust_id, ldi.loan_type, ldi.loan_balance, ldi.loandate_s, bo.bank_name FROM loan_detail_info ldi JOIN bank_orgnization bo ON ldi.loan_orgno = bo.bank_id WHERE ldi.loandate_s > '2024-07-01' AND ldi.loan_balance > 500000	loan_user
SELECT ls.loan_status_name, la.id, da.cust_name FROM loan_status ls JOIN loan_application la ON ls.loan_status_code = la.status JOIN deposit_account_info da ON la.customer_id = da.cust_no	loan_user
SELECT deposit_id, deposit_name FROM deposit_type	loan_user
SELECT COUNT(DISTINCT loan_application_id) AS user_count FROM loan_repayment WHERE repayment_date = '2020-02-25'	loan_user
SELECT COUNT(*) FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id JOIN loan_status ls ON la.status = ls.loan_status_code WHERE lt.loan_type_name = '住房贷款' AND la.apply_date = '2024-07-22' AND ls.loan_status_name = 'Approved'	loan_user
SELECT COUNT(*) FROM debit_card_information WHERE data_dt = '2024-07-09' AND bank_nm = '杭州上城区支行' AND card_state = '正常' AND current_bal > 2000	loan_user
SELECT deposit_name, data_dt FROM deposit_type WHERE deposit_id = 'D_003'	loan_user
SELECT d.current_bal, d.open_date FROM debit_card_information d WHERE d.data_dt = '2024-07-07 00:00:00'	loan_user
SELECT f.bank_nm, AVG(f.wealth_t_m_avg_bal_a) AS avg_guaranteed FROM financial_products f GROUP BY f.bank_nm	loan_user
SELECT o.occupation_name, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY la.loan_amount) as median_loan_amount FROM occupation o JOIN customer c ON o.id = c.occupation_id JOIN loan_application la ON c.id = la.customer_id GROUP BY o.occupation_name ORDER BY median_loan_amount DESC	loan_user
SELECT * FROM five_level_classification WHERE rs_type_name = '可疑'	loan_user
SELECT cust_nm, residential_address FROM debit_card_information WHERE data_dt = '2024-07-15' AND bank_no = 'BANK_00201' AND current_bal > 3000	loan_user
SELECT loan_amount, loan_term FROM loan_application	loan_user
SELECT d.deposit_name, da.cust_name, da.acct_bal, c.curr_full_name FROM deposit_type d JOIN deposit_account_info da ON d.deposit_id = da.arl_pdp_code JOIN currency c ON da.cur_type = c.curr_code WHERE d.deposit_name = '大额存单' AND d.data_dt = '2024-07-22'	loan_user
SELECT * FROM loan_detail_info WHERE loan_balance > 250000	loan_user
SELECT c.customer_name, c.birth_date FROM customer c JOIN loan_repayment lr ON c.id = lr.loan_application_id	loan_user
SELECT cu.curr_full_name, COUNT(da.cust_no) AS customer_count, AVG(da.acct_bal) AS avg_balance FROM currency cu JOIN deposit_account_info da ON cu.curr_code = da.cur_type GROUP BY cu.curr_full_name	loan_user
SELECT fp.org_no, fp.org_nm, SUM(fp.wealth_bal) / NULLIF(SUM(dci.current_bal + dci.fixed_bal), 0) AS balance_ratio FROM financial_products fp JOIN debit_card_information dci ON fp.org_no = dci.org_no GROUP BY fp.org_no, fp.org_nm	loan_user
SELECT COUNT(DISTINCT dci.cust_no) FROM bank_orgnization bo JOIN debit_card_information dci ON bo.bank_id = dci.bank_no WHERE bo.bank_name = '沈阳余淮支行' AND bo.data_dt = '2023-06-30' AND dci.data_dt = '2024-07-02' AND dci.current_bal > 1000	loan_user
SELECT loan_type_name, loan_type_code FROM loan_type	loan_user
SELECT b1.bank_name, b2.bank_name AS parent_name FROM bank_orgnization b1 LEFT JOIN bank_orgnization b2 ON b1.bank_parent = b2.bank_id WHERE b1.bank_level = '2'	loan_user
SELECT COUNT(DISTINCT t.source_customer_id) FROM transfer t JOIN user_behavior ub ON t.source_customer_id = ub.customer_id WHERE t.transfer_date >= date('now') - INTERVAL '90 days' AND ub.behavior_date >= date('now') - INTERVAL '90 days' AND ub.behavior_type = 'LOGIN'	loan_user
SELECT * FROM loan_type WHERE loan_type_code = 'MORTGAGE'	loan_user
SELECT fp.currency, c.curr_full_name, SUM(fp.wealth_bal) AS total_balance FROM financial_products fp JOIN currency c ON fp.currency = c.curr_code WHERE fp.data_dt = '2024-07-02' GROUP BY fp.currency, c.curr_full_name	loan_user
SELECT c.customer_name, ls.loan_status_name FROM customer c JOIN loan_application la ON c.id = la.customer_id JOIN loan_status ls ON la.status = ls.loan_status_code WHERE la.id = (SELECT MAX(id) FROM loan_application WHERE customer_id = c.id)	loan_user
SELECT COUNT(DISTINCT dci.cust_no) FROM debit_card_information dci JOIN loan_detail_info ldi ON dci.cust_id = ldi.cust_id WHERE dci.data_dt = '2024-07-09' AND dci.bank_nm = '杭州上城区支行' AND ldi.loan_balance > 500000	loan_user
SELECT cust_name, acct_bal, bank_nm FROM deposit_account_info WHERE cust_type = '对私' AND acct_bal > 100000	loan_user
SELECT dci.cust_nm, dci.card_no, dci.current_bal FROM debit_card_information dci JOIN bank_orgnization bo ON dci.bank_no = bo.bank_id WHERE dci.data_dt = '2024-07-09' AND bo.bank_name = '杭州上城区支行' AND dci.card_state = '正常' AND dci.current_bal > 2000	loan_user
SELECT c.province, COUNT(*) as loan_count FROM customer c JOIN loan_application la ON c.id = la.customer_id GROUP BY c.province ORDER BY loan_count DESC LIMIT 1	loan_user
SELECT c.customer_name, la.loan_term FROM customer c JOIN loan_application la ON c.id = la.customer_id WHERE la.loan_term > 12	loan_user
SELECT bank_name, bank_parent FROM bank_orgnization	loan_user
SELECT curr_code, curr_full_name, curr_d_class_name, CASE WHEN curr_d_class_name IS NULL THEN '是' ELSE '否' END AS is_class_name_null FROM currency WHERE data_dt = '2023-06-30'	loan_user
SELECT c.customer_name, o.occupation_name FROM customer c JOIN occupation o ON c.occupation_id = o.id JOIN loan_repayment lr ON c.id = lr.loan_application_id WHERE lr.repayment_date BETWEEN '2019-01-01' AND '2019-12-31'	loan_user
SELECT la.customer_id, lr.repayment_date FROM loan_application la JOIN loan_repayment lr ON la.id = lr.loan_application_id JOIN loan_type lt ON la.loan_type_id = lt.id WHERE lt.loan_type_code = 'PERSONAL' AND lr.repayment_amount > 500	loan_user
SELECT la.customer_id, la.loan_amount, lc.credit_score, lt.loan_type_name FROM loan_application la JOIN loan_credit lc ON la.customer_id = lc.customer_id JOIN loan_type lt ON la.loan_type_id = lt.id WHERE la.apply_date >= '2019-01-01' AND la.apply_date < '2019-02-01' AND lc.credit_score > 0.75	loan_user
SELECT la.customer_id FROM loan_application la LEFT JOIN deposit_account_info dai ON la.customer_id = dai.cust_noeger WHERE dai.cust_no IS NULL	loan_user
SELECT la.customer_id, lr.loan_application_id, lr.repayment_amount, lr.repayment_date FROM loan_application la JOIN loan_repayment lr ON la.id = lr.loan_application_id WHERE la.status = 'APPROVED' AND lr.repayment_date = '2021-11-10'	loan_user
SELECT c.customer_name, c.id_number, c.phone_number FROM customer c JOIN occupation o ON c.occupation_id = o.id WHERE o.occupation_name = '护士'	loan_user
SELECT la.customer_id, la.loan_type_id FROM loan_application la WHERE la.status = 'REJECTED' AND la.loan_amount > 30000	loan_user
SELECT DISTINCT t.source_customer_id FROM transfer t LEFT JOIN occupation o ON t.source_customer_id = o.id WHERE o.id IS NULL	loan_user
SELECT ub.customer_id, ub.behavior_type FROM user_behavior ub WHERE ub.behavior_date = '2021-08-06'	loan_user
SELECT loan_type_id, AVG(loan_term) as avg_loan_term FROM loan_application GROUP BY loan_type_id ORDER BY loan_type_id	loan_user
SELECT loan_type, SUM(blc_capital) AS total_balance FROM loan_detail_info WHERE loandate_s > '2024-07-01' GROUP BY loan_type	loan_user
SELECT c.customer_name, lr.repayment_amount FROM customer c JOIN occupation o ON c.occupation_id = o.id JOIN loan_repayment lr ON c.id = lr.loan_application_id WHERE o.occupation_code = 'ENGINEER'	loan_user
SELECT acc_name1, bank, day_opened FROM credit_card_data WHERE category = '7' AND day_opened > '2024-01-01' ORDER BY day_opened DESC	loan_user
SELECT lt.loan_type_name, AVG(la.loan_amount) as avg_loan_amount, AVG(lr.repayment_amount) as avg_repayment_amount FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id LEFT JOIN loan_repayment lr ON la.id = lr.loan_application_id GROUP BY lt.loan_type_name	loan_user
SELECT province, COUNT(*) AS customer_count FROM customer GROUP BY province	loan_user
SELECT lt.loan_type_name, AVG(lr.repayment_amount) AS avg_repayment, COUNT(ub.id) AS behavior_count FROM loan_type lt LEFT JOIN loan_repayment lr ON lt.id = lr.loan_application_id LEFT JOIN user_behavior ub ON lt.id = ub.customer_id GROUP BY lt.loan_type_name	loan_user
SELECT bank_level, data_dt FROM bank_orgnization	loan_user
SELECT transfer_date, transfer_amount FROM transfer	loan_user
SELECT FLOOR(EXTRACT(YEAR FROM AGE(date('now'), c.birth_date)) / 5) * 5 as age_group, COUNT(DISTINCT c.id) as customer_count, AVG(la.loan_amount) as avg_loan_amount FROM customer c LEFT JOIN loan_application la ON c.id = la.customer_id GROUP BY age_group ORDER BY age_group	loan_user
SELECT la.customer_id, la.apply_date FROM loan_application la WHERE la.apply_date < '2023-06-01'	loan_user
SELECT dci.cust_nm, dci.card_no, dci.open_date, dci.current_bal, SUM(dci.current_bal) OVER () AS total_current_bal FROM debit_card_information dci WHERE dci.open_date = '2024-07-15' AND dci.card_state = '正常'	loan_user
SELECT c.customer_name, c.id_number, c.phone_number, COUNT(cc.custr_nbr) AS credit_card_count FROM customer c LEFT JOIN credit_card_data cc ON c.id_number = cc.custr_nbr WHERE c.province = '辽宁省' GROUP BY c.customer_name, c.id_number, c.phone_number ORDER BY credit_card_count DESC	loan_user
SELECT occupation_name FROM occupation WHERE occupation_code = 'TEACHER'	loan_user
SELECT l.status, AVG(l.loan_amount) as avg_loan_amount, COUNT(DISTINCT c.id) as customer_count FROM loan_application l JOIN customer c ON l.customer_id = c.id GROUP BY l.status ORDER BY avg_loan_amount DESC	loan_user
SELECT c.customer_name, c.id_number, lc.credit_score, lc.credit_date FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id WHERE lc.credit_score > 0.8 ORDER BY lc.credit_score DESC	loan_user
SELECT cust_no, wealth_bal FROM financial_products WHERE data_dt = '2024-07-14 00:00:00' AND bank_nm = '沈阳余淮支行' AND cast_type = '对公'	loan_user
WITH branch_averages AS (SELECT d.bank_nm, AVG(d.current_bal + d.fixed_bal) AS avg_deposit, AVG(CASE WHEN lt.loan_type_name IS NOT NULL THEN d.current_bal + d.fixed_bal ELSE NULL END) AS avg_loan FROM debit_card_information d LEFT JOIN loan_type lt ON d.cust_no = lt.loan_type_code GROUP BY d.bank_nm) SELECT bank_nm, ABS(avg_deposit - avg_loan) AS balance_difference FROM branch_averages ORDER BY balance_difference DESC LIMIT 1	loan_user
SELECT * FROM five_level_classification WHERE data_dt = '2024-07-22'	loan_user
SELECT COUNT(*) FROM customer WHERE email LIKE '%@example.com'	loan_user
SELECT bank_name, bank_parent FROM bank_orgnization WHERE bank_level = '2'	loan_user
SELECT deposit_id, deposit_name FROM deposit_type WHERE deposit_name LIKE '%协定%'	loan_user
SELECT SUM(t.transfer_amount) FROM debit_card_information d JOIN transfer t ON d.cust_no = t.source_customer_id WHERE d.data_dt = '2024-07-09' AND d.bank_nm = '杭州上城区支行' AND d.cust_nm = 'James Taylor'	loan_user
SELECT loan_type_name, loan_type_code FROM loan_type	loan_user
SELECT cust_id, loan_type, loan_balance, loandate_e FROM loan_detail_info WHERE loan_balance > 1000000	loan_user
SELECT lr.loan_application_id, lr.repayment_amount, lr.repayment_date FROM loan_repayment lr	loan_user
SELECT description, transfer_date FROM transfer	loan_user
SELECT COUNT(DISTINCT c.id) as customer_count FROM customer c JOIN loan_application l1 ON c.id = l1.customer_id JOIN loan_application l2 ON c.id = l2.customer_id WHERE l1.loan_type_id = (SELECT id FROM loan_type WHERE loan_type_name = '房贷') AND l2.loan_type_id = (SELECT id FROM loan_type WHERE loan_type_name = '车贷')	loan_user
SELECT customer_id FROM loan_credit WHERE credit_score = 0.77	loan_user
WITH province_avg AS (SELECT c.province, AVG(l.loan_amount) as avg_province_loan FROM customer c JOIN loan_application l ON c.id = l.customer_id GROUP BY c.province) SELECT c.customer_name, c.province, l.loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id JOIN province_avg pa ON c.province = pa.province WHERE l.loan_amount > pa.avg_province_loan ORDER BY l.loan_amount DESC	loan_user
SELECT d.cust_nm, d.open_date FROM debit_card_information d WHERE d.cust_nm = 'Mark Perez'	loan_user
SELECT ld.currency_type, SUM(ld.loan_amount) AS total_loan_amount FROM loan_detail_info ld GROUP BY ld.currency_type	loan_user
SELECT customer_id, credit_score, description FROM loan_credit	loan_user
SELECT o.occupation_name, COUNT(c.id) FROM occupation o LEFT JOIN customer c ON o.id = c.occupation_id GROUP BY o.occupation_name	loan_user
SELECT * FROM deposit_type WHERE deposit_name = '协定存款'	loan_user
SELECT MAX(data_dt) FROM five_level_classification	loan_user
SELECT loan_type_name, description FROM loan_type ORDER BY loan_type_name ASC	loan_user
SELECT c.curr_full_name, SUM(fp.wealth_bal) as total_wealth_balance FROM financial_products fp JOIN currency c ON fp.currency = c.curr_code GROUP BY c.curr_full_name	loan_user
SELECT dai.org_nm, AVG(la.loan_term) as avg_loan_term, AVG(fp.wealth_bal) as avg_wealth_balance FROM deposit_account_info dai LEFT JOIN loan_application la ON dai.cust_noeger = la.customer_id LEFT JOIN financial_products fp ON dai.cust_no = fp.cust_no GROUP BY dai.org_nm	loan_user
SELECT o.occupation_name, COUNT(c.id) AS customer_count, AVG(la.loan_amount) AS average_loan_amount FROM customer c JOIN occupation o ON c.occupation_id = o.id LEFT JOIN loan_application la ON c.id = la.customer_id GROUP BY o.occupation_name	loan_user
SELECT c.customer_name FROM loan_application l JOIN customer c ON l.customer_id = c.id WHERE l.status = 'PENDING'	loan_user
SELECT a.customer_id, r.repayment_amount FROM loan_application a JOIN loan_repayment r ON a.id = r.loan_application_id WHERE a.status = 'APPROVED'	loan_user
SELECT cust_no, cast_type, wealth_bal, wealth_sta_m_avg_bal_a FROM financial_products WHERE data_dt = '2024-07-14' AND bank_nm = '沈阳余淮支行' AND wealth_bal > 1000000 ORDER BY wealth_bal DESC	loan_user
SELECT COUNT(DISTINCT dai.cust_no) FROM deposit_account_info dai JOIN bank_orgnization bo ON dai.bank_no = bo.bank_id WHERE bo.bank_name = '杭州上城区支行' AND dai.data_dt = '2023-06-30' AND dai.cur_type = 'USD'	loan_user
SELECT c.customer_name, la.apply_date FROM customer c JOIN loan_application la ON c.id = la.customer_id WHERE la.apply_date > '2024-01-01'	loan_user
SELECT b.bank_name, b.bank_parent FROM bank_orgnization b	loan_user
SELECT dci.cust_no, dci.card_no, dci.card_state, dci.current_bal FROM debit_card_information dci JOIN bank_orgnization bo ON dci.bank_no = bo.bank_id WHERE dci.data_dt = '2024-07-19' AND bo.bank_name = '杭州上城区支行' ORDER BY dci.current_bal DESC	loan_user
SELECT ls.loan_status_name, AVG(la.loan_term) as avg_loan_term FROM loan_application la JOIN loan_status ls ON la.status = ls.loan_status_code GROUP BY ls.loan_status_name	loan_user
SELECT customer_name, province FROM customer	loan_user
SELECT b.bank_name, COUNT(fp.cust_no) AS customer_count, SUM(fp.wealth_bal) AS total_wealth FROM bank_orgnization b JOIN financial_products fp ON b.bank_id = fp.bank_no GROUP BY b.bank_name	loan_user
SELECT lr.loan_application_id, AVG(lr.repayment_amount) as avg_repayment_amount FROM loan_repayment lr GROUP BY lr.loan_application_id ORDER BY avg_repayment_amount DESC LIMIT 10	loan_user
SELECT EXTRACT(MONTH FROM apply_date) as month, COUNT(*) as application_count FROM loan_application WHERE EXTRACT(YEAR FROM apply_date) = 2023 GROUP BY month ORDER BY month	loan_user
SELECT c.customer_name, o.occupation_name FROM customer c JOIN occupation o ON c.occupation_id = o.id	loan_user
SELECT lr.* FROM loan_repayment lr JOIN user_behavior ub ON lr.loan_application_id = ub.customer_id WHERE ub.behavior_type = 'I54-ILLJ-03'	loan_user
SELECT loan_balance, loan_amount FROM loan_detail_info	loan_user
SELECT dai.cust_no, dai.acct_bal, la.status FROM deposit_account_info dai LEFT JOIN loan_application la ON dai.cust_noeger = la.customer_id ORDER BY dai.acct_bal DESC LIMIT 10	loan_user
SELECT CASE WHEN DATE_PART('year', AGE(date('now'), c.birth_date)) BETWEEN 0 AND 20 THEN '0-20' WHEN DATE_PART('year', AGE(date('now'), c.birth_date)) BETWEEN 21 AND 40 THEN '21-40' WHEN DATE_PART('year', AGE(date('now'), c.birth_date)) BETWEEN 41 AND 60 THEN '41-60' ELSE '61+' END as age_group, AVG(l.loan_amount) as avg_loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id GROUP BY age_group ORDER BY age_group	loan_user
SELECT c.province, AVG(l.loan_amount) as avg_loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id WHERE EXTRACT(YEAR FROM l.apply_date) = 2023 GROUP BY c.province ORDER BY avg_loan_amount DESC	loan_user
SELECT province, COUNT(*) as female_count FROM customer WHERE gender = 'FEMALE' GROUP BY province ORDER BY female_count DESC	loan_user
SELECT o.occupation_name, c.customer_name, MAX(lr.repayment_date) AS latest_repayment FROM occupation o JOIN customer c ON o.id = c.occupation_id LEFT JOIN loan_repayment lr ON c.id = lr.loan_application_id GROUP BY o.occupation_name, c.customer_name	loan_user
SELECT c.customer_name, MAX(t.transfer_amount) AS max_transfer, t.transfer_date FROM customer c JOIN transfer t ON c.id = t.source_customer_id GROUP BY c.customer_name, t.transfer_date	loan_user
SELECT transfer_date FROM transfer ORDER BY transfer_date DESC LIMIT 1	loan_user
SELECT loan_amount, loan_balance FROM loan_detail_info	loan_user
SELECT c.curr_full_name, COUNT(ld.cust_id) AS customer_count, SUM(ld.loan_amount) AS total_loan FROM currency c JOIN loan_detail_info ld ON c.curr_code = ld.currency_type GROUP BY c.curr_full_name	loan_user
SELECT c.customer_name, ub.description, COUNT(ub.id) AS behavior_count FROM user_behavior ub JOIN customer c ON ub.customer_id = c.id WHERE ub.behavior_date = '2017-11-07' AND ub.behavior_type = 'J44-IKKJ-02' GROUP BY c.customer_name, ub.description	loan_user
SELECT lt.loan_type_name, SUM(la.loan_amount) AS total_amount FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id GROUP BY lt.loan_type_name ORDER BY lt.loan_type_name	loan_user
SELECT lc.customer_id, lc.credit_score, ub.behavior_type FROM loan_credit lc JOIN user_behavior ub ON lc.customer_id = ub.customer_id ORDER BY lc.credit_score DESC	loan_user
SELECT rs_type_name, rs_type_id FROM five_level_classification WHERE rs_type = '不良' AND data_dt = '2024-07-22'	loan_user
SELECT o.occupation_name, SUM(lr.repayment_amount) AS total_repayment FROM occupation o JOIN customer c ON o.id = c.occupation_id JOIN loan_repayment lr ON c.id = lr.loan_application_id GROUP BY o.occupation_name	loan_user
SELECT bank_name, data_dt FROM bank_orgnization	loan_user
SELECT transfer_amount, transfer_date FROM transfer	loan_user
SELECT COUNT(*) FROM customer WHERE customer_name LIKE '饶%'	loan_user
SELECT credit_score, COUNT(*) AS customer_count FROM loan_credit GROUP BY credit_score	loan_user
SELECT la.customer_id, la.loan_amount, AVG(lc.credit_score) as avg_credit_score FROM loan_application la JOIN loan_credit lc ON la.customer_id = lc.customer_id GROUP BY la.customer_id, la.loan_amount HAVING la.loan_amount > AVG(lc.credit_score) * 10 ORDER BY la.loan_amount DESC	loan_user
SELECT f.rs_type_name, AVG(l.loan_amount) AS avg_loan_amount, STDDEV(l.loan_amount) / AVG(l.loan_amount) AS cv_loan_amount FROM five_level_classification f JOIN loan_detail_info l ON f.rs_type_id = l.judgelevel GROUP BY f.rs_type_name	loan_user
SELECT di.acct_type_code, COUNT(DISTINCT di.cust_no) AS customer_count FROM deposit_account_info di GROUP BY di.acct_type_code	loan_user
WITH ranked_customers AS (SELECT o.occupation_name, c.customer_name, DATE_PART('year', AGE(date('now'), c.birth_date)) as age, l.loan_amount, ROW_NUMBER() OVER (PARTITION BY o.id ORDER BY DATE_PART('year', AGE(date('now'), c.birth_date)) ASC, l.loan_amount DESC) as rank FROM occupation o JOIN customer c ON o.id = c.occupation_id JOIN loan_application l ON c.id = l.customer_id) SELECT occupation_name, customer_name, age, loan_amount FROM ranked_customers WHERE rank = 1 ORDER BY loan_amount DESC	loan_user
SELECT c.customer_name, c.gender, la.apply_date FROM customer c JOIN loan_application la ON c.id = la.customer_id WHERE la.apply_date = (SELECT MAX(apply_date) FROM loan_application WHERE customer_id = c.id)	loan_user
SELECT f.bank_nm, COUNT(*) AS product_count, SUM(f.wealth_bal_f) AS total_non_guaranteed FROM financial_products f GROUP BY f.bank_nm	loan_user
SELECT loan_amount, cust_type FROM loan_detail_info	loan_user
SELECT t.source_customer_id, lc.credit_score FROM transfer t JOIN loan_credit lc ON t.source_customer_id = lc.customer_id WHERE t.transfer_date = '2020-11-03'	loan_user
SELECT b.bank_name FROM bank_orgnization b JOIN currency c ON b.data_dt = c.data_dt WHERE b.data_dt = '2023-06-30' AND c.curr_class = '外币'	loan_user
SELECT rs_type_name, data_dt FROM five_level_classification	loan_user
SELECT c.curr_code, c.curr_full_name, b.bank_name FROM currency c JOIN deposit_account_info d ON c.curr_code = d.cur_type JOIN bank_orgnization b ON d.bank_no = b.bank_id WHERE c.data_dt = '2023-06-30' AND c.curr_class = '外币' ORDER BY c.curr_code	loan_user
SELECT t.loan_type_name, COUNT(a.id) AS application_count, SUM(a.loan_amount) AS total_loan_amount FROM loan_application a JOIN loan_type t ON a.loan_type_id = t.id GROUP BY t.loan_type_name	loan_user
SELECT t.*, l.* FROM transfer t LEFT JOIN loan_detail_info l ON t.source_customer_id = l.cust_id WHERE t.transfer_amount = (SELECT MAX(transfer_amount) FROM transfer)	loan_user
WITH province_avg AS (SELECT c.province, AVG(la.loan_amount) as avg_province_amount FROM customer c JOIN loan_application la ON c.id = la.customer_id GROUP BY c.province) SELECT c.customer_name, c.province, la.loan_amount, pa.avg_province_amount FROM customer c JOIN loan_application la ON c.id = la.customer_id JOIN province_avg pa ON c.province = pa.province WHERE la.loan_amount > pa.avg_province_amount ORDER BY (la.loan_amount - pa.avg_province_amount) DESC	loan_user
SELECT loan_application_id, repayment_amount FROM loan_repayment WHERE repayment_date = '2021-11-10' AND repayment_amount > 20	loan_user
SELECT COUNT(DISTINCT la.customer_id) FROM loan_application la JOIN loan_credit lc ON la.customer_id = lc.customer_id WHERE la.apply_date = '2020-11-24' AND la.loan_amount > 40000 AND lc.credit_score < 0.86	loan_user
SELECT COUNT(*) FROM credit_card_data c JOIN bank_orgnization b ON c.branch = b.bank_id WHERE b.bank_name = '杭州上城区支行' AND b.data_dt = '2023-06-30' AND c.age1 > 5000	loan_user
SELECT customer_name, province, o.occupation_name FROM customer c LEFT JOIN occupation o ON c.occupation_id = o.id	loan_user
SELECT ub.behavior_type, ub.behavior_date FROM user_behavior ub WHERE ub.customer_id = 85982	loan_user
SELECT c.customer_name, la.loan_amount FROM loan_application la JOIN customer c ON la.customer_id = c.id WHERE la.apply_date >= '2020-11-01' AND la.apply_date < '2020-12-01' AND la.status = 'REJECTED' ORDER BY la.loan_amount DESC	loan_user
SELECT b.bank_name, COUNT(DISTINCT di.cust_no) AS customer_count FROM bank_orgnization b JOIN deposit_account_info di ON b.bank_id = di.bank_no GROUP BY b.bank_name	loan_user
SELECT d.card_type_nm, COUNT(d.card_no) AS card_count FROM debit_card_information d GROUP BY d.card_type_nm ORDER BY d.card_type_nm	loan_user
SELECT occupation_name, description FROM occupation WHERE occupation_code = 'NURSE'	loan_user
SELECT d.cust_no, d.card_no FROM debit_card_information d WHERE d.data_dt = '2024-07-07 00:00:00'	loan_user
SELECT ldi.cust_id, ldi.loan_balance, flc.rs_type_name FROM loan_detail_info ldi JOIN five_level_classification flc ON ldi.judgelevel = flc.rs_type_id WHERE flc.data_dt = '2024-07-22' AND flc.rs_type_name = '关注' AND ldi.loan_balance > 15000	loan_user
SELECT deposit_id, deposit_name FROM deposit_type WHERE deposit_name IS NOT NULL	loan_user
SELECT ldi.reportid, ldi.cust_id, ldi.loan_balance, bo.bank_name, dci.cust_name FROM loan_detail_info ldi JOIN bank_orgnization bo ON ldi.loan_orgno = bo.bank_id JOIN deposit_account_info dci ON ldi.cust_id = dci.cust_no WHERE ldi.loan_balance > 500000 AND ldi.dw_date = '2024-07-19'	loan_user
SELECT dai.cust_name, dai.acct_bal, dai.acct_type_code, dt.deposit_name FROM deposit_account_info dai JOIN deposit_type dt ON dai.arl_pdp_code = dt.deposit_id WHERE dai.data_dt = '2024-07-19' AND dai.acct_bal > 100000 ORDER BY dai.acct_bal DESC	loan_user
SELECT acc_name1, bank, acct_sts FROM credit_card_data WHERE age1 > 5000	loan_user
SELECT COUNT(la.customer_id) AS customer_count, AVG(la.loan_amount) AS average_loan_amount FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id WHERE lt.loan_type_name = '住房贷款' AND la.loan_amount > 30000 AND EXTRACT(YEAR FROM la.apply_date) = 2019	loan_user
SELECT d.card_type_nm, d.card_state FROM debit_card_information d WHERE d.data_dt = '2024-07-01'	loan_user
SELECT COUNT(DISTINCT la.customer_id) FROM loan_application la JOIN debit_card_information dci ON la.customer_id = CAST(dci.cust_no AS INTEGER) WHERE la.apply_date >= '2019-01-01' AND la.apply_date < '2020-01-01' AND la.loan_amount > 30000 AND dci.current_bal > 5000	loan_user
WITH avg_balance AS (SELECT bank_nm, AVG(current_bal + fixed_bal) AS avg_bal FROM debit_card_information GROUP BY bank_nm) SELECT d.cust_nm, d.bank_nm FROM debit_card_information d JOIN avg_balance ab ON d.bank_nm = ab.bank_nm WHERE d.current_bal + d.fixed_bal > ab.avg_bal	loan_user
SELECT dai.cust_no, dai.cust_name, SUM(dai.acct_bal) AS total_balance FROM deposit_account_info dai JOIN bank_orgnization bo ON dai.bank_no = bo.bank_id WHERE dai.data_dt = '2024-07-19' AND bo.bank_name = '沈阳分行' GROUP BY dai.cust_no, dai.cust_name	loan_user
SELECT l.loan_application_id, l.repayment_date FROM loan_repayment l	loan_user
SELECT DATE_TRUNC('quarter', apply_date) as quarter, COUNT(*) as application_count, AVG(loan_amount) as avg_loan_amount FROM loan_application GROUP BY quarter ORDER BY quarter	loan_user
SELECT loan_application_id, description FROM loan_repayment WHERE repayment_date = '2021-11-10' AND repayment_amount > 20	loan_user
SELECT cust_nm, current_bal FROM debit_card_information WHERE open_date = '2024-07-09' AND card_state = '正常' ORDER BY current_bal DESC	loan_user
SELECT curr_code, curr_full_name FROM currency WHERE curr_class = '外币' AND data_dt = '2023-06-30'	loan_user
SELECT lr.* FROM loan_repayment lr WHERE lr.loan_application_id IN (SELECT DISTINCT customer_id FROM user_behavior WHERE behavior_date > '2018-06-26')	loan_user
SELECT f.rs_type_name, SUM(ld.loan_amount) AS total_loan, COUNT(ld.reportid) AS customer_count FROM five_level_classification f JOIN loan_detail_info ld ON f.rs_type_id = ld.judgelevel GROUP BY f.rs_type_name	loan_user
SELECT deposit_name, deposit_type_id FROM deposit_type ORDER BY deposit_name	loan_user
SELECT SUM(la.loan_amount) FROM loan_application la JOIN loan_credit lc ON la.customer_id = lc.customer_id WHERE la.apply_date >= '2023-01-01' AND la.apply_date < '2024-01-01' AND lc.credit_score < 0.5	loan_user
SELECT la.customer_id, la.loan_amount, dai.act_year_avg_bal FROM loan_application la JOIN deposit_account_info dai ON la.customer_id = dai.cust_noeger WHERE la.loan_amount > dai.act_year_avg_bal	loan_user
SELECT SUM(repayment_amount) FROM loan_repayment WHERE repayment_date = '2021-11-10'	loan_user
SELECT l.cust_id, l.loan_balance, d.acct_bal, d.acct_type_code FROM loan_detail_info l JOIN deposit_account_info d ON l.cust_id = d.cust_no WHERE l.dw_date = '2024-07-19' AND l.loan_balance > 500000	loan_user
WITH customer_applications AS (SELECT c.id, c.customer_name, COUNT(*) as application_count, (MAX(l.apply_date) - MIN(l.apply_date)) / 30 as months_span FROM customer c JOIN loan_application l ON c.id = l.customer_id GROUP BY c.id, c.customer_name) SELECT customer_name, CASE WHEN months_span > 0 THEN application_count / months_span ELSE application_count END as monthly_frequency FROM customer_applications ORDER BY monthly_frequency DESC	loan_user
SELECT la.apply_date, la.status FROM loan_application la	loan_user
SELECT * FROM occupation WHERE id = 2	loan_user
SELECT c.customer_name, c.phone_number FROM customer c JOIN occupation o ON c.occupation_id = o.id WHERE c.province = '辽宁省' AND o.occupation_name = '老师'	loan_user
SELECT c.customer_name, la.loan_amount FROM loan_application la JOIN customer c ON la.customer_id = c.id JOIN loan_type lt ON la.loan_type_id = lt.id WHERE lt.loan_type_code = 'PERSONAL' AND la.status = 'REJECTED' AND EXTRACT(YEAR FROM la.apply_date) = 2020 AND EXTRACT(MONTH FROM la.apply_date) = 11 ORDER BY la.loan_amount DESC	loan_user
SELECT dai.cust_name, dai.acct_bal, dt.deposit_name FROM deposit_account_info dai JOIN deposit_type dt ON dai.arl_pdp_code = dt.deposit_id WHERE dai.data_dt = '2024-07-19' AND dai.bank_nm = '沈阳分行' AND dai.acct_bal > 100000	loan_user
SELECT la.customer_id, la.loan_amount, lc.credit_score, la.apply_date FROM loan_application la JOIN loan_credit lc ON la.customer_id = lc.customer_id WHERE la.apply_date < '2024-07-22' AND lc.credit_score < 0.9 ORDER BY lc.credit_score DESC	loan_user
SELECT b.bank_name, c.curr_full_name FROM bank_orgnization b JOIN currency c ON b.data_dt = c.data_dt WHERE b.data_dt = '2023-06-30' AND c.curr_class = '外币'	loan_user
SELECT lt.loan_type_name, la.status, COUNT(la.customer_id) AS customer_count FROM loan_type lt LEFT JOIN loan_application la ON lt.id = la.loan_type_id GROUP BY lt.loan_type_name, la.status	loan_user
SELECT l.loan_application_id, l.repayment_date FROM loan_repayment l WHERE l.repayment_date BETWEEN '2023-10-01' AND '2023-10-31'	loan_user
SELECT DISTINCT occupation_code FROM occupation	loan_user
SELECT f.bank_nm, b.bank_level FROM financial_products f JOIN bank_orgnization b ON f.bank_no = b.bank_id WHERE f.data_dt = '2024-07-02' AND f.wealth_bal > 1000000	loan_user
SELECT COUNT(DISTINCT d.cust_no) FROM debit_card_information d JOIN financial_products f ON d.cust_no = f.cust_no JOIN bank_orgnization b ON d.org_no = b.bank_id WHERE b.bank_name = '杭州上城区支行' AND b.data_dt = '2023-06-30'	loan_user
SELECT fp.cust_no, SUM(fp.wealth_bal) AS total_wealth_bal FROM financial_products fp WHERE fp.data_dt = '2024-07-07' AND fp.bank_nm = '北京王府井支行' GROUP BY fp.cust_no ORDER BY total_wealth_bal DESC	loan_user
SELECT c.customer_name, cr.credit_score FROM customer c JOIN loan_credit cr ON c.id = cr.customer_id WHERE cr.credit_date = (SELECT MAX(credit_date) FROM loan_credit WHERE customer_id = c.id) ORDER BY cr.credit_score DESC	loan_user
SELECT dci.cust_nm, dci.card_no FROM debit_card_information dci WHERE dci.data_dt = '2024-07-09' AND dci.bank_nm = '杭州上城区支行' AND dci.card_state = '正常'	loan_user
SELECT c.customer_name, l.loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id WHERE c.gender = 'FEMALE' ORDER BY l.loan_amount DESC LIMIT 5	loan_user
SELECT lc.customer_id, lc.credit_score, lt.loan_type_name FROM loan_credit lc JOIN loan_application la ON lc.customer_id = la.customer_id JOIN loan_type lt ON la.loan_type_id = lt.id	loan_user
SELECT * FROM transfer WHERE target_customer_id = 376252	loan_user
SELECT deposit_id, deposit_type_id FROM deposit_type	loan_user
SELECT cust_nm, residential_address FROM debit_card_information	loan_user
SELECT tel_no, cust_nm FROM debit_card_information WHERE tel_no LIKE '1%'	loan_user
SELECT * FROM transfer WHERE description = '商品支持.'	loan_user
SELECT l.loan_balance, c.curr_full_name, l.loan_type FROM loan_detail_info l JOIN currency c ON l.currency_type = c.curr_code WHERE l.loan_balance > 1000000	loan_user
SELECT COUNT(DISTINCT lci.customer_id) FROM loan_credit lci JOIN debit_card_information dci ON lci.customer_id = CAST(dci.cust_id AS INTEGER) JOIN bank_orgnization bo ON dci.bank_no = bo.bank_id WHERE bo.bank_name = '杭州上城区支行' AND bo.data_dt = '2023-06-30' AND lci.credit_score < 0.5	loan_user
WITH loan_sum AS (SELECT cust_ideger AS id, SUM(loan_amount) AS total_loan FROM loan_detail_info GROUP BY cust_id), transfer_sum AS (SELECT source_customer_id AS id, SUM(transfer_amount) AS total_transfer FROM transfer GROUP BY source_customer_id) SELECT COALESCE(l.id, t.id) AS customer_id, COALESCE(l.total_loan, 0) AS total_loan, COALESCE(t.total_transfer, 0) AS total_transfer, CASE WHEN COALESCE(t.total_transfer, 0) = 0 THEN NULL ELSE COALESCE(l.total_loan, 0) / COALESCE(t.total_transfer, 0) END AS loan_transfer_ratio FROM loan_sum l FULL OUTER JOIN transfer_sum t ON l.id = t.id	loan_user
SELECT c.customer_name, DATE_PART('year', AGE(date('now'), c.birth_date)) as age, l.loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id WHERE DATE_PART('year', AGE(date('now'), c.birth_date)) BETWEEN 25 AND 35 ORDER BY l.loan_amount DESC LIMIT 10	loan_user
WITH customer_loan_total AS (SELECT c.id, c.customer_name, DATE_PART('year', AGE(date('now'), c.birth_date)) as age, SUM(l.loan_amount) as total_loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id GROUP BY c.id, c.customer_name, c.birth_date), age_groups AS (SELECT id, customer_name, CASE WHEN age BETWEEN 0 AND 20 THEN '0-20' WHEN age BETWEEN 21 AND 40 THEN '21-40' WHEN age BETWEEN 41 AND 60 THEN '41-60' ELSE '61+' END as age_group, total_loan_amount FROM customer_loan_total) SELECT ag.customer_name, ag.age_group, ag.total_loan_amount, PERCENT_RANK() OVER (PARTITION BY ag.age_group ORDER BY ag.total_loan_amount) as percentile FROM age_groups ag ORDER BY ag.age_group, percentile DESC	loan_user
SELECT occupation_code, occupation_name FROM occupation	loan_user
SELECT c.customer_name, la.loan_amount FROM loan_application la JOIN customer c ON la.customer_id = c.id WHERE la.apply_date = '2019-01-10' AND la.status = 'REJECTED' ORDER BY la.loan_amount DESC	loan_user
SELECT AVG(transfer_amount) FROM transfer WHERE DATE_TRUNC('month', transfer_date) = '2014-10-01'	loan_user
SELECT loan_status_code, loan_status_name FROM loan_status	loan_user
SELECT description FROM user_behavior WHERE customer_id = 755438	loan_user
SELECT c.customer_name, la.loan_amount FROM loan_application la JOIN customer c ON la.customer_id = c.id WHERE la.status = 'REJECTED' ORDER BY la.loan_amount DESC	loan_user
SELECT deposit_name, COUNT(*) FROM deposit_type GROUP BY deposit_name ORDER BY deposit_name ASC	loan_user
SELECT la.customer_id, la.status, la.apply_date FROM loan_application la JOIN loan_credit lc ON la.customer_id = lc.customer_id WHERE la.apply_date > '2024-07-01' AND lc.credit_score > 0.8 ORDER BY la.apply_date DESC	loan_user
SELECT curr_code, curr_full_name FROM currency WHERE curr_class = '外币' ORDER BY curr_code ASC	loan_user
SELECT COUNT(DISTINCT l.cust_id) FROM loan_detail_info l JOIN loan_repayment r ON l.reportid = r.loan_application_id WHERE l.loan_balance > 1000000 AND r.repayment_amount < 10000 AND r.repayment_date = (SELECT MAX(repayment_date) FROM loan_repayment WHERE loan_application_id = l.reportid)	loan_user
SELECT deposit_name, deposit_type_id FROM deposit_type ORDER BY deposit_name	loan_user
SELECT l.loan_type, SUM(l.loan_amount) AS total_amount FROM loan_detail_info l GROUP BY l.loan_type ORDER BY l.loan_type	loan_user
SELECT bank_nm, SUM(wealth_bal) AS total_wealth_bal FROM financial_products GROUP BY bank_nm	loan_user
SELECT c.customer_name, a.status, a.loan_amount FROM customer c JOIN loan_application a ON c.id = a.customer_id ORDER BY a.loan_amount DESC	loan_user
WITH loan_dates AS (SELECT customer_id, apply_date, LAG(apply_date) OVER (PARTITION BY customer_id ORDER BY apply_date) as prev_apply_date FROM loan_application) SELECT c.customer_name, AVG(apply_date - prev_apply_date) as avg_interval_days FROM loan_dates ld JOIN customer c ON ld.customer_id = c.id WHERE prev_apply_date IS NOT NULL GROUP BY c.id, c.customer_name ORDER BY avg_interval_days DESC	loan_user
SELECT c.customer_name, t.transfer_amount, t.description FROM transfer t JOIN customer c ON t.source_customer_id = c.id WHERE t.transfer_date = '2011-06-08' ORDER BY t.transfer_amount DESC	loan_user
SELECT l.cust_id, l.loan_balance FROM loan_detail_info l WHERE l.judgelevel = 'RS_004'	loan_user
SELECT cust_no, wealth_bal, wealth_t_m_avg_bal_b FROM financial_products WHERE data_dt = '2024-07-02' AND wealth_bal > 1000000 AND wealth_t_m_avg_bal_b > 180000	loan_user
SELECT c.gender, COUNT(c.id) AS customer_count, AVG(lc.credit_score) AS average_credit_score FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id GROUP BY c.gender	loan_user
SELECT dt.deposit_name, AVG(la.loan_amount) as avg_loan_amount, COUNT(CASE WHEN la.status = 'APPROVED' THEN 1 END) / COUNT(*) as approval_rate FROM loan_application la JOIN deposit_account_info dai ON la.customer_id = dai.cust_noeger JOIN deposit_type dt ON dai.arl_pdp_code = dt.deposit_id GROUP BY dt.deposit_name	loan_user
SELECT org_nm, cust_name FROM deposit_account_info WHERE data_dt = '2024-07-19' AND bank_nm = '沈阳分行' AND cust_type = '对私' AND acct_bal > 100000	loan_user
SELECT * FROM user_behavior WHERE customer_id = 755438	loan_user
SELECT c.gender, COUNT(c.id) AS customer_count, SUM(la.loan_amount) AS total_loan_amount FROM customer c JOIN loan_application la ON c.id = la.customer_id GROUP BY c.gender	loan_user
SELECT cust_no, cast_type, wealth_bal FROM financial_products WHERE bank_nm = '沈阳余淮支行' AND data_dt = '2024-07-14T00:00:00'	loan_user
SELECT source_customer_id, target_customer_id FROM transfer WHERE transfer_date = '2011-06-08' AND transfer_amount > 5000	loan_user
SELECT c.cust_name, l.loan_balance, f.rs_type_name FROM loan_detail_info l JOIN deposit_account_info c ON l.cust_id = c.cust_no JOIN five_level_classification f ON l.judgelevel = f.rs_type_id WHERE l.dw_date = '2024-07-22' AND l.loan_balance > 10000	loan_user
SELECT f.cust_no, SUM(f.wealth_bal) AS total_wealth FROM financial_products f GROUP BY f.cust_no	loan_user
SELECT l.loan_type_name, COUNT(a.id) AS application_count, STRING_AGG(c.customer_name, ', ') AS customers FROM loan_application a JOIN loan_type l ON a.loan_type_id = l.id JOIN customer c ON a.customer_id = c.id GROUP BY l.loan_type_name	loan_user
SELECT rs_type_id, rs_type_name FROM five_level_classification	loan_user
SELECT la.customer_id, la.loan_amount, lr.repayment_amount, lr.repayment_date FROM loan_application la JOIN loan_repayment lr ON la.id = lr.loan_application_id WHERE lr.repayment_date = '2021-11-10' AND lr.repayment_amount > 20 ORDER BY lr.repayment_amount DESC	loan_user
SELECT SUM(current_bal) AS total_current_bal, SUM(fixed_bal) AS total_fixed_bal FROM debit_card_information WHERE bank_no = 'BANK_00301' AND data_dt = '2024-07-09'	loan_user
SELECT c.customer_name, COUNT(la.id) AS application_count, SUM(la.loan_amount) AS total_loan_amount, AVG(lc.credit_score) AS avg_credit_score FROM customer c JOIN loan_application la ON c.id = la.customer_id JOIN loan_credit lc ON c.id = lc.customer_id WHERE la.apply_date >= date('now') - INTERVAL '1 year' GROUP BY c.id, c.customer_name HAVING COUNT(la.id) > 1 ORDER BY application_count DESC	loan_user
SELECT * FROM loan_detail_info WHERE loan_balance > 1000000	loan_user
SELECT lr.repayment_amount, lc.credit_score FROM loan_repayment lr JOIN loan_credit lc ON lr.loan_application_id = lc.customer_id	loan_user
SELECT c.customer_name, c.id_number, c.phone_number, lc.credit_score FROM customer c JOIN occupation o ON c.occupation_id = o.id JOIN loan_credit lc ON c.id = lc.customer_id WHERE o.occupation_name = '工程师' ORDER BY lc.credit_score DESC	loan_user
WITH province_extremes AS (SELECT c.province, MAX(l.loan_amount) as max_loan, MIN(l.loan_amount) as min_loan FROM customer c JOIN loan_application l ON c.id = l.customer_id GROUP BY c.province) SELECT province, max_loan, min_loan, (max_loan - min_loan) as loan_gap FROM province_extremes ORDER BY loan_gap DESC	loan_user
SELECT loan_status_code, loan_status_name, description FROM loan_status	loan_user
SELECT * FROM loan_detail_info WHERE loan_orgno = 'BANK_00104'	loan_user
SELECT f.cust_no, SUM(f.wealth_f_y_avg_bal_b) AS total_non_guaranteed FROM financial_products f GROUP BY f.cust_no	loan_user
SELECT c.customer_name, o.occupation_name, la.loan_amount FROM loan_application la JOIN customer c ON la.customer_id = c.id JOIN occupation o ON c.occupation_id = o.id WHERE la.apply_date = '2019-01-10' AND la.status = 'REJECTED' ORDER BY la.loan_amount DESC	loan_user
SELECT t.source_customer_id, t.target_customer_id, t.transfer_amount, t.transfer_date, t.description FROM transfer t WHERE t.source_customer_id = 458270 AND t.transfer_date = '2011-06-08'	loan_user
SELECT o.occupation_name, COUNT(CASE WHEN l.status = 'APPROVED' THEN 1 END) / COUNT(*) as approval_rate FROM occupation o JOIN customer c ON o.id = c.occupation_id JOIN loan_application l ON c.id = l.customer_id GROUP BY o.occupation_name ORDER BY approval_rate DESC	loan_user
SELECT COUNT(DISTINCT c.custr_nbr) FROM credit_card_data c JOIN user_behavior u ON c.custr_nbreger = u.customer_id WHERE c.purchases IS NOT NULL AND c.purchases > 0 AND u.behavior_type = 'LOGIN' AND u.behavior_date BETWEEN '2024-07-01' AND '2024-07-31'	loan_user
SELECT c.province, COUNT(DISTINCT c.id) AS customer_count, AVG(dai.acct_bal) AS avg_deposit_balance, AVG(la.loan_amount) AS avg_loan_amount FROM customer c LEFT JOIN deposit_account_info dai ON c.id_number = dai.cert_code LEFT JOIN loan_application la ON c.id = la.customer_id GROUP BY c.province ORDER BY customer_count DESC	loan_user
SELECT credit_score, COUNT(customer_id) AS customer_count FROM loan_credit GROUP BY credit_score	loan_user
SELECT d.cust_no, d.card_no, d.cust_nm FROM debit_card_information d WHERE d.card_state = '正常'	loan_user
SELECT acc_name1, age1 FROM credit_card_data WHERE close_code = '正常' AND age1 > 5000	loan_user
SELECT * FROM transfer ORDER BY transfer_amount DESC LIMIT 10	loan_user
SELECT DISTINCT ON (c.province) c.province, c.customer_name, la.loan_term FROM customer c JOIN loan_application la ON c.id = la.customer_id ORDER BY c.province, la.loan_term DESC LIMIT 10	loan_user
SELECT c.customer_name, l.loan_type_name FROM customer c JOIN loan_application a ON c.id = a.customer_id JOIN loan_type l ON a.loan_type_id = l.id	loan_user
SELECT bank_nm, SUM(wealth_bal) AS total_wealth_bal, SUM(wealth_bal_t) AS total_wealth_bal_t FROM financial_products WHERE cast_type = '对公' AND data_dt = '2024-07-14' GROUP BY bank_nm	loan_user
SELECT o.occupation_name, c.gender, AVG(la.loan_amount) as avg_loan_amount FROM occupation o JOIN customer c ON o.id = c.occupation_id JOIN loan_application la ON c.id = la.customer_id GROUP BY o.occupation_name, c.gender ORDER BY o.occupation_name, c.gender	loan_user
SELECT occupation_name, occupation_code FROM occupation ORDER BY occupation_name ASC	loan_user
SELECT COUNT(DISTINCT ub.customer_id) FROM loan_application la JOIN user_behavior ub ON la.customer_id = ub.customer_id WHERE la.loan_amount > 50000 AND la.apply_date >= '2019-01-01' AND la.apply_date < '2020-01-01' AND ub.behavior_type = 'LOGIN' AND ub.behavior_date >= '2018-01-01' AND ub.behavior_date < '2019-01-01'	loan_user
SELECT * FROM transfer WHERE transfer_amount > 800	loan_user
SELECT transfer_amount FROM transfer WHERE source_customer_id = 682855	loan_user
SELECT c.customer_id, c.credit_score, la.* FROM loan_credit c JOIN (SELECT customer_id, MAX(apply_date) as latest_apply_date FROM loan_application GROUP BY customer_id) latest ON c.customer_id = latest.customer_id JOIN loan_application la ON la.customer_id = latest.customer_id AND la.apply_date = latest.latest_apply_date ORDER BY c.credit_score DESC LIMIT 10	loan_user
SELECT transfer_date, description FROM transfer	loan_user
SELECT COUNT(DISTINCT ub.customer_id) FROM user_behavior ub JOIN loan_application la ON ub.customer_id = la.customer_id JOIN loan_credit lc ON ub.customer_id = lc.customer_id WHERE la.apply_date = '2020-11-24' AND la.status = 'REJECTED' AND lc.credit_score < 0.86	loan_user
SELECT f.bank_nm, SUM(f.wealth_bal_t) AS total_guaranteed, SUM(f.wealth_bal_f) AS total_non_guaranteed FROM financial_products f GROUP BY f.bank_nm	loan_user
SELECT ldi.reportid, ldi.loan_balance, bo.bank_name, flc.rs_type_name FROM loan_detail_info ldi JOIN bank_orgnization bo ON ldi.loan_orgno = bo.bank_id JOIN five_level_classification flc ON ldi.judgelevel = flc.rs_type_id WHERE ldi.loan_balance > 10000	loan_user
SELECT COUNT(DISTINCT c.id) FROM customer c JOIN credit_card_data ccd ON c.id_number = ccd.custr_nbr WHERE c.province = '辽宁省' AND ccd.acct_sts = '正常'	loan_user
SELECT o.occupation_name, AVG(l.loan_amount) as avg_loan_amount FROM occupation o JOIN customer c ON o.id = c.occupation_id JOIN loan_application l ON c.id = l.customer_id GROUP BY o.occupation_name ORDER BY avg_loan_amount DESC LIMIT 3	loan_user
SELECT COUNT(DISTINCT c.id) FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id JOIN occupation o ON c.occupation_id = o.id JOIN bank_orgnization bo ON c.province = bo.bank_name WHERE bo.bank_name = '杭州上城区支行' AND bo.data_dt = '2023-06-30' AND lc.credit_score > 0.75 AND o.occupation_name = '工程师'	loan_user
SELECT l.loan_type_name, la.status, COUNT(la.id) AS application_count FROM loan_application la JOIN loan_type l ON la.loan_type_id = l.id GROUP BY l.loan_type_name, la.status ORDER BY l.loan_type_name	loan_user
SELECT c.customer_name, c.id_number, c.phone_number, lc.credit_score, lc.credit_date FROM customer c JOIN occupation o ON c.occupation_id = o.id JOIN loan_credit lc ON c.id = lc.customer_id WHERE o.occupation_name = '老师' ORDER BY lc.credit_date DESC	loan_user
SELECT l.cust_type, l.loan_balance FROM loan_detail_info l WHERE l.loan_amount > 50000	loan_user
SELECT loan_status_name, description FROM loan_status	loan_user
SELECT COUNT(*) FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id JOIN loan_credit lc ON la.customer_id = lc.customer_id WHERE lt.loan_type_code = 'PERSONAL' AND lc.credit_score > 0.8 AND la.apply_date >= '2015-01-01' AND la.apply_date < '2016-01-01' AND la.status = 'REJECTED'	loan_user
SELECT customer_name, id_number, phone_number FROM customer WHERE EXTRACT(YEAR FROM birth_date) = 1983	loan_user
SELECT cust_type, SUM(acct_bal) AS total_balance FROM deposit_account_info WHERE data_dt = '2024-07-21' AND bank_no = 'BANK_003' GROUP BY cust_type	loan_user
SELECT * FROM loan_detail_info WHERE loan_balance > 100000	loan_user
SELECT c.customer_name, la.loan_term FROM customer c JOIN loan_application la ON c.id = la.customer_id ORDER BY la.loan_term ASC	loan_user
SELECT COUNT(DISTINCT la.customer_id) FROM loan_application la JOIN user_behavior ub ON la.customer_id = ub.customer_id WHERE la.apply_date >= '2019-01-01' AND la.apply_date < '2020-01-01' AND la.status = 'REJECTED' AND ub.behavior_type = 'TRANSFER'	loan_user
SELECT * FROM five_level_classification WHERE rs_type_name = '可疑'	loan_user
SELECT * FROM transfer WHERE transfer_amount < 1000	loan_user
SELECT source_customer_id, transfer_amount FROM transfer WHERE transfer_date = '2011-06-08' AND transfer_amount > 5000	loan_user
SELECT la.customer_id, la.loan_amount FROM loan_application la WHERE la.apply_date > '2023-01-01'	loan_user
SELECT source_customer_id, target_customer_id FROM transfer WHERE transfer_date = '2011-06-08' AND transfer_amount > 5000	loan_user
SELECT lc.customer_id, lc.credit_score, dt.deposit_name FROM loan_credit lc JOIN deposit_type dt ON lc.credit_date = dt.data_dt WHERE lc.credit_score > 0.75 AND dt.deposit_id = 'D_003' AND dt.data_dt = '2024-07-22'	loan_user
SELECT ls.loan_status_name, COUNT(la.id) AS count FROM loan_status ls JOIN loan_application la ON ls.loan_status_code = la.status GROUP BY ls.loan_status_name	loan_user
SELECT ld.loan_orgno, SUM(ld.loan_amount) AS total_loan FROM loan_detail_info ld GROUP BY ld.loan_orgno	loan_user
SELECT c.customer_name, c.birth_date FROM customer c ORDER BY c.birth_date	loan_user
SELECT d.cust_nm, d.card_no, d.bank_nm FROM debit_card_information d WHERE d.data_dt = '2024-07-07 00:00:00'	loan_user
SELECT * FROM deposit_type WHERE data_dt = '2024-07-22'	loan_user
SELECT cust_nm, card_no, open_date, current_bal FROM debit_card_information WHERE open_date = '2024-07-09' AND card_state = '正常'	loan_user
SELECT dai.bank_nm, AVG(dai.acct_bal) as avg_deposit_balance, AVG(fp.wealth_bal) as avg_wealth_balance FROM deposit_account_info dai JOIN financial_products fp ON dai.bank_no = fp.bank_no GROUP BY dai.bank_nm	loan_user
SELECT c.customer_name, c.email FROM customer c ORDER BY c.customer_name ASC	loan_user
SELECT c.customer_name, lr.repayment_amount FROM customer c JOIN loan_repayment lr ON c.id = lr.loan_application_id	loan_user
SELECT c.customer_name, la.loan_amount, lr.repayment_date FROM customer c JOIN loan_application la ON c.id = la.customer_id JOIN loan_repayment lr ON la.id = lr.loan_application_id WHERE lr.repayment_date BETWEEN '2023-01-01' AND '2023-12-31'	loan_user
SELECT deposit_id FROM deposit_type WHERE deposit_name = '协定存款' AND data_dt = '2024-07-22'	loan_user
SELECT customer_id, credit_score, description FROM loan_credit	loan_user
SELECT t.loan_type_name, AVG(a.loan_amount) AS average_loan_amount FROM loan_application a JOIN loan_type t ON a.loan_type_id = t.id GROUP BY t.loan_type_name	loan_user
SELECT l.loan_type_name, SUM(a.loan_amount) AS total_loan_amount FROM loan_application a JOIN loan_type l ON a.loan_type_id = l.id GROUP BY l.loan_type_name	loan_user
SELECT DISTINCT fp.wealth_sta_y_avg_bal_a FROM financial_products fp	loan_user
WITH avg_age_by_occupation AS (SELECT o.id, AVG(EXTRACT(YEAR FROM AGE(date('now'), c.birth_date))) as avg_age FROM occupation o JOIN customer c ON o.id = c.occupation_id GROUP BY o.id) SELECT c.customer_name, o.occupation_name, EXTRACT(YEAR FROM AGE(date('now'), c.birth_date)) as age, aao.avg_age as occupation_avg_age FROM customer c JOIN occupation o ON c.occupation_id = o.id JOIN avg_age_by_occupation aao ON o.id = aao.id WHERE EXTRACT(YEAR FROM AGE(date('now'), c.birth_date)) > aao.avg_age ORDER BY (EXTRACT(YEAR FROM AGE(date('now'), c.birth_date)) - aao.avg_age) DESC	loan_user
WITH avg_balance AS (SELECT AVG(acct_bal) FROM deposit_account_info), avg_credit AS (SELECT AVG(credit_score) FROM loan_credit) SELECT c.customer_name, dai.acct_bal AS deposit_balance, lc.credit_score, la.status AS latest_loan_status FROM customer c JOIN deposit_account_info dai ON c.id_number = dai.cert_code JOIN loan_credit lc ON c.id = lc.customer_id LEFT JOIN loan_application la ON c.id = la.customer_id WHERE dai.acct_bal > (SELECT * FROM avg_balance) AND lc.credit_score > (SELECT * FROM avg_credit) AND la.apply_date = (SELECT MAX(apply_date) FROM loan_application WHERE customer_id = c.id)	loan_user
SELECT la.customer_id, lr.repayment_amount FROM loan_application la JOIN loan_repayment lr ON la.id = lr.loan_application_id WHERE la.status = 'REJECTED' AND lr.repayment_date = '2021-11-10' AND lr.repayment_amount > 20	loan_user
SELECT * FROM loan_application WHERE status = 'PENDING'	loan_user
SELECT la.customer_id, SUM(la.loan_amount) AS total_loan_amount FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id WHERE lt.loan_type_name = '住房贷款' AND la.status = 'REJECTED' AND EXTRACT(YEAR FROM la.apply_date) = 2019 GROUP BY la.customer_id	loan_user
SELECT c.curr_code, c.curr_full_name, fp.wealth_bal FROM currency c JOIN financial_products fp ON c.curr_code = fp.currency WHERE c.data_dt = '2023-06-30' AND fp.wealth_bal > 1000000	loan_user
SELECT d.bank_nm, COUNT(d.cust_no) AS customer_count FROM debit_card_information d WHERE d.data_dt = '2024-07-07 00:00:00' GROUP BY d.bank_nm ORDER BY customer_count DESC	loan_user
SELECT COUNT(DISTINCT d.cust_no) FROM debit_card_information d JOIN financial_products f ON d.cust_no = f.cust_no WHERE d.data_dt = '2024-07-17' AND d.current_bal > 1000 AND f.data_dt = '2024-07-17' AND f.wealth_bal > 0	loan_user
SELECT cust_nm, card_no, open_date, current_bal FROM debit_card_information WHERE card_state = '正常' AND open_date = '2024-07-02' ORDER BY current_bal DESC	loan_user
SELECT c.customer_name, c.id_number, c.phone_number, lc.credit_score, lc.credit_date FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id WHERE c.province = '上海市' AND lc.credit_score > 0.8 ORDER BY lc.credit_date DESC	loan_user
SELECT d.bank_nm, SUM(d.current_bal + d.fixed_bal) AS total_deposit FROM debit_card_information d GROUP BY d.bank_nm	loan_user
SELECT c.customer_name, la.loan_amount FROM loan_application la JOIN customer c ON la.customer_id = c.id JOIN loan_type lt ON la.loan_type_id = lt.id JOIN loan_credit lc ON la.customer_id = lc.customer_id WHERE lt.loan_type_code = 'MORTGAGE' AND la.apply_date >= '2019-01-01' AND la.apply_date < '2020-01-01' AND lc.credit_score > 0.8	loan_user
SELECT d.cust_nm, d.tel_no FROM debit_card_information d WHERE d.data_dt = '2024-07-15' AND d.bank_nm = '北京东单支行' AND d.current_bal > 3000	loan_user
SELECT c.curr_code, c.curr_full_name, COUNT(ub.id) AS behavior_count FROM currency c LEFT JOIN user_behavior ub ON c.curr_code = ub.behavior_type WHERE c.data_dt = '2023-06-30' AND c.curr_class = '外币' GROUP BY c.curr_code, c.curr_full_name	loan_user
SELECT COUNT(ccd.xaccount) AS account_count, SUM(ccd.cred_limit) AS total_credit_limit FROM credit_card_data ccd JOIN bank_orgnization bo ON ccd.bank = bo.bank_id WHERE ccd.day_opened > '2024-07-01' AND ccd.corporation = 'Corp7' AND ccd.close_code = '正常'	loan_user
SELECT occupation_name, description FROM occupation	loan_user
SELECT loan_status_name, description FROM loan_status WHERE loan_status_code = 'APPROVED'	loan_user
SELECT loan_type_name, description FROM loan_type ORDER BY loan_type_name	loan_user
SELECT corporation, xaccount, bank, category, age1, age2 FROM credit_card_data WHERE age1 > 5000 AND age2 > 10000	loan_user
SELECT loan_application_id, repayment_amount FROM loan_repayment	loan_user
SELECT f.cust_no, f.wealth_bal_f FROM financial_products f WHERE f.data_dt = '2024-07-15' AND f.wealth_bal_f > 0 ORDER BY f.wealth_bal_f DESC	loan_user
SELECT c.customer_name, lt.loan_type_name, la.loan_amount, lc.credit_score FROM loan_application la JOIN customer c ON la.customer_id = c.id JOIN loan_type lt ON la.loan_type_id = lt.id JOIN loan_credit lc ON la.customer_id = lc.customer_id WHERE la.apply_date BETWEEN '2020-11-01' AND '2020-11-30' AND lc.credit_score > 0.8 ORDER BY la.loan_amount DESC	loan_user
SELECT ub.customer_id FROM loan_credit lc JOIN user_behavior ub ON lc.customer_id = ub.customer_id WHERE lc.credit_date > '2017-10-31' AND lc.credit_score > 0.85 AND ub.behavior_date = '2017-11-07' AND ub.behavior_type = 'J44-IKKJ-02'	loan_user
SELECT d.deposit_name FROM deposit_type d JOIN five_level_classification f ON d.data_dt = f.data_dt WHERE f.rs_type = '不良' AND d.data_dt = '2024-07-22'	loan_user
SELECT deposit_type_id, deposit_type_name FROM deposit_type WHERE deposit_type_name = '存款基础类型'	loan_user
SELECT wealth_bal FROM financial_products WHERE data_dt = '2024-07-14' AND bank_nm = '沈阳余淮支行' AND cust_no = 'C014'	loan_user
SELECT curr_code, curr_full_name, curr_class, curr_d_class_name FROM currency WHERE curr_d_class_name = '白银' AND data_dt = '2023-06-30'	loan_user
SELECT * FROM loan_repayment WHERE repayment_amount > (SELECT AVG(repayment_amount) FROM loan_repayment)	loan_user
SELECT loan_type_code, loan_type_name FROM loan_type	loan_user
SELECT bo.bank_level, bo.bank_name, SUM(ldi.loan_amount) as total_loan_amount FROM bank_orgnization bo JOIN loan_detail_info ldi ON bo.bank_id = ldi.loan_orgno GROUP BY bo.bank_level, bo.bank_name ORDER BY bo.bank_level, total_loan_amount DESC	loan_user
SELECT cust_nm, card_no, current_bal FROM debit_card_information WHERE card_state = '正常' AND current_bal > 2000 AND data_dt = '2024-07-09'	loan_user
SELECT ls.loan_status_name, COUNT(la.customer_id) AS customer_count, AVG(la.loan_amount) AS avg_loan_amount FROM loan_status ls JOIN loan_application la ON ls.loan_status_code = la.status GROUP BY ls.loan_status_name	loan_user
SELECT ldi.reportid, ldi.cust_id, ldi.cust_type, ldi.iou_no, ldi.loan_type, ldi.loan_orgno, ldi.vouch_type, ldi.currency_type, ldi.account_state, ldi.loan_amount, ldi.loan_balance, ldi.blc_capital, ldi.blc_inner, ldi.blc_off, ldi.judgelevel, ldi.loandate_s, ldi.loandate_e, ldi.dw_date, bo.bank_name, c.curr_full_name FROM loan_detail_info ldi JOIN bank_orgnization bo ON ldi.loan_orgno = bo.bank_id JOIN currency c ON ldi.currency_type = c.curr_code WHERE ldi.dw_date = '2024-07-16' AND ldi.loan_balance > 1000000 ORDER BY ldi.loan_balance DESC	loan_user
SELECT c.curr_full_name, SUM(d.acct_bal) AS total_balance FROM currency c JOIN deposit_account_info d ON c.curr_code = d.cur_type GROUP BY c.curr_full_name	loan_user
SELECT EXTRACT(YEAR FROM apply_date) as year, EXTRACT(MONTH FROM apply_date) as month, SUM(loan_amount) as total_loan_amount FROM loan_application GROUP BY year, month ORDER BY year, month	loan_user
SELECT d.card_no, d.current_bal FROM debit_card_information d	loan_user
SELECT ldi.cust_id, f.rs_type_name, dai.acct_bal FROM loan_detail_info ldi JOIN five_level_classification f ON ldi.judgelevel = f.rs_type_id JOIN deposit_account_info dai ON ldi.cust_id = dai.cust_no WHERE ldi.loan_balance > 500000 AND ldi.dw_date = '2024-07-19' AND dai.data_dt = '2024-07-19' ORDER BY ldi.loan_balance DESC	loan_user
SELECT lt.loan_type_name, COUNT(DISTINCT lr.loan_application_id) AS user_count, AVG(behavior_count) AS avg_behavior_count FROM loan_type lt LEFT JOIN loan_repayment lr ON lt.id = lr.loan_application_id LEFT JOIN (SELECT customer_id, COUNT(*) AS behavior_count FROM user_behavior GROUP BY customer_id) ub ON lr.loan_application_id = ub.customer_id GROUP BY lt.loan_type_name	loan_user
SELECT customer_id, behavior_type FROM user_behavior	loan_user
SELECT * FROM loan_repayment WHERE loan_application_id = 323803	loan_user
SELECT occupation_name, description FROM occupation	loan_user
SELECT fp.org_no, fp.org_nm, AVG(fp.wealth_bal) AS avg_wealth_bal FROM financial_products fp GROUP BY fp.org_no, fp.org_nm ORDER BY avg_wealth_bal DESC LIMIT 1	loan_user
SELECT currency_type, SUM(loan_amount) AS total_loan FROM loan_detail_info GROUP BY currency_type	loan_user
SELECT bank_name, COUNT(*) AS institution_count FROM bank_orgnization GROUP BY bank_name	loan_user
SELECT c.curr_full_name, AVG(la.loan_amount) as avg_loan_amount, AVG(dai.acct_bal) as avg_deposit_balance FROM loan_application la JOIN deposit_account_info dai ON la.customer_id = dai.cust_noeger JOIN currency c ON dai.cur_type = c.curr_code GROUP BY c.curr_full_name	loan_user
SELECT card_type_nm, card_state FROM debit_card_information WHERE card_state = '正常'	loan_user
SELECT t.loan_type_name, COUNT(a.id) AS application_count FROM loan_application a JOIN loan_type t ON a.loan_type_id = t.id GROUP BY t.loan_type_name	loan_user
SELECT bank_name, bank_level FROM bank_orgnization	loan_user
SELECT c.customer_name, la.apply_date FROM loan_application la JOIN customer c ON la.customer_id = c.id WHERE la.status = 'REJECTED' AND EXTRACT(YEAR FROM la.apply_date) = 2015	loan_user
SELECT l.loan_type, b.bank_name, l.loan_balance, f.rs_type_name FROM loan_detail_info l JOIN bank_orgnization b ON l.loan_orgno = b.bank_id JOIN five_level_classification f ON l.judgelevel = f.rs_type_id WHERE l.loandate_s > '2024-07-01' AND l.loan_balance > 500000	loan_user
SELECT c.customer_name, a.status FROM customer c JOIN loan_application a ON c.id = a.customer_id	loan_user
SELECT dai.org_nm, AVG(la.loan_term) as avg_loan_term, AVG(dai.acct_bal) as avg_deposit_balance FROM loan_application la JOIN deposit_account_info dai ON la.customer_id = dai.cust_noeger GROUP BY dai.org_nm	loan_user
SELECT COUNT(*) FROM loan_detail_info l JOIN five_level_classification f ON l.judgelevel = f.rs_type_id WHERE l.loan_balance > 1000000 AND f.rs_type_name = '正常'	loan_user
SELECT ccd.corporation, ccd.bank, ccd.category, c.curr_full_name FROM credit_card_data ccd JOIN currency c ON ccd.curr_num = c.curr_code WHERE c.curr_class = '外币'	loan_user
SELECT c.customer_name, COUNT(DISTINCT lt.id) AS loan_type_count, SUM(la.loan_amount) AS total_loan_amount FROM customer c JOIN loan_application la ON c.id = la.customer_id JOIN loan_type lt ON la.loan_type_id = lt.id WHERE la.apply_date >= date('now') - INTERVAL '6 months' GROUP BY c.id, c.customer_name HAVING COUNT(DISTINCT lt.id) > 1 ORDER BY loan_type_count DESC, total_loan_amount DESC	loan_user
SELECT dci.cust_nm, dci.act_year_avg_bal FROM debit_card_information dci JOIN bank_orgnization bo ON dci.bank_no = bo.bank_id WHERE dci.data_dt = '2024-07-09' AND bo.bank_name = '杭州上城区支行' AND dci.card_state = '正常' AND dci.act_year_avg_bal > 15000	loan_user
SELECT currency.curr_code, SUM(loan_detail_info.loan_balance) AS total_balance FROM currency JOIN loan_detail_info ON currency.curr_code = loan_detail_info.currency_type WHERE currency.curr_class = '外币' AND currency.data_dt = '2023-06-30' GROUP BY currency.curr_code	loan_user
SELECT DISTINCT rs_type FROM five_level_classification	loan_user
SELECT c.customer_name, lr.repayment_amount FROM customer c JOIN loan_repayment lr ON c.id = lr.loan_application_id WHERE lr.repayment_amount < 1000 AND lr.repayment_date = (SELECT MAX(repayment_date) FROM loan_repayment WHERE loan_application_id = lr.loan_application_id)	loan_user
SELECT dai.cust_name, dai.acct_type_code, dai.acct_bal, dt.deposit_name FROM deposit_account_info dai JOIN deposit_type dt ON dai.arl_pdp_code = dt.deposit_id WHERE dai.data_dt = '2024-07-17' AND dai.acct_bal > 100000	loan_user
SELECT deposit_name FROM deposit_type WHERE deposit_type_id = 'D_001'	loan_user
SELECT c.customer_name, t.transfer_amount, t.transfer_date FROM customer c JOIN transfer t ON c.id = t.source_customer_id WHERE t.transfer_date = '2024-07-07' ORDER BY t.transfer_amount DESC	loan_user
SELECT ldi.cust_id, ldi.loan_balance, bo.bank_name FROM loan_detail_info ldi JOIN bank_orgnization bo ON ldi.loan_orgno = bo.bank_id WHERE ldi.loan_balance > 500000 AND bo.bank_level = '2'	loan_user
SELECT l.cust_type, SUM(l.loan_balance) AS total_balance FROM loan_detail_info l GROUP BY l.cust_type ORDER BY l.cust_type	loan_user
SELECT COUNT(DISTINCT la.customer_id) FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id WHERE lt.loan_type_name = '住房贷款' AND la.apply_date >= '2019-01-01' AND la.apply_date < '2020-01-01' AND la.status = 'REJECTED'	loan_user
SELECT SUM(dci.current_bal) AS total_current_bal, SUM(dci.fixed_bal) AS total_fixed_bal FROM debit_card_information dci JOIN bank_orgnization bo ON dci.bank_no = bo.bank_id WHERE dci.data_dt = '2024-07-09' AND bo.bank_name = '杭州上城区支行'	loan_user
SELECT l.loan_type_name, COUNT(a.id) AS application_count, COUNT(DISTINCT a.customer_id) AS customer_count FROM loan_application a JOIN loan_type l ON a.loan_type_id = l.id GROUP BY l.loan_type_name	loan_user
SELECT * FROM transfer WHERE transfer_date = '2023-11-03'	loan_user
SELECT d.cust_no, d.cust_nm, d.card_no, d.current_bal, d.open_date FROM debit_card_information d WHERE d.data_dt = '2024-07-09' AND d.card_state = '正常' AND d.current_bal > 2000	loan_user
WITH top_customers AS (SELECT cust_no FROM financial_products WHERE wealth_bal > (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY wealth_bal) FROM financial_products)) SELECT COUNT(DISTINCT tc.cust_no) FROM top_customers tc JOIN user_behavior ub ON tc.cust_noeger = ub.customer_id JOIN transfer t ON tc.cust_noeger = t.source_customer_id WHERE ub.behavior_type = 'LOGIN' AND ub.behavior_date >= date('now') - INTERVAL '30 days' AND t.transfer_date >= date('now') - INTERVAL '30 days'	loan_user
WITH province_loans AS (SELECT c.province, l.loan_amount, SUM(l.loan_amount) OVER (PARTITION BY c.province) as total_province_loan FROM customer c JOIN loan_application l ON c.id = l.customer_id), max_loans AS (SELECT province, MAX(loan_amount) as max_loan, MAX(total_province_loan) as total_loan FROM province_loans GROUP BY province) SELECT province, max_loan, total_loan, max_loan / total_loan as concentration_ratio FROM max_loans ORDER BY concentration_ratio DESC	loan_user
SELECT loan_application_id, COUNT(*) AS repayment_count FROM loan_repayment GROUP BY loan_application_id	loan_user
SELECT COUNT(DISTINCT ldi.cust_id) FROM loan_detail_info ldi JOIN bank_orgnization bo ON ldi.loan_orgno = bo.bank_id WHERE bo.bank_name = '杭州上城区支行' AND bo.data_dt = '2023-06-30' AND ldi.blc_capital > 100000	loan_user
SELECT s.loan_status_name, COUNT(a.id) AS application_count, SUM(a.loan_amount) AS total_loan_amount FROM loan_application a JOIN loan_status s ON a.status = s.loan_status_code GROUP BY s.loan_status_name	loan_user
SELECT * FROM transfer WHERE transfer_date BETWEEN '2023-01-01' AND '2023-12-31'	loan_user
SELECT * FROM loan_repayment WHERE repayment_amount >= (SELECT PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY repayment_amount) FROM loan_repayment)	loan_user
WITH deposit_growth AS (SELECT bank_nm, (SUM(CASE WHEN data_dt = date('now') THEN current_bal + fixed_bal ELSE 0 END) - SUM(CASE WHEN data_dt = date('now') - INTERVAL '1 year' THEN current_bal + fixed_bal ELSE 0 END)) / NULLIF(SUM(CASE WHEN data_dt = date('now') - INTERVAL '1 year' THEN current_bal + fixed_bal ELSE 0 END), 0) AS deposit_growth_rate FROM debit_card_information GROUP BY bank_nm), loan_growth AS (SELECT d.bank_nm, (COUNT(CASE WHEN lt.id > (SELECT MAX(id) - 10 FROM loan_type) THEN 1 ELSE NULL END) - COUNT(CASE WHEN lt.id <= (SELECT MAX(id) - 10 FROM loan_type) THEN 1 ELSE NULL END)) / NULLIF(COUNT(CASE WHEN lt.id <= (SELECT MAX(id) - 10 FROM loan_type) THEN 1 ELSE NULL END), 0) AS loan_growth_rate FROM debit_card_information d LEFT JOIN loan_type lt ON d.cust_no = lt.loan_type_code GROUP BY d.bank_nm) SELECT dg.bank_nm, dg.deposit_growth_rate, lg.loan_growth_rate FROM deposit_growth dg JOIN loan_growth lg ON dg.bank_nm = lg.bank_nm	loan_user
SELECT d.cust_name, d.acct_bal FROM deposit_account_info d WHERE d.data_dt = '2023-07-19 00:00:00' ORDER BY d.acct_bal DESC LIMIT 1	loan_user
SELECT description, transfer_amount FROM transfer	loan_user
SELECT l.cust_id, l.loan_amount, d.deposit_type_name FROM loan_detail_info l JOIN deposit_type d ON l.dw_date = d.data_dt WHERE l.dw_date = '2024-07-22' ORDER BY l.loan_amount DESC LIMIT 5	loan_user
SELECT c.customer_name, c.birth_date, a.loan_amount FROM customer c JOIN loan_application a ON c.id = a.customer_id	loan_user
SELECT rs_type_name FROM five_level_classification WHERE rs_type = '不良' AND data_dt = '2024-07-22'	loan_user
SELECT lt.loan_type_name, la.customer_id FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id	loan_user
SELECT deposit_id, deposit_name FROM deposit_type WHERE data_dt = '2024-07-22'	loan_user
SELECT ub.customer_id, ub.behavior_type, lt.loan_type_name FROM user_behavior ub LEFT JOIN loan_repayment lr ON ub.customer_id = lr.loan_application_id LEFT JOIN loan_type lt ON lr.loan_application_id = lt.id	loan_user
SELECT c.customer_name, c.id_number, c.phone_number, c.email FROM customer c JOIN occupation o ON c.occupation_id = o.id WHERE o.occupation_name = '护士' ORDER BY c.customer_name	loan_user
SELECT cust_nm, card_no, open_date, current_bal FROM debit_card_information WHERE card_state = '正常' AND open_date > '2024-07-01' ORDER BY open_date DESC	loan_user
SELECT c.customer_name, la.loan_amount FROM customer c JOIN loan_application la ON c.id = la.customer_id WHERE EXTRACT(YEAR FROM AGE(date('now'), c.birth_date)) BETWEEN 25 AND 35 ORDER BY la.loan_amount DESC LIMIT 1	loan_user
SELECT la.customer_id, la.loan_amount, dai.acct_bal FROM loan_application la JOIN deposit_account_info dai ON la.customer_id = dai.cust_noeger	loan_user
SELECT f.bank_nm, f.bond_bal FROM financial_products f	loan_user
SELECT dci.cust_nm, dci.card_no, dci.sta_year_avg_bal FROM debit_card_information dci WHERE dci.data_dt = '2024-07-09' AND dci.card_state = '正常' AND dci.sta_year_avg_bal > 15000	loan_user
SELECT lt.loan_type_name, COUNT(la.id) AS application_count, AVG(la.loan_amount) AS avg_loan_amount, SUM(CASE WHEN la.status = 'APPROVED' THEN 1 ELSE 0 END) / COUNT(la.id) AS approval_rate FROM loan_type lt LEFT JOIN loan_application la ON lt.id = la.loan_type_id GROUP BY lt.loan_type_name ORDER BY application_count DESC	loan_user
SELECT * FROM loan_detail_info WHERE currency_type = 'AUD'	loan_user
SELECT l.vouch_type, f.rs_type_name, COUNT(*) AS loan_count, SUM(l.loan_amount) AS total_loan FROM loan_detail_info l JOIN five_level_classification f ON l.judgelevel = f.rs_type_id GROUP BY l.vouch_type, f.rs_type_name	loan_user
SELECT dci.cust_no, dci.cust_nm, dci.card_no, dci.current_bal, dci.residential_address FROM debit_card_information dci WHERE dci.data_dt = '2024-07-09' AND dci.card_state = '正常' AND dci.current_bal > 2000	loan_user
SELECT ld.iou_no, ld.loan_orgno FROM loan_detail_info ld WHERE ld.loandate_e = '2027-12-01'	loan_user
SELECT COUNT(DISTINCT ub.customer_id) FROM user_behavior ub JOIN five_level_classification flc ON ub.behavior_type = flc.rs_type_id WHERE ub.behavior_date = '2024-01-07' AND flc.rs_type = '不良' AND ub.behavior_type = 'LOGIN'	loan_user
SELECT c.id AS customer_id, c.customer_name, o.occupation_name FROM customer c JOIN loan_application la ON c.id = la.customer_id JOIN occupation o ON c.occupation_id = o.id WHERE la.status = 'REJECTED' ORDER BY c.id	loan_user
SELECT d.bank_nm, COUNT(d.card_no) AS card_count FROM debit_card_information d GROUP BY d.bank_nm	loan_user
SELECT l.reportid, l.cust_id, l.cust_type, l.iou_no, l.loan_type, l.loan_orgno, l.vouch_type, l.currency_type, l.account_state, l.loan_amount, l.loan_balance, l.blc_capital, l.blc_inner, l.blc_off, l.judgelevel, l.loandate_s, l.loandate_e, l.dw_date, b.bank_name FROM loan_detail_info l JOIN bank_orgnization b ON l.loan_orgno = b.bank_id WHERE l.loan_balance > 500000	loan_user
SELECT c.customer_name, c.id_number, c.phone_number, c.email FROM customer c JOIN occupation o ON c.occupation_id = o.id WHERE c.province = '上海市' AND o.occupation_name = '工程师' ORDER BY c.customer_name	loan_user
SELECT source_customer_id, target_customer_id, transfer_amount FROM transfer WHERE transfer_date = '2011-06-08' AND transfer_amount > 5000	loan_user
SELECT la.status, COUNT(la.id) AS application_count FROM loan_application la GROUP BY la.status	loan_user
SELECT SUM(lr.repayment_amount) FROM loan_repayment lr JOIN occupation o ON lr.loan_application_id = o.id WHERE o.occupation_code = 'NURSE' AND lr.repayment_date = '2021-11-10'	loan_user
SELECT * FROM loan_repayment WHERE DATE_TRUNC('month', repayment_date) = '2020-02-01'	loan_user
SELECT ld.iou_no, ld.loan_type FROM loan_detail_info ld WHERE ld.cust_id = '1099'	loan_user
SELECT c.curr_full_name, c.curr_class, SUM(f.wealth_bal) AS total_wealth_bal, SUM(f.wealth_bal_t) AS total_wealth_bal_t FROM financial_products f JOIN currency c ON f.currency = c.curr_code WHERE f.data_dt = '2024-07-02' AND f.currency = 'USD' GROUP BY c.curr_full_name, c.curr_class	loan_user
SELECT o.occupation_name, c.id, c.customer_name FROM occupation o JOIN customer c ON o.id = c.occupation_id	loan_user
SELECT f.bank_nm, b.bank_level FROM financial_products f JOIN bank_orgnization b ON f.bank_no = b.bank_id WHERE f.data_dt = '2024-07-02' AND f.wealth_bal > 5000000	loan_user
SELECT COUNT(DISTINCT c.id) FROM loan_application la JOIN customer c ON la.customer_id = c.id JOIN occupation o ON c.occupation_id = o.id WHERE la.apply_date = '2020-11-24' AND la.status = 'REJECTED' AND o.occupation_code = 'TEACHER'	loan_user
SELECT COUNT(DISTINCT fp.cust_no) FROM financial_products fp JOIN bank_orgnization bo ON fp.bank_no = bo.bank_id WHERE fp.data_dt = '2024-07-14' AND bo.bank_name = '沈阳余淮支行' AND fp.cast_type = '对公' AND fp.wealth_bal > 1000000	loan_user
SELECT DATE_TRUNC('month', behavior_date) AS month, COUNT(*) AS behavior_count FROM user_behavior GROUP BY DATE_TRUNC('month', behavior_date) ORDER BY month	loan_user
SELECT d.cust_name, f.rs_type_name, l.loan_balance FROM deposit_account_info d JOIN loan_detail_info l ON d.cust_no = l.cust_id JOIN five_level_classification f ON l.judgelevel = f.rs_type_id WHERE l.dw_date = '2024-07-22' AND l.loan_balance > 10000 ORDER BY l.loan_balance DESC	loan_user
SELECT * FROM transfer WHERE transfer_amount < 1000	loan_user
SELECT c.customer_name, lt.loan_type_name, la.loan_amount, la.loan_term FROM loan_application la JOIN customer c ON la.customer_id = c.id JOIN loan_type lt ON la.loan_type_id = lt.id WHERE la.apply_date = '2020-11-24' AND la.status = 'REJECTED' ORDER BY la.loan_amount DESC	loan_user
SELECT ub.customer_id, COUNT(ub.id) AS behavior_count FROM user_behavior ub GROUP BY ub.customer_id	loan_user
SELECT loan_type_name, description FROM loan_type	loan_user
SELECT c.cust_no, c.cust_name, SUM(l.loan_balance) AS total_loan_balance FROM loan_detail_info l JOIN deposit_account_info c ON l.cust_id = c.cust_no WHERE l.dw_date = '2024-07-22' AND c.cust_type = '对公' GROUP BY c.cust_no, c.cust_name	loan_user
SELECT l.loan_application_id, SUM(l.repayment_amount) AS total_repayment FROM loan_repayment l GROUP BY l.loan_application_id	loan_user
SELECT SUM(ldi.loan_balance) FROM loan_detail_info ldi JOIN five_level_classification flc ON ldi.judgelevel = flc.rs_type_id WHERE ldi.blc_capital > 900000 AND flc.rs_type_name = '可疑' AND flc.data_dt = '2024-07-22'	loan_user
SELECT SUM(t.transfer_amount) FROM transfer t JOIN loan_credit lc ON t.source_customer_id = lc.customer_id OR t.target_customer_id = lc.customer_id WHERE t.transfer_date = '2011-06-08' AND lc.credit_score > 0.75	loan_user
SELECT la.customer_id, la.apply_date FROM loan_application la WHERE la.apply_date >= date('now') - INTERVAL '3 months'	loan_user
SELECT card_no_main, password_status FROM debit_card_information WHERE cust_nm = 'Daniel Lee'	loan_user
SELECT COUNT(*) FROM deposit_account_info dai JOIN bank_orgnization bo ON dai.org_no = bo.bank_id WHERE bo.bank_name = '杭州上城区支行' AND dai.cust_type = '对私' AND bo.data_dt = '2023-06-30'	loan_user
SELECT dai.org_nm, COUNT(*) as application_count, AVG(la.loan_amount) as avg_loan_amount FROM loan_application la JOIN deposit_account_info dai ON la.customer_id = dai.cust_noeger GROUP BY dai.org_nm ORDER BY application_count DESC LIMIT 10	loan_user
SELECT lc.customer_id, lc.credit_score, dt.deposit_name FROM loan_credit lc JOIN deposit_type dt ON lc.credit_date = dt.data_dt WHERE lc.credit_score > 0.8 AND dt.deposit_name = '大额存单' AND dt.data_dt = '2024-07-22'	loan_user
SELECT c.customer_name, la.loan_amount FROM customer c JOIN loan_application la ON c.id = la.customer_id WHERE la.loan_amount > 30000 AND la.apply_date = (SELECT MAX(apply_date) FROM loan_application WHERE customer_id = c.id)	loan_user
SELECT c.customer_name, c.phone_number, c.email FROM customer c JOIN occupation o ON c.occupation_id = o.id WHERE o.occupation_name = '护士' ORDER BY c.customer_name	loan_user
SELECT c.customer_name, la.loan_type_id FROM customer c JOIN loan_application la ON c.id = la.customer_id WHERE la.loan_type_id = (SELECT id FROM loan_type WHERE loan_type_name = '个人贷款')	loan_user
SELECT lt.loan_type_name, SUM(la.loan_amount) AS total_loan_amount FROM loan_type lt JOIN loan_application la ON lt.id = la.loan_type_id GROUP BY lt.loan_type_name	loan_user
SELECT lc.customer_id, lc.credit_score, la.loan_amount, la.apply_date FROM loan_credit lc JOIN loan_application la ON lc.customer_id = la.customer_id WHERE lc.credit_score > 0.8 AND lc.credit_date = '2023-06-30' AND la.apply_date < '2023-06-30'	loan_user
SELECT dai.cust_name, dai.acct_bal, c.curr_full_name FROM deposit_account_info dai JOIN currency c ON dai.cur_type = c.curr_code WHERE dai.acct_bal > 100000 ORDER BY dai.acct_bal DESC	loan_user
SELECT ls.loan_status_name, SUM(la.loan_amount) AS total_loan_amount, COUNT(la.customer_id) AS customer_count FROM loan_status ls JOIN loan_application la ON ls.loan_status_code = la.status GROUP BY ls.loan_status_name	loan_user
SELECT f.rs_type_name, COUNT(DISTINCT l.cust_id) AS customer_count, SUM(l.loan_amount) AS total_loan_amount FROM five_level_classification f JOIN loan_detail_info l ON f.rs_type_id = l.judgelevel GROUP BY f.rs_type_name	loan_user
SELECT id, apply_date FROM loan_application	loan_user
SELECT ldi.cust_id, ldi.loan_balance, flc.rs_type_name FROM loan_detail_info ldi JOIN five_level_classification flc ON ldi.judgelevel = flc.rs_type_id WHERE ldi.loandate_s > '2024-07-01' AND ldi.loan_balance > 500000	loan_user
SELECT COUNT(DISTINCT lc.customer_id) FROM loan_credit lc JOIN bank_orgnization bo ON lc.credit_date = bo.data_dt WHERE bo.bank_name = '杭州上城区支行' AND bo.data_dt = '2023-06-30' AND lc.credit_score > 0.8	loan_user
SELECT * FROM loan_application WHERE customer_id = 250985	loan_user
SELECT c.customer_name, dai.acct_bal AS deposit_balance, la.loan_amount AS rejected_loan_amount FROM customer c JOIN deposit_account_info dai ON c.id_number = dai.cert_code JOIN loan_application la ON c.id = la.customer_id WHERE la.status = 'REJECTED' AND la.apply_date >= date('now') - INTERVAL '3 months' ORDER BY dai.acct_bal DESC LIMIT 5	loan_user
SELECT dai.cust_no, dai.acct_bal, la.loan_amount, la.apply_date, fp.wealth_bal FROM deposit_account_info dai LEFT JOIN loan_application la ON dai.cust_noeger = la.customer_id LEFT JOIN financial_products fp ON dai.cust_no = fp.cust_no ORDER BY dai.acct_bal DESC LIMIT 10	loan_user
SELECT rs_type_name, rs_type_id FROM five_level_classification	loan_user
SELECT cust_no, SUM(wealth_bal) AS total_wealth_bal, SUM(wealth_bal_f) AS total_wealth_bal_f FROM financial_products WHERE data_dt = '2024-07-07' GROUP BY cust_no	loan_user
SELECT la.loan_amount FROM loan_application la JOIN deposit_account_info da ON la.customer_id = da.cust_no WHERE da.gender_code = '男 '	loan_user
SELECT t.transfer_amount, c1.customer_name AS source_customer_name, c2.customer_name AS target_customer_name FROM transfer t JOIN customer c1 ON t.source_customer_id = c1.id JOIN customer c2 ON t.target_customer_id = c2.id WHERE t.transfer_amount > 5000 AND t.transfer_date = '2023-06-30'	loan_user
SELECT l.cust_id, l.loan_balance FROM loan_detail_info l WHERE l.loandate_s > '2024-01-01'	loan_user
SELECT c.* FROM customer c JOIN loan_application la ON c.id = la.customer_id WHERE la.status = 'PENDING' AND la.loan_amount > (SELECT AVG(loan_amount) FROM loan_application)	loan_user
SELECT b.bank_name, SUM(f.wealth_bal) AS total_wealth FROM bank_orgnization b JOIN financial_products f ON b.bank_id = f.bank_no GROUP BY b.bank_name	loan_user
SELECT rs_type_name, data_dt FROM five_level_classification	loan_user
SELECT deposit_name, data_dt FROM deposit_type WHERE deposit_id = 'D_003'	loan_user
SELECT f.rs_type_name, SUM(l.loan_amount) AS total_loan FROM five_level_classification f JOIN loan_detail_info l ON f.rs_type_id = l.judgelevel GROUP BY f.rs_type_name	loan_user
SELECT c.customer_name, cr.credit_score, a.status FROM customer c JOIN loan_credit cr ON c.id = cr.customer_id JOIN loan_application a ON c.id = a.customer_id	loan_user
SELECT c.customer_name, lr.repayment_amount FROM loan_repayment lr JOIN loan_application la ON lr.loan_application_id = la.id JOIN customer c ON la.customer_id = c.id WHERE lr.repayment_date = '2021-11-10' AND lr.repayment_amount > 20 ORDER BY lr.repayment_amount DESC	loan_user
SELECT lr.loan_application_id, SUM(lr.repayment_amount) AS total_repayment, COUNT(ub.id) AS behavior_count FROM loan_repayment lr LEFT JOIN user_behavior ub ON lr.loan_application_id = ub.customer_id GROUP BY lr.loan_application_id	loan_user
SELECT cust_type, AVG(loan_amount) AS avg_loan, MAX(loan_amount) AS max_loan FROM loan_detail_info GROUP BY cust_type	loan_user
SELECT lc.customer_id, lc.credit_score FROM loan_credit lc JOIN transfer t ON lc.customer_id = t.source_customer_id OR lc.customer_id = t.target_customer_id WHERE lc.credit_score > 0.8 AND lc.credit_date = '2023-06-30'	loan_user
SELECT c.customer_name, cr.credit_score FROM customer c JOIN loan_credit cr ON c.id = cr.customer_id WHERE cr.credit_date = (SELECT MAX(credit_date) FROM loan_credit WHERE customer_id = c.id)	loan_user
SELECT bank_level, COUNT(*) AS count FROM bank_orgnization GROUP BY bank_level	loan_user
SELECT bank_id, bank_name FROM bank_orgnization	loan_user
SELECT COUNT(DISTINCT c.id) FROM customer c JOIN user_behavior ub ON c.id = ub.customer_id JOIN loan_status ls ON ub.behavior_type = ls.loan_status_code JOIN bank_orgnization bo ON c.province = bo.bank_name WHERE bo.bank_name = '沈阳余淮支行' AND bo.data_dt = '2023-06-30' AND ls.loan_status_code = 'REJECTED'	loan_user
SELECT t.transfer_amount, c1.customer_name AS source_customer_name, c2.customer_name AS target_customer_name FROM transfer t JOIN customer c1 ON t.source_customer_id = c1.id JOIN customer c2 ON t.target_customer_id = c2.id WHERE t.transfer_date = '2020-11-03' AND t.transfer_amount > 5000	loan_user
SELECT occupation_name, occupation_code FROM occupation	loan_user
SELECT COUNT(DISTINCT c.id) as customer_count FROM customer c JOIN loan_application l1 ON c.id = l1.customer_id JOIN loan_application l2 ON c.id = l2.customer_id WHERE l1.loan_type_id = (SELECT id FROM loan_type WHERE loan_type_name = '房贷') AND l2.loan_type_id = (SELECT id FROM loan_type WHERE loan_type_name = '车贷') AND l1.status = 'APPROVED' AND l2.status = 'APPROVED'	loan_user
SELECT corporation FROM credit_card_data WHERE dw_date = '2024-07-07' AND (age1 + age2 + age3 + age4 + age5 + age6) > 10000	loan_user
SELECT o.occupation_name, AVG(l.loan_amount) AS avg_loan_amount FROM occupation o JOIN loan_application l ON o.id = l.loan_type_id GROUP BY o.occupation_name	loan_user
SELECT o.occupation_name, AVG(la.loan_amount) as avg_loan_amount FROM occupation o JOIN customer c ON o.id = c.occupation_id JOIN loan_application la ON c.id = la.customer_id GROUP BY o.occupation_name ORDER BY avg_loan_amount DESC LIMIT 3	loan_user
SELECT rs_type FROM five_level_classification WHERE rs_type_name = '可疑' AND data_dt = '2024-07-22'	loan_user
WITH classification_count AS (SELECT rs_type_name, COUNT(*) as count FROM five_level_classification WHERE data_dt = '2024-07-22' GROUP BY rs_type_name) SELECT rs_type_name, count, count * 100.0 / SUM(count) OVER () as percentage FROM classification_count ORDER BY percentage DESC LIMIT 1	loan_user
SELECT dt.deposit_name, AVG(dai.reality_ir_y) as avg_interest_rate FROM deposit_account_info dai JOIN deposit_type dt ON dai.arl_pdp_code = dt.deposit_id GROUP BY dt.deposit_name	loan_user
SELECT o.occupation_name, COUNT(c.id) AS customer_count, AVG(l.loan_amount) AS avg_loan_amount FROM occupation o LEFT JOIN customer c ON o.id = c.occupation_id LEFT JOIN loan_application l ON c.id = l.customer_id GROUP BY o.occupation_name	loan_user
SELECT c.customer_name, l.loan_amount, l.loan_term FROM customer c JOIN loan_application l ON c.id = l.customer_id ORDER BY l.loan_term DESC LIMIT 5	loan_user
SELECT * FROM occupation WHERE description LIKE '%老师%'	loan_user
SELECT lt.loan_type_name, AVG(la.loan_amount) as avg_amount, COUNT(*) as application_count FROM loan_type lt JOIN loan_application la ON lt.id = la.loan_type_id GROUP BY lt.loan_type_name ORDER BY application_count DESC	loan_user
SELECT fp.cust_no, fp.wealth_bal, c.curr_full_name FROM financial_products fp JOIN currency c ON fp.currency = c.curr_code WHERE c.data_dt = '2023-06-30' AND c.curr_code = 'HKD' ORDER BY fp.wealth_bal DESC	loan_user
SELECT c.curr_class, c.curr_code, c.curr_full_name, COUNT(c.curr_code) OVER (PARTITION BY c.curr_class) AS class_count FROM currency c WHERE c.data_dt = '2023-06-30' AND c.curr_class = '外币'	loan_user
SELECT o.occupation_name, COUNT(lr.id) AS repayment_count FROM occupation o LEFT JOIN customer c ON o.id = c.occupation_id LEFT JOIN loan_repayment lr ON c.id = lr.loan_application_id GROUP BY o.occupation_name	loan_user
SELECT d.deposit_type_name, AVG(l.loan_balance) AS avg_loan_balance, STDDEV(l.loan_balance) AS stddev_loan_balance FROM deposit_type d JOIN loan_detail_info l ON d.data_dt = l.dw_date GROUP BY d.deposit_type_name	loan_user
SELECT c.curr_code, c.curr_full_name, SUM(lr.repayment_amount) AS total_repayment_amount FROM currency c LEFT JOIN loan_repayment lr ON c.curr_code = lr.description WHERE c.data_dt = '2023-06-30' AND c.curr_class = '外币' GROUP BY c.curr_code, c.curr_full_name	loan_user
SELECT d.gender_code, COUNT(la.id) AS application_count FROM deposit_account_info d JOIN loan_application la ON d.cust_no = la.customer_id GROUP BY d.gender_code	loan_user
SELECT la.loan_amount, ub.behavior_type FROM loan_application la JOIN user_behavior ub ON la.customer_id = ub.customer_id WHERE la.loan_amount > 5000	loan_user
SELECT currency, SUM(wealth_bal) AS total_wealth_bal FROM financial_products WHERE cast_type = '对公' AND data_dt = '2024-07-02' GROUP BY currency	loan_user
SELECT dai.cust_name, dai.acct_bal, dt.deposit_name FROM deposit_account_info dai JOIN deposit_type dt ON dai.arl_pdp_code = dt.deposit_id WHERE dai.data_dt = '2024-07-22' AND dai.acct_type_code = '活期'	loan_user
SELECT COUNT(DISTINCT ub.customer_id) FROM user_behavior ub JOIN bank_orgnization bo ON ub.behavior_date = bo.data_dt WHERE bo.bank_name = '杭州上城区支行' AND ub.behavior_type = 'LOGIN' AND bo.data_dt = '2023-06-30'	loan_user
SELECT customer_id, COUNT(*) AS record_count FROM loan_credit GROUP BY customer_id	loan_user
SELECT ldi.reportid, ldi.cust_id, ldi.loan_balance, bo.bank_name, flc.rs_type_name FROM loan_detail_info ldi JOIN bank_orgnization bo ON ldi.loan_orgno = bo.bank_id JOIN five_level_classification flc ON ldi.judgelevel = flc.rs_type_id WHERE ldi.loan_balance > 10000 AND ldi.dw_date = '2024-07-22'	loan_user
SELECT c.customer_name, t.transfer_amount FROM transfer t JOIN customer c ON t.source_customer_id = c.id WHERE t.transfer_date = '2011-06-08' ORDER BY t.transfer_amount DESC	loan_user
SELECT lr.loan_application_id, SUM(lr.repayment_amount) AS total_repayment FROM loan_repayment lr GROUP BY lr.loan_application_id	loan_user
SELECT AVG(d.acct_bal) AS average_balance FROM deposit_account_info d WHERE d.data_dt = '2023-07-19 00:00:00'	loan_user
SELECT b.bank_level, SUM(f.wealth_bal) AS total_wealth_balance FROM bank_orgnization b JOIN financial_products f ON b.bank_id = f.bank_no GROUP BY b.bank_level	loan_user
SELECT DISTINCT behavior_type FROM user_behavior	loan_user
SELECT d.card_no, d.bank_nm FROM debit_card_information d WHERE d.data_dt = '2024-07-07 00:00:00'	loan_user
SELECT c.curr_code, c.curr_full_name, COUNT(cc.xaccount) AS credit_card_count FROM currency c LEFT JOIN credit_card_data cc ON c.curr_code = cc.curr_num WHERE c.data_dt = '2023-06-30' GROUP BY c.curr_code, c.curr_full_name ORDER BY credit_card_count DESC	loan_user
SELECT l.cust_id, l.loan_amount FROM loan_detail_info l WHERE l.loandate_e < '2026-01-01'	loan_user
SELECT cust_id, loan_balance FROM loan_detail_info	loan_user
SELECT * FROM loan_repayment ORDER BY repayment_date ASC LIMIT 10	loan_user
SELECT f.cust_no, SUM(f.wealth_bal_t) AS total_guaranteed FROM financial_products f GROUP BY f.cust_no	loan_user
SELECT COUNT(DISTINCT customer_id) AS user_count FROM user_behavior WHERE behavior_type = 'I54-ILLJ-03'	loan_user
SELECT c.customer_name, la.loan_amount FROM customer c JOIN loan_application la ON c.id = la.customer_id ORDER BY la.loan_amount DESC	loan_user
SELECT * FROM loan_type WHERE loan_type_code = 'PERSONAL'	loan_user
SELECT c.customer_name, COUNT(*) as application_count FROM customer c JOIN loan_application la ON c.id = la.customer_id GROUP BY c.id, c.customer_name ORDER BY application_count DESC LIMIT 1	loan_user
SELECT acc_name1, age1, close_code, day_opened FROM credit_card_data WHERE close_code = '正常' AND age1 > 5000	loan_user
SELECT gender, COUNT(*) AS count FROM customer GROUP BY gender	loan_user
SELECT d.deposit_name, f.rs_type_name FROM deposit_type d JOIN five_level_classification f ON d.data_dt = f.data_dt WHERE f.rs_type = '不良' AND d.data_dt = '2024-07-22'	loan_user
SELECT la.status, COUNT(la.customer_id) AS customer_count, AVG(la.loan_amount) AS average_loan_amount FROM loan_application la GROUP BY la.status	loan_user
SELECT cust_type, SUM(acct_bal) AS total_balance FROM deposit_account_info WHERE data_dt = '2024-07-17' AND bank_nm = '信贷业务部' GROUP BY cust_type	loan_user
SELECT d.deposit_type_name, AVG(l.loan_balance) AS avg_loan_balance FROM deposit_type d JOIN loan_detail_info l ON d.data_dt = l.dw_date GROUP BY d.deposit_type_name	loan_user
SELECT t.source_customer_id, t.target_customer_id, t.transfer_amount FROM transfer t WHERE t.transfer_date = '2020-11-03' AND t.transfer_amount > 5000	loan_user
SELECT DATE_TRUNC('quarter', lr.repayment_date) AS quarter, SUM(lr.repayment_amount) AS total_repayment, COUNT(ub.id) AS behavior_count FROM loan_repayment lr LEFT JOIN user_behavior ub ON lr.loan_application_id = ub.customer_id GROUP BY DATE_TRUNC('quarter', lr.repayment_date) ORDER BY quarter	loan_user
SELECT ldi.cust_id, ldi.loan_balance, c.curr_full_name, ldi.judgelevel FROM loan_detail_info ldi JOIN currency c ON ldi.currency_type = c.curr_code WHERE ldi.loandate_s > '2024-07-01' AND ldi.loan_balance > 500000 ORDER BY ldi.loan_balance DESC	loan_user
SELECT lc.customer_id, bo.bank_name, c.curr_full_name FROM loan_credit lc JOIN bank_orgnization bo ON lc.credit_date = bo.data_dt JOIN currency c ON bo.data_dt = c.data_dt WHERE lc.credit_score > 0.75 AND lc.credit_date = '2023-06-30' AND bo.data_dt = '2023-06-30' AND c.data_dt = '2023-06-30'	loan_user
SELECT la.customer_id, la.loan_amount, lc.credit_score, lt.loan_type_name FROM loan_application la JOIN loan_credit lc ON la.customer_id = lc.customer_id JOIN loan_type lt ON la.loan_type_id = lt.id ORDER BY la.loan_amount DESC LIMIT 10	loan_user
SELECT d.cust_nm, d.card_no, COUNT(d.card_no) AS card_count FROM debit_card_information d WHERE d.data_dt = '2024-07-09' AND d.card_state = '正常' AND d.current_bal > 1000 GROUP BY d.cust_nm, d.card_no	loan_user
SELECT behavior_type, description FROM user_behavior WHERE behavior_date = '2017-10-24'	loan_user
SELECT f.cust_no, f.bank_nm FROM financial_products f ORDER BY f.cust_no	loan_user
SELECT o.occupation_name, o.description, COUNT(b.bank_id) AS bank_count FROM occupation o LEFT JOIN bank_orgnization b ON o.occupation_name = b.bank_name GROUP BY o.occupation_name, o.description	loan_user
SELECT o.occupation_name, COUNT(c.id) as customer_count FROM occupation o LEFT JOIN customer c ON o.id = c.occupation_id GROUP BY o.occupation_name ORDER BY customer_count DESC	loan_user
SELECT currency_type, loan_amount FROM loan_detail_info	loan_user
SELECT c.curr_code, c.curr_full_name, SUM(d.acct_bal) AS total_balance FROM currency c JOIN deposit_account_info d ON c.curr_code = d.cur_type WHERE c.data_dt = '2023-06-30' AND c.curr_class = '外币' GROUP BY c.curr_code, c.curr_full_name ORDER BY total_balance DESC	loan_user
SELECT l.loandate_s, l.loan_type FROM loan_detail_info l WHERE l.account_state = '正常'	loan_user
WITH ranked_loans AS (SELECT c.province, c.customer_name, l.loan_amount, ROW_NUMBER() OVER (PARTITION BY c.province ORDER BY l.loan_amount DESC) as rank FROM customer c JOIN loan_application l ON c.id = l.customer_id) SELECT province, customer_name, loan_amount FROM ranked_loans WHERE rank = 1 ORDER BY loan_amount DESC	loan_user
SELECT * FROM five_level_classification WHERE rs_type_name = '关注'	loan_user
SELECT fp.org_no, fp.org_nm, SUM(fp.wealth_bal) / (SUM(fp.wealth_bal) + SUM(dci.current_bal + dci.fixed_bal)) * 100 AS wealth_percentage FROM financial_products fp JOIN debit_card_information dci ON fp.org_no = dci.org_no GROUP BY fp.org_no, fp.org_nm	loan_user
SELECT la.loan_type_id, SUM(la.loan_amount) AS total_loan_amount FROM loan_application la GROUP BY la.loan_type_id	loan_user
SELECT * FROM loan_status WHERE description = 'Loan application is pending'	loan_user
SELECT SUM(lr.repayment_amount) FROM loan_repayment lr JOIN occupation o ON lr.loan_application_id = o.id WHERE o.occupation_code = 'NURSE' AND lr.repayment_date = '2021-11-10'	loan_user
SELECT COUNT(DISTINCT cust_no) FROM deposit_account_info WHERE data_dt = '2024-07-19' AND bank_no = 'BANK_006' AND cust_type = '对私' AND acct_bal > 100000	loan_user
SELECT loan_status_name, loan_status_code FROM loan_status	loan_user
SELECT SUM(repayment_amount) FROM loan_repayment WHERE repayment_date = '2021-11-10'	loan_user
SELECT o.occupation_name, COUNT(c.id) AS customer_count, AVG(EXTRACT(YEAR FROM AGE(c.birth_date))) AS avg_age FROM occupation o LEFT JOIN customer c ON o.id = c.occupation_id GROUP BY o.occupation_name	loan_user
SELECT occupation_name, occupation_code FROM occupation	loan_user
SELECT loan_type_name, description FROM loan_type ORDER BY loan_type_name	loan_user
SELECT d.gender_code, la.loan_amount FROM deposit_account_info d JOIN loan_application la ON d.cust_no = la.customer_id	loan_user
SELECT bo.bank_id, bo.bank_name, SUM(ldi.loan_amount) as total_loan_amount, AVG(ldi.loan_amount) as avg_loan_amount, COUNT(DISTINCT ldi.cust_id) as customer_count FROM bank_orgnization bo JOIN loan_detail_info ldi ON bo.bank_id = ldi.loan_orgno GROUP BY bo.bank_id, bo.bank_name ORDER BY total_loan_amount DESC	loan_user
SELECT cust_nm, residential_address FROM debit_card_information WHERE residential_address IS NOT NULL	loan_user
SELECT DISTINCT customer_id FROM user_behavior WHERE EXTRACT(YEAR FROM behavior_date) = 2018	loan_user
SELECT bo.bank_name, COUNT(DISTINCT c.id) AS user_count FROM bank_orgnization bo LEFT JOIN customer c ON c.province = bo.bank_parent GROUP BY bo.bank_name	loan_user
SELECT dci.cust_nm, dci.current_bal FROM debit_card_information dci JOIN bank_orgnization bo ON dci.bank_no = bo.bank_id WHERE bo.bank_name = '杭州上城区支行' AND bo.data_dt = '2023-06-30' AND dci.current_bal > 2000	loan_user
SELECT c.curr_code, c.curr_full_name, SUM(l.loan_balance) AS total_loan_balance FROM currency c JOIN loan_detail_info l ON c.curr_code = l.currency_type WHERE c.data_dt = '2023-06-30' AND c.curr_class = '外币' GROUP BY c.curr_code, c.curr_full_name ORDER BY total_loan_balance DESC	loan_user
SELECT cust_no, wealth_bal FROM financial_products WHERE data_dt = '2024-07-02' AND wealth_bal > 5000000 AND cast_type = '对公'	loan_user
SELECT c.customer_name, o.description FROM customer c JOIN occupation o ON c.occupation_id = o.id WHERE o.description LIKE '%工程%'	loan_user
SELECT DISTINCT t.source_customer_id FROM transfer t LEFT JOIN loan_detail_info l ON t.source_customer_id = l.cust_id WHERE l.cust_id IS NULL	loan_user
SELECT corporation, acc_name1, bank, category, cred_limit FROM credit_card_data ORDER BY cred_limit DESC	loan_user
SELECT b.bank_name, b.bank_level FROM bank_orgnization b	loan_user
WITH deposit_sum AS (SELECT bank_nm, SUM(current_bal + fixed_bal) AS total_deposit FROM debit_card_information GROUP BY bank_nm), loan_sum AS (SELECT d.bank_nm, SUM(CASE WHEN lt.loan_type_name = '住房贷款' THEN d.current_bal + d.fixed_bal ELSE 0 END) AS total_loan FROM debit_card_information d LEFT JOIN loan_type lt ON d.cust_no = lt.loan_type_code GROUP BY d.bank_nm) SELECT ds.bank_nm, ds.total_deposit / NULLIF(ls.total_loan, 0) AS deposit_loan_ratio FROM deposit_sum ds LEFT JOIN loan_sum ls ON ds.bank_nm = ls.bank_nm	loan_user
SELECT DATE_TRUNC('month', loandate_s) AS month, COUNT(*) AS new_loans, SUM(loan_amount) AS total_amount FROM loan_detail_info GROUP BY month ORDER BY month	loan_user
SELECT credit_score, credit_date FROM loan_credit	loan_user
SELECT loandate_e FROM loan_detail_info WHERE cust_id = '1004'	loan_user
SELECT o.occupation_name, COUNT(c.id) AS customer_count, STRING_AGG(c.customer_name, ', ') AS customers FROM occupation o JOIN customer c ON o.id = c.occupation_id GROUP BY o.occupation_name	loan_user
SELECT AVG(d.acct_bal) AS average_balance FROM deposit_account_info d WHERE d.data_dt BETWEEN '2023-01-01' AND '2023-12-31'	loan_user
SELECT COUNT(*) as high_loan_customer_count FROM (SELECT c.id, SUM(l.loan_amount) as total_loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id GROUP BY c.id HAVING SUM(l.loan_amount) > 1000000) as high_loan_customers	loan_user
SELECT c.customer_name, la.loan_amount FROM loan_application la JOIN customer c ON la.customer_id = c.id WHERE la.status = 'REJECTED' ORDER BY la.loan_amount DESC LIMIT 5	loan_user
SELECT fp.cust_no, SUM(fp.wealth_bal) AS total_wealth_bal, SUM(dai.acct_bal) AS total_acct_bal, SUM(dci.current_bal) AS total_current_bal FROM financial_products fp LEFT JOIN deposit_account_info dai ON fp.cust_no = dai.cust_no AND fp.data_dt = dai.data_dt LEFT JOIN debit_card_information dci ON fp.cust_no = dci.cust_no AND fp.data_dt = dci.data_dt WHERE fp.data_dt = '2024-07-19' GROUP BY fp.cust_no	loan_user
SELECT f.bank_nm, SUM(f.wealth_bal) / NULLIF(SUM(f.bond_bal), 0) AS balance_ratio FROM financial_products f GROUP BY f.bank_nm	loan_user
SELECT COUNT(DISTINCT ub.customer_id) FROM user_behavior ub JOIN transfer t ON ub.customer_id = t.source_customer_id WHERE ub.behavior_type = 'APPLY' AND ub.behavior_date >= date('now') - INTERVAL '60 days' AND t.transfer_date >= date('now') - INTERVAL '60 days' AND t.transfer_amount > 100000	loan_user
SELECT d.open_date, d.card_no FROM debit_card_information d WHERE d.data_dt = '2024-07-07 00:00:00'	loan_user
SELECT COUNT(*) FROM credit_card_data ccd JOIN bank_orgnization bo ON ccd.bank = bo.bank_id WHERE bo.bank_name = '杭州上城区支行' AND bo.data_dt = '2023-06-30' AND ccd.age1 > 5000	loan_user
SELECT t.transfer_amount, c1.customer_name AS source_customer_name, c2.customer_name AS target_customer_name FROM transfer t JOIN customer c1 ON t.source_customer_id = c1.id JOIN customer c2 ON t.target_customer_id = c2.id WHERE t.transfer_date = '2024-07-22' AND t.transfer_amount > 5000	loan_user
SELECT loan_type_name, description FROM loan_type WHERE loan_type_code LIKE 'P%'	loan_user
SELECT customer_id, loan_type_id, loan_amount, apply_date FROM loan_application WHERE status = 'REJECT'	loan_user
SELECT bank_name, bank_level FROM bank_orgnization	loan_user
SELECT o.occupation_name, COUNT(*) as total_applications, SUM(CASE WHEN la.status = 'REJECTED' THEN 1 ELSE 0 END) as rejected_applications, SUM(CASE WHEN la.status = 'REJECTED' THEN 1 ELSE 0 END) / COUNT(*) as rejection_rate FROM occupation o JOIN customer c ON o.id = c.occupation_id JOIN loan_application la ON c.id = la.customer_id GROUP BY o.occupation_name ORDER BY rejection_rate DESC	loan_user
SELECT behavior_type, behavior_date FROM user_behavior	loan_user
SELECT SUM(acct_bal) AS total_acct_bal, SUM(act_year_avg_bal) AS total_act_year_avg_bal FROM deposit_account_info WHERE data_dt = '2024-07-19' AND bank_nm = '沈阳分行'	loan_user
SELECT c.customer_name, c.gender, lc.credit_score FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id WHERE lc.credit_date = (SELECT MAX(credit_date) FROM loan_credit WHERE customer_id = c.id)	loan_user
SELECT COUNT(DISTINCT la.customer_id) FROM loan_application la JOIN debit_card_information dci ON la.customer_id = dci.cust_id WHERE la.apply_date = '2020-11-24' AND la.status = 'REJECTED' AND dci.data_dt = '2024-07-15' AND dci.card_state = '正常'	loan_user
SELECT * FROM loan_repayment ORDER BY repayment_amount DESC LIMIT 10	loan_user
SELECT curr_class, COUNT(curr_code) AS currency_count, STRING_AGG(curr_code || ' - ' || curr_full_name, ', ') AS currency_list FROM currency WHERE data_dt = '2023-06-30' GROUP BY curr_class	loan_user
SELECT t.source_customer_id, t.target_customer_id, t.transfer_amount, t.transfer_date, cs.credit_score AS source_credit_score, ct.credit_score AS target_credit_score FROM transfer t LEFT JOIN loan_credit cs ON t.source_customer_id = cs.customer_id LEFT JOIN loan_credit ct ON t.target_customer_id = ct.customer_id WHERE t.transfer_date > '2024-07-01'	loan_user
SELECT od.order_detail_id, od.quantity, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4'	retail
SELECT od.product_id, od.unit_price FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN stores st ON so.store_id = st.store_id WHERE st.store_name = '智能生活馆'	retail
SELECT s.store_name, e.name AS employee_name, o.order_date, o.total_amount FROM salesorders o JOIN stores s ON o.store_id = s.store_id JOIN employees e ON o.employee_id = e.employee_id JOIN orderdetails od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Nintendo Switch' AND o.order_date BETWEEN '2023-05-01' AND '2023-05-31' AND o.total_amount > 10000	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id GROUP BY s.store_name	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_id, s.store_name, s.manager_name HAVING SUM(so.total_amount) > 10000	retail
SELECT e.name, COUNT(so.order_id) FROM employees e LEFT JOIN salesorders so ON e.employee_id = so.employee_id GROUP BY e.name	retail
SELECT od.order_detail_id, od.quantity, od.unit_price FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id WHERE so.order_date = '2023-05-08'	retail
SELECT s.store_name, e.name AS employee_name, ss.sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE ss.date = '2023-05-02' ORDER BY ss.sales_quantity DESC LIMIT 1	retail
SELECT store_id, SUM(sales_amount) AS total_amount FROM salesstatistics GROUP BY store_id	retail
SELECT s.store_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-04' AND p.product_name = '佳能EOS R6' AND ss.sales_quantity > 1	retail
SELECT p.product_name, od.quantity, od.unit_price, s.store_name, s.manager_name FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-01' AND od.quantity > 1	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, SUM(od.unit_price * od.quantity) AS total_sales FROM products p JOIN orderdetails od ON p.product_id = od.product_id JOIN salesorders so ON od.order_id = so.order_id GROUP BY p.product_name	retail
SELECT e.name AS employee_name, od.quantity FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '数字大道店' AND p.product_name = 'iPhone 13' AND so.order_date = '2023-05-08' AND od.quantity > 1	retail
SELECT salesorders.*, stores.address FROM salesorders JOIN stores ON salesorders.store_id = stores.store_id	retail
SELECT od.order_detail_id, p.product_name FROM orderdetails od JOIN products p ON od.product_id = p.product_id WHERE od.quantity > 1	retail
SELECT s.store_name, SUM(o.total_amount) AS total_sales, e.name FROM salesorders o JOIN employees e ON o.employee_id = e.employee_id JOIN stores s ON o.store_id = s.store_id GROUP BY s.store_name, e.name	retail
SELECT s.store_name, e.name AS employee_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-08' AND p.product_name = 'iPhone 13'	retail
SELECT product_name, category_name, remaining_quantity FROM products	retail
SELECT s.store_name, s.manager_name, e.name AS sales_manager_name, SUM(o.total_amount) AS total_sales_amount FROM salesorders o JOIN employees e ON o.employee_id = e.employee_id JOIN stores s ON o.store_id = s.store_id WHERE e.position = '销售经理' AND o.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, s.manager_name, e.name HAVING SUM(o.total_amount) > 10000	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-01' AND ss.sales_amount > 15000	retail
SELECT product_name, remaining_quantity, sale_price FROM products	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id GROUP BY s.store_name	retail
SELECT s.store_name, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.sales_amount) AS total_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT p.product_name, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id GROUP BY p.product_name, od.unit_price ORDER BY SUM(od.quantity) DESC LIMIT 1	retail
SELECT store_name, address FROM stores	retail
SELECT e.employee_id, e.name AS employee_name, s.store_name FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id WHERE ss.date = '2023-05-05' AND ss.sales_quantity IS NOT NULL	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '戴森V11' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, e.name HAVING SUM(od.quantity * od.unit_price) > 10000	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-04' AND p.product_name = 'Apple Watch Series 7'	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND so.order_date = '2023-05-01' AND so.total_amount > 10000	retail
SELECT st.store_name, SUM(so.total_amount) AS total_sales, COUNT(so.order_id) AS total_orders FROM salesorders so JOIN stores st ON so.store_id = st.store_id GROUP BY st.store_name	retail
SELECT e.employee_id, e.name, SUM(s.profit) AS total_profit FROM employees e JOIN salesstatistics s ON e.employee_id = s.employee_id JOIN stores st ON e.store_id = st.store_id WHERE s.date = '2023-05-01' AND st.store_name = '数字大道店' GROUP BY e.employee_id, e.name	retail
SELECT product_name, supplier_name FROM products	retail
SELECT e.name, SUM(so.total_amount) AS total_sales FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id GROUP BY e.name	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-09' GROUP BY s.store_name, s.manager_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT p.product_name, ss.sales_amount, ss.sales_quantity FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id WHERE so.order_date = '2023-05-02' GROUP BY s.store_id HAVING SUM(so.total_amount) > 10000	retail
SELECT s.store_name, e.name AS employee_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND so.order_date = '2023-05-01' AND so.total_amount > 15000	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-02' AND ss.profit > 1000	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-05' AND p.product_name = '小米电视4A' GROUP BY s.store_name, e.name	retail
SELECT s.store_name, e.name AS employee_name, st.sales_quantity, s.manager_name FROM salesstatistics st JOIN products p ON st.product_id = p.product_id JOIN stores s ON st.store_id = s.store_id JOIN employees e ON st.employee_id = e.employee_id WHERE p.product_name = 'iPhone 13' AND st.date >= '2023-05-01' AND st.date <= '2023-05-31' ORDER BY st.sales_quantity DESC LIMIT 1	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity) AS total_quantity_sold, SUM(so.total_amount) AS total_sales_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE p.product_name = '佳能EOS R6' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name ORDER BY total_quantity_sold DESC LIMIT 1	retail
SELECT * FROM salesorders WHERE store_id = 'fac8f6c9-6937-46bd-b324-a0513e474916' AND order_date = '2023-05-04'	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, p.supplier_name FROM orderdetails od JOIN products p ON od.product_id = p.product_id GROUP BY p.product_name, p.supplier_name	retail
SELECT * FROM salesstatistics WHERE product_id = '1c2ea584-cc73-46a2-a61c-bb44f7ad58de'	retail
SELECT e.name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id GROUP BY e.name	retail
SELECT product_id, unit_price FROM orderdetails	retail
SELECT date, sales_amount FROM salesstatistics	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '戴尔灵越15' AND ss.profit > 1000 AND ss.date >= '2023-05-01' AND ss.date < '2023-06-01'	retail
SELECT product_name, purchase_price, sale_price FROM products	retail
SELECT store_id, date, sales_amount FROM salesstatistics	retail
SELECT e.employee_id, e.name, e.position FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-08' AND p.product_name = 'Apple Watch Series 7' AND ss.sales_quantity > 1 AND s.store_name = '科技中心店'	retail
SELECT s.store_name, so.order_id FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date >= '2023-01-01'	retail
SELECT e.name AS employee_name, p.category_name AS product_category FROM salesorders s JOIN employees e ON s.employee_id = e.employee_id JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE s.order_date = '2023-05-04' AND s.total_amount > 10000	retail
SELECT e.name, e.position, o.total_amount FROM employees e JOIN salesorders o ON e.employee_id = o.employee_id JOIN orderdetails od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Nintendo Switch' AND o.order_date = '2023-05-03'	retail
SELECT s.store_name, e.name AS employee_name, od.quantity, od.unit_price * od.quantity AS total_amount FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE p.product_name = '戴尔灵越15' AND so.order_date = '2023-05-03'	retail
SELECT p.product_name, SUM(ss.sales_amount) AS total_sales FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id GROUP BY p.product_name ORDER BY total_sales DESC LIMIT 5	retail
SELECT so.order_id, st.store_name, e.name FROM salesorders so JOIN stores st ON so.store_id = st.store_id JOIN employees e ON so.employee_id = e.employee_id	retail
SELECT s.store_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name	retail
SELECT * FROM salesorders WHERE employee_id = 'b64f194f-e6b4-4ed7-a460-0fbd2708f6c8'	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-07' AND p.product_name = 'Nintendo Switch' AND so.total_amount > 10000	retail
SELECT p.supplier_name, p.sale_price FROM products p WHERE p.product_id = 'd5f6c8e8-4aad-45a0-94de-2a93093d9d65'	retail
SELECT p.product_name, SUM(od.quantity) AS total_sold, p.supplier_name FROM products p JOIN orderdetails od ON p.product_id = od.product_id GROUP BY p.product_name, p.supplier_name	retail
SELECT * FROM employees WHERE store_id = '590758ff-b73e-43c3-9a79-18087c1577bd'	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name HAVING SUM(od.quantity * od.unit_price) > 5000	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-09' AND p.product_name = 'Nintendo Switch' GROUP BY s.store_name, e.name	retail
SELECT s.store_name, COUNT(so.order_id) AS total_orders, SUM(so.total_amount) AS total_sales_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name ORDER BY total_orders DESC LIMIT 1	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, SUM(ss.profit) AS total_profit FROM products p JOIN orderdetails od ON p.product_id = od.product_id JOIN salesstatistics ss ON p.product_id = ss.product_id GROUP BY p.product_name	retail
SELECT ss.date, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.sales_amount) AS total_sales FROM salesstatistics ss GROUP BY ss.date	retail
SELECT e.name, COUNT(so.order_id) AS order_count FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id WHERE so.order_date = '2023-05-07' GROUP BY e.name	retail
SELECT e.name AS employee_name, od.quantity AS sales_quantity, od.unit_price * od.quantity AS sales_amount FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '小米电视4A' AND so.order_date = '2023-05-02'	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '戴森V11' AND ss.profit > 3000 AND ss.date >= '2023-05-01' AND ss.date < '2023-06-01'	retail
SELECT s.manager_name, SUM(so.total_amount) AS total_sales FROM stores s JOIN salesorders so ON s.store_id = so.store_id GROUP BY s.manager_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT * FROM salesstatistics WHERE profit > 1000	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id WHERE p.product_name = 'iPad Air' AND so.order_date = '2023-05-06' GROUP BY s.store_name, e.name	retail
SELECT p.product_name, od.unit_price FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-06'	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM stores s JOIN salesorders so ON s.store_id = so.store_id GROUP BY s.store_name	retail
SELECT p.product_name, p.remaining_quantity, p.sale_price FROM products p	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, st.store_name FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN products p ON od.product_id = p.product_id JOIN stores st ON so.store_id = st.store_id GROUP BY p.product_name, st.store_name ORDER BY total_quantity DESC LIMIT 1	retail
SELECT e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales_amount FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '科技中心店' AND p.product_name = '华为Mate 40 Pro' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY e.name	retail
SELECT s.store_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-07' AND p.product_name = '戴森V11' AND ss.profit > 4000	retail
SELECT e.name, COUNT(so.order_id) AS order_count FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id GROUP BY e.name	retail
SELECT DISTINCT s.store_name FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4' AND so.total_amount > 10000 AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT s.store_name, e.name AS employee_name, SUM(so.total_amount) AS total_sales_amount FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND so.order_date = '2023-05-06' GROUP BY s.store_name, e.name	retail
SELECT s.store_name, COUNT(e.employee_id) AS employee_count FROM stores s LEFT JOIN employees e ON s.store_id = e.store_id GROUP BY s.store_name	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, SUM(od.quantity * od.unit_price) AS total_sales FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY p.product_name	retail
SELECT so.order_id, e.name FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date = '2023-05-02'	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND od.unit_price * od.quantity > 10000 AND p.supplier_name = '小米官方旗舰店'	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-05' ORDER BY ss.sales_quantity DESC LIMIT 1	retail
SELECT od.*, p.product_name FROM orderdetails od JOIN products p ON od.product_id = p.product_id	retail
SELECT * FROM salesorders WHERE store_id = '12523a4c-83f6-4def-b53d-44eef506435f'	retail
SELECT DATE_TRUNC('month', ss.date) AS month, SUM(ss.sales_amount) AS total_sales, SUM(ss.sales_quantity) AS total_quantity FROM salesstatistics ss WHERE ss.date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month ORDER BY month	retail
SELECT s.store_name, s.manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-03' AND so.total_amount > 15000	retail
SELECT e.employee_id, e.name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-09' AND s.store_name = '智能生活馆' AND p.product_name = '戴森V11' AND ss.sales_quantity > 1	retail
SELECT name, position FROM employees	retail
SELECT e.name, SUM(so.total_amount) AS total_sales, COUNT(so.order_id) AS order_count FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id GROUP BY e.name	retail
SELECT s.store_name, st.profit, s.manager_name FROM salesstatistics st JOIN stores s ON st.store_id = s.store_id WHERE st.date = '2023-05-06' AND st.profit > 1000	retail
SELECT p.category_name, SUM(od.quantity) AS total_quantity, s.store_name FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores s ON so.store_id = s.store_id GROUP BY p.category_name, s.store_name	retail
SELECT p.product_name, od.unit_price FROM products p JOIN orderdetails od ON p.product_id = od.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores st ON so.store_id = st.store_id WHERE st.store_name = '电子城旗舰店'	retail
SELECT s.store_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'iPad Air' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name	retail
SELECT s.store_name, e.name AS employee_name, so.total_amount FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPad Air' AND so.order_date = '2023-05-04'	retail
SELECT s.store_name, e.name AS employee_name, e.position FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'Nintendo Switch' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31'	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '佳能EOS R6' AND so.order_date = '2023-05-01' AND so.total_amount > 5000	retail
SELECT p.product_name, SUM(ss.profit) AS total_profit FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id WHERE ss.date >= '2023-01-01' GROUP BY p.product_name	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND so.order_date = '2023-05-09' AND so.total_amount > 5000	retail
SELECT e.name, e.position FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON e.store_id = s.store_id WHERE ss.date = '2023-05-03' AND s.store_name = '科技中心店' AND p.product_name = '佳能EOS R6' AND ss.sales_quantity > 1	retail
SELECT p.product_name, SUM(ss.sales_quantity) AS total_sales, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id GROUP BY p.product_name	retail
SELECT od.order_detail_id, p.product_name FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id WHERE so.total_amount > 5000 AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT od.order_detail_id, od.unit_price FROM orderdetails od	retail
SELECT e.name, SUM(so.total_amount) AS total_sales, st.store_name FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores st ON so.store_id = st.store_id GROUP BY e.name, st.store_name	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id GROUP BY s.store_name	retail
SELECT s.store_name, e.name AS employee_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-05' AND p.product_name = '戴尔灵越15' AND ss.profit > 2000	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-05' AND p.product_name = 'iPad Air'	retail
SELECT p.product_name, p.sale_price, p.purchase_price FROM products p	retail
SELECT * FROM salesstatistics WHERE profit > 4000	retail
SELECT e.name, SUM(od.quantity) AS total_quantity FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY e.name ORDER BY total_quantity DESC LIMIT 1	retail
SELECT s.store_name, s.address, s.manager_name, e.name AS sales_manager_name FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-03' AND e.position = '销售经理'	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity) AS total_sales_quantity FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '佳能EOS R6' AND e.position = '销售经理' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, e.name	retail
SELECT product_name, remaining_quantity, supplier_name FROM products	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM stores s JOIN salesorders so ON s.store_id = so.store_id WHERE so.order_date = '2023-05-01' GROUP BY s.store_id HAVING SUM(so.total_amount) > 10000	retail
SELECT e.name AS employee_name, s.sales_amount, s.profit FROM salesstatistics s JOIN employees e ON s.employee_id = e.employee_id JOIN stores st ON s.store_id = st.store_id JOIN products p ON s.product_id = p.product_id WHERE s.date = '2023-05-09' AND st.store_name = '科技中心店' AND p.product_name = '索尼WH-1000XM4'	retail
SELECT s.store_name, COUNT(so.order_id) AS high_value_orders FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.total_amount > 10000 GROUP BY s.store_name	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, o.total_amount FROM salesorders o JOIN stores s ON o.store_id = s.store_id JOIN employees e ON o.employee_id = e.employee_id JOIN orderdetails od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '小米电视4A' AND o.order_date >= '2023-05-01' AND o.order_date < '2023-06-01' AND o.total_amount > 10000	retail
SELECT e.name AS employee_name, p.category_name AS product_category FROM employees e JOIN salesorders s ON e.employee_id = s.employee_id JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE s.order_date >= '2023-05-01' AND s.order_date < '2023-06-01' AND s.total_amount > 5000	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_id HAVING SUM(so.total_amount) > 10000	retail
SELECT s.store_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND ss.date = '2023-05-02' AND ss.profit > 700	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, s.manager_name ORDER BY total_sales_amount DESC LIMIT 1	retail
SELECT e.name, s.store_name FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT store_id, COUNT(order_id) AS total_orders FROM salesorders GROUP BY store_id	retail
SELECT p.product_name, od.unit_price FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-06'	retail
SELECT store_name FROM stores WHERE address LIKE '%静市%'	retail
SELECT s.store_name, s.manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-05' AND so.total_amount > 15000	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.unit_price * od.quantity) AS total_amount FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '小米电视4A' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, e.name HAVING SUM(od.unit_price * od.quantity) > 5000	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, SUM(od.quantity * (od.unit_price - p.purchase_price)) AS total_profit FROM orderdetails od JOIN products p ON od.product_id = p.product_id GROUP BY p.product_name	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id WHERE p.product_name = '华为Mate 40 Pro' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name HAVING SUM(od.quantity * od.unit_price) > 10000	retail
SELECT order_id, product_id, quantity FROM orderdetails	retail
SELECT s.store_name, e.name AS employee_name, p.supplier_name, SUM(od.quantity) AS total_quantity FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON ss.store_id = s.store_id JOIN orderdetails od ON ss.product_id = od.product_id JOIN products p ON od.product_id = p.product_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name, e.name, p.supplier_name ORDER BY total_quantity DESC LIMIT 1	retail
SELECT s.store_name, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.sales_amount) AS total_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT ss.date, SUM(ss.sales_amount) AS total_sales FROM salesstatistics ss WHERE ss.date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY ss.date	retail
SELECT so.order_id, so.total_amount, e.name FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id WHERE so.total_amount > 10000	retail
SELECT name, position FROM employees	retail
SELECT p.product_name, od.unit_price, od.quantity FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '数码广场店'	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.sales_quantity) AS total_sales_quantity, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name, e.name ORDER BY total_sales_quantity DESC LIMIT 1	retail
SELECT s.store_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date = '2023-05-05' AND e.position = '销售顾问' AND so.total_amount > 5000	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id WHERE p.product_name = '戴森V11' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name HAVING SUM(od.quantity * od.unit_price) > 10000	retail
SELECT p.product_name, s.store_name, SUM(od.quantity) AS total_quantity FROM products p JOIN orderdetails od ON p.product_id = od.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores s ON so.store_id = s.store_id GROUP BY p.product_name, s.store_name	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity) AS total_quantity_sold, SUM(od.quantity * od.unit_price) AS total_sales_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name ORDER BY total_quantity_sold DESC LIMIT 1	retail
SELECT ss.date, ss.sales_quantity, ss.sales_amount FROM salesstatistics ss WHERE ss.date = '2023-05-04'	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE p.product_name = '小米电视4A' AND so.order_date = '2023-05-01' GROUP BY s.store_name, e.name	retail
SELECT p.product_name, SUM(ss.profit) AS total_profit FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id GROUP BY p.product_name	retail
SELECT e.name, s.store_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id GROUP BY e.name, s.store_name	retail
SELECT product_id, SUM(sales_quantity) AS total_quantity, SUM(profit) AS total_profit FROM salesstatistics GROUP BY product_id	retail
SELECT s.store_name, e.name AS employee_name, e.position FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '小米电视4A' AND ss.date = '2023-05-01'	retail
SELECT p.product_name, SUM(s.sales_quantity) AS total_quantity, SUM(s.profit) AS total_profit FROM salesstatistics s JOIN products p ON s.product_id = p.product_id GROUP BY p.product_name	retail
SELECT ss.sales_amount, ss.sales_quantity FROM salesstatistics ss WHERE ss.date = '2023-05-09'	retail
SELECT * FROM employees WHERE store_id = 'e0a4ba86-1757-44da-8fb4-bab97ce1b31a'	retail
SELECT e.name AS employee_name, p.product_name, ss.profit FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-02' AND s.store_name = '智能生活馆' AND p.product_name = '戴森V11'	retail
SELECT e.name, COUNT(so.order_id) AS total_orders FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.name	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity FROM orderdetails od JOIN products p ON od.product_id = p.product_id GROUP BY p.product_name ORDER BY total_quantity DESC LIMIT 1	retail
SELECT p.product_name, ss.sales_amount FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31' AND so.total_amount > 10000	retail
SELECT e.name, e.position FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-06' AND p.product_name = '戴森V11' AND ss.sales_quantity > 1 AND s.store_name = '创客空间店'	retail
SELECT store_name, manager_name FROM stores	retail
SELECT e.name AS employee_name, s.store_name, s.manager_name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON e.store_id = s.store_id WHERE ss.date = '2023-05-03' AND ss.sales_amount > 10000	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id WHERE p.product_name = 'Nintendo Switch' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name HAVING SUM(od.quantity * od.unit_price) > 10000	retail
SELECT od.order_detail_id, od.quantity, p.product_name, o.total_amount FROM orderdetails od JOIN salesorders o ON od.order_id = o.order_id JOIN products p ON od.product_id = p.product_id ORDER BY o.total_amount DESC LIMIT 1	retail
SELECT e.name, COUNT(so.order_id) AS order_count FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id GROUP BY e.name	retail
SELECT p.product_name, p.supplier_name, p.sale_price FROM products p	retail
SELECT e.name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id GROUP BY e.name	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name HAVING SUM(od.quantity * od.unit_price) > 10000	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE p.product_name = 'Apple Watch Series 7' AND so.order_date = '2023-05-06' GROUP BY s.store_name, e.name	retail
SELECT DATE_TRUNC('month', so.order_date) AS month, COUNT(DISTINCT od.product_id) AS product_count, SUM(od.quantity) AS total_quantity FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id WHERE so.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month	retail
SELECT s.store_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-06' AND p.product_name = '戴森V11' AND ss.profit > 4000	retail
SELECT p.product_name, SUM(ss.profit) AS total_profit FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id GROUP BY p.product_name	retail
SELECT product_id, SUM(sales_quantity) AS total_quantity, SUM(sales_amount) AS total_amount FROM salesstatistics GROUP BY product_id	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM stores s JOIN salesorders so ON s.store_id = so.store_id GROUP BY s.store_name ORDER BY total_sales ASC LIMIT 1	retail
SELECT s.store_name, s.manager_name, SUM(o.total_amount) AS total_sales FROM salesorders o JOIN stores s ON o.store_id = s.store_id WHERE o.order_date >= '2023-05-01' AND o.order_date < '2023-06-01' GROUP BY s.store_name, s.manager_name HAVING SUM(o.total_amount) > 10000	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-09' AND p.product_name = 'Nintendo Switch' AND ss.profit > 1000	retail
SELECT s.store_name, e.name AS employee_name, SUM(so.total_amount) AS total_sales_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND so.order_date = '2023-05-07' GROUP BY s.store_name, e.name	retail
SELECT p.product_name, od.quantity, od.unit_price, s.store_name, s.manager_name FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-01' AND so.total_amount > 15000	retail
SELECT pd.product_name, od.quantity FROM orderdetails od JOIN products pd ON od.product_id = pd.product_id	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-01' AND p.product_name = '小米电视4A'	retail
SELECT salesorders.*, stores.store_name FROM salesorders JOIN stores ON salesorders.store_id = stores.store_id	retail
SELECT product_id, SUM(sales_quantity) AS total_quantity, SUM(sales_amount) AS total_amount FROM salesstatistics GROUP BY product_id	retail
SELECT od.order_detail_id, p.description, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id WHERE so.order_date = '2023-05-03'	retail
SELECT s.store_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-06' AND p.product_name = 'Nintendo Switch' AND ss.profit > 2000	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id WHERE so.order_date = '2023-05-04' GROUP BY s.store_id HAVING SUM(so.total_amount) > 10000	retail
SELECT so.order_id, od.quantity FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id WHERE od.product_id = '4cd93324-fff6-490d-ba73-e022af68d3c8'	retail
SELECT s.store_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'iPad Air' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.sales_amount > 10000 AND ss.date >= '2023-05-01' AND ss.date < '2023-06-01'	retail
SELECT s.store_name, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.sales_amount) AS total_sales FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT ss.*, p.product_name FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-01'	retail
SELECT e.name, SUM(od.quantity) AS total_quantity FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id GROUP BY e.name	retail
SELECT s.store_name, e.name AS employee_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND so.order_date = '2023-05-01'	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_id HAVING SUM(ss.sales_amount) > 10000	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-05' AND ss.sales_amount > 10000	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, s.store_name FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores s ON so.store_id = s.store_id GROUP BY p.product_name, s.store_name	retail
SELECT s.store_name, e.name AS employee_name, e.position FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01'	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-07' AND p.product_name = '戴森V11' AND ss.sales_quantity > 1	retail
SELECT s.store_name, s.address, e.name AS employee_name, so.order_id, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' AND so.total_amount > 10000	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, st.store_name FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN products p ON od.product_id = p.product_id JOIN stores st ON so.store_id = st.store_id GROUP BY p.product_name, st.store_name ORDER BY total_quantity DESC LIMIT 1	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales, COUNT(so.order_id) AS total_orders FROM salesorders so JOIN stores s ON so.store_id = s.store_id GROUP BY s.store_name	retail
SELECT * FROM salesstatistics WHERE date = '2023-05-03'	retail
SELECT s.store_name, e.name AS employee_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name HAVING SUM(so.total_amount) > 10000	retail
SELECT p.product_name, od.unit_price, p.remaining_quantity FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '智慧街店'	retail
SELECT s.store_name, SUM(ss.sales_amount) AS total_sales, SUM(ss.profit) AS total_profit FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id GROUP BY s.store_name	retail
SELECT s.store_name, e.name, e.position FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON e.store_id = s.store_id WHERE p.product_name = '索尼WH-1000XM4' AND so.order_date = '2023-05-01'	retail
SELECT st.store_name, SUM(od.quantity) AS total_quantity FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN stores st ON so.store_id = st.store_id GROUP BY st.store_name ORDER BY total_quantity DESC LIMIT 1	retail
SELECT so.order_id, od.quantity FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN stores st ON so.store_id = st.store_id WHERE st.store_name = '智能生活馆'	retail
SELECT e.name, SUM(so.total_amount) AS total_amount FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id WHERE e.name = '强金凤' GROUP BY e.name	retail
SELECT p.product_name, p.remaining_quantity FROM products p WHERE p.sale_price > 15000	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id GROUP BY s.store_name	retail
SELECT e.name, s.store_name FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND so.total_amount > 10000	retail
SELECT p.product_name, p.category_name FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id GROUP BY p.product_name, p.category_name HAVING SUM(ss.sales_amount) > (SELECT AVG(sales_amount) FROM salesstatistics)	retail
SELECT * FROM salesstatistics WHERE profit > 4000	retail
SELECT s.store_name, s.manager_name, s.phone FROM stores s	retail
SELECT s.store_name, e.name AS employee_name, ss.sales_amount, p.product_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.sales_amount > 10000 AND p.supplier_name = '苹果官方旗舰店' AND ss.date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT so.order_id, so.total_amount FROM salesorders so JOIN stores st ON so.store_id = st.store_id WHERE st.store_name = '智能生活馆'	retail
SELECT st.store_name, SUM(so.total_amount) AS total_sales, COUNT(so.order_id) AS total_orders FROM salesorders so JOIN stores st ON so.store_id = st.store_id GROUP BY st.store_name	retail
SELECT e.name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id GROUP BY e.name	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, so.total_amount FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-01' AND p.product_name = '戴尔灵越15' AND so.total_amount > 10000	retail
SELECT p.product_name, p.supplier_name FROM products p JOIN orderdetails od ON p.product_id = od.product_id WHERE od.quantity > 1	retail
SELECT DATE_TRUNC('month', so.order_date) AS month, COUNT(DISTINCT od.product_id) AS product_count, SUM(od.quantity) AS total_quantity FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id WHERE so.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month	retail
SELECT p.product_name, p.supplier_name, p.remaining_quantity FROM products p WHERE p.sale_price > 10000	retail
SELECT p.product_name, ss.profit FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id WHERE ss.date = '2023-05-09'	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity) AS total_quantity_sold, SUM(od.quantity * od.unit_price) AS total_sales_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id WHERE p.product_name = '小米电视4A' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, e.name ORDER BY total_quantity_sold DESC LIMIT 1	retail
SELECT s.store_name, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.sales_amount) AS total_sales FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT p.product_name, od.quantity, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '数码广场店'	retail
SELECT p.product_name, p.purchase_price, p.supplier_name FROM products p	retail
SELECT od.unit_price, od.quantity FROM orderdetails od	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-04' GROUP BY s.store_name, s.manager_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT stores.address, employees.name FROM stores JOIN employees ON stores.store_id = employees.store_id	retail
SELECT st.store_name, SUM(so.total_amount) AS total_sales, SUM(ss.profit) AS total_profit FROM salesorders so JOIN salesstatistics ss ON so.store_id = ss.store_id AND so.order_date = ss.date JOIN stores st ON so.store_id = st.store_id WHERE so.order_date = '2023-05-07' GROUP BY st.store_name	retail
SELECT store_id, AVG(total_amount) AS average_sales FROM salesorders GROUP BY store_id	retail
SELECT employee_id, order_date FROM salesorders	retail
SELECT e.name AS employee_name, s.store_name FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id WHERE ss.date = '2023-05-01'	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '佳能EOS R6' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name, e.name	retail
SELECT p.product_name, SUM(od.quantity) AS total_sold FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id GROUP BY p.product_name ORDER BY total_sold DESC LIMIT 1	retail
SELECT DISTINCT e.name AS employee_name, p.category_name AS product_category FROM employees e JOIN salesorders s ON e.employee_id = s.employee_id JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE s.order_date >= '2023-05-01' AND s.order_date < '2023-06-01' AND s.total_amount > 5000	retail
SELECT pd.product_name, AVG(pd.sale_price) AS avg_price, SUM(ss.sales_quantity) AS total_quantity FROM products pd LEFT JOIN salesstatistics ss ON pd.product_id = ss.product_id GROUP BY pd.product_name	retail
SELECT ss.date, ss.sales_quantity FROM salesstatistics ss WHERE ss.product_id = '989af9dc-3606-4de8-b17f-45702c5f5355'	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-04' AND p.product_name = 'Nintendo Switch'	retail
SELECT s.store_name, s.manager_name, ss.sales_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-05' ORDER BY ss.sales_amount DESC LIMIT 1	retail
SELECT s.store_name, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT products.product_name, SUM(salesstatistics.sales_quantity) AS total_sales FROM products JOIN salesstatistics ON products.product_id = salesstatistics.product_id GROUP BY products.product_id ORDER BY total_sales DESC	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-05' AND ss.sales_amount > 10000	retail
SELECT p.product_name, SUM(s.sales_amount) AS total_sales, SUM(s.profit) AS total_profit FROM salesstatistics s JOIN products p ON s.product_id = p.product_id GROUP BY p.product_name	retail
SELECT e.name AS employee_name, p.product_name, SUM(o.total_amount) AS total_sales_amount FROM employees e JOIN salesorders o ON e.employee_id = o.employee_id JOIN orderdetails d ON o.order_id = d.order_id JOIN products p ON d.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4' AND o.order_date = '2023-05-03' GROUP BY e.name, p.product_name	retail
SELECT s.phone, s.manager_name FROM stores s	retail
SELECT product_name, sale_price FROM products	retail
SELECT p.product_name, p.purchase_price FROM products p WHERE p.sale_price < 5000	retail
SELECT * FROM salesstatistics WHERE date = '2023-05-05'	retail
SELECT e.name, e.position, od.quantity FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '创新路专卖店' AND p.product_name = 'Nintendo Switch' AND so.order_date = '2023-05-07' AND od.quantity > 1	retail
SELECT so.total_amount, s.store_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id	retail
SELECT store_id, SUM(sales_quantity) AS total_sales FROM salesstatistics GROUP BY store_id	retail
SELECT product_name, remaining_quantity, category_name FROM products	retail
SELECT e.name AS employee_name, SUM(ss.sales_amount) AS total_sales_amount, SUM(ss.sales_quantity) AS total_sales_quantity FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id GROUP BY e.name ORDER BY total_sales_amount DESC	retail
SELECT order_date, total_amount FROM salesorders	retail
SELECT e.name AS employee_name, ss.sales_quantity, ss.profit FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-07' AND s.store_name = '智慧街店' AND p.product_name = 'Apple Watch Series 7'	retail
SELECT ss.statistic_id, ss.profit FROM salesstatistics ss WHERE ss.profit > 1000	retail
SELECT s.store_name, SUM(od.quantity) AS total_quantity FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id GROUP BY s.store_name	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND so.total_amount > 15000	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-01' AND p.product_name = '戴森V11' AND ss.profit > 500	retail
SELECT s.store_name, COUNT(DISTINCT ss.product_id) AS product_count FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY s.store_name	retail
SELECT SUM(od.quantity) AS total_quantity, SUM(od.quantity * od.unit_price) AS total_sales FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN stores st ON so.store_id = st.store_id WHERE st.store_name = '智能生活馆'	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-05' AND p.supplier_name = '小米官方旗舰店' AND ss.profit > 1000	retail
SELECT store_name, phone, address FROM stores	retail
SELECT DISTINCT e.name AS employee_name, p.category_name FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND so.total_amount > 10000	retail
SELECT e.name, SUM(so.total_amount) AS total_amount FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id WHERE so.order_date = '2023-05-06' GROUP BY e.name	retail
SELECT s.store_name, e.name AS employee_name, e.position FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01'	retail
SELECT product_name, sale_price FROM products WHERE sale_price BETWEEN 5000 AND 15000	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.sales_amount > 10000 AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name, s.manager_name	retail
SELECT so.order_id, so.total_amount, od.product_id FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' ORDER BY so.total_amount ASC LIMIT 1	retail
SELECT store_name, phone FROM stores	retail
SELECT p.product_name, p.remaining_quantity, p.sale_price FROM products p	retail
SELECT p.product_name, od.unit_price FROM products p JOIN orderdetails od ON p.product_id = od.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores st ON so.store_id = st.store_id WHERE st.store_name = '智能生活馆'	retail
SELECT e.name, COUNT(so.order_id) AS order_count FROM employees e LEFT JOIN salesorders so ON e.employee_id = so.employee_id GROUP BY e.name	retail
SELECT p.product_name, s.date, SUM(s.sales_quantity) AS total_quantity FROM salesstatistics s JOIN products p ON s.product_id = p.product_id GROUP BY p.product_name, s.date	retail
SELECT remaining_quantity FROM products WHERE product_id = '00867ec5-2150-4d62-ab87-f692dea96ee8'	retail
SELECT p.product_name, ss.profit FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-09'	retail
SELECT * FROM salesorders WHERE total_amount > 5000	retail
SELECT e.name AS employee_name, COUNT(so.order_id) AS total_orders, s.store_name FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN stores s ON e.store_id = s.store_id GROUP BY e.name, s.store_name	retail
SELECT e.name AS employee_name, SUM(ss.profit) AS total_profit FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-07' AND s.store_name = '数码广场店' AND p.product_name = 'iPhone 13' GROUP BY e.name	retail
SELECT salesorders.*, employees.name FROM salesorders JOIN employees ON salesorders.employee_id = employees.employee_id	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id GROUP BY s.store_name, s.manager_name HAVING SUM(so.total_amount) > 50000	retail
SELECT so.order_id, pd.product_name, so.total_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products pd ON od.product_id = pd.product_id WHERE so.total_amount > 5000	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-05' AND p.product_name = '华为Mate 40 Pro'	retail
SELECT * FROM salesstatistics WHERE product_id = 'd00ceace-4c5d-4350-bfef-065a48c9caaa'	retail
SELECT salesorders.*, employees.name FROM salesorders JOIN employees ON salesorders.employee_id = employees.employee_id	retail
SELECT e.name AS employee_name, SUM(s.sales_amount) AS total_sales_amount FROM employees e JOIN salesstatistics s ON e.employee_id = s.employee_id JOIN products p ON s.product_id = p.product_id JOIN stores st ON s.store_id = st.store_id WHERE s.date = '2023-05-05' AND st.store_name = '科技中心店' AND p.product_name = '小米电视4A' GROUP BY e.name	retail
SELECT od.order_id, p.product_name FROM orderdetails od JOIN products p ON od.product_id = p.product_id WHERE od.unit_price > 2000	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-05' GROUP BY s.store_name, s.manager_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT e.name, e.position FROM employees e JOIN salesorders s ON e.employee_id = s.employee_id JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores st ON s.store_id = st.store_id WHERE s.order_date = '2023-05-01' AND st.store_name = '创新路专卖店' AND p.supplier_name = '戴森官方旗舰店'	retail
SELECT s.manager_name, SUM(so.total_amount) AS total_sales FROM stores s JOIN salesorders so ON s.store_id = so.store_id GROUP BY s.manager_name	retail
SELECT DISTINCT p.product_name, p.category_name FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id WHERE ss.date BETWEEN '2023-01-01' AND '2023-12-31'	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id JOIN products p ON od.product_id = p.product_id WHERE p.supplier_name = '戴森官方旗舰店' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name HAVING SUM(od.quantity * od.unit_price) > 10000	retail
SELECT e.name AS employee_name, s.store_name FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT product_name, description FROM products	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id GROUP BY s.store_name HAVING SUM(so.total_amount) > 10000	retail
SELECT s.store_name, e.name AS employee_name, p.category_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-01' AND so.total_amount > 10000 GROUP BY s.store_name, e.name, p.category_name	retail
SELECT ss.date, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.sales_amount) AS total_amount FROM salesstatistics ss WHERE ss.date = '2023-05-06' GROUP BY ss.date	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id JOIN salesorders so ON ss.employee_id = so.employee_id WHERE ss.date = '2023-05-04' AND p.product_name = '索尼WH-1000XM4' AND so.total_amount > 5000	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.sales_quantity) AS total_sales_quantity, SUM(ss.sales_amount) AS total_sales_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE ss.date = '2023-05-05' GROUP BY s.store_name, e.name ORDER BY total_sales_quantity DESC LIMIT 1	retail
SELECT s.store_name, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT name, position FROM employees	retail
SELECT p.product_name, SUM(od.quantity) AS sold_quantity, p.remaining_quantity FROM products p LEFT JOIN orderdetails od ON p.product_id = od.product_id GROUP BY p.product_name, p.remaining_quantity	retail
SELECT s.store_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-05' AND p.product_name = '戴森V11' AND ss.profit > 1500	retail
SELECT s.store_name, ss.sales_quantity, p.description FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id	retail
SELECT od.order_detail_id, p.product_name, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id	retail
SELECT st.store_name, SUM(so.total_amount) AS total_sales, COUNT(e.employee_id) AS employee_count FROM salesorders so JOIN stores st ON so.store_id = st.store_id JOIN employees e ON e.store_id = st.store_id GROUP BY st.store_name	retail
SELECT s.manager_name, COUNT(s.store_id) AS store_count FROM stores s GROUP BY s.manager_name	retail
SELECT product_name, remaining_quantity, sale_price FROM products	retail
SELECT e.name, e.position, s.order_date, s.total_amount FROM employees e JOIN salesorders s ON e.employee_id = s.employee_id JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.category_name = '吸尘器' AND s.total_amount > 10000 AND s.order_date >= '2023-05-01' AND s.order_date < '2023-06-01'	retail
SELECT product_name, description, remaining_quantity FROM products	retail
SELECT e.name AS employee_name, ss.sales_quantity, ss.profit FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-09' AND s.store_name = '科技园店' AND p.product_name = 'Nintendo Switch'	retail
SELECT s.store_name, s.manager_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-05' AND ss.profit > 1000	retail
SELECT e.name, s.store_name, SUM(ss.sales_quantity) AS total_quantity FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON ss.store_id = s.store_id GROUP BY e.name, s.store_name	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-05' AND ss.sales_amount > 10000	retail
SELECT e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-06' AND s.store_name = '数字大道店' AND p.product_name = '华为Mate 40 Pro'	retail
SELECT od.order_detail_id, p.product_name, od.quantity, od.unit_price, so.total_amount FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id WHERE so.order_date = '2023-05-09' AND so.total_amount > 10000 ORDER BY so.total_amount DESC	retail
SELECT p.product_name, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id GROUP BY p.product_name	retail
SELECT s.store_name, e.name AS employee_name, e.position FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND ss.date = '2023-05-01'	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-07' AND ss.profit > 1000	retail
SELECT e.name, e.position FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-06' AND p.product_name = '佳能EOS R6' AND ss.sales_quantity > 1 AND s.store_name = '科技园店'	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE p.product_name = 'iPad Air' AND ss.date = '2023-05-01'	retail
SELECT p.product_name, p.sale_price, p.purchase_price FROM products p	retail
SELECT store_name, phone FROM stores	retail
SELECT st.store_name, COUNT(so.order_id) AS order_count, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores st ON so.store_id = st.store_id GROUP BY st.store_name	retail
SELECT * FROM salesorders WHERE employee_id = 'a7badb7d-74f0-47ab-a07b-4313755d14da'	retail
SELECT store_id, SUM(total_amount) AS total_sales FROM salesorders GROUP BY store_id	retail
SELECT pd.product_name, s.store_name, SUM(od.quantity) AS total_quantity FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN products pd ON od.product_id = pd.product_id JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-02' GROUP BY pd.product_name, s.store_name ORDER BY total_quantity DESC LIMIT 1	retail
SELECT * FROM products WHERE product_id = '9e847a4c-3927-45a2-9a3d-a400cdec1d6a'	retail
SELECT e.name, COUNT(so.order_id) AS order_count FROM employees e LEFT JOIN salesorders so ON e.employee_id = so.employee_id GROUP BY e.name	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM stores s JOIN salesorders so ON s.store_id = so.store_id WHERE so.order_date = '2023-05-07' GROUP BY s.store_id HAVING SUM(so.total_amount) > 1000	retail
SELECT * FROM salesstatistics WHERE sales_amount > 10000	retail
SELECT DISTINCT order_id FROM orderdetails	retail
SELECT od.order_detail_id, p.product_name, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id	retail
SELECT e.name, s.store_name, COUNT(so.order_id) AS order_count FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN stores s ON e.store_id = s.store_id GROUP BY e.name, s.store_name	retail
SELECT ss.date, ss.sales_quantity, ss.sales_amount FROM salesstatistics ss WHERE ss.date = '2023-05-04'	retail
SELECT p.product_name, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.sales_amount) AS total_sales FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id GROUP BY p.product_name	retail
SELECT p.product_name, p.remaining_quantity, p.sale_price FROM products p	retail
SELECT s.store_name, e.name AS employee_name, p.sale_price FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-01' AND p.product_name = '戴森V11'	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, SUM(od.quantity * od.unit_price - p.purchase_price * od.quantity) AS total_profit FROM products p JOIN orderdetails od ON p.product_id = od.product_id GROUP BY p.product_name	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id GROUP BY s.store_name ORDER BY s.store_name	retail
SELECT e.name, s.store_name, SUM(o.total_amount) AS total_sales FROM salesorders o JOIN employees e ON o.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id GROUP BY e.name, s.store_name	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-03' AND ss.sales_amount > 2000	retail
SELECT st.store_name, SUM(ss.profit) AS total_profit, SUM(ss.sales_quantity) AS total_sales_quantity FROM salesstatistics ss JOIN stores st ON ss.store_id = st.store_id GROUP BY st.store_name	retail
SELECT p.product_name, e.name AS manager_name FROM products p JOIN orderdetails od ON p.product_id = od.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN employees e ON so.employee_id = e.employee_id GROUP BY p.product_name, e.name ORDER BY SUM(od.quantity) DESC LIMIT 1	retail
SELECT product_id, sales_amount, profit FROM salesstatistics	retail
SELECT e.name, COUNT(so.order_id) AS order_count FROM employees e LEFT JOIN salesorders so ON e.employee_id = so.employee_id GROUP BY e.name	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM stores s JOIN salesorders so ON s.store_id = so.store_id GROUP BY s.store_name	retail
SELECT e.name, COUNT(so.order_id) AS total_orders FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.name	retail
SELECT e.name AS employee_name, s.store_name FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT s.store_name, e.name, e.position FROM stores s JOIN employees e ON s.store_id = e.store_id	retail
SELECT p.product_name, p.supplier_name, p.sale_price FROM products p WHERE p.sale_price > p.purchase_price	retail
SELECT stores.store_name, COUNT(salesorders.order_id) AS order_count FROM stores LEFT JOIN salesorders ON stores.store_id = salesorders.store_id GROUP BY stores.store_id	retail
SELECT e.name FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-04' AND p.product_name = '戴森V11' AND p.supplier_name = '小米官方旗舰店'	retail
SELECT e.employee_id, e.name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND ss.profit > 1000 AND ss.date >= '2023-05-01' AND ss.date < '2023-06-01'	retail
SELECT s.store_name, s.manager_name, ss.sales_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-08' ORDER BY ss.sales_amount DESC LIMIT 1	retail
SELECT pd.product_name, pd.remaining_quantity, pd.supplier_name FROM products pd	retail
SELECT e.name, SUM(s.sales_quantity) AS total_quantity, SUM(s.profit) AS total_profit FROM salesstatistics s JOIN employees e ON s.employee_id = e.employee_id GROUP BY e.name	retail
SELECT p.product_name, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id WHERE so.order_date = '2023-05-08' AND od.unit_price > 10000	retail
SELECT s.store_name, s.manager_name, SUM(ss.sales_amount) AS total_sales_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date >= '2023-05-01' AND ss.date < '2023-06-01' GROUP BY s.store_name, s.manager_name	retail
SELECT e.name AS employee_name, s.store_name, p.product_name, SUM(od.quantity * od.unit_price) AS total_sales_amount FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN stores s ON so.store_id = s.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE s.store_name = '智能生活馆' AND p.product_name = 'iPad Air' AND so.order_date = '2023-05-01' GROUP BY e.name, s.store_name, p.product_name	retail
SELECT sale_price, purchase_price FROM products	retail
SELECT s.store_name, s.manager_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_id ORDER BY total_profit DESC LIMIT 1	retail
SELECT st.store_name, SUM(ss.sales_amount) AS total_sales, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores st ON ss.store_id = st.store_id WHERE ss.date = '2023-05-07' GROUP BY st.store_name	retail
SELECT s.store_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-07' AND p.product_name = '戴尔灵越15' AND ss.sales_quantity > 1	retail
SELECT s.store_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE p.product_name = 'Apple Watch Series 7' AND ss.date >= '2023-05-01' AND ss.date < '2023-06-01' GROUP BY s.store_name	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.sales_amount > 10000 AND p.supplier_name = '苹果官方旗舰店' AND ss.date >= '2023-05-01' AND ss.date < '2023-06-01'	retail
SELECT e.name, SUM(o.total_amount) AS total_sales_amount FROM employees e JOIN salesorders o ON e.employee_id = o.employee_id GROUP BY e.name	retail
SELECT p.product_name, od.quantity, od.unit_price FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN stores st ON so.store_id = st.store_id JOIN products p ON od.product_id = p.product_id WHERE st.store_name = '电子城旗舰店'	retail
SELECT product_name, sale_price, remaining_quantity FROM products	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, o.total_amount FROM salesorders o JOIN employees e ON o.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id JOIN orderdetails od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE o.order_date = '2023-05-05' AND p.product_name = '小米电视4A' AND o.total_amount > 10000	retail
SELECT e.name AS employee_name, od.quantity AS sales_quantity, so.total_amount AS total_sales_amount FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON e.store_id = s.store_id WHERE so.order_date = '2023-05-07' AND s.store_name = '创客空间店' AND p.product_name = 'Nintendo Switch'	retail
SELECT s.store_name, s.manager_name, e.name AS sales_consultant_name FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-04' AND ss.sales_amount > 5000	retail
SELECT p.product_name, p.remaining_quantity, p.sale_price FROM products p ORDER BY p.sale_price ASC	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-04' AND ss.sales_amount > 10000	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales, COUNT(so.order_id) AS order_count FROM salesorders so JOIN stores s ON so.store_id = s.store_id GROUP BY s.store_name	retail
SELECT DISTINCT s.store_name FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN salesstatistics ss ON ss.product_id = p.product_id WHERE p.supplier_name = '小米官方旗舰店' AND ss.profit > 1000 AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01'	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id WHERE so.order_date = '2023-05-02' AND so.total_amount > 15000	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, SUM(od.quantity * od.unit_price) AS total_sales FROM products p JOIN orderdetails od ON p.product_id = od.product_id GROUP BY p.product_name	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE p.product_name = '佳能EOS R6' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name HAVING SUM(od.quantity * od.unit_price) > 10000	retail
SELECT s.store_name, e.name AS employee_name, e.position FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND so.order_date = '2023-05-01'	retail
SELECT s.store_name, e.name AS employee_name, od.unit_price * od.quantity AS sales_amount, p.product_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' AND p.supplier_name = '戴森官方旗舰店' AND od.unit_price * od.quantity > 10000	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-04' AND p.product_name = '戴森V11' AND ss.profit > 2000	retail
SELECT p.product_name, p.sale_price, p.remaining_quantity FROM products p	retail
SELECT e.name AS employee_name, SUM(s.total_amount) AS total_sales_amount FROM salesorders s JOIN employees e ON s.employee_id = e.employee_id JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores st ON s.store_id = st.store_id WHERE s.order_date = '2023-05-01' AND p.product_name = 'iPhone 13' AND st.store_name = '数码广场店' GROUP BY e.name	retail
SELECT e.name AS employee_name, s.manager_name AS store_manager_name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON e.store_id = s.store_id WHERE ss.date = '2023-05-04'	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-06' AND p.supplier_name = '小米官方旗舰店' AND ss.profit > 2000	retail
SELECT o.order_id, od.product_id, od.quantity FROM orderdetails od JOIN salesorders o ON od.order_id = o.order_id	retail
SELECT od.order_detail_id, p.product_name, od.quantity FROM orderdetails od JOIN products p ON od.product_id = p.product_id	retail
SELECT p.product_name, SUM(od.quantity) AS total_sold, SUM(od.quantity * od.unit_price) AS total_sales FROM products p JOIN orderdetails od ON p.product_id = od.product_id GROUP BY p.product_name	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, od.unit_price, od.quantity, o.total_amount FROM salesorders o JOIN orderdetails od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON o.store_id = s.store_id JOIN employees e ON o.employee_id = e.employee_id WHERE o.order_date = '2023-05-03' AND p.product_name = 'Nintendo Switch' AND o.total_amount > 10000	retail
SELECT p.product_name, p.remaining_quantity, p.sale_price FROM products p	retail
SELECT address, phone FROM stores	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id WHERE p.product_name = '戴森V11' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name HAVING SUM(od.quantity * od.unit_price) > 10000	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, SUM(od.quantity) AS total_quantity, SUM(od.quantity * od.unit_price) AS total_amount FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '戴森V11' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name, p.product_name	retail
SELECT so.order_id, e.name FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id WHERE so.total_amount > 5000	retail
SELECT e.employee_id, e.name, e.position FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-09' AND p.product_name = '戴森V11' AND ss.sales_quantity > 1 AND s.store_name = '创新路专卖店'	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id WHERE p.product_name = '佳能EOS R6' AND so.order_date = '2023-05-06' GROUP BY s.store_name, e.name	retail
SELECT e.name, e.position, p.product_name, ss.profit FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON e.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE s.store_name = '智能生活馆' AND ss.date = '2023-05-07' AND ss.profit > 3000	retail
SELECT * FROM salesorders ORDER BY total_amount DESC LIMIT 1	retail
SELECT e.name AS employee_name, SUM(ss.profit) AS total_profit FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN employees e ON so.employee_id = e.employee_id JOIN salesstatistics ss ON ss.employee_id = e.employee_id WHERE p.product_name = 'Nintendo Switch' AND so.order_date = '2023-05-02' GROUP BY e.name	retail
SELECT e.name, SUM(ss.sales_amount) AS total_sales FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id WHERE ss.date = '2023-05-09' GROUP BY e.name	retail
SELECT e.name, SUM(ss.sales_amount) AS total_sales FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id WHERE ss.date = '2023-05-09' GROUP BY e.name	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.sales_quantity) AS total_sales_quantity, SUM(ss.sales_amount) AS total_sales_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' AND e.position = '销售顾问' GROUP BY s.store_name, e.name ORDER BY total_sales_quantity DESC LIMIT 1	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.supplier_name = '小米官方旗舰店' AND ss.sales_amount > 10000 AND ss.date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT s.store_name, e.name, e.position FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.sales_quantity) AS total_sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE ss.date = '2023-05-07' GROUP BY s.store_name, e.name ORDER BY total_sales_quantity DESC LIMIT 1	retail
SELECT p.category_name, SUM(ss.sales_amount) AS total_sales FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id GROUP BY p.category_name	retail
SELECT name, store_id FROM employees	retail
SELECT s.store_name, e.name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id GROUP BY s.store_name, e.name ORDER BY total_sales DESC	retail
SELECT p.product_name, SUM(so.total_amount) AS total_sales, s.store_name FROM products p JOIN orderdetails od ON p.product_id = od.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores s ON so.store_id = s.store_id GROUP BY p.product_name, s.store_name	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, SUM(ss.profit) AS total_profit FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesstatistics ss ON p.product_id = ss.product_id GROUP BY p.product_name	retail
SELECT DISTINCT e.employee_id, e.name FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-01' AND so.total_amount > 10000 AND p.sale_price > 5000	retail
SELECT store_id, COUNT(order_id) AS total_orders FROM salesorders GROUP BY store_id	retail
SELECT s.store_name, p.product_name, SUM(od.quantity) AS total_quantity FROM orderdetails od JOIN salesorders o ON od.order_id = o.order_id JOIN stores s ON o.store_id = s.store_id JOIN products p ON od.product_id = p.product_id WHERE s.store_id = '590758ff-b73e-43c3-9a79-18087c1577bd' GROUP BY s.store_name, p.product_name	retail
SELECT e.employee_id, e.name, SUM(ss.profit) AS total_profit FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-08' AND s.store_name = '科技园店' AND p.product_name = 'Apple Watch Series 7' GROUP BY e.employee_id, e.name	retail
SELECT s.store_name, s.manager_name, MAX(ss.sales_amount) AS max_sales_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-09' GROUP BY s.store_name, s.manager_name ORDER BY max_sales_amount DESC LIMIT 1	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE p.product_name = '小米电视4A' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, e.name HAVING SUM(od.quantity * od.unit_price) > 15000	retail
SELECT s.store_name, SUM(o.total_amount) AS total_sales_amount FROM salesorders o JOIN employees e ON o.employee_id = e.employee_id JOIN stores s ON o.store_id = s.store_id WHERE e.position = '销售经理' AND o.order_date = '2023-05-05' GROUP BY s.store_name	retail
SELECT s.store_name, s.manager_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-09' AND ss.profit > 1000	retail
SELECT e.name, COUNT(so.order_id) AS order_count, SUM(so.total_amount) AS total_amount FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id GROUP BY e.name	retail
SELECT employee_id, name FROM employees	retail
SELECT p.product_name, s.sales_amount, p.purchase_price FROM salesstatistics s JOIN products p ON s.product_id = p.product_id WHERE s.date >= '2023-05-01' AND s.date < '2023-06-01' AND s.sales_amount > p.purchase_price * 1.5 AND p.supplier_name = '华为官方旗舰店'	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales, SUM(od.quantity) AS total_quantity FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN stores s ON so.store_id = s.store_id GROUP BY s.store_name	retail
SELECT quantity, unit_price FROM orderdetails ORDER BY order_detail_id	retail
SELECT SUM(so.total_amount) FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id WHERE e.name = '郑荣' AND so.order_date = '2023-05-09'	retail
SELECT * FROM employees WHERE store_id = '590c1265-b8c5-4988-8765-5caee80c1f63'	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM stores s JOIN salesorders so ON s.store_id = so.store_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, s.manager_name HAVING SUM(so.total_amount) > 10000	retail
SELECT employee_id, SUM(sales_quantity) AS total_sales_quantity FROM salesstatistics GROUP BY employee_id	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM stores s JOIN salesorders so ON s.store_id = so.store_id WHERE so.order_date = '2023-05-07' GROUP BY s.store_id HAVING SUM(so.total_amount) > 5000	retail
SELECT st.store_name, SUM(so.total_amount) AS total_sales, e.name FROM salesorders so JOIN stores st ON so.store_id = st.store_id JOIN employees e ON so.employee_id = e.employee_id GROUP BY st.store_name, e.name	retail
SELECT product_name, sale_price, remaining_quantity FROM products ORDER BY sale_price DESC	retail
SELECT p.product_name FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id WHERE ss.sales_quantity > 0 AND ss.profit > 0	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, od.unit_price * od.quantity AS sales_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' AND p.supplier_name = '苹果官方旗舰店' AND od.unit_price * od.quantity > 10000	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND so.total_amount > 10000 AND p.category_name = '手机'	retail
SELECT store_id, SUM(sales_quantity) AS total_quantity FROM salesstatistics GROUP BY store_id	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '戴森V11' AND ss.date = '2023-05-09'	retail
SELECT * FROM orderdetails WHERE order_id = '8aa1ea1e-b58d-4ff2-a9e1-078bccc1f8bf'	retail
SELECT s.store_name, e.name AS employee_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND so.order_date = '2023-05-03' AND so.total_amount > 10000	retail
SELECT so.order_id, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '电子城旗舰店'	retail
SELECT date, sales_quantity, sales_amount FROM salesstatistics WHERE date = '2023-05-08'	retail
SELECT od.product_id, SUM(od.quantity) AS total_quantity, SUM(od.quantity * od.unit_price) AS total_amount FROM orderdetails od WHERE od.product_id = '4cd93324-fff6-490d-ba73-e022af68d3c8' GROUP BY od.product_id	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31' AND so.total_amount > 5000	retail
SELECT s.store_name, SUM(ss.sales_amount) AS total_sales_amount, SUM(ss.sales_quantity) AS total_sales_quantity FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id GROUP BY s.store_name	retail
SELECT s.store_name, e.name AS employee_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date >= '2023-05-01' AND so.order_date <= '2023-05-31' AND so.total_amount > 10000	retail
SELECT e.employee_id, e.name, SUM(s.sales_amount) AS total_sales FROM employees e JOIN salesstatistics s ON e.employee_id = s.employee_id JOIN stores st ON s.store_id = st.store_id WHERE s.date = '2023-05-03' AND st.store_name = '电子城旗舰店' GROUP BY e.employee_id, e.name HAVING SUM(s.sales_amount) > 10000	retail
SELECT e.employee_id, e.name, e.position, SUM(od.quantity) AS total_sales_quantity FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.supplier_name = '戴森官方旗舰店' AND so.order_date = '2023-05-04' GROUP BY e.employee_id, e.name, e.position HAVING SUM(od.quantity) > 1	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-04' ORDER BY ss.sales_quantity DESC LIMIT 1	retail
SELECT e.name, e.position FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-05' AND p.product_name = '戴森V11' AND p.supplier_name = '苹果官方旗舰店'	retail
SELECT s.store_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-03' AND p.product_name = '小米电视4A' AND ss.sales_quantity > 1	retail
SELECT so.order_id, e.name FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id WHERE so.total_amount > 10000	retail
SELECT salesorders.total_amount, stores.store_name FROM salesorders JOIN stores ON salesorders.store_id = stores.store_id	retail
SELECT * FROM orderdetails WHERE quantity > 1	retail
SELECT p.product_name, SUM(s.sales_amount) AS total_sales, SUM(s.profit) AS total_profit FROM salesstatistics s JOIN products p ON s.product_id = p.product_id GROUP BY p.product_name	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-02' AND p.product_name = 'Nintendo Switch'	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity) AS total_quantity, SUM(od.quantity * od.unit_price) AS total_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-02' AND p.product_name = '戴尔灵越15' GROUP BY s.store_name, e.name	retail
SELECT s.store_name, p.product_name, SUM(ss.sales_amount) AS total_sales FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id GROUP BY s.store_name, p.product_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT s.store_name, s.manager_name, SUM(ss.sales_amount) AS total_sales_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date >= '2023-05-01' AND ss.date < '2023-06-01' GROUP BY s.store_name, s.manager_name	retail
SELECT date, sales_amount FROM salesstatistics	retail
SELECT store_id, SUM(profit) FROM salesstatistics GROUP BY store_id	retail
SELECT order_id, total_amount, order_date FROM salesorders	retail
SELECT so.order_id, so.total_amount, od.quantity, od.unit_price FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id WHERE so.total_amount > 2000	retail
SELECT e.name, e.position FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-09' AND s.store_name = '数字大道店' AND p.product_name = '华为Mate 40 Pro' AND ss.sales_quantity > 1	retail
SELECT s.store_name, st.profit, s.manager_name FROM salesstatistics st JOIN stores s ON st.store_id = s.store_id WHERE st.date = '2023-05-01' AND st.profit > 1000	retail
SELECT product_name, sale_price, purchase_price FROM products	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-07' AND p.product_name = 'iPad Air'	retail
SELECT e.name, s.store_name FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT store_id, SUM(total_amount) AS total_sales FROM salesorders GROUP BY store_id	retail
SELECT ss.*, s.store_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT od.order_detail_id, od.quantity, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPhone 13'	retail
SELECT p.product_name, SUM(ss.profit) AS total_profit FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id WHERE ss.date >= '2023-01-01' GROUP BY p.product_name	retail
SELECT employees.name, salesorders.order_date FROM salesorders JOIN employees ON salesorders.employee_id = employees.employee_id	retail
SELECT unit_price, quantity FROM orderdetails	retail
SELECT e.name, s.store_name FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT s.store_name, e.name AS manager_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-07' AND e.position = '销售经理' AND p.product_name = 'Apple Watch Series 7'	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-01' GROUP BY s.store_name, s.manager_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT e.employee_id, e.name, SUM(od.quantity) AS total_quantity FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY e.employee_id, e.name HAVING SUM(od.quantity) > (SELECT AVG(total_quantity) FROM (SELECT SUM(od2.quantity) AS total_quantity FROM orderdetails od2 JOIN products p2 ON od2.product_id = p2.product_id WHERE p2.product_name = '索尼WH-1000XM4' GROUP BY od2.order_id) AS avg_quantity)	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Nintendo Switch' AND so.order_date = '2023-05-03' AND so.total_amount > 5000	retail
SELECT s.store_name, SUM(o.total_amount) AS total_sales, COUNT(e.employee_id) AS employee_count FROM salesorders o JOIN stores s ON o.store_id = s.store_id LEFT JOIN employees e ON s.store_id = e.store_id GROUP BY s.store_name	retail
SELECT so.order_id, so.total_amount, e.name FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '电子城旗舰店'	retail
SELECT p.product_name, p.remaining_quantity, p.sale_price FROM products p	retail
SELECT p.product_name, (p.sale_price - p.purchase_price) AS price_difference FROM products p	retail
SELECT s.store_name, st.manager_name, SUM(ss.sales_amount) AS total_sales_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN stores st ON ss.store_id = st.store_id WHERE ss.date >= '2023-05-01' AND ss.date < '2023-06-01' GROUP BY s.store_name, st.manager_name ORDER BY total_sales_amount DESC LIMIT 1	retail
SELECT p.product_name, e.name, ss.sales_quantity FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id JOIN employees e ON ss.employee_id = e.employee_id ORDER BY ss.sales_quantity DESC	retail
SELECT store_id, SUM(total_amount) AS total_sales FROM salesorders GROUP BY store_id	retail
SELECT product_id, SUM(sales_quantity) AS total_sales FROM salesstatistics GROUP BY product_id	retail
SELECT so.order_id, od.quantity, od.unit_price FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id WHERE so.order_date = '2023-05-04'	retail
SELECT st.store_name, SUM(ss.sales_quantity) AS total_sales FROM salesstatistics ss JOIN stores st ON ss.store_id = st.store_id WHERE ss.date = '2023-05-06' GROUP BY st.store_name	retail
SELECT DISTINCT s.store_name, s.manager_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '戴尔灵越15' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT s.store_name, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.sales_amount) AS total_sales FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT * FROM salesorders WHERE employee_id = 'ca20bf3e-e6b8-4776-aafd-0c936476f0a6'	retail
SELECT s.store_name, e.name AS employee_name, e.position FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '戴森V11' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT * FROM salesstatistics WHERE profit > 500	retail
SELECT s.store_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE p.product_name = 'Apple Watch Series 7' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-04' AND p.product_name = 'Nintendo Switch' AND so.total_amount > 10000	retail
SELECT p.product_name, COUNT(od.order_detail_id) AS order_count, SUM(od.quantity * od.unit_price) AS total_sales FROM products p JOIN orderdetails od ON p.product_id = od.product_id GROUP BY p.product_name	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.sales_amount > 10000 AND p.supplier_name = '小米官方旗舰店' AND ss.date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT s.store_name, SUM(ss.sales_quantity) AS total_sales_quantity, SUM(ss.sales_amount) AS total_sales_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name ORDER BY total_sales_quantity DESC LIMIT 1	retail
SELECT category_name, COUNT(product_id) AS product_count FROM products GROUP BY category_name	retail
SELECT od.product_id, SUM(od.quantity) AS total_quantity FROM orderdetails od GROUP BY od.product_id	retail
SELECT o.order_id, e.name, s.store_name FROM salesorders o JOIN employees e ON o.employee_id = e.employee_id JOIN stores s ON o.store_id = s.store_id	retail
SELECT s.store_name, AVG(ss.profit) AS average_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND ss.date >= '2023-05-01' AND ss.date < '2023-06-01' GROUP BY s.store_name	retail
SELECT s.store_name, s.manager_name, SUM(o.total_amount) AS total_sales FROM salesorders o JOIN stores s ON o.store_id = s.store_id WHERE o.order_date = '2023-05-06' GROUP BY s.store_name, s.manager_name HAVING SUM(o.total_amount) > 10000	retail
SELECT * FROM salesstatistics WHERE profit > 3000	retail
SELECT e.name, p.product_name FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND so.total_amount > 10000 GROUP BY s.store_id, s.store_name, s.manager_name	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM stores s JOIN salesorders so ON s.store_id = so.store_id GROUP BY s.store_name HAVING SUM(so.total_amount) > 10000	retail
SELECT * FROM salesstatistics WHERE profit > 100	retail
SELECT * FROM stores WHERE manager_name = '赵秀芳'	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id WHERE so.order_date = '2023-05-01' AND so.total_amount > 5000 AND od.quantity > 1	retail
SELECT p.product_name, SUM(ss.profit) AS total_profit FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id WHERE ss.date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY p.product_name ORDER BY total_profit DESC LIMIT 1	retail
SELECT s.store_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-01' AND p.product_name = 'Apple Watch Series 7' AND ss.profit > 3000	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id WHERE p.product_name = 'Apple Watch Series 7' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name HAVING SUM(od.quantity * od.unit_price) > 10000	retail
SELECT pd.product_name, SUM(od.quantity) AS total_quantity, SUM(od.quantity * od.unit_price) AS total_sales FROM orderdetails od JOIN products pd ON od.product_id = pd.product_id GROUP BY pd.product_name	retail
SELECT employees.name, stores.store_name FROM employees JOIN stores ON employees.store_id = stores.store_id	retail
SELECT category_name, SUM(sales_quantity) AS total_sales_quantity FROM salesstatistics s JOIN products p ON s.product_id = p.product_id GROUP BY category_name	retail
SELECT e.name, e.position, SUM(s.total_amount) AS total_sales_amount FROM employees e JOIN salesorders s ON e.employee_id = s.employee_id JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND s.order_date BETWEEN '2023-05-01' AND '2023-05-31' AND s.total_amount > 5000 GROUP BY e.name, e.position	retail
SELECT phone, manager_name FROM stores	retail
SELECT e.name, e.position, SUM(s.total_amount) AS total_sales_amount FROM employees e JOIN salesorders s ON e.employee_id = s.employee_id WHERE s.order_date = '2023-05-07' GROUP BY e.name, e.position HAVING SUM(s.total_amount) > 2000	retail
SELECT * FROM orderdetails WHERE unit_price > 5000	retail
SELECT e.name, SUM(so.total_amount) AS total_sales, COUNT(so.order_id) AS order_count FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id GROUP BY e.name	retail
SELECT e.name, SUM(so.total_amount) AS total_sales FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id GROUP BY e.name ORDER BY total_sales DESC	retail
SELECT s.store_name, s.manager_name, SUM(o.total_amount) AS total_sales FROM salesorders o JOIN stores s ON o.store_id = s.store_id WHERE o.order_date = '2023-05-02' GROUP BY s.store_name, s.manager_name HAVING SUM(o.total_amount) > 5000	retail
SELECT so.order_id, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '智能生活馆'	retail
SELECT so.order_id, SUM(od.quantity) AS total_quantity, so.total_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id GROUP BY so.order_id, so.total_amount	retail
SELECT * FROM salesstatistics WHERE store_id = 'c102571a-8773-41e0-93fa-1fec583a3ddc'	retail
SELECT e.name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id GROUP BY e.name	retail
SELECT s.store_name, s.manager_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date >= '2023-05-01' AND ss.date < '2023-06-01' GROUP BY s.store_name, s.manager_name HAVING SUM(ss.profit) > 10000	retail
SELECT e.employee_id, e.name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-04' AND s.store_name = '数码广场店' AND p.supplier_name = '戴森官方旗舰店'	retail
SELECT so.order_id, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '电子城旗舰店'	retail
SELECT e.name, COUNT(o.order_id) AS order_count FROM salesorders o JOIN employees e ON o.employee_id = e.employee_id GROUP BY e.name	retail
SELECT DISTINCT e.name, p.category_name FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND so.total_amount > 10000	retail
SELECT order_id, product_id FROM orderdetails	retail
SELECT SUM(ss.profit) AS total_profit FROM salesstatistics ss WHERE ss.date = '2023-05-09'	retail
SELECT s.store_name, s.manager_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-02' ORDER BY ss.profit DESC LIMIT 1	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4' AND so.order_date = '2023-05-03'	retail
SELECT e.name, e.position, s.store_name, ss.profit FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-03' AND s.store_name = '创新路专卖店' AND ss.profit > 3000	retail
SELECT ss.date, ss.sales_quantity, ss.sales_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE s.store_name = '智能生活馆'	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '戴尔灵越15' AND so.order_date = '2023-05-01' AND so.total_amount > 10000	retail
SELECT od.order_detail_id, p.product_name, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id ORDER BY od.unit_price DESC LIMIT 1	retail
SELECT * FROM salesorders WHERE employee_id = '691f6d8c-b847-4358-a070-77cf34cad5d9'	retail
SELECT s.manager_name, COUNT(s.store_id) AS store_count FROM stores s GROUP BY s.manager_name	retail
SELECT st.store_name, SUM(so.total_amount) AS total_sales, COUNT(e.employee_id) AS employee_count FROM salesorders so JOIN stores st ON so.store_id = st.store_id JOIN employees e ON e.store_id = st.store_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY st.store_name	retail
SELECT st.store_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores st ON so.store_id = st.store_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY st.store_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-08' AND ss.sales_amount > 10000	retail
SELECT e.name, e.position FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN orderdetails od ON ss.product_id = od.product_id WHERE ss.date = '2023-05-01' AND ss.sales_quantity > od.quantity	retail
SELECT store_name, address, phone FROM stores	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name	retail
SELECT e.name AS employee_name, od.quantity AS sales_quantity, ss.profit AS sales_profit FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN salesstatistics ss ON ss.employee_id = e.employee_id AND ss.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '电子城旗舰店' AND p.product_name = '戴森V11' AND ss.date = '2023-05-06'	retail
SELECT store_id, SUM(total_amount) FROM salesorders GROUP BY store_id	retail
SELECT product_name, supplier_name FROM products	retail
SELECT s.store_name, e.name AS employee_name FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-09' AND p.product_name = '索尼WH-1000XM4' AND e.position = '销售顾问'	retail
SELECT e.name, COUNT(so.order_id) AS order_count FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id GROUP BY e.name	retail
SELECT category_name, remaining_quantity FROM products	retail
SELECT * FROM salesstatistics WHERE date = '2023-05-05'	retail
SELECT store_name, address, phone FROM stores	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, s.manager_name ORDER BY total_sales_amount DESC	retail
SELECT s.store_name, s.manager_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-01' AND so.total_amount > 5000 ORDER BY so.total_amount DESC	retail
SELECT s.store_name, e.name AS employee_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date = '2023-05-05' AND so.total_amount > 3000	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-09' AND ss.sales_amount > 4000	retail
SELECT s.store_name, SUM(ss.sales_amount) AS total_sales, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT e.name, so.order_id, so.total_amount FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id WHERE e.position = '销售顾问'	retail
SELECT e.name AS employee_name, p.product_name, od.quantity, (od.unit_price - p.purchase_price) * od.quantity AS profit FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-06' AND p.product_name = 'iPad Air'	retail
SELECT so.order_date, e.name FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id	retail
SELECT s.store_name, e.name AS employee_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4' AND so.order_date = '2023-05-02' AND so.total_amount > 10000	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE p.product_name = 'Apple Watch Series 7' AND so.order_date = '2023-05-08' GROUP BY s.store_name, e.name	retail
SELECT s.store_name, SUM(o.total_amount) AS total_sales FROM salesorders o JOIN stores s ON o.store_id = s.store_id GROUP BY s.store_name	retail
SELECT p.product_name, p.remaining_quantity, SUM(od.quantity) AS total_sold FROM products p JOIN orderdetails od ON p.product_id = od.product_id GROUP BY p.product_name, p.remaining_quantity	retail
SELECT pd.product_name, pd.remaining_quantity, SUM(ss.sales_quantity) AS total_sales FROM products pd LEFT JOIN salesstatistics ss ON pd.product_id = ss.product_id GROUP BY pd.product_name, pd.remaining_quantity	retail
SELECT store_name, address FROM stores	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND ss.date = '2023-05-08'	retail
SELECT e.name AS employee_name, s.manager_name AS store_manager_name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON e.store_id = s.store_id WHERE ss.profit > 1000 AND ss.date >= '2023-05-01' AND ss.date < '2023-06-01'	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.sales_quantity) AS total_sales_quantity, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name, e.name ORDER BY total_sales_quantity DESC LIMIT 1	retail
SELECT e.name AS 销售顾问, p.category_name AS 商品类别, SUM(od.quantity * od.unit_price) AS 总销售额 FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON e.store_id = s.store_id WHERE s.store_name = '科技园店' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY e.name, p.category_name HAVING SUM(od.quantity * od.unit_price) > 10000	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name	retail
SELECT e.name AS employee_name, SUM(s.profit) AS total_profit FROM salesstatistics s JOIN employees e ON s.employee_id = e.employee_id JOIN products p ON s.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND s.date >= '2023-05-01' AND s.date <= '2023-05-31' GROUP BY e.name HAVING SUM(s.profit) > 10000	retail
SELECT od.order_detail_id, od.quantity, od.unit_price FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id WHERE so.order_date = '2023-05-08' AND so.total_amount > 10000	retail
SELECT product_id, SUM(sales_amount) FROM salesstatistics GROUP BY product_id	retail
SELECT e.name, s.store_name FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT e.position, s.store_name FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT p.product_name, od.quantity, od.unit_price FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-08'	retail
SELECT s.store_name, AVG(ss.sales_amount) AS avg_sales_amount, AVG(ss.sales_quantity) AS avg_sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT s.store_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-01' AND p.product_name = '戴尔灵越15' AND ss.profit > 3000	retail
SELECT e.name AS employee_name, s.address AS store_address FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '小米电视4A' AND ss.date = '2023-05-01'	retail
SELECT employee_id, SUM(sales_amount) AS total_sales FROM salesstatistics GROUP BY employee_id	retail
SELECT s.store_name, s.manager_name, SUM(ss.sales_quantity) AS total_sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date >= '2023-05-01' AND ss.date < '2023-06-01' GROUP BY s.store_name, s.manager_name ORDER BY total_sales_quantity DESC LIMIT 1	retail
SELECT p.supplier_name, p.sale_price FROM products p WHERE p.product_id = '53a31575-e91a-4784-92ba-6fac56d0aa60'	retail
SELECT e.name, e.position, s.sales_quantity FROM employees e JOIN salesstatistics s ON e.employee_id = s.employee_id JOIN stores st ON e.store_id = st.store_id JOIN products p ON s.product_id = p.product_id WHERE s.date = '2023-05-08' AND st.store_name = '科技中心店' AND p.product_name = 'Nintendo Switch' AND s.sales_quantity > 1	retail
SELECT s.store_name, ss.date, ss.sales_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id	retail
SELECT s.store_name, e.name AS employee_name, e.position FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE p.product_name = 'Apple Watch Series 7' AND ss.date = '2023-05-02'	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, p.purchase_price, p.sale_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id GROUP BY p.product_name, p.purchase_price, p.sale_price	retail
SELECT s.store_name, s.manager_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-09' ORDER BY ss.sales_quantity DESC LIMIT 1	retail
SELECT od.order_detail_id, p.product_name, od.quantity FROM orderdetails od JOIN products p ON od.product_id = p.product_id	retail
SELECT * FROM salesstatistics WHERE product_id = 'd28e1b4b-470b-4205-ba5d-19b6fa096adb'	retail
SELECT s.store_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-09' AND p.product_name = '戴森V11' AND ss.sales_quantity > 1	retail
SELECT s.store_name, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.sales_amount) AS total_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT * FROM orderdetails WHERE order_id = '87fcc51f-c3a3-4aaa-8eda-7d59e189b066'	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND so.total_amount > 10000 AND p.category_name = '电视'	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '小米电视4A' AND so.order_date = '2023-05-05' AND so.total_amount > 2000	retail
SELECT s.store_name, e.name AS employee_name, e.position FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE p.product_name = 'iPad Air' AND ss.date = '2023-05-04'	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-01' GROUP BY s.store_name, s.manager_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales, COUNT(DISTINCT p.category_name) AS category_count FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id GROUP BY s.store_name	retail
SELECT od.order_detail_id, p.product_name, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id ORDER BY od.unit_price DESC LIMIT 1	retail
SELECT e.name AS employee_name, s.store_name, s.manager_name FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id WHERE ss.sales_amount > 10000 AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31'	retail
SELECT ss.date, p.product_name, ss.sales_quantity, ss.sales_amount FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-08'	retail
SELECT s.store_name, s.manager_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE ss.date = '2023-05-08' AND ss.sales_amount > 10000	retail
SELECT p.product_name, p.supplier_name, p.sale_price FROM products p	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '小米电视4A' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND so.total_amount > 10000	retail
SELECT s.store_name, so.total_amount, e.name AS manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date = '2023-05-01' AND so.total_amount > 10000 AND e.position = '销售经理'	retail
SELECT e.name AS employee_name, ss.profit FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-05' AND p.product_name = 'Nintendo Switch' AND s.store_name = '电子城旗舰店'	retail
SELECT s.store_name, s.manager_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE ss.date = '2023-05-05'	retail
SELECT manager_name, store_name, phone FROM stores	retail
SELECT profit FROM salesstatistics WHERE product_id = '3786cc91-4930-4ed9-a816-28d84b397c53'	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-07' AND ss.sales_amount > 10000	retail
SELECT p.product_name, ss.date, ss.sales_quantity FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id	retail
SELECT e.name, e.position, s.store_name FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT description, supplier_name FROM products	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, SUM(od.quantity * od.unit_price) AS total_sales FROM products p JOIN orderdetails od ON p.product_id = od.product_id GROUP BY p.product_name HAVING SUM(od.quantity) > 5	retail
SELECT MAX(order_date) AS latest_order_date FROM salesorders	retail
SELECT employee_id, SUM(sales_quantity) AS total_quantity FROM salesstatistics GROUP BY employee_id	retail
SELECT e.name, so.order_id, so.order_date FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id	retail
SELECT s.store_name, e.name AS employee_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-07' AND p.product_name = '小米电视4A'	retail
SELECT ss.date, ss.sales_quantity, ss.sales_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE s.store_name = '智能生活馆'	retail
SELECT e.name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id GROUP BY e.name	retail
SELECT e.name, s.store_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id GROUP BY e.name, s.store_name	retail
SELECT s.store_name, p.category_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id GROUP BY s.store_name, p.category_name	retail
SELECT p.product_name, SUM(ss.sales_quantity) AS total_sales, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id GROUP BY p.product_name	retail
SELECT so.order_id, od.quantity FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id WHERE so.order_date = '2023-05-03'	retail
SELECT so.order_id, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '电子城旗舰店'	retail
SELECT e.name, s.address FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT ss.date, ss.sales_quantity, ss.profit FROM salesstatistics ss WHERE ss.date = '2023-05-04'	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '小米电视4A' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND so.total_amount > 10000	retail
SELECT e.name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id GROUP BY e.name	retail
SELECT p.product_name, (p.sale_price - p.purchase_price) AS price_difference FROM products p ORDER BY p.product_name	retail
SELECT so.order_id, so.total_amount FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id WHERE e.name = '杨桂荣'	retail
SELECT e.name, s.store_name, SUM(o.total_amount) AS total_sales FROM salesorders o JOIN employees e ON o.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id GROUP BY e.name, s.store_name	retail
SELECT so.order_id, p.product_name FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT DISTINCT e.employee_id, e.name FROM employees e JOIN salesorders s ON e.employee_id = s.employee_id JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE s.order_date = '2023-05-06' AND p.category_name = '游戏机' AND s.total_amount > 5000	retail
SELECT * FROM salesorders WHERE order_date = '2023-05-08'	retail
SELECT s.store_name, e.name AS employee_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-08' AND p.product_name = 'Apple Watch Series 7' AND ss.profit > 1000	retail
SELECT e.name, e.position FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-05' AND p.product_name = 'Apple Watch Series 7' AND p.supplier_name = '戴尔官方旗舰店'	retail
SELECT manager_name FROM stores	retail
SELECT so.order_id, so.order_date, e.name FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date = '2023-05-08'	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND p.supplier_name = '华为官方旗舰店' AND od.unit_price * od.quantity > 10000	retail
SELECT e.name AS employee_name, ss.sales_quantity, ss.profit FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON e.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE s.store_name = '数字大道店' AND p.product_name = '佳能EOS R6' AND ss.date = '2023-05-02'	retail
SELECT store_id, SUM(sales_amount) AS total_sales FROM salesstatistics GROUP BY store_id	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY p.product_name	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-06' AND p.product_name = 'Nintendo Switch' GROUP BY s.store_name, e.name	retail
SELECT e.name, s.store_name FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT so.order_id, s.store_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id	retail
SELECT s.store_name, e.name AS manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON s.store_id = e.store_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND e.position = '销售经理' GROUP BY s.store_name, e.name HAVING SUM(so.total_amount) > 10000	retail
SELECT e.name AS employee_name, ss.sales_quantity, ss.profit FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-07' AND s.store_name = '数码广场店' AND p.product_name = '戴森V11'	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, o.total_amount FROM salesorders o JOIN stores s ON o.store_id = s.store_id JOIN employees e ON o.employee_id = e.employee_id JOIN orderdetails od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE o.order_date = '2023-05-03' AND p.product_name = '小米电视4A' AND o.total_amount > 5000	retail
SELECT * FROM salesorders ORDER BY total_amount DESC LIMIT 1	retail
SELECT supplier_name, description FROM products	retail
SELECT s.store_name, e.name AS employee_name FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-09' AND p.product_name = '戴尔灵越15' AND od.quantity > 1	retail
SELECT p.product_name, ss.sales_quantity, ss.profit FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id ORDER BY p.product_name	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.sales_amount > 10000 AND p.supplier_name = '华为官方旗舰店' AND ss.date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND ss.date = '2023-05-05'	retail
SELECT e.name AS employee_name, s.store_name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON e.store_id = s.store_id WHERE p.product_name = 'iPhone 13' AND ss.date = '2023-05-01'	retail
SELECT s.store_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-08' AND p.product_name = '索尼WH-1000XM4' AND ss.sales_quantity > 1	retail
SELECT s.store_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name	retail
SELECT product_name, remaining_quantity, sale_price FROM products ORDER BY remaining_quantity ASC	retail
SELECT order_id, order_date FROM salesorders WHERE total_amount > 7000	retail
SELECT s.store_name, e.name AS employee_name, SUM(o.total_amount) AS total_sales_amount FROM salesorders o JOIN employees e ON o.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id JOIN orderdetails od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND o.order_date = '2023-05-09' GROUP BY s.store_name, e.name	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-06' ORDER BY ss.sales_quantity DESC LIMIT 1	retail
SELECT s.store_name, s.manager_name, SUM(od.quantity) AS total_sold FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id WHERE p.product_name = '佳能EOS R6' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, s.manager_name ORDER BY total_sold DESC LIMIT 1	retail
SELECT product_name, purchase_price, sale_price FROM products	retail
SELECT order_id, order_date FROM salesorders	retail
SELECT store_id, COUNT(order_id) AS order_count FROM salesorders GROUP BY store_id	retail
SELECT s.store_name, e.name AS employee_name, SUM(o.total_amount) AS total_sales FROM salesorders o JOIN employees e ON o.employee_id = e.employee_id JOIN stores s ON e.store_id = s.store_id JOIN orderdetails d ON o.order_id = d.order_id JOIN products p ON d.product_id = p.product_id WHERE p.product_name = 'iPad Air' AND o.order_date >= '2023-05-01' AND o.order_date < '2023-06-01' GROUP BY s.store_name, e.name HAVING SUM(o.total_amount) > 10000	retail
SELECT s.store_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT product_id, SUM(sales_amount) AS total_sales FROM salesstatistics GROUP BY product_id	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-03' AND ss.sales_amount > 10000	retail
SELECT s.store_name, s.manager_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-01' AND ss.sales_amount > 15000	retail
SELECT od.order_detail_id, p.product_name, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id	retail
SELECT so.order_id, od.quantity FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN stores st ON so.store_id = st.store_id WHERE st.store_name = '智能生活馆'	retail
SELECT store_name, phone, manager_name FROM stores	retail
SELECT ss.date, ss.sales_quantity, s.store_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT so.order_id, e.name FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date = '2023-05-09'	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '小米电视4A' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name, e.name	retail
SELECT e.employee_id, e.name, e.position, s.store_name, p.product_name, p.supplier_name FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN stores s ON so.store_id = s.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-01' AND s.store_name = '创客空间店' AND p.supplier_name = '华为官方旗舰店'	retail
SELECT so.order_id, s.store_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date >= '2023-01-01'	retail
SELECT so.order_id, so.order_date FROM salesorders so WHERE so.total_amount > 10000	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '戴森V11' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31'	retail
SELECT s.store_name, e.name AS employee_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE p.product_name = '华为Mate 40 Pro' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, e.name HAVING SUM(so.total_amount) > 10000	retail
SELECT e.name, od.order_detail_id, od.unit_price FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN employees e ON so.employee_id = e.employee_id	retail
SELECT s.store_name, SUM(ss.sales_amount) AS total_amount, SUM(ss.sales_quantity) AS total_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-03' AND p.product_name = '索尼WH-1000XM4'	retail
SELECT e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales_amount FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON e.store_id = s.store_id WHERE s.store_name = '创新路专卖店' AND p.product_name = '戴森V11' AND so.order_date = '2023-05-09' GROUP BY e.name	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-07' AND p.product_name = 'Apple Watch Series 7' GROUP BY s.store_name, e.name	retail
SELECT address, manager_name FROM stores	retail
SELECT e.name, st.address FROM employees e JOIN stores st ON e.store_id = st.store_id	retail
SELECT od.order_detail_id, s.store_name, od.quantity FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN stores s ON so.store_id = s.store_id WHERE od.product_id = 'e1212b77-ba89-4e54-82a2-4d19b4768470'	retail
SELECT s.store_name, SUM(od.quantity * od.unit_price) AS total_sales_amount FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name HAVING SUM(od.quantity * od.unit_price) > 10000	retail
SELECT e.name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND ss.date >= '2023-05-01' AND ss.date < '2023-06-01' GROUP BY e.name HAVING SUM(ss.profit) > 1000	retail
SELECT employee_id, COUNT(order_id) AS order_count FROM salesorders GROUP BY employee_id	retail
SELECT e.name, e.position, ss.sales_quantity FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-02' AND s.store_name = '数字大道店' AND p.product_name = 'iPhone 13' AND ss.sales_quantity > 1	retail
SELECT s.store_name, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT e.name, COUNT(so.order_id) AS order_count FROM employees e LEFT JOIN salesorders so ON e.employee_id = so.employee_id GROUP BY e.name	retail
SELECT e.name, s.address FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT e.name AS employee_name, s.store_name, s.manager_name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON e.store_id = s.store_id WHERE ss.sales_amount > 10000 AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31'	retail
SELECT DISTINCT e.name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-08' AND p.supplier_name = '华为官方旗舰店' AND p.sale_price > 15000	retail
SELECT * FROM orderdetails WHERE quantity > 1000 OR unit_price * quantity > 1000	retail
SELECT e.name, s.store_name FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT s.store_name, s.manager_name, ss.sales_quantity FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-07' ORDER BY ss.sales_quantity DESC LIMIT 1	retail
SELECT e.name AS employee_name, s.store_name, ss.sales_amount FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON e.store_id = s.store_id WHERE ss.sales_amount > 10000 AND ss.date >= '2023-05-01' AND ss.date < '2023-06-01'	retail
SELECT s.store_name, e.name AS employee_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '小米电视4A' AND so.order_date = '2023-05-03' AND so.total_amount > 5000	retail
SELECT store_name, manager_name FROM stores	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN products p ON od.product_id = p.product_id JOIN stores st ON so.store_id = st.store_id WHERE st.store_name = '电子城旗舰店' GROUP BY p.product_name	retail
SELECT s.store_name, e.name AS employee_name, SUM(so.total_amount) AS total_sales_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND so.order_date = '2023-05-07' GROUP BY s.store_name, e.name	retail
SELECT ss.date, ss.profit FROM salesstatistics ss WHERE ss.date = '2023-05-05'	retail
SELECT s.store_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date = '2023-05-01' AND so.total_amount > 15000 AND e.position = '销售经理'	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Nintendo Switch' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name HAVING SUM(od.quantity * od.unit_price) > 10000	retail
SELECT * FROM salesstatistics ORDER BY sales_amount DESC LIMIT 1	retail
SELECT s.store_name, e.name AS employee_name, SUM(o.total_amount) AS total_sales_amount FROM salesorders o JOIN stores s ON o.store_id = s.store_id JOIN employees e ON o.employee_id = e.employee_id JOIN orderdetails d ON o.order_id = d.order_id JOIN products p ON d.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND o.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, e.name HAVING SUM(o.total_amount) > 10000	retail
SELECT p.product_name, s.store_name FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.sales_amount > 5000	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, s.manager_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '小米电视4A' AND ss.date >= '2023-05-01' AND ss.date < '2023-06-01' GROUP BY s.store_name, e.name HAVING SUM(ss.profit) > 1000	retail
SELECT e.name, s.store_name FROM employees e JOIN stores s ON e.store_id = s.store_id	retail
SELECT stores.store_name, COUNT(salesorders.order_id) AS order_count FROM stores LEFT JOIN salesorders ON stores.store_id = salesorders.store_id GROUP BY stores.store_id	retail
SELECT s.store_name, s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, s.manager_name ORDER BY total_sales DESC LIMIT 1	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-04' AND p.product_name = '华为Mate 40 Pro'	retail
SELECT SUM(s.sales_quantity) AS total_sales_quantity, AVG(p.sale_price) AS average_sale_price FROM salesstatistics s JOIN products p ON s.product_id = p.product_id	retail
SELECT phone FROM stores	retail
SELECT so.order_id FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '未来城店' AND so.total_amount > 10000	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, SUM(od.quantity * (od.unit_price - p.purchase_price)) AS total_profit FROM orderdetails od JOIN products p ON od.product_id = p.product_id GROUP BY p.product_name	retail
SELECT s.store_name, e.name AS employee_name, ss.sales_quantity, ss.sales_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '戴森V11' AND p.supplier_name = '任天堂官方旗舰店' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31'	retail
SELECT s.store_name, e.name AS employee_name FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date = '2023-05-01' AND p.product_name = '戴森V11' AND p.supplier_name = '戴尔官方旗舰店'	retail
SELECT SUM(s.total_amount) FROM salesorders s JOIN employees e ON s.employee_id = e.employee_id WHERE e.name = '郑荣' AND s.order_date = '2023-05-09'	retail
SELECT s.store_name, e.name AS employee_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND ss.profit > 2000 AND ss.date >= '2023-05-01' AND ss.date < '2023-06-01'	retail
SELECT category_name, description FROM products	retail
SELECT e.name, e.position FROM employees e JOIN stores s ON e.store_id = s.store_id WHERE s.store_name = '未来城店'	retail
SELECT e.position, SUM(so.total_amount) AS total_sales FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id GROUP BY e.position	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-07' AND p.product_name = '小米电视4A'	retail
SELECT s.store_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name	retail
SELECT s.store_name, e.name, e.position FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE p.product_name = 'iPhone 13' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' AND p.product_name = '戴森V11' GROUP BY s.store_name, e.name	retail
SELECT so.order_id, so.order_date, e.name FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31'	retail
SELECT salesorders.*, employees.name FROM salesorders JOIN employees ON salesorders.employee_id = employees.employee_id	retail
SELECT s.store_name, e.name AS employee_name, e.position, SUM(od.quantity) AS total_quantity FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, e.name, e.position ORDER BY total_quantity DESC LIMIT 1	retail
SELECT product_name, sale_price - purchase_price AS profit_margin FROM products	retail
SELECT s.store_name, s.manager_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE ss.date = '2023-05-05' AND ss.sales_amount > 10000	retail
SELECT p.product_name, od.quantity, p.sale_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '数码广场店'	retail
SELECT s.store_name, SUM(o.total_amount) AS total_sales FROM stores s JOIN salesorders o ON s.store_id = o.store_id JOIN orderdetails od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '小米电视4A' AND o.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name HAVING SUM(o.total_amount) > 10000	retail
SELECT store_id, SUM(sales_quantity) AS total_quantity, SUM(sales_amount) AS total_amount FROM salesstatistics GROUP BY store_id	retail
SELECT e.name AS employee_name, so.order_id, so.total_amount, p.product_name, p.sale_price FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-02' AND so.total_amount > 10000 AND p.sale_price > 5000	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '佳能EOS R6' AND ss.date = '2023-05-05'	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-05' AND p.product_name = 'iPhone 13' AND so.total_amount > 5000	retail
SELECT e.name, SUM(o.total_amount) AS total_sales FROM salesorders o JOIN employees e ON o.employee_id = e.employee_id WHERE o.order_date = '2023-05-08' GROUP BY e.name	retail
SELECT s.store_name, s.manager_name, ss.sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-01' ORDER BY ss.sales_quantity DESC LIMIT 1	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND so.order_date = '2023-05-02' AND so.total_amount > 15000	retail
SELECT p.product_name, od.quantity, od.unit_price FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id JOIN stores st ON so.store_id = st.store_id JOIN products p ON od.product_id = p.product_id WHERE st.store_name = '电子城旗舰店'	retail
SELECT e.name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-08' AND s.store_name = '智能生活馆' AND p.product_name = '戴森V11' AND ss.profit > 1000	retail
SELECT product_name, remaining_quantity, sale_price FROM products	retail
SELECT phone FROM stores	retail
SELECT so.order_id, od.quantity, od.unit_price FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-07'	retail
SELECT order_date, total_amount FROM salesorders	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-09' AND p.product_name = 'Nintendo Switch' AND ss.sales_quantity > 1	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-06' AND p.product_name = 'iPad Air' AND so.total_amount > 10000	retail
SELECT p.product_name, od.quantity, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id	retail
SELECT store_id, COUNT(order_id) FROM salesorders GROUP BY store_id	retail
SELECT e.name AS employee_name, p.product_name, p.supplier_name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-07' AND s.store_name = '创客空间店' AND p.supplier_name = '苹果官方旗舰店'	retail
SELECT s.store_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-04' AND p.product_name = '华为Mate 40 Pro' AND ss.sales_quantity > 1	retail
SELECT e.name, COUNT(so.order_id) AS total_orders FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY e.name	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date = '2023-05-05' AND ss.sales_amount > 10000	retail
SELECT s.store_name, st.manager_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN stores st ON ss.store_id = st.store_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name, st.manager_name ORDER BY total_profit DESC LIMIT 1	retail
SELECT s.manager_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id GROUP BY s.manager_name	retail
SELECT od.order_detail_id, p.description FROM orderdetails od JOIN products p ON od.product_id = p.product_id WHERE od.order_detail_id = '3e1136b4-2f0e-4434-872f-aa6d6ca0837d'	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_sales FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id JOIN products p ON od.product_id = p.product_id WHERE p.supplier_name = '戴森官方旗舰店' AND so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, e.name HAVING SUM(od.quantity * od.unit_price) > 10000	retail
SELECT s.store_name, e.name AS employee_name, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '戴森V11' AND ss.date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name, e.name	retail
SELECT e.employee_id, e.name, e.position FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-06' AND ss.sales_quantity > 1 AND p.supplier_name = '任天堂官方旗舰店'	retail
SELECT store_id, SUM(sales_quantity) FROM salesstatistics GROUP BY store_id	retail
SELECT store_name, phone, address FROM stores	retail
SELECT total_amount, order_date FROM salesorders	retail
SELECT s.store_name, e.name AS sales_manager_name, p.supplier_name, SUM(od.quantity * od.unit_price) AS total_sales_amount FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-06' AND e.position = '销售经理' GROUP BY s.store_name, e.name, p.supplier_name ORDER BY total_sales_amount DESC LIMIT 1	retail
SELECT products.product_id, products.remaining_quantity, SUM(salesstatistics.sales_quantity) AS total_sold FROM products LEFT JOIN salesstatistics ON products.product_id = salesstatistics.product_id GROUP BY products.product_id	retail
SELECT pd.product_name, SUM(ss.sales_quantity) AS total_sales, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN products pd ON ss.product_id = pd.product_id GROUP BY pd.product_name	retail
SELECT DISTINCT s.store_name FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-08' AND p.product_name = '戴尔灵越15' AND ss.profit > 3000	retail
SELECT order_id, order_date FROM salesorders	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-05' AND p.product_name = '索尼WH-1000XM4' AND ss.sales_quantity > 1	retail
SELECT p.product_name, ss.date FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id WHERE ss.profit > 500	retail
SELECT s.store_name, e.name AS employee_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-06' AND p.product_name = '戴森V11' AND ss.profit > 1000	retail
SELECT store_id, phone, address FROM stores	retail
SELECT order_id, total_amount FROM salesorders WHERE order_date = '2023-05-08'	retail
SELECT p.product_name, p.sale_price FROM products p JOIN orderdetails od ON p.product_id = od.product_id WHERE od.quantity > 1 AND p.sale_price < 5000	retail
SELECT store_id, SUM(sales_quantity) AS total_sales_quantity, SUM(sales_amount) AS total_sales_amount FROM salesstatistics GROUP BY store_id	retail
SELECT s.manager_name, s.phone FROM stores s	retail
SELECT s.store_name, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.sales_amount) AS total_sales FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id GROUP BY s.store_name	retail
SELECT p.product_name, od.unit_price FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '智慧街店'	retail
SELECT s.store_name, SUM(ss.profit) AS total_profit FROM stores s JOIN salesstatistics ss ON s.store_id = ss.store_id WHERE ss.date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY s.store_name ORDER BY total_profit ASC LIMIT 1	retail
SELECT s.store_name, s.manager_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id WHERE so.order_date = '2023-05-02' AND so.total_amount > 5000	retail
SELECT p.product_name, p.sale_price, p.purchase_price FROM products p WHERE p.sale_price > p.purchase_price	retail
SELECT SUM(ss.sales_quantity) AS total_quantity, SUM(ss.sales_amount) AS total_amount FROM salesstatistics ss WHERE ss.date = '2023-05-06'	retail
SELECT p.product_name, SUM(ss.sales_amount) AS total_sales, SUM(ss.profit) AS total_profit FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id GROUP BY p.product_name	retail
SELECT st.store_name, ss.profit FROM salesstatistics ss JOIN stores st ON ss.store_id = st.store_id WHERE ss.date = '2023-05-06'	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4' AND so.order_date = '2023-05-01' AND so.total_amount > 10000	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity, SUM(ss.profit) AS total_profit FROM products p JOIN orderdetails od ON p.product_id = od.product_id JOIN salesstatistics ss ON p.product_id = ss.product_id GROUP BY p.product_name	retail
SELECT e.employee_id, e.name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON e.store_id = s.store_id WHERE ss.date = '2023-05-04' AND p.product_name = '索尼WH-1000XM4' AND ss.sales_quantity > 1 AND s.store_name = '科技园店'	retail
SELECT so.order_id, e.name FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id	retail
SELECT s.store_name, st.profit, s.manager_name FROM salesstatistics st JOIN stores s ON st.store_id = s.store_id WHERE st.date = '2023-05-03' AND st.profit > 1000	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-05' AND p.product_name = '小米电视4A' AND ss.profit > 1000	retail
SELECT s.store_name, COUNT(so.order_id) AS order_count, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id GROUP BY s.store_name	retail
SELECT od.order_detail_id, od.quantity FROM orderdetails od WHERE od.product_id = 'd5f6c8e8-4aad-45a0-94de-2a93093d9d65'	retail
SELECT so.order_date, od.quantity FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id WHERE od.product_id = '95c2d176-638c-4754-b899-c211c736382e'	retail
SELECT e.name, e.position FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-07' AND p.product_name = '戴尔灵越15' AND ss.sales_quantity > 1 AND s.store_name = '数字大道店'	retail
SELECT * FROM salesstatistics ORDER BY profit DESC LIMIT 1	retail
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id GROUP BY s.store_name ORDER BY s.store_name	retail
SELECT p.product_name, p.remaining_quantity, p.sale_price FROM products p	retail
SELECT p.product_name, SUM(od.quantity) AS total_quantity FROM orderdetails od JOIN products p ON od.product_id = p.product_id JOIN salesorders so ON od.order_id = so.order_id WHERE so.order_date = '2023-05-09' GROUP BY p.product_name ORDER BY total_quantity DESC LIMIT 1	retail
SELECT pd.product_name, ss.profit FROM salesstatistics ss JOIN products pd ON ss.product_id = pd.product_id WHERE ss.profit > 2000	retail
SELECT e.name AS employee_name, s.store_name, s.manager_name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON e.store_id = s.store_id WHERE ss.date = '2023-05-04' AND ss.sales_quantity IS NOT NULL	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-06' AND p.product_name = '华为Mate 40 Pro'	retail
SELECT sales_quantity, sales_amount FROM salesstatistics WHERE product_id = '81bfd69e-1240-48bf-a302-313c0255a1c9'	retail
SELECT s.store_name, e.name AS employee_name, e.position FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id WHERE p.product_name = 'iPad Air' AND so.order_date = '2023-05-01'	retail
SELECT * FROM salesorders WHERE order_date = '2023-05-01'	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-06' AND p.product_name = '戴森V11' AND ss.profit > 500	retail
SELECT s.store_name, e.name AS employee_name, SUM(od.quantity * od.unit_price) AS total_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE p.product_name = '索尼WH-1000XM4' AND so.order_date = '2023-05-09' GROUP BY s.store_name, e.name	retail
SELECT s.store_name, e.name AS employee_name, SUM(so.total_amount) AS total_sales_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date = '2023-05-02' AND e.position = '销售顾问' GROUP BY s.store_name, e.name HAVING SUM(so.total_amount) > 5000	retail
SELECT e.name AS employee_name, s.store_name FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id WHERE p.product_name = 'iPhone 13' AND so.order_date = '2023-05-07'	retail
SELECT e.name, e.position FROM employees e	retail
SELECT e.name, e.position, s.profit FROM employees e JOIN salesstatistics s ON e.employee_id = s.employee_id JOIN stores st ON s.store_id = st.store_id WHERE s.date = '2023-05-04' AND st.store_name = '智慧街店' AND s.profit > 3000	retail
SELECT e.name, s.store_name, SUM(so.total_amount) AS total_sales FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN stores s ON e.store_id = s.store_id GROUP BY e.name, s.store_name	retail
SELECT s.store_name, e.name AS employee_name, p.product_name, ss.profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date = '2023-05-08' AND p.product_name = '华为Mate 40 Pro'	retail
SELECT s.store_name, s.manager_name, MAX(ss.profit) AS max_profit FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name, s.manager_name ORDER BY max_profit DESC LIMIT 1	retail
SELECT s.store_name, st.manager_name, SUM(so.total_amount) AS total_sales_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN stores st ON so.store_id = st.store_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' GROUP BY s.store_name, st.manager_name ORDER BY total_sales_amount DESC LIMIT 1	retail
SELECT e.name AS employee_name, SUM(s.total_amount) AS total_order_amount FROM salesorders s JOIN employees e ON s.employee_id = e.employee_id JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE s.order_date >= '2023-05-01' AND s.order_date <= '2023-05-31' AND p.supplier_name = '苹果官方旗舰店' GROUP BY e.name HAVING SUM(s.total_amount) > 15000	retail
SELECT e.name, SUM(so.total_amount) AS total_sales FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id WHERE so.order_date BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY e.name ORDER BY total_sales DESC LIMIT 1	retail
SELECT e.name AS employee_name, p.product_name, ss.sales_quantity FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-09' AND s.store_name = '电子城旗舰店' AND p.supplier_name = '佳能官方旗舰店'	retail
SELECT store_id, SUM(total_amount) AS total_sales FROM salesorders GROUP BY store_id	retail
SELECT od.order_detail_id, p.product_name FROM orderdetails od JOIN products p ON od.product_id = p.product_id WHERE od.quantity = 1	retail
SELECT t.transaction_id, re.event_type, re.status FROM transactions t JOIN risk_events re ON t.event_id = re.event_id	risk_control
SELECT DISTINCT c.customer_id, c.customer_name, t.transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN alerts a ON t.event_id = a.event_id WHERE t.risk_score >= 8 AND DATE(t.transaction_date) = DATE(a.alert_time)	risk_control
SELECT re.event_id, MAX(ra.assessment_date) AS latest_assessment_date, AVG(ra.probability_score) AS average_probability_score FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id GROUP BY re.event_id	risk_control
WITH monitoring_stats AS (SELECT ri.indicator_id, ri.indicator_name, ri.threshold_value, COUNT(*) as total_records, SUM(CASE WHEN rml.is_exceeding_threshold THEN 1 ELSE 0 END) as exceeded_records, AVG(CASE WHEN rml.is_exceeding_threshold THEN (rml.actual_value - ri.threshold_value) / ri.threshold_value * 100 ELSE NULL END) as avg_exceed_percentage FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE EXTRACT(YEAR FROM rml.monitoring_date) = 2023 GROUP BY ri.indicator_id, ri.indicator_name, ri.threshold_value) SELECT indicator_name, (exceeded_records / total_records * 100) as exceed_percentage, avg_exceed_percentage FROM monitoring_stats ORDER BY exceed_percentage DESC	risk_control
SELECT t.transaction_id, t.transaction_type, t.amount, t.risk_score, c.customer_name, c.risk_level FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.risk_score > 80 AND c.risk_level = '高'	risk_control
SELECT alert_type, COUNT(*) AS alert_count FROM alerts GROUP BY alert_type HAVING COUNT(*) >= 5	risk_control
SELECT report_id, author, report_content FROM risk_reports WHERE LENGTH(report_content) > (SELECT AVG(LENGTH(report_content)) FROM risk_reports)	risk_control
SELECT re.event_id, re.event_description, rr.report_id, rr.report_content FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id	risk_control
SELECT re.event_id, re.event_description, rr.report_content FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id WHERE re.occurrence_time >= '2023-06-01' AND re.occurrence_time < '2023-07-01'	risk_control
SELECT DATE_TRUNC('month', alert_time) as month, alert_type, alert_level, COUNT(*) as alert_count FROM alerts GROUP BY DATE_TRUNC('month', alert_time), alert_type, alert_level ORDER BY month DESC, alert_count DESC	risk_control
SELECT ra.assessment_id, ra.mitigation_plan FROM risk_assessments ra WHERE ra.risk_level IN ('中', '高')	risk_control
SELECT re.event_id, re.event_description, rr.approval_status FROM risk_events re LEFT JOIN risk_reports rr ON re.event_id = rr.event_id	risk_control
SELECT ml.log_id, ml.actual_value, ml.is_exceeding_threshold FROM risk_monitoring_logs ml	risk_control
SELECT t.transaction_id, t.risk_score, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.risk_score > 50	risk_control
SELECT risk_level, MIN(registration_date) AS earliest_date, MAX(registration_date) AS latest_date FROM customers GROUP BY risk_level	risk_control
SELECT c.customer_id, c.customer_name, c.credit_score, c.risk_level FROM customers c WHERE c.risk_level = '高' AND c.credit_score < 600	risk_control
SELECT indicator_name, data_source FROM risk_indicators WHERE threshold_value > 50	risk_control
SELECT ra.assessment_id, ra.risk_level, ra.assessor FROM risk_assessments ra ORDER BY ra.risk_level	risk_control
SELECT risk_level, COUNT(*) as customer_count, AVG(credit_score) as avg_credit_score FROM customers GROUP BY risk_level	risk_control
SELECT rr.approved_by, COUNT(rr.report_id) AS report_count FROM risk_reports rr GROUP BY rr.approved_by HAVING COUNT(rr.report_id) > 2	risk_control
SELECT approved_by, COUNT(*) as approved_reports FROM risk_reports WHERE approval_status = '已批准' GROUP BY approved_by	risk_control
SELECT event_id, mitigation_plan, assessment_date FROM risk_assessments	risk_control
SELECT re.event_id, re.event_description, al.audit_id, al.audit_result FROM risk_events re LEFT JOIN audit_logs al ON re.event_id = al.event_id ORDER BY al.audit_time DESC	risk_control
SELECT al.audit_id, al.audit_time, al.audit_result, a.alert_id, a.alert_level FROM audit_logs al JOIN alerts a ON al.alert_id = a.alert_id WHERE al.audit_result = '拒绝' AND a.alert_level = '高'	risk_control
SELECT c.customer_name, t.transaction_id, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.amount > 100000 AND c.risk_level = '高'	risk_control
SELECT audit_type, AVG(EXTRACT(EPOCH FROM (audit_time - created_at)) / 3600) as avg_audit_hours, CAST(SUM(CASE WHEN audit_result = '通过' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*) as pass_rate FROM audit_logs al JOIN risk_events re ON al.event_id = re.event_id GROUP BY audit_type	risk_control
SELECT rc.rule_type, COUNT(*) AS alert_count, AVG(t.risk_score) AS avg_risk_score FROM rule_configurations rc JOIN alerts a ON rc.rule_id = a.rule_id JOIN transactions t ON a.event_id = t.event_id GROUP BY rc.rule_type	risk_control
SELECT re.event_id, re.severity FROM risk_events re WHERE re.occurrence_time < re.created_at	risk_control
SELECT COUNT(*) AS total_count, MAX(monitoring_date) AS latest_monitoring_date FROM risk_monitoring_logs WHERE is_exceeding_threshold = TRUE	risk_control
SELECT rc.rule_id, rc.rule_name, ri.indicator_name, rml.actual_value, ri.threshold_value FROM rule_configurations rc JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rc.is_active = TRUE AND rml.is_exceeding_threshold = TRUE AND ri.update_frequency = '每年'	risk_control
SELECT c.customer_id, c.customer_name, t.amount, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id	risk_control
SELECT a.alert_id, a.alert_content, rr.report_id FROM alerts a JOIN risk_reports rr ON a.event_id = rr.event_id WHERE a.status = '未处理'	risk_control
SELECT ri.indicator_id, ri.indicator_name, COUNT(rml.log_id) as total_logs, SUM(CASE WHEN rml.is_exceeding_threshold THEN 1 ELSE 0 END) as exceeding_count, ROUND(SUM(CASE WHEN rml.is_exceeding_threshold THEN 1 ELSE 0 END) / COUNT(rml.log_id) * 100, 2) as exceeding_percentage FROM risk_indicators ri LEFT JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id GROUP BY ri.indicator_id, ri.indicator_name	risk_control
SELECT re.event_id, ra.assessment_date, ra.mitigation_plan FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id ORDER BY ra.assessment_date DESC	risk_control
SELECT re.event_id, re.event_description FROM risk_events re WHERE re.event_type = '市场风险'	risk_control
SELECT registration_date, credit_score FROM customers WHERE risk_level = '低'	risk_control
SELECT risk_level, COUNT(*) as customer_count, AVG(credit_score) as avg_credit_score FROM customers GROUP BY risk_level	risk_control
SELECT rr.report_id, rr.report_content, rr.author FROM risk_reports rr WHERE rr.approval_status = '待审批'	risk_control
SELECT customer_id, registration_date, risk_level FROM customers	risk_control
SELECT auditor, audit_type, AVG(EXTRACT(EPOCH FROM (audit_time - created_at)) / 3600) AS avg_audit_hours, COUNT(*) FILTER (WHERE audit_result = '通过') * 100.0 / COUNT(*) AS approval_rate, COUNT(*) FILTER (WHERE audit_result = '拒绝') * 100.0 / COUNT(*) AS rejection_rate, COUNT(*) FILTER (WHERE audit_result = '需进一步调查') * 100.0 / COUNT(*) AS further_investigation_rate FROM audit_logs al JOIN risk_events re ON al.event_id = re.event_id GROUP BY auditor, audit_type ORDER BY auditor, audit_type	risk_control
SELECT transaction_type, COUNT(*) FILTER (WHERE status = '成功') as success_count, COUNT(*) FILTER (WHERE status = '失败') as failure_count FROM transactions GROUP BY transaction_type	risk_control
WITH transactions_with_time AS (SELECT c.risk_level, t.transaction_id, t.amount, t.risk_score, CASE WHEN EXTRACT(HOUR FROM t.transaction_date) BETWEEN 6 AND 12 THEN '早上' WHEN EXTRACT(HOUR FROM t.transaction_date) BETWEEN 12 AND 18 THEN '下午' ELSE '晚上' END AS time_period FROM customers c JOIN transactions t ON c.customer_id = t.customer_id) SELECT risk_level, time_period, COUNT(*) AS transaction_count, AVG(amount) AS avg_amount, AVG(risk_score) AS avg_risk_score, SUM(CASE WHEN risk_score > 80 THEN 1 ELSE 0 END) / COUNT(*) AS abnormal_transaction_ratio FROM transactions_with_time GROUP BY risk_level, time_period ORDER BY risk_level, time_period	risk_control
SELECT event_id, event_description FROM risk_events WHERE occurrence_time >= '2023-03-01' AND occurrence_time < '2023-04-01' AND severity = 5 AND status = '已解决'	risk_control
SELECT ri.indicator_name, rml.actual_value, ri.threshold_value, rml.monitoring_date, rml.notes FROM risk_monitoring_logs rml JOIN risk_indicators ri ON rml.indicator_id = ri.indicator_id WHERE rml.is_exceeding_threshold = TRUE ORDER BY rml.monitoring_date DESC, ri.indicator_name	risk_control
SELECT DISTINCT re.event_id FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE rr.report_date >= '2023-01-01' AND rr.report_date < '2024-01-01'	risk_control
SELECT COUNT(DISTINCT t.customer_id) AS high_risk_customer_count, MIN(c.credit_score) AS min_credit_score, MAX(c.credit_score) AS max_credit_score FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.risk_score >= 70	risk_control
SELECT c.customer_id, c.credit_score, t.status FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.status = '处理中'	risk_control
SELECT re.event_type, COUNT(*) as count FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id LEFT JOIN alerts a ON re.event_id = a.event_id AND a.alert_time BETWEEN ra.assessment_date AND ra.assessment_date + INTERVAL '30 days' WHERE ra.risk_level = '高' AND a.alert_id IS NULL GROUP BY re.event_type ORDER BY count DESC	risk_control
SELECT auditor, AVG(audit_time - COALESCE((SELECT MAX(audit_time) FROM audit_logs al2 WHERE al2.related_id = al.related_id AND al2.audit_time < al.audit_time), al.audit_time)) as avg_audit_time, SUM(CASE WHEN audit_result = '通过' THEN 1 ELSE 0 END) / COUNT(*) as approval_rate FROM audit_logs al GROUP BY auditor	risk_control
SELECT c.customer_name, c.risk_level, t.status, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id ORDER BY c.customer_name	risk_control
SELECT customer_name, credit_score, risk_level FROM customers	risk_control
SELECT re.event_id, re.event_description, a.alert_content FROM risk_events re LEFT JOIN alerts a ON re.event_id = a.event_id	risk_control
SELECT a.alert_id, a.alert_content, re.event_id, re.event_description FROM alerts a JOIN risk_events re ON a.event_id = re.event_id WHERE a.status = '处理中'	risk_control
SELECT ri.indicator_id, ml.actual_value FROM risk_indicators ri JOIN risk_monitoring_logs ml ON ri.indicator_id = ml.indicator_id	risk_control
SELECT ra.assessment_id, ra.risk_level, re.event_type FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id	risk_control
SELECT created_at, reporter FROM risk_events ORDER BY created_at DESC LIMIT 1	risk_control
WITH monthly_accuracy AS (SELECT a.assessor, DATE_TRUNC('month', a.assessment_date) as month, COUNT(*) as total_assessments, SUM(CASE WHEN a.risk_level = '高' AND e.severity >= 4 THEN 1 WHEN a.risk_level != '高' AND e.severity < 4 THEN 1 ELSE 0 END) as correct_assessments FROM risk_assessments a JOIN risk_events e ON a.event_id = e.event_id WHERE a.assessment_date >= date('now') - INTERVAL '1 year' GROUP BY a.assessor, DATE_TRUNC('month', a.assessment_date)), accuracy_trend AS (SELECT assessor, month, correct_assessments / total_assessments as accuracy, LAG(correct_assessments / total_assessments) OVER (PARTITION BY assessor ORDER BY month) as prev_accuracy FROM monthly_accuracy) SELECT DISTINCT assessor FROM (SELECT assessor, month, accuracy, accuracy - prev_accuracy as accuracy_change, COUNT(*) OVER (PARTITION BY assessor) as months_count, SUM(CASE WHEN accuracy - prev_accuracy < 0 THEN 1 ELSE 0 END) OVER (PARTITION BY assessor) as declining_months FROM accuracy_trend WHERE prev_accuracy IS NOT NULL) subquery WHERE declining_months > months_count * 0.5	risk_control
SELECT audit_time, audit_result FROM audit_logs	risk_control
SELECT a.alert_id, a.alert_type, t.transaction_id, t.amount, c.customer_name, c.risk_level FROM alerts a JOIN transactions t ON a.event_id = t.event_id JOIN customers c ON t.customer_id = c.customer_id WHERE a.status = '未处理' ORDER BY t.amount DESC LIMIT 10	risk_control
SELECT c.customer_type, c.risk_level, AVG(c.credit_score) AS avg_credit_score, AVG(t.amount) AS avg_transaction_amount FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_type, c.risk_level	risk_control
SELECT e.event_type, AVG(e.severity) as avg_severity, COUNT(a.assessment_id) as assessment_count FROM risk_events e LEFT JOIN risk_assessments a ON e.event_id = a.event_id GROUP BY e.event_type	risk_control
SELECT c.customer_name, t.status, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '低'	risk_control
SELECT report_date, report_type FROM risk_reports	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.amount, c.credit_score, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.amount > (c.credit_score * 2) AND t.risk_score > 50	risk_control
SELECT re.event_description, ra.assessment_date, al.audit_result FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id JOIN audit_logs al ON re.event_id = al.event_id WHERE EXTRACT(YEAR FROM ra.assessment_date) = 2023 AND EXTRACT(YEAR FROM al.audit_time) = 2023	risk_control
SELECT re.event_id, re.severity, rr.approval_status FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id WHERE rr.approval_status = '已批准'	risk_control
SELECT ri.indicator_name, rml.actual_value, rml.is_exceeding_threshold, rml.monitoring_date FROM risk_indicators ri JOIN (SELECT indicator_id, MAX(monitoring_date) as latest_date FROM risk_monitoring_logs GROUP BY indicator_id) latest ON ri.indicator_id = latest.indicator_id JOIN risk_monitoring_logs rml ON latest.indicator_id = rml.indicator_id AND latest.latest_date = rml.monitoring_date	risk_control
SELECT customer_type, AVG(credit_score) as avg_credit_score, COUNT(*) FILTER (WHERE risk_level = '低') as low_risk_count, COUNT(*) FILTER (WHERE risk_level = '中') as medium_risk_count, COUNT(*) FILTER (WHERE risk_level = '高') as high_risk_count FROM customers GROUP BY customer_type	risk_control
SELECT re.event_id, ra.assessment_date FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE ra.impact_score > 5 ORDER BY ra.assessment_date DESC	risk_control
SELECT a.alert_level, COUNT(a.alert_id) AS alert_count FROM alerts a GROUP BY a.alert_level	risk_control
SELECT ml.log_id, ml.actual_value FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id WHERE ml.actual_value > ri.threshold_value	risk_control
SELECT c.customer_id, c.risk_level, t.status FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.status = '成功'	risk_control
SELECT approval_status FROM risk_reports WHERE report_date = '2023-04-08' AND author = '周婷'	risk_control
SELECT c.customer_id, c.customer_name, c.credit_score, c.risk_level FROM customers c	risk_control
SELECT t.amount, t.status FROM transactions t JOIN customers c ON t.customer_id = c.customer_id	risk_control
SELECT c.customer_name, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.amount > 500000 AND c.risk_level = '高'	risk_control
SELECT c.customer_id, c.customer_name, c.credit_score, c.registration_date FROM customers c WHERE c.risk_level = '高'	risk_control
SELECT event_type, AVG(EXTRACT(EPOCH FROM (CASE WHEN status = '已解决' THEN CURRENT_TIMESTAMP ELSE NULL END - created_at))) / 3600 as avg_resolution_time_hours FROM risk_events WHERE status = '已解决' GROUP BY event_type ORDER BY avg_resolution_time_hours DESC	risk_control
SELECT al.audit_type, AVG(al.audit_time - re.occurrence_time) as avg_audit_duration FROM audit_logs al JOIN risk_events re ON al.event_id = re.event_id WHERE EXTRACT(YEAR FROM al.audit_time) = 2023 GROUP BY al.audit_type ORDER BY avg_audit_duration DESC	risk_control
SELECT c.customer_name, c.customer_id, a.alert_id, a.alert_content FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN alerts a ON t.event_id = a.event_id WHERE a.alert_level = '高' AND a.status = '未处理'	risk_control
SELECT created_at, severity FROM risk_events WHERE status = '处理中'	risk_control
SELECT ri.indicator_name, DATE_TRUNC('month', rml.monitoring_date) as month, AVG(rml.actual_value) as avg_value, SUM(CASE WHEN rml.is_exceeding_threshold THEN 1 ELSE 0 END) as threshold_exceeded_count FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id GROUP BY ri.indicator_id, ri.indicator_name, DATE_TRUNC('month', rml.monitoring_date) ORDER BY ri.indicator_name, month	risk_control
SELECT a.alert_id, a.assigned_to FROM alerts a	risk_control
SELECT rc.rule_id, rc.rule_name, COUNT(a.alert_id) as alert_count, MAX(a.alert_time) as last_triggered FROM rule_configurations rc LEFT JOIN alerts a ON rc.rule_id = a.rule_id GROUP BY rc.rule_id, rc.rule_name ORDER BY alert_count DESC	risk_control
SELECT transaction_id, amount FROM transactions WHERE amount > 500000	risk_control
SELECT c.customer_id, c.customer_name, SUM(t.amount) as total_amount, AVG(t.risk_score) as avg_risk_score FROM customers c INNER JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' GROUP BY c.customer_id, c.customer_name	risk_control
SELECT c.customer_name, t.transaction_id, t.amount, t.transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date > '2023-07-13' AND t.amount > 100000	risk_control
SELECT rule_id, rule_name, is_active FROM rule_configurations	risk_control
SELECT c.customer_name, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id ORDER BY t.transaction_date DESC	risk_control
SELECT ra.*, re.severity FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id WHERE ra.risk_level = '高' AND re.severity IN (1, 2)	risk_control
SELECT DATE_TRUNC('month', registration_date) AS registration_month, COUNT(*) AS new_customer_count, AVG(credit_score) AS avg_initial_credit_score FROM customers GROUP BY registration_month ORDER BY registration_month DESC	risk_control
SELECT customer_name, risk_level, credit_score FROM customers	risk_control
SELECT customer_id, customer_name, credit_score FROM customers WHERE credit_score < 600	risk_control
SELECT rr.report_id, rr.report_type, rr.author, re.event_description FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.approval_status = '已拒绝'	risk_control
SELECT c.customer_name, t.amount, t.transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date = '2023-10-30' AND t.amount > 500000	risk_control
SELECT a.alert_id, a.alert_content, re.event_description FROM alerts a JOIN risk_events re ON a.event_id = re.event_id WHERE a.status = '未处理' AND a.alert_level = '高'	risk_control
SELECT customer_type, risk_level, COUNT(*) as customer_count, AVG(credit_score) as avg_credit_score FROM customers GROUP BY customer_type, risk_level ORDER BY customer_type, risk_level	risk_control
SELECT c.customer_name, t.transaction_id, t.amount, t.risk_score, t.transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.amount > 500000 AND t.risk_score > 70 AND EXTRACT(YEAR FROM t.transaction_date) = 2023	risk_control
SELECT rr.report_id, rr.report_date, rr.report_type, rr.author FROM risk_reports rr WHERE rr.approval_status = '已批准'	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date > '2023-03-15' AND t.risk_score > 30	risk_control
SELECT DISTINCT c.customer_name FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_type = '转账' AND t.risk_score < 30	risk_control
SELECT a.alert_id, a.alert_content, re.event_description FROM alerts a JOIN risk_events re ON a.event_id = re.event_id WHERE a.status = '未处理'	risk_control
SELECT re.event_id, re.event_type, re.event_description, re.status, ra.risk_level FROM risk_events re INNER JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE ra.risk_level = '高' AND re.status != '已解决'	risk_control
SELECT DATE_TRUNC('month', last_update_date) as month, COUNT(*) as new_high_risk_customers FROM customers WHERE risk_level = '高' AND last_update_date > registration_date GROUP BY DATE_TRUNC('month', last_update_date) ORDER BY month	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.amount, c.credit_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date > '2023-10-01' AND t.amount > 5000 AND c.credit_score < 600	risk_control
SELECT ra.assessor, ra.mitigation_plan FROM risk_assessments ra WHERE ra.mitigation_plan IS NOT NULL	risk_control
SELECT customer_type, COUNT(customer_id) AS customer_count FROM customers GROUP BY customer_type	risk_control
SELECT alert_id, alert_content, assigned_to FROM alerts WHERE status = '已解决'	risk_control
SELECT rc.rule_id, rc.rule_name, COUNT(a.alert_id) as alert_count, AVG(CASE WHEN a.alert_level = '高' THEN 3 WHEN a.alert_level = '中' THEN 2 ELSE 1 END) as avg_severity FROM rule_configurations rc LEFT JOIN alerts a ON rc.rule_id = a.rule_id AND a.alert_time >= date('now') - INTERVAL '90 days' GROUP BY rc.rule_id, rc.rule_name ORDER BY alert_count DESC, avg_severity DESC	risk_control
SELECT r.rule_id, r.rule_name, r.rule_description, i.indicator_name, i.indicator_description FROM rule_configurations r JOIN risk_indicators i ON r.indicator_id = i.indicator_id WHERE r.is_active = TRUE	risk_control
SELECT re.event_id, re.event_description, rr.report_content FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id WHERE rr.approval_status = '已批准' AND re.severity >= 4	risk_control
SELECT re.event_type, AVG(ra.impact_score) AS average_impact_score, COUNT(re.event_id) AS occurrence_count FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id GROUP BY re.event_type	risk_control
SELECT indicator_id, indicator_name, update_frequency FROM risk_indicators	risk_control
SELECT t.*, c.customer_name, c.risk_level FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.transaction_type LIKE '%贷款%'	risk_control
SELECT DATE_TRUNC('month', occurrence_time) as month, COUNT(*) as new_events FROM risk_events GROUP BY month ORDER BY month	risk_control
SELECT COUNT(*) AS total_count, MAX(monitoring_date) AS latest_monitoring_date FROM risk_monitoring_logs WHERE actual_value < (SELECT threshold_value FROM risk_indicators WHERE risk_indicators.indicator_id = risk_monitoring_logs.indicator_id)	risk_control
SELECT a.event_id, a.alert_content FROM alerts a JOIN risk_events e ON a.event_id = e.event_id	risk_control
SELECT t.transaction_id, t.amount, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.transaction_date BETWEEN '2023-01-01' AND '2023-12-31'	risk_control
SELECT transaction_id, amount FROM transactions WHERE status = '失败'	risk_control
SELECT re.event_type, AVG(ra.impact_score) AS avg_impact_score, AVG(ra.probability_score) AS avg_probability_score, AVG(ra.impact_score * ra.probability_score) AS composite_risk_score FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id GROUP BY re.event_type ORDER BY composite_risk_score DESC	risk_control
SELECT ra.assessment_id, ra.risk_level, re.event_id, re.event_description FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id	risk_control
SELECT * FROM transactions WHERE amount > (SELECT AVG(amount) FROM transactions)	risk_control
SELECT ri.indicator_name, ml.actual_value, ml.notes FROM risk_indicators ri JOIN risk_monitoring_logs ml ON ri.indicator_id = ml.indicator_id WHERE ml.is_exceeding_threshold = FALSE	risk_control
SELECT re.event_id, re.event_description, ra.risk_level FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE ra.risk_level = '高'	risk_control
WITH monthly_events AS (SELECT event_type, DATE_TRUNC('month', occurrence_time) as month, COUNT(*) as event_count FROM risk_events GROUP BY event_type, DATE_TRUNC('month', occurrence_time)), event_stats AS (SELECT event_type, AVG(event_count) as avg_monthly_count, STDDEV(event_count) as stddev_monthly_count FROM monthly_events GROUP BY event_type), monthly_z_scores AS (SELECT me.event_type, me.month, me.event_count, es.avg_monthly_count, es.stddev_monthly_count, (me.event_count - es.avg_monthly_count) / NULLIF(es.stddev_monthly_count, 0) as z_score FROM monthly_events me JOIN event_stats es ON me.event_type = es.event_type) SELECT event_type, EXTRACT(MONTH FROM month) as month_number, EXTRACT(QUARTER FROM month) as quarter, AVG(z_score) as avg_z_score FROM monthly_z_scores GROUP BY event_type, EXTRACT(MONTH FROM month), EXTRACT(QUARTER FROM month) HAVING AVG(z_score) > 1.5 ORDER BY avg_z_score DESC	risk_control
SELECT rml.actual_value, ri.threshold_value FROM risk_monitoring_logs rml JOIN risk_indicators ri ON rml.indicator_id = ri.indicator_id WHERE rml.actual_value < ri.threshold_value	risk_control
SELECT c.customer_id, c.customer_name, SUM(t.amount) AS total_amount, AVG(t.risk_score) AS average_risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.risk_score > 5 GROUP BY c.customer_id, c.customer_name	risk_control
SELECT rr.report_date, rr.report_content, re.event_description FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.report_date = '2023-12-29'	risk_control
SELECT re.event_id, re.event_description, rr.report_id, rr.report_content FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id WHERE rr.approval_status = '已批准'	risk_control
SELECT ri.indicator_id, ri.indicator_name, rc.rule_id, rc.rule_name FROM risk_indicators ri JOIN rule_configurations rc ON ri.indicator_id = rc.indicator_id	risk_control
SELECT a.alert_id, a.alert_content, r.event_type, c.customer_name FROM alerts a JOIN audit_logs al ON a.alert_id = al.alert_id JOIN risk_events r ON a.event_id = r.event_id JOIN transactions t ON r.event_id = t.event_id JOIN customers c ON t.customer_id = c.customer_id WHERE al.auditor = '孙艳' AND al.audit_result = '通过'	risk_control
SELECT re.event_id, re.event_type, rc.rule_name, ra.assessor FROM risk_events re JOIN alerts a ON re.event_id = a.event_id JOIN rule_configurations rc ON a.rule_id = rc.rule_id JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE rc.created_at = ra.assessment_date	risk_control
SELECT alert_id, alert_type, alert_time FROM alerts WHERE status = '未处理' AND assigned_to = '王明' AND alert_time < CURRENT_TIMESTAMP - INTERVAL '7 days'	risk_control
SELECT a.assigned_to AS department, e.severity, AVG(EXTRACT(EPOCH FROM (a.alert_time - e.occurrence_time))/86400) AS avg_handling_time_days FROM alerts a JOIN risk_events e ON a.event_id = e.event_id WHERE a.status = '已解决' GROUP BY a.assigned_to, e.severity ORDER BY department, severity	risk_control
SELECT rr.report_id, rr.report_type, rr.report_content, re.event_id, re.event_type, re.severity FROM risk_reports rr LEFT JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.author = '吴超' AND rr.approved_by = '张庭华'	risk_control
SELECT report_id, report_type, report_date FROM risk_reports WHERE author = '吴超' AND approval_status = '已拒绝' AND approved_by = '李建国'	risk_control
SELECT c.customer_id, c.customer_name, c.credit_score, t.transaction_id, t.amount, t.transaction_date FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND c.credit_score > 700 AND t.transaction_date = (SELECT MAX(transaction_date) FROM transactions WHERE customer_id = c.customer_id)	risk_control
SELECT event_type, status, COUNT(*) AS status_count FROM risk_events GROUP BY event_type, status	risk_control
SELECT re.event_type, AVG(al.audit_time - re.occurrence_time) as avg_processing_time FROM risk_events re JOIN audit_logs al ON re.event_id = al.event_id WHERE al.audit_time = (SELECT MAX(audit_time) FROM audit_logs WHERE event_id = re.event_id) GROUP BY re.event_type	risk_control
SELECT c.*, a.alert_type, a.alert_content FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN alerts a ON t.event_id = a.event_id WHERE a.status = '未处理'	risk_control
SELECT c.customer_name, t.amount, t.risk_score FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.risk_level = '高' AND t.transaction_date >= '2023-10-01' AND t.transaction_date < '2023-11-01'	risk_control
SELECT rc.rule_id, rc.rule_name, rc.rule_type, ri.indicator_name, ri.threshold_value FROM rule_configurations rc JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id WHERE rc.is_active = true	risk_control
SELECT ri.indicator_id, ri.indicator_name, COUNT(*) as threshold_exceeded_count FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.is_exceeding_threshold = true AND rml.monitoring_date >= date('now') - INTERVAL '1 year' GROUP BY ri.indicator_id, ri.indicator_name ORDER BY threshold_exceeded_count DESC	risk_control
SELECT a.alert_type, AVG(al.audit_time - a.alert_time) as avg_processing_time FROM alerts a JOIN audit_logs al ON a.alert_id = al.alert_id WHERE a.status = '已解决' GROUP BY a.alert_type	risk_control
SELECT c.customer_name, t.transaction_id, t.amount, t.transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date > '2023-08-14' AND t.amount > 100000	risk_control
SELECT rr.report_id, rr.approval_status, rr.approved_by FROM risk_reports rr WHERE rr.approval_status IS NOT NULL	risk_control
SELECT re.event_id, re.event_description, a.alert_content FROM risk_events re JOIN alerts a ON re.event_id = a.event_id WHERE re.status = '未处理' AND a.alert_level = '中'	risk_control
SELECT DATE_TRUNC('month', occurrence_time) AS month, event_type, COUNT(*) AS event_count, AVG(severity) AS avg_severity FROM risk_events GROUP BY DATE_TRUNC('month', occurrence_time), event_type ORDER BY month, event_type	risk_control
SELECT al.*, t.transaction_type, t.amount FROM audit_logs al LEFT JOIN transactions t ON al.transaction_id = t.transaction_id WHERE al.auditor = '赵静' AND al.audit_result = '通过'	risk_control
SELECT ra.event_id, re.event_description, ra.assessment_date, ra.risk_level, rr.approval_status FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id LEFT JOIN risk_reports rr ON ra.event_id = rr.event_id WHERE ra.risk_level = '高' AND (rr.approval_status IS NULL OR rr.approval_status != '已批准') ORDER BY ra.assessment_date DESC	risk_control
SELECT ra.assessment_id, ra.event_id, ra.risk_level, ra.impact_score, ra.probability_score, rr.report_content, rr.approval_status FROM risk_assessments ra LEFT JOIN risk_reports rr ON ra.event_id = rr.event_id WHERE ra.risk_level = '高' ORDER BY ra.impact_score DESC, ra.probability_score DESC	risk_control
SELECT DATE_TRUNC('month', registration_date) as month, COUNT(*) as new_high_risk_customers FROM customers WHERE risk_level = '高' GROUP BY DATE_TRUNC('month', registration_date) ORDER BY month	risk_control
SELECT c.customer_id, c.customer_name, COUNT(t.transaction_id) AS transaction_count FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_id	risk_control
SELECT c.risk_level, t.transaction_type, AVG(t.amount) as avg_amount, COUNT(*) / COUNT(DISTINCT c.customer_id) as avg_frequency FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.risk_level, t.transaction_type	risk_control
SELECT ra.assessment_id, ra.impact_score, ra.mitigation_plan FROM risk_assessments ra WHERE ra.impact_score > 5	risk_control
SELECT report_id, author FROM risk_reports	risk_control
SELECT ml.log_id, ml.actual_value, ri.threshold_value FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id WHERE ml.actual_value < ri.threshold_value	risk_control
SELECT * FROM risk_monitoring_logs WHERE is_exceeding_threshold = TRUE	risk_control
SELECT ri.indicator_name, ri.indicator_description, m.is_exceeding_threshold FROM risk_indicators ri JOIN risk_monitoring_logs m ON ri.indicator_id = m.indicator_id	risk_control
SELECT audit_type, AVG(EXTRACT(EPOCH FROM (audit_time - created_at)) / 3600) AS avg_audit_hours, COUNT(*) FILTER (WHERE audit_result = '通过') * 100.0 / COUNT(*) AS approval_rate FROM audit_logs al JOIN risk_events re ON al.event_id = re.event_id GROUP BY audit_type	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.status FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id ORDER BY t.transaction_date DESC	risk_control
SELECT c.customer_name, t.transaction_id, t.amount, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date >= '2023-01-01' AND t.transaction_date < '2024-01-01' AND t.risk_score >= 7 AND t.amount > 100000	risk_control
WITH latest_transactions AS (SELECT DISTINCT ON (customer_id) customer_id, transaction_id, amount, transaction_date, risk_score FROM transactions ORDER BY customer_id, transaction_date DESC) SELECT c.customer_id, c.customer_name, lt.transaction_id, lt.amount, lt.transaction_date, lt.risk_score, a.alert_id, a.alert_type FROM customers c LEFT JOIN latest_transactions lt ON c.customer_id = lt.customer_id LEFT JOIN alerts a ON lt.transaction_id = a.event_id WHERE c.risk_level = '高'	risk_control
SELECT ml.monitoring_date, ri.indicator_name FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id WHERE ml.is_exceeding_threshold = TRUE	risk_control
SELECT re.event_id, ra.mitigation_plan FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE ra.assessment_date > '2023-01-01'	risk_control
SELECT c.customer_name, c.credit_score, a.alert_level, a.status FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN alerts a ON t.event_id = a.event_id WHERE c.credit_score < 600 AND a.alert_level = '高' AND a.status = '未处理' AND EXTRACT(YEAR FROM a.alert_time) = 2023	risk_control
SELECT re.event_description, re.occurrence_time, ra.assessment_date FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE ra.risk_level = '高' AND ra.mitigation_plan LIKE '%系统升级%'	risk_control
SELECT a.assigned_to AS department, a.alert_type, AVG(EXTRACT(EPOCH FROM (a.alert_time - e.occurrence_time))/3600) AS avg_response_time_hours FROM alerts a JOIN risk_events e ON a.event_id = e.event_id WHERE a.status = '已解决' GROUP BY a.assigned_to, a.alert_type	risk_control
SELECT DATE_TRUNC('month', t.transaction_date) AS month, e.event_type, COUNT(*) AS rejected_transactions FROM transactions t JOIN risk_events e ON t.event_id = e.event_id WHERE t.status = '失败' GROUP BY DATE_TRUNC('month', t.transaction_date), e.event_type ORDER BY month, event_type	risk_control
SELECT re.event_id, t.transaction_id FROM risk_events re JOIN transactions t ON re.event_id = t.event_id WHERE t.amount > 50000	risk_control
SELECT log_id, actual_value, notes FROM risk_monitoring_logs WHERE is_exceeding_threshold = TRUE	risk_control
SELECT a.alert_id, a.alert_content FROM alerts a JOIN rule_configurations rc ON a.rule_id = rc.rule_id WHERE rc.rule_id = 'RC9879'	risk_control
SELECT c.customer_id, c.customer_name, ra.risk_level, ra.assessment_date, al.audit_result, al.audit_time FROM customers c LEFT JOIN (SELECT DISTINCT ON (t.customer_id) t.customer_id, ra.risk_level, ra.assessment_date FROM transactions t JOIN risk_assessments ra ON t.event_id = ra.event_id ORDER BY t.customer_id, ra.assessment_date DESC) ra ON c.customer_id = ra.customer_id LEFT JOIN (SELECT DISTINCT ON (t.customer_id) t.customer_id, al.audit_result, al.audit_time FROM transactions t JOIN audit_logs al ON t.transaction_id = al.transaction_id ORDER BY t.customer_id, al.audit_time DESC) al ON c.customer_id = al.customer_id WHERE c.risk_level = '高'	risk_control
SELECT ra.assessment_id, re.event_description, ra.risk_level FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id	risk_control
SELECT re.event_id, re.event_type, rr.report_id, rr.report_date FROM risk_events re LEFT JOIN risk_reports rr ON re.event_id = rr.event_id	risk_control
SELECT re.event_description, ra.risk_level FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id	risk_control
SELECT rml.monitoring_date, ri.indicator_name, rml.notes FROM risk_monitoring_logs rml JOIN risk_indicators ri ON rml.indicator_id = ri.indicator_id WHERE rml.is_exceeding_threshold = TRUE AND rml.monitoring_date >= date('now') - INTERVAL '1 year'	risk_control
SELECT r.report_id, r.report_type, r.report_content, e.event_type, e.severity, a.risk_level, a.impact_score, a.probability_score FROM risk_reports r JOIN risk_events e ON r.event_id = e.event_id LEFT JOIN risk_assessments a ON e.event_id = a.event_id WHERE r.report_content LIKE '%操作风险%' ORDER BY e.severity DESC, r.report_date DESC	risk_control
SELECT ri.indicator_name, ri.threshold_value, rml.actual_value, rml.monitoring_date, COUNT(a.alert_id) as pending_alert_count FROM risk_indicators ri LEFT JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id LEFT JOIN rule_configurations rc ON ri.indicator_id = rc.indicator_id LEFT JOIN alerts a ON rc.rule_id = a.rule_id AND a.status = '未处理' WHERE rml.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id) GROUP BY ri.indicator_id, ri.indicator_name, ri.threshold_value, rml.actual_value, rml.monitoring_date	risk_control
SELECT re.event_description, rr.author FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id WHERE re.occurrence_time >= '2023-01-01' AND re.occurrence_time < '2024-01-01' AND re.severity >= 4	risk_control
SELECT customer_id, registration_date, risk_level FROM customers	risk_control
SELECT rml.* FROM risk_monitoring_logs rml JOIN risk_indicators ri ON rml.indicator_id = ri.indicator_id WHERE ri.indicator_name = '净稳定资金比例##' ORDER BY rml.monitoring_date DESC LIMIT 1	risk_control
SELECT DATE_TRUNC('month', t.transaction_date) as month, c.customer_type, SUM(t.amount) as total_amount, COUNT(DISTINCT re.event_id) as risk_event_count FROM transactions t JOIN customers c ON t.customer_id = c.customer_id LEFT JOIN risk_events re ON t.event_id = re.event_id GROUP BY DATE_TRUNC('month', t.transaction_date), c.customer_type ORDER BY month, c.customer_type	risk_control
SELECT a.alert_content, e.event_description FROM alerts a JOIN risk_events e ON a.event_id = e.event_id WHERE a.status = '未处理'	risk_control
SELECT t.transaction_type, COUNT(t.transaction_id) AS transaction_count FROM transactions t GROUP BY t.transaction_type	risk_control
SELECT e.event_type, e.severity, AVG(ra.impact_score * ra.probability_score) as avg_assessment_score FROM risk_events e JOIN risk_assessments ra ON e.event_id = ra.event_id GROUP BY e.event_type, e.severity ORDER BY e.event_type, e.severity	risk_control
SELECT auditor, COUNT(*) as total_audits, SUM(CASE WHEN audit_result = '通过' THEN 1 ELSE 0 END) / COUNT(*) as pass_rate FROM audit_logs GROUP BY auditor	risk_control
SELECT t.transaction_id, t.amount, a.alert_content, al.audit_comments FROM transactions t JOIN alerts a ON t.event_id = a.event_id JOIN audit_logs al ON t.transaction_id = al.transaction_id WHERE a.alert_level = '高' AND al.audit_result = '通过' AND EXTRACT(YEAR FROM t.transaction_date) = 2023	risk_control
SELECT event_id, event_type, reporter FROM risk_events WHERE status = '未处理'	risk_control
SELECT e.event_id, e.event_type, e.severity AS original_severity, a.risk_level AS assessed_risk_level FROM risk_events e JOIN risk_assessments a ON e.event_id = a.event_id WHERE (e.severity = 5 AND a.risk_level = '中') OR (e.severity = 4 AND a.risk_level = '低')	risk_control
SELECT a.alert_id, a.alert_content, c.customer_id, c.customer_name FROM alerts a JOIN transactions t ON a.event_id = t.event_id JOIN customers c ON t.customer_id = c.customer_id WHERE a.alert_level = '高' AND a.status != '已解决'	risk_control
SELECT transaction_type, COUNT(*) FILTER (WHERE status = '成功') AS success_count, COUNT(*) FILTER (WHERE status = '失败') AS failure_count, SUM(amount) AS total_amount, COUNT(*) FILTER (WHERE status = '成功') / COUNT(*) AS success_ratio, COUNT(*) FILTER (WHERE status = '失败') / COUNT(*) AS failure_ratio FROM transactions GROUP BY transaction_type	risk_control
SELECT report_id, approval_status FROM risk_reports	risk_control
SELECT c.customer_type, CASE WHEN t.risk_score <= 30 THEN '低风险' WHEN t.risk_score <= 70 THEN '中风险' ELSE '高风险' END as risk_category, AVG(t.amount) as avg_amount, COUNT(*) as transaction_count FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_type, risk_category ORDER BY c.customer_type, risk_category	risk_control
SELECT t.transaction_id, e.event_type, c.customer_name FROM transactions t JOIN risk_events e ON t.event_id = e.event_id JOIN customers c ON t.customer_id = c.customer_id WHERE t.transaction_date >= '2023-12-01' AND t.transaction_date < '2024-01-01'	risk_control
SELECT c.customer_name, t.transaction_id, a.alert_id, a.alert_level FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN alerts a ON t.event_id = a.event_id WHERE t.transaction_date > '2023-07-14' AND a.alert_level = '高'	risk_control
SELECT alert_id, status FROM alerts WHERE alert_time >= '2023-10-01' AND alert_time < '2023-11-01'	risk_control
SELECT a.alert_id, a.alert_content, ri.indicator_name, rml.actual_value, rml.monitoring_date FROM alerts a JOIN rule_configurations rc ON a.rule_id = rc.rule_id JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id LEFT JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE a.status = '未处理' AND ri.threshold_value > (SELECT AVG(threshold_value) FROM risk_indicators) AND rml.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id)	risk_control
SELECT c.customer_name, c.risk_level, c.credit_score FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.status = '失败'	risk_control
SELECT r.rule_id, r.rule_name, r.rule_type, i.indicator_name, i.threshold_value FROM rule_configurations r JOIN risk_indicators i ON r.indicator_id = i.indicator_id WHERE r.is_active = TRUE	risk_control
SELECT transaction_id, risk_score FROM transactions ORDER BY risk_score DESC LIMIT 5	risk_control
SELECT re.*, COUNT(rr.report_id) as report_count FROM risk_events re LEFT JOIN risk_reports rr ON re.event_id = rr.event_id GROUP BY re.event_id	risk_control
SELECT ra.risk_level, re.event_description FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id WHERE ra.risk_level = '高'	risk_control
SELECT DATE_TRUNC('month', re.occurrence_time) AS month, re.event_type, SUM(t.amount) AS frozen_amount FROM risk_events re JOIN transactions t ON re.event_id = t.event_id WHERE t.status = '失败' GROUP BY DATE_TRUNC('month', re.occurrence_time), re.event_type ORDER BY month, event_type	risk_control
SELECT event_type, AVG(EXTRACT(EPOCH FROM (CASE WHEN status = '已解决' THEN CURRENT_TIMESTAMP ELSE NULL END - created_at))/3600) as avg_resolution_time_hours FROM risk_events WHERE status = '已解决' GROUP BY event_type ORDER BY avg_resolution_time_hours DESC LIMIT 3	risk_control
SELECT created_at, reporter FROM risk_events	risk_control
SELECT DISTINCT c.customer_id, c.customer_name FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.risk_score > 80 AND t.transaction_date >= datetime('now') - INTERVAL '1 year'	risk_control
WITH monthly_customers AS (SELECT DATE_TRUNC('month', registration_date) as month, COUNT(*) as total_new, SUM(CASE WHEN risk_level = '高' THEN 1 ELSE 0 END) as high_risk_new FROM customers GROUP BY DATE_TRUNC('month', registration_date)) SELECT month, high_risk_new, total_new, ROUND(CAST(high_risk_new AS NUMERIC) / total_new * 100, 2) as high_risk_percentage FROM monthly_customers ORDER BY month DESC	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.status FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.status = '成功'	risk_control
SELECT rr.report_id, rr.report_date, rr.author FROM risk_reports rr WHERE rr.approval_status = '待审批'	risk_control
SELECT ri.indicator_id, ri.indicator_name, AVG(rml.actual_value) as avg_actual_value, SUM(CASE WHEN rml.is_exceeding_threshold THEN 1 ELSE 0 END) as threshold_exceed_count FROM risk_indicators ri LEFT JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id GROUP BY ri.indicator_id, ri.indicator_name	risk_control
SELECT re.event_type, COUNT(re.event_id) AS event_count FROM risk_events re GROUP BY re.event_type ORDER BY event_count DESC	risk_control
SELECT i.indicator_id, i.indicator_name, COUNT(*) as exceed_count FROM risk_indicators i JOIN risk_monitoring_logs l ON i.indicator_id = l.indicator_id WHERE l.is_exceeding_threshold = TRUE AND l.monitoring_date >= date('now') - INTERVAL '1 year' GROUP BY i.indicator_id, i.indicator_name	risk_control
SELECT author, COUNT(*) as rejection_count FROM risk_reports WHERE approval_status = '已拒绝' GROUP BY author HAVING COUNT(*) > 1	risk_control
SELECT al.audit_id, al.auditor, al.audit_result FROM audit_logs al WHERE al.audit_result = '需进一步调查'	risk_control
SELECT * FROM customers ORDER BY last_update_date DESC LIMIT 5	risk_control
SELECT c.customer_type, AVG(t.amount) as avg_transaction_amount, AVG(t.risk_score) as avg_risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_type ORDER BY avg_risk_score DESC	risk_control
SELECT event_type, COUNT(*) as event_count FROM risk_events GROUP BY event_type ORDER BY event_count DESC	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.amount, t.transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.transaction_date = (SELECT MAX(transaction_date) FROM transactions WHERE customer_id = c.customer_id)	risk_control
SELECT ml.log_id, ml.actual_value, ri.indicator_name FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id WHERE ml.is_exceeding_threshold = TRUE	risk_control
SELECT t.transaction_id, t.amount, t.risk_score FROM transactions t WHERE t.risk_score > 30	risk_control
SELECT t.transaction_id, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.amount > 500000	risk_control
SELECT re.event_id, re.event_type, re.event_description, re.severity, re.status, rr.report_id, rr.report_type, rr.report_content FROM risk_events re LEFT JOIN risk_reports rr ON re.event_id = rr.event_id WHERE re.severity IN (4, 5) AND re.occurrence_time >= '2023-01-01'	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高'	risk_control
SELECT re.event_id, rr.approval_status FROM risk_events re LEFT JOIN risk_reports rr ON re.event_id = rr.event_id WHERE re.occurrence_time >= '2023-10-01' AND re.occurrence_time < '2023-11-01'	risk_control
SELECT * FROM alerts WHERE rule_id = 'RC0222'	risk_control
SELECT customer_type, risk_level, AVG(credit_score) as avg_credit_score FROM customers GROUP BY customer_type, risk_level ORDER BY customer_type, risk_level	risk_control
SELECT ri.indicator_id, ri.indicator_name, rml.actual_value, ri.threshold_value, rml.is_exceeding_threshold FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id)	risk_control
SELECT c.risk_level, COUNT(DISTINCT c.customer_id) as customer_count, AVG(t.amount) as avg_transaction_amount, COUNT(t.transaction_id) * 1.0 / COUNT(DISTINCT c.customer_id) as avg_transaction_frequency FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id AND t.transaction_date >= date('now') - INTERVAL '1 month' GROUP BY c.risk_level	risk_control
SELECT r.report_id, r.report_type, r.report_content, e.event_description FROM risk_reports r JOIN risk_events e ON r.event_id = e.event_id WHERE r.approval_status = '已拒绝' AND r.approved_by = '张庭华'	risk_control
SELECT c.customer_name, t.transaction_id, t.risk_score, re.event_type FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN risk_events re ON t.event_id = re.event_id WHERE t.risk_score > 70 AND EXTRACT(YEAR FROM t.transaction_date) = 2023	risk_control
SELECT t.transaction_id, t.status, a.alert_level FROM transactions t JOIN alerts a ON t.event_id = a.event_id WHERE a.alert_level = '高'	risk_control
SELECT r.rule_id, r.rule_name, r.rule_type, i.indicator_name, i.threshold_value FROM rule_configurations r LEFT JOIN risk_indicators i ON r.indicator_id = i.indicator_id WHERE r.is_active = TRUE ORDER BY r.rule_type, i.indicator_name	risk_control
SELECT ml.log_id, ml.actual_value, ri.threshold_value FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id WHERE ml.actual_value < ri.threshold_value	risk_control
SELECT ri.indicator_name, rm.actual_value, ri.threshold_value, rc.rule_name FROM risk_monitoring_logs rm JOIN risk_indicators ri ON rm.indicator_id = ri.indicator_id JOIN rule_configurations rc ON ri.indicator_id = rc.indicator_id WHERE rm.is_exceeding_threshold = TRUE	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.amount > 500	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_type, SUM(t.amount) as total_amount, AVG(t.risk_score) as avg_risk_score FROM customers c INNER JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_id, c.customer_name, t.transaction_type	risk_control
SELECT indicator_name, threshold_value FROM risk_indicators ORDER BY threshold_value DESC LIMIT 1	risk_control
SELECT a.alert_id, r.rule_name FROM alerts a JOIN rule_configurations r ON a.rule_id = r.rule_id	risk_control
SELECT ml.log_id, ri.indicator_name FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id	risk_control
SELECT a.alert_id, a.alert_content, re.event_description FROM alerts a JOIN risk_events re ON a.event_id = re.event_id	risk_control
SELECT c.customer_id, c.customer_name, re.event_id, re.event_type, t.transaction_id, t.amount, al.audit_id, al.audit_result FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN risk_events re ON t.event_id = re.event_id LEFT JOIN audit_logs al ON re.event_id = al.event_id WHERE c.risk_level = '高'	risk_control
SELECT event_type, COUNT(*) AS event_count FROM risk_events GROUP BY event_type HAVING COUNT(*) >= 3	risk_control
SELECT created_at, is_active FROM rule_configurations	risk_control
SELECT report_content FROM risk_reports WHERE author = '刘芳' AND approval_status = '已批准'	risk_control
WITH current_values AS (SELECT indicator_id, actual_value FROM risk_monitoring_logs WHERE monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs)), last_year_values AS (SELECT indicator_id, actual_value as last_year_value FROM risk_monitoring_logs WHERE monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE monitoring_date <= date('now') - INTERVAL '1 year')) SELECT i.indicator_id, i.indicator_name, cv.actual_value as current_value, lv.last_year_value, CASE WHEN lv.last_year_value = 0 THEN NULL ELSE (cv.actual_value - lv.last_year_value) * 100.0 / lv.last_year_value END as change_percentage FROM risk_indicators i LEFT JOIN current_values cv ON i.indicator_id = cv.indicator_id LEFT JOIN last_year_values lv ON i.indicator_id = lv.indicator_id	risk_control
SELECT alert_type, AVG(CASE WHEN alert_level = '低' THEN 1 WHEN alert_level = '中' THEN 2 WHEN alert_level = '高' THEN 3 END) AS avg_alert_level, COUNT(*) AS alert_count FROM alerts WHERE status = '已解决' GROUP BY alert_type	risk_control
SELECT ri.indicator_id, ri.indicator_name, rml.actual_value FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.is_exceeding_threshold = TRUE ORDER BY rml.monitoring_date DESC	risk_control
SELECT a.assigned_to AS department, COUNT(*) AS alert_count, AVG(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - a.alert_time))/3600) AS avg_handling_time_hours FROM alerts a WHERE a.status = '已解决' GROUP BY a.assigned_to	risk_control
SELECT AVG(actual_value) FROM risk_monitoring_logs WHERE notes LIKE '%审查%'	risk_control
SELECT audit_result FROM audit_logs WHERE transaction_id = 'TR7412'	risk_control
SELECT c.customer_id, c.customer_name, t.status FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date = (SELECT MAX(t2.transaction_date) FROM transactions t2 WHERE t2.customer_id = c.customer_id)	risk_control
SELECT risk_level, AVG(credit_score) as avg_credit_score FROM customers GROUP BY risk_level	risk_control
SELECT audit_result, audit_comments FROM audit_logs	risk_control
SELECT ra.assessment_id, ra.risk_level, ra.impact_score, ra.probability_score, re.event_id, re.event_type, re.event_description FROM risk_assessments ra INNER JOIN risk_events re ON ra.event_id = re.event_id WHERE ra.assessor = '黄晓' AND ra.risk_level = '中'	risk_control
SELECT event_description, severity FROM risk_events	risk_control
SELECT * FROM risk_monitoring_logs WHERE is_exceeding_threshold = TRUE	risk_control
SELECT re.event_id, a.alert_content FROM risk_events re JOIN alerts a ON re.event_id = a.event_id WHERE re.event_type = '合规风险' AND a.status = '未处理'	risk_control
SELECT re.event_id, al.audit_result FROM risk_events re LEFT JOIN audit_logs al ON re.event_id = al.event_id	risk_control
SELECT e.event_description, a.assessor FROM risk_events e JOIN risk_assessments a ON e.event_id = a.event_id WHERE a.risk_level = '高' AND a.mitigation_plan LIKE '%系统升级%'	risk_control
SELECT m.log_id, m.actual_value FROM risk_monitoring_logs m WHERE m.indicator_id = 'RI1779'	risk_control
SELECT assessment_id, mitigation_plan FROM risk_assessments	risk_control
SELECT a.alert_content, re.event_description FROM alerts a JOIN risk_events re ON a.event_id = re.event_id WHERE a.alert_level = '高'	risk_control
SELECT report_id, report_type, approval_status FROM risk_reports WHERE event_id = 'RE5323'	risk_control
SELECT re.event_description, t.transaction_id, t.status FROM risk_events re JOIN transactions t ON re.event_id = t.event_id WHERE re.status = '未处理'	risk_control
SELECT alert_content, alert_time, assigned_to FROM alerts WHERE alert_level = '高' AND status = '未处理' ORDER BY alert_time DESC	risk_control
SELECT event_id, status FROM risk_events WHERE reporter = '周健'	risk_control
SELECT c.customer_id, c.customer_name, COUNT(*) as high_risk_transactions, AVG(t.amount) as avg_transaction_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.risk_score > 80 AND t.transaction_date >= date('now') - INTERVAL '1 year' GROUP BY c.customer_id, c.customer_name ORDER BY high_risk_transactions DESC, avg_transaction_amount DESC LIMIT 1	risk_control
SELECT t.transaction_id, t.amount, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.amount > 100000	risk_control
SELECT c.risk_level, t.transaction_type, AVG(t.amount) as avg_amount, COUNT(*) / COUNT(DISTINCT c.customer_id) as avg_frequency FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.risk_level, t.transaction_type ORDER BY c.risk_level, avg_amount DESC	risk_control
SELECT al.audit_time, al.audit_comments FROM audit_logs al WHERE al.audit_result = '需进一步调查'	risk_control
SELECT e.event_id, e.event_type, r.report_id, r.report_type, a.assessment_id, a.risk_level FROM risk_events e LEFT JOIN risk_reports r ON e.event_id = r.event_id LEFT JOIN risk_assessments a ON e.event_id = a.event_id WHERE e.reporter = '刘静'	risk_control
SELECT re.event_id, re.event_type, re.created_at FROM risk_events re WHERE re.occurrence_time BETWEEN '2023-03-01' AND '2023-03-31'	risk_control
SELECT a.*, e.event_type, e.event_description FROM alerts a JOIN risk_events e ON a.event_id = e.event_id WHERE a.status = '未处理'	risk_control
SELECT * FROM alerts WHERE alert_type = '合规违规'	risk_control
SELECT assessor, COUNT(*) as assessment_count, AVG(CASE WHEN risk_level = '高' THEN 3 WHEN risk_level = '中' THEN 2 WHEN risk_level = '低' THEN 1 END) as avg_risk_level FROM risk_assessments GROUP BY assessor	risk_control
SELECT c.risk_level, COUNT(DISTINCT c.customer_id) as customer_count, SUM(t.amount) as total_amount, AVG(t.amount) as avg_amount, COUNT(t.transaction_id) as transaction_count FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id WHERE EXTRACT(YEAR FROM t.transaction_date) = 2023 GROUP BY c.risk_level ORDER BY c.risk_level	risk_control
SELECT ri.indicator_id, ml.actual_value FROM risk_indicators ri JOIN risk_monitoring_logs ml ON ri.indicator_id = ml.indicator_id ORDER BY ml.monitoring_date DESC	risk_control
SELECT auditor, AVG(EXTRACT(EPOCH FROM (audit_time - a.alert_time))/3600) as avg_audit_hours, SUM(CASE WHEN audit_result = '通过' THEN 1 ELSE 0 END) / COUNT(*) as approval_rate FROM audit_logs al JOIN alerts a ON al.alert_id = a.alert_id GROUP BY auditor	risk_control
SELECT rr.report_id, rr.author, rr.report_content FROM risk_reports rr WHERE rr.approval_status = '待审批'	risk_control
SELECT transaction_type, SUM(amount) AS total_amount FROM transactions GROUP BY transaction_type	risk_control
SELECT assessment_id, event_id FROM risk_assessments WHERE assessor = '林波'	risk_control
SELECT c.customer_name, c.credit_score, r.severity FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN risk_events r ON t.event_id = r.event_id WHERE c.credit_score < 700 AND r.severity = 5	risk_control
SELECT registration_date, risk_level FROM customers	risk_control
SELECT rml.log_id, rml.actual_value, ri.indicator_name, ri.threshold_value, ri.indicator_description FROM risk_monitoring_logs rml INNER JOIN risk_indicators ri ON rml.indicator_id = ri.indicator_id WHERE rml.is_exceeding_threshold = TRUE	risk_control
SELECT author, COUNT(*) as report_count FROM risk_reports WHERE approval_status = '已批准' GROUP BY author HAVING COUNT(*) > 5 ORDER BY report_count DESC	risk_control
SELECT a.alert_id, a.alert_type, a.alert_content, re.event_id, re.event_type, c.customer_id, c.customer_name FROM alerts a LEFT JOIN risk_events re ON a.event_id = re.event_id LEFT JOIN transactions t ON re.event_id = t.event_id LEFT JOIN customers c ON t.customer_id = c.customer_id WHERE a.alert_level = '高' AND a.status != '已解决'	risk_control
SELECT SUM(amount) FROM transactions WHERE transaction_date >= '2023-10-01' AND transaction_date < '2023-11-01' AND status = '成功'	risk_control
SELECT i.indicator_name, l.monitoring_date, l.actual_value, a.alert_id, a.alert_level, a.alert_content FROM risk_indicators i JOIN risk_monitoring_logs l ON i.indicator_id = l.indicator_id LEFT JOIN alerts a ON l.log_id = a.rule_id WHERE i.threshold_value < l.actual_value ORDER BY l.monitoring_date DESC	risk_control
SELECT customer_id, customer_name, risk_level FROM customers	risk_control
SELECT MAX(impact_score) FROM risk_assessments WHERE assessor IS NULL	risk_control
SELECT re.event_id, re.event_description, re.severity, ra.risk_level, ra.impact_score, ra.probability_score, rr.report_content, rr.approval_status, al.audit_result, al.audit_comments FROM risk_events re LEFT JOIN risk_assessments ra ON re.event_id = ra.event_id LEFT JOIN risk_reports rr ON re.event_id = rr.event_id LEFT JOIN audit_logs al ON re.event_id = al.event_id ORDER BY re.created_at DESC, re.severity DESC	risk_control
SELECT report_id, report_date, report_type, author, approval_status FROM risk_reports	risk_control
SELECT assessment_id, risk_level, assessor FROM risk_assessments	risk_control
SELECT assessment_date, risk_level, COUNT(*) AS risk_level_count FROM risk_assessments GROUP BY assessment_date, risk_level ORDER BY assessment_date, risk_level	risk_control
WITH alert_stats AS (SELECT alert_type, COUNT(*) as total_alerts, SUM(CASE WHEN status = '已解决' THEN 1 ELSE 0 END) as resolved_alerts, AVG(CASE WHEN status = '已解决' THEN EXTRACT(EPOCH FROM (SELECT MAX(audit_time) FROM audit_logs WHERE alert_id = alerts.alert_id) - alert_time) / 3600 ELSE NULL END) as avg_resolution_time FROM alerts GROUP BY alert_type) SELECT alert_type, avg_resolution_time, (resolved_alerts / total_alerts) * 100 as resolution_rate FROM alert_stats	risk_control
SELECT customer_type, AVG(credit_score) as avg_credit_score, COUNT(CASE WHEN risk_level = '低' THEN 1 END) as low_risk_count, COUNT(CASE WHEN risk_level = '中' THEN 1 END) as medium_risk_count, COUNT(CASE WHEN risk_level = '高' THEN 1 END) as high_risk_count FROM customers GROUP BY customer_type	risk_control
SELECT DATE_TRUNC('month', occurrence_time) as month, COUNT(*) as new_events, AVG(severity) as avg_severity FROM risk_events WHERE EXTRACT(YEAR FROM occurrence_time) = 2023 GROUP BY DATE_TRUNC('month', occurrence_time) ORDER BY month	risk_control
SELECT re.event_id, re.event_description, re.severity, rr.report_id FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id WHERE re.severity = 5	risk_control
SELECT report_id, approval_status FROM risk_reports WHERE event_id = 'RE2524'	risk_control
SELECT c.risk_level, COUNT(DISTINCT c.customer_id) as customer_count, AVG(c.credit_score) as avg_credit_score, SUM(t.amount) as total_transaction_amount FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.risk_level	risk_control
SELECT ri.indicator_id, ri.indicator_name, ri.threshold_value, rml.actual_value, rml.monitoring_date, rc.rule_id, rc.rule_name, rc.rule_condition FROM risk_indicators ri LEFT JOIN (SELECT DISTINCT ON (indicator_id) * FROM risk_monitoring_logs ORDER BY indicator_id, monitoring_date DESC) rml ON ri.indicator_id = rml.indicator_id LEFT JOIN rule_configurations rc ON ri.indicator_id = rc.indicator_id	risk_control
SELECT event_type, AVG(EXTRACT(EPOCH FROM (SELECT MIN(assessment_date) FROM risk_assessments WHERE event_id = risk_events.event_id) - created_at) / 3600) AS avg_processing_time_hours FROM risk_events WHERE status = '已解决' GROUP BY event_type ORDER BY avg_processing_time_hours DESC	risk_control
SELECT ra.assessment_id, re.event_description FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id	risk_control
SELECT ml.monitoring_date, ml.actual_value FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id WHERE ml.actual_value > ri.threshold_value	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.amount > 100000	risk_control
SELECT re.event_id, t.transaction_id FROM risk_events re JOIN transactions t ON re.event_id = t.event_id WHERE t.status = '成功'	risk_control
SELECT auditor, COUNT(*) as audit_count, AVG(EXTRACT(EPOCH FROM (audit_time - (SELECT transaction_date FROM transactions WHERE transactions.transaction_id = audit_logs.transaction_id)))/3600) as avg_audit_time_hours FROM audit_logs WHERE audit_time >= datetime('now') - INTERVAL '1 year' GROUP BY auditor	risk_control
SELECT ra.assessment_id, ra.mitigation_plan FROM risk_assessments ra WHERE ra.impact_score > 5	risk_control
WITH monthly_stats AS (SELECT DATE_TRUNC('month', occurrence_time) AS month, COUNT(*) AS event_count, AVG(severity) AS avg_severity FROM risk_events GROUP BY month) SELECT current.month, current.event_count, current.avg_severity, ROUND((current.event_count - prev.event_count) / prev.event_count * 100, 2) AS count_change_percent, ROUND((current.avg_severity - prev.avg_severity) / prev.avg_severity * 100, 2) AS severity_change_percent FROM monthly_stats current LEFT JOIN monthly_stats prev ON current.month = prev.month + INTERVAL '1 month' ORDER BY current.month DESC	risk_control
SELECT c.customer_type, AVG(t.amount) as avg_amount, COUNT(t.transaction_id) as transaction_count FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_type	risk_control
SELECT re.event_id, re.event_type, ra.risk_level, a.alert_content, a.status FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id JOIN alerts a ON re.event_id = a.event_id WHERE ra.risk_level = '高' AND a.status != '已解决'	risk_control
SELECT re.event_id, re.event_type, re.event_description, ra.risk_level, ra.mitigation_plan FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE ra.risk_level = '高' AND ra.mitigation_plan LIKE '%系统升级%'	risk_control
SELECT r.report_id, r.report_type, r.approval_status, e.event_type, e.severity FROM risk_reports r JOIN risk_events e ON r.event_id = e.event_id WHERE e.severity >= 4	risk_control
SELECT t.transaction_id, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id	risk_control
SELECT rc.rule_name, rc.rule_condition, ri.indicator_name, ri.threshold_value FROM rule_configurations rc JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id WHERE rc.is_active = TRUE AND ri.threshold_value > (SELECT AVG(threshold_value) FROM risk_indicators)	risk_control
SELECT assessment_id, mitigation_plan FROM risk_assessments	risk_control
SELECT rr.author, rr.report_type FROM risk_reports rr WHERE rr.report_type = '专项风险报告'	risk_control
SELECT ri.indicator_name, AVG(rml.actual_value) as avg_actual_value, SUM(CASE WHEN rml.is_exceeding_threshold THEN 1 ELSE 0 END) as threshold_exceeded_count FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id GROUP BY ri.indicator_name	risk_control
SELECT rc.rule_id, rc.rule_name, rc.rule_type, ri.indicator_name FROM rule_configurations rc LEFT JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id WHERE rc.is_active = true	risk_control
SELECT rr.report_content, re.severity FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.author = '孙宇' AND re.event_type = '市场风险'	risk_control
SELECT re.event_description, al.audit_result FROM risk_events re JOIN audit_logs al ON re.event_id = al.event_id WHERE al.audit_result = '通过'	risk_control
SELECT AVG(actual_value) FROM risk_monitoring_logs WHERE notes LIKE '%需要检查%'	risk_control
SELECT a.alert_id, a.alert_content, a.alert_level, e.event_description FROM alerts a JOIN risk_events e ON a.event_id = e.event_id WHERE a.status = '未处理' AND a.alert_level = '高'	risk_control
SELECT c.customer_name, ra.risk_level, ra.mitigation_plan FROM transactions t JOIN customers c ON t.customer_id = c.customer_id JOIN risk_assessments ra ON t.event_id = ra.event_id WHERE t.amount > 100000	risk_control
SELECT COUNT(*), MAX(occurrence_time) FROM risk_events WHERE event_description LIKE '%安全%'	risk_control
SELECT event_id, severity FROM risk_events WHERE event_type = '信用风险'	risk_control
SELECT a.alert_type, a.alert_content, al.audit_time, al.audit_comments FROM alerts a JOIN audit_logs al ON a.alert_id = al.alert_id WHERE al.auditor = '吴超' AND al.audit_result = '通过'	risk_control
SELECT ra.assessment_id, ra.impact_score, ra.probability_score FROM risk_assessments ra	risk_control
WITH monthly_stats AS (SELECT DATE_TRUNC('month', occurrence_time) AS month, COUNT(*) AS total_events, AVG(severity) AS avg_severity, COUNT(*) FILTER (WHERE status = '已解决') AS resolved_events FROM risk_events GROUP BY month) SELECT month, total_events, avg_severity, ROUND(resolved_events / total_events * 100, 2) AS resolution_rate FROM monthly_stats ORDER BY month DESC	risk_control
SELECT ra.assessment_id, ra.risk_level, re.event_type, rr.report_id, rr.approval_status FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id LEFT JOIN risk_reports rr ON re.event_id = rr.event_id WHERE ra.risk_level = '高' AND (rr.approval_status IS NULL OR rr.approval_status = '待审批')	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.amount > 10000	risk_control
SELECT ra.assessment_id, ra.mitigation_plan FROM risk_assessments ra	risk_control
SELECT c.customer_name, t.transaction_id, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date >= '2023-07-01' AND t.transaction_date < '2023-08-01' AND t.risk_score > 70	risk_control
WITH event_assessment_times AS (SELECT re.event_id, re.event_type, re.created_at, MIN(ra.assessment_date) as first_assessment_date, MIN(CASE WHEN ra.mitigation_plan IS NOT NULL THEN ra.assessment_date ELSE NULL END) as mitigation_plan_date FROM risk_events re LEFT JOIN risk_assessments ra ON re.event_id = ra.event_id GROUP BY re.event_id, re.event_type, re.created_at) SELECT event_type, AVG(EXTRACT(EPOCH FROM (first_assessment_date - created_at))/3600) as avg_assessment_time_hours, AVG(EXTRACT(EPOCH FROM (mitigation_plan_date - first_assessment_date))/3600) as avg_mitigation_plan_time_hours FROM event_assessment_times WHERE first_assessment_date IS NOT NULL AND mitigation_plan_date IS NOT NULL GROUP BY event_type	risk_control
SELECT indicator_name, indicator_description FROM risk_indicators WHERE update_frequency = '每日'	risk_control
SELECT ra.assessment_id, ra.risk_level AS assessed_risk, re.severity AS actual_severity, re.event_type FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id WHERE (ra.risk_level = '低' AND re.severity >= 4) OR (ra.risk_level = '高' AND re.severity <= 2)	risk_control
SELECT alert_id, alert_type, alert_content, alert_level, EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - alert_time)) / 3600 AS duration_hours FROM alerts WHERE status = '未处理' AND alert_time <= CURRENT_TIMESTAMP - INTERVAL '48 hours' ORDER BY duration_hours DESC, alert_level DESC	risk_control
SELECT re.event_id, re.event_type, re.severity, rr.report_id, rr.report_type, rr.approval_status FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id WHERE rr.approval_status = '已拒绝' AND re.severity >= 3	risk_control
SELECT re.event_id, rr.report_id, rr.approval_status FROM risk_events re LEFT JOIN risk_reports rr ON re.event_id = rr.event_id	risk_control
SELECT alert_type, COUNT(*) as unresolved_count FROM alerts WHERE status = '未处理' GROUP BY alert_type ORDER BY unresolved_count DESC	risk_control
SELECT DATE_TRUNC('month', occurrence_time) as month, COUNT(*) as event_count, AVG(severity) as avg_severity FROM risk_events GROUP BY month ORDER BY month	risk_control
SELECT alert_id, alert_content FROM alerts WHERE status = '未处理'	risk_control
SELECT e.event_id, e.severity, r.report_content, r.author FROM risk_events e JOIN risk_assessments a ON e.event_id = a.event_id JOIN risk_reports r ON e.event_id = r.event_id WHERE a.risk_level = '高' ORDER BY e.severity DESC	risk_control
SELECT re.event_id, re.event_type, re.event_description, re.severity, a.alert_id, a.alert_type, a.alert_content FROM risk_events re JOIN alerts a ON re.event_id = a.event_id WHERE re.severity = 3 AND a.assigned_to = '吴超'	risk_control
SELECT e.event_id, e.event_type, e.severity, a.audit_id, a.audit_result, a.audit_comments, ra.risk_level, ra.impact_score, ra.probability_score FROM risk_events e LEFT JOIN audit_logs a ON e.event_id = a.event_id LEFT JOIN risk_assessments ra ON e.event_id = ra.event_id WHERE e.status != '已解决' AND e.severity >= 4 AND a.audit_time = (SELECT MAX(audit_time) FROM audit_logs WHERE event_id = e.event_id) AND ra.assessment_date = (SELECT MAX(assessment_date) FROM risk_assessments WHERE event_id = e.event_id)	risk_control
SELECT t.* FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.customer_name = '创联物流有限公司'	risk_control
SELECT rule_id, rule_description FROM rule_configurations	risk_control
SELECT customer_id, customer_name, risk_level FROM customers	risk_control
SELECT re.event_type, AVG(re.severity) as avg_severity, COUNT(ra.assessment_id) as assessment_count FROM risk_events re LEFT JOIN risk_assessments ra ON re.event_id = ra.event_id GROUP BY re.event_type	risk_control
WITH indicator_volatility AS (SELECT indicator_id, (MAX(actual_value) - MIN(actual_value)) / AVG(actual_value) as volatility FROM risk_monitoring_logs WHERE monitoring_date >= date('now') - INTERVAL '1 year' GROUP BY indicator_id ORDER BY volatility DESC LIMIT 5), monthly_alerts AS (SELECT rc.indicator_id, DATE_TRUNC('month', a.alert_time) as alert_month, COUNT(*) as alert_count FROM alerts a JOIN rule_configurations rc ON a.rule_id = rc.rule_id WHERE a.alert_time >= date('now') - INTERVAL '1 year' GROUP BY rc.indicator_id, DATE_TRUNC('month', a.alert_time)) SELECT iv.indicator_id, ri.indicator_name, iv.volatility, AVG(COALESCE(ma.alert_count, 0)) as avg_monthly_alerts FROM indicator_volatility iv JOIN risk_indicators ri ON iv.indicator_id = ri.indicator_id LEFT JOIN monthly_alerts ma ON iv.indicator_id = ma.indicator_id GROUP BY iv.indicator_id, ri.indicator_name, iv.volatility ORDER BY iv.volatility DESC	risk_control
SELECT re.*, ra.assessment_date, ra.risk_level FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE ra.assessor = '梁芳' AND ra.risk_level = '高'	risk_control
SELECT t.transaction_id, ra.impact_score FROM transactions t JOIN risk_assessments ra ON t.event_id = ra.event_id WHERE t.risk_score > 5	risk_control
SELECT DISTINCT t.* FROM transactions t JOIN alerts a ON t.event_id = a.event_id	risk_control
SELECT DISTINCT c.customer_name, t.transaction_id, t.transaction_date, t.risk_score, a.audit_result FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN audit_logs a ON t.transaction_id = a.transaction_id WHERE t.transaction_date >= '2023-01-01' AND t.transaction_date < '2024-01-01' AND c.risk_level = '高' AND a.audit_result = '需进一步调查'	risk_control
SELECT c.customer_name, t.amount, t.transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date > '2023-10-01' AND t.amount > 500000	risk_control
SELECT c.customer_name, c.customer_type, c.credit_score, COUNT(t.transaction_id) as high_risk_transactions FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.risk_score > 80 AND EXTRACT(YEAR FROM t.transaction_date) = 2023 GROUP BY c.customer_id, c.customer_name, c.customer_type, c.credit_score HAVING COUNT(t.transaction_id) > 0 ORDER BY c.credit_score DESC LIMIT 10	risk_control
SELECT c.customer_name, t.transaction_id, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.risk_score > 80 AND EXTRACT(YEAR FROM t.transaction_date) = 2023	risk_control
SELECT * FROM transactions WHERE amount > 10000	risk_control
SELECT DATE_TRUNC('month', occurrence_time) as month, COUNT(*) as event_count, AVG(severity) as avg_severity, SUM(CASE WHEN status = '已解决' THEN 1 ELSE 0 END) / COUNT(*) as resolved_ratio FROM risk_events GROUP BY month ORDER BY month	risk_control
SELECT re.event_type, AVG(EXTRACT(EPOCH FROM (al.audit_time - re.occurrence_time)) / 86400) as avg_resolution_days, CAST(SUM(CASE WHEN re.status = '已解决' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*) as resolution_rate FROM risk_events re LEFT JOIN audit_logs al ON re.event_id = al.event_id GROUP BY re.event_type	risk_control
SELECT c.customer_id, c.customer_name, CASE WHEN t.risk_score <= 30 THEN '低风险' WHEN t.risk_score <= 70 THEN '中风险' ELSE '高风险' END as risk_category, COUNT(*) as transaction_count, SUM(t.amount) as total_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_id, c.customer_name, risk_category	risk_control
SELECT impact_score, probability_score FROM risk_assessments	risk_control
SELECT c.customer_name FROM customers c WHERE c.credit_score < 700 AND c.risk_level = '高'	risk_control
SELECT ra.assessment_id, ra.event_id, ra.risk_level, t.risk_score FROM risk_assessments ra JOIN transactions t ON ra.event_id = t.event_id WHERE ra.assessor = '朱明' AND t.risk_score > 10	risk_control
SELECT DATE_TRUNC('month', registration_date) as month, COUNT(*) as new_customer_count, AVG(credit_score) as avg_credit_score FROM customers GROUP BY month ORDER BY month	risk_control
SELECT rc.rule_id, rc.rule_name, COUNT(a.alert_id) as alert_count FROM rule_configurations rc LEFT JOIN alerts a ON rc.rule_id = a.rule_id GROUP BY rc.rule_id, rc.rule_name ORDER BY alert_count DESC LIMIT 3	risk_control
SELECT e.event_type, AVG(EXTRACT(EPOCH FROM (a.audit_time - e.occurrence_time)) / 3600) as avg_processing_hours, COUNT(DISTINCT ra.assessment_id) as assessment_count, COUNT(DISTINCT a.audit_id) as audit_count FROM risk_events e LEFT JOIN risk_assessments ra ON e.event_id = ra.event_id LEFT JOIN audit_logs a ON e.event_id = a.event_id WHERE e.status = '已解决' GROUP BY e.event_type	risk_control
SELECT rc.rule_name, rc.rule_description, ri.indicator_name, ri.threshold_value FROM rule_configurations rc JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id WHERE rc.is_active = true ORDER BY ri.threshold_value DESC	risk_control
SELECT c.customer_name, c.credit_score, t.transaction_id FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.risk_score > 8	risk_control
SELECT * FROM alerts WHERE status = '处理中' AND alert_level = '高'	risk_control
SELECT AVG(threshold_value) as avg_threshold FROM risk_indicators	risk_control
SELECT approval_status, approved_by FROM risk_reports	risk_control
SELECT rr.report_id, rr.report_date, rr.approved_by FROM risk_reports rr WHERE rr.approval_status = '已拒绝'	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.transaction_type, t.amount, t.risk_score, a.alert_type, a.alert_level FROM customers c JOIN transactions t ON c.customer_id = t.customer_id LEFT JOIN alerts a ON t.event_id = a.event_id WHERE c.risk_level = '高' ORDER BY t.transaction_date DESC, t.risk_score DESC	risk_control
SELECT ri.indicator_id, ri.indicator_name, ml.monitoring_date, ml.actual_value FROM risk_indicators ri JOIN risk_monitoring_logs ml ON ri.indicator_id = ml.indicator_id ORDER BY ml.monitoring_date DESC	risk_control
SELECT e.event_id, e.event_description, r.risk_level FROM risk_events e LEFT JOIN risk_assessments r ON e.event_id = r.event_id WHERE e.occurrence_time >= '2023-01-01' AND e.occurrence_time < '2023-02-01'	risk_control
SELECT ri.indicator_name, rml.actual_value, rml.is_exceeding_threshold FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id)	risk_control
SELECT COUNT(*) FROM risk_monitoring_logs WHERE actual_value <= 0	risk_control
SELECT DATE_TRUNC('month', registration_date) AS month, COUNT(*) AS new_high_risk_customers, AVG(credit_score) AS avg_credit_score FROM customers WHERE risk_level = '高' GROUP BY DATE_TRUNC('month', registration_date) ORDER BY month	risk_control
SELECT c.customer_name, t.transaction_id, t.transaction_type FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_type = '贷款'	risk_control
SELECT indicator_id, indicator_name, indicator_description FROM risk_indicators	risk_control
SELECT c.customer_name, c.risk_level, t.amount, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level IN ('中', '高')	risk_control
SELECT al.alert_id, al.alert_content, re.event_type, rc.rule_name FROM alerts al JOIN risk_events re ON al.event_id = re.event_id JOIN rule_configurations rc ON al.rule_id = rc.rule_id	risk_control
SELECT customer_id, customer_name, risk_level FROM customers ORDER BY credit_score DESC	risk_control
SELECT event_id, severity, status FROM risk_events	risk_control
SELECT t.transaction_id, t.risk_score FROM transactions t JOIN risk_events re ON t.event_id = re.event_id WHERE re.event_id = 'RE5686'	risk_control
WITH monthly_events AS (SELECT DATE_TRUNC('month', occurrence_time) as month, event_type, COUNT(*) as event_count FROM risk_events GROUP BY DATE_TRUNC('month', occurrence_time), event_type) SELECT current.month, current.event_type, current.event_count, previous.event_count as previous_month_count, CASE WHEN previous.event_count = 0 THEN NULL ELSE (current.event_count - previous.event_count) * 100.0 / previous.event_count END as growth_rate FROM monthly_events current LEFT JOIN monthly_events previous ON current.event_type = previous.event_type AND current.month = previous.month + INTERVAL '1 month' ORDER BY current.month DESC, current.event_type	risk_control
SELECT rule_id, indicator_id FROM rule_configurations	risk_control
SELECT approved_by, COUNT(*) as approved_reports FROM risk_reports WHERE approval_status = '已批准' GROUP BY approved_by ORDER BY approved_reports DESC	risk_control
SELECT * FROM alerts WHERE alert_level = '高' AND status = '未处理'	risk_control
SELECT event_type, COUNT(*) AS event_count, MIN(occurrence_time) AS earliest_occurrence, MAX(occurrence_time) AS latest_occurrence FROM risk_events GROUP BY event_type	risk_control
SELECT t.transaction_id, t.amount, re.event_description FROM transactions t JOIN risk_events re ON t.event_id = re.event_id WHERE re.status = '处理中'	risk_control
SELECT report_id, report_content, author FROM risk_reports WHERE report_content LIKE '%合规%'	risk_control
WITH risk_assessment_scores AS (SELECT event_id, AVG(CASE WHEN risk_level = '高' THEN 3 WHEN risk_level = '中' THEN 2 ELSE 1 END) AS avg_risk_score FROM risk_assessments GROUP BY event_id), alert_counts AS (SELECT event_id, COUNT(*) AS alert_count FROM alerts GROUP BY event_id), high_risk_transaction_ratio AS (SELECT customer_id, COUNT(*) FILTER (WHERE risk_score >= 80) * 100.0 / COUNT(*) AS high_risk_ratio FROM transactions GROUP BY customer_id) SELECT c.customer_id, c.customer_name, c.risk_level, COALESCE(ras.avg_risk_score, 0) * 0.5 + COALESCE(ac.alert_count, 0) * 0.3 + COALESCE(hrtr.high_risk_ratio, 0) * 0.002 AS risk_index FROM customers c LEFT JOIN risk_assessment_scores ras ON c.customer_id = ras.event_id LEFT JOIN alert_counts ac ON c.customer_id = ac.event_id LEFT JOIN high_risk_transaction_ratio hrtr ON c.customer_id = hrtr.customer_id ORDER BY risk_index DESC	risk_control
SELECT re.event_id, re.event_type, re.event_description, re.severity, t.transaction_id, t.risk_score FROM risk_events re JOIN transactions t ON re.event_id = t.event_id WHERE t.risk_score > 70 AND re.severity = 5	risk_control
SELECT DISTINCT c.customer_name, c.risk_level, MAX(t.transaction_date) as last_transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN risk_assessments ra ON t.event_id = ra.event_id JOIN alerts a ON t.event_id = a.event_id WHERE ra.risk_level = '高' AND a.alert_level = '高' AND EXTRACT(YEAR FROM ra.assessment_date) = 2023 GROUP BY c.customer_id, c.customer_name, c.risk_level	risk_control
SELECT re.event_type, AVG(al.audit_time - re.created_at) as avg_processing_time FROM risk_events re LEFT JOIN audit_logs al ON re.event_id = al.event_id GROUP BY re.event_type	risk_control
SELECT alert_type, COUNT(*) as alert_count, AVG(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - alert_time))/3600) as avg_processing_time_hours FROM alerts GROUP BY alert_type	risk_control
SELECT a.alert_id, a.alert_type, a.alert_content, a.alert_level, e.event_description, c.customer_name, c.risk_level FROM alerts a JOIN risk_events e ON a.event_id = e.event_id JOIN transactions t ON e.event_id = t.event_id JOIN customers c ON t.customer_id = c.customer_id WHERE a.status = '未处理' ORDER BY a.alert_level DESC, a.alert_time DESC	risk_control
SELECT ra.assessment_id, re.event_id, re.event_description FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id WHERE ra.risk_level = '高' AND ra.mitigation_plan LIKE '%员工培训%'	risk_control
SELECT t.transaction_id, t.amount, t.risk_score FROM transactions t WHERE t.customer_id = 'CU3531'	risk_control
SELECT customer_id, customer_name, risk_level FROM customers WHERE risk_level = '高'	risk_control
SELECT ri.indicator_name, COUNT(*) as threshold_exceeded_count FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.is_exceeding_threshold = true AND EXTRACT(YEAR FROM rml.monitoring_date) = 2023 GROUP BY ri.indicator_id, ri.indicator_name ORDER BY threshold_exceeded_count DESC LIMIT 10	risk_control
SELECT event_id, severity FROM risk_events WHERE occurrence_time = '2023-08-03'	risk_control
SELECT assessment_id, assessor FROM risk_assessments WHERE impact_score < 5	risk_control
SELECT i.indicator_id, i.indicator_name, i.threshold_value, current.actual_value as current_value, max.max_value, min.min_value, exceed.last_exceed_time FROM risk_indicators i LEFT JOIN (SELECT indicator_id, actual_value FROM risk_monitoring_logs WHERE monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs)) current ON i.indicator_id = current.indicator_id LEFT JOIN (SELECT indicator_id, MAX(actual_value) as max_value FROM risk_monitoring_logs GROUP BY indicator_id) max ON i.indicator_id = max.indicator_id LEFT JOIN (SELECT indicator_id, MIN(actual_value) as min_value FROM risk_monitoring_logs GROUP BY indicator_id) min ON i.indicator_id = min.indicator_id LEFT JOIN (SELECT indicator_id, MAX(monitoring_date) as last_exceed_time FROM risk_monitoring_logs WHERE is_exceeding_threshold = TRUE GROUP BY indicator_id) exceed ON i.indicator_id = exceed.indicator_id	risk_control
SELECT c.*, t.transaction_id, t.amount, t.transaction_date FROM customers c LEFT JOIN LATERAL (SELECT * FROM transactions WHERE customer_id = c.customer_id ORDER BY transaction_date DESC LIMIT 1) t ON true WHERE c.risk_level = '高'	risk_control
SELECT re.event_type, re.severity, AVG(EXTRACT(EPOCH FROM (ra.assessment_date - re.occurrence_time))/86400) as avg_assessment_days, SUM(CASE WHEN ra.mitigation_plan IS NOT NULL THEN 1 ELSE 0 END) / COUNT(*) as mitigation_plan_completion_rate FROM risk_events re LEFT JOIN risk_assessments ra ON re.event_id = ra.event_id GROUP BY re.event_type, re.severity ORDER BY re.event_type, re.severity	risk_control
SELECT re.event_id, re.event_description, rr.approval_status FROM risk_events re LEFT JOIN risk_reports rr ON re.event_id = rr.event_id	risk_control
WITH current_values AS (SELECT indicator_id, actual_value, ROW_NUMBER() OVER (PARTITION BY indicator_id ORDER BY monitoring_date DESC) as rn FROM risk_monitoring_logs), thirty_days_ago AS (SELECT indicator_id, actual_value, ROW_NUMBER() OVER (PARTITION BY indicator_id ORDER BY ABS(EXTRACT(EPOCH FROM (monitoring_date - (date('now') - INTERVAL '30 days'))))) as rn FROM risk_monitoring_logs WHERE monitoring_date <= date('now') - INTERVAL '30 days') SELECT ri.indicator_id, ri.indicator_name, cv.actual_value as current_value, tda.actual_value as value_30_days_ago, (cv.actual_value - tda.actual_value) / tda.actual_value * 100 as percent_change FROM risk_indicators ri JOIN current_values cv ON ri.indicator_id = cv.indicator_id AND cv.rn = 1 JOIN thirty_days_ago tda ON ri.indicator_id = tda.indicator_id AND tda.rn = 1	risk_control
SELECT indicator_id, threshold_value, update_frequency FROM risk_indicators	risk_control
SELECT ra.assessment_id, ra.impact_score, re.event_description FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id WHERE ra.impact_score > 7	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.amount, t.transaction_date, t.risk_score FROM customers c JOIN (SELECT customer_id, transaction_id, amount, transaction_date, risk_score, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY transaction_date DESC) as rn FROM transactions) t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.rn <= 5 ORDER BY c.customer_id, t.transaction_date DESC	risk_control
SELECT ml.log_id, ml.monitoring_date, ml.actual_value FROM risk_monitoring_logs ml WHERE ml.monitoring_date BETWEEN '2023-01-01' AND '2023-12-31'	risk_control
SELECT re.event_id, re.event_description, ra.risk_level FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id	risk_control
WITH event_stats AS (SELECT event_type, AVG(EXTRACT(EPOCH FROM (CASE WHEN status = '已解决' THEN CURRENT_TIMESTAMP ELSE NULL END - created_at))/3600) as avg_resolution_time, AVG(EXTRACT(EPOCH FROM (CASE WHEN status = '已解决' THEN CURRENT_TIMESTAMP ELSE NULL END - created_at))/3600) * 100 as avg_cost FROM risk_events WHERE status = '已解决' GROUP BY event_type), overall_avg AS (SELECT AVG(avg_resolution_time) as overall_avg_time, AVG(avg_cost) as overall_avg_cost FROM event_stats) SELECT es.event_type, ROUND(es.avg_resolution_time, 2) as avg_resolution_time_hours, ROUND(es.avg_cost, 2) as avg_cost_yuan FROM event_stats es, overall_avg oa WHERE es.avg_resolution_time > oa.overall_avg_time AND es.avg_cost > oa.overall_avg_cost ORDER BY es.avg_cost DESC	risk_control
SELECT report_id, report_type, author FROM risk_reports WHERE report_type LIKE '%流动性风险%' OR report_content LIKE '%流动性风险%'	risk_control
SELECT c.customer_name, t.transaction_id, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高'	risk_control
SELECT event_type, severity, COUNT(*) as event_count FROM risk_events GROUP BY event_type, severity ORDER BY event_type, severity	risk_control
SELECT e.event_id, e.event_type, a.impact_score, a.probability_score, (a.impact_score + a.probability_score) as total_score FROM risk_events e JOIN risk_assessments a ON e.event_id = a.event_id WHERE a.assessor = '林波' ORDER BY total_score DESC LIMIT 5	risk_control
SELECT DISTINCT c.* FROM customers c JOIN transactions t ON c.customer_id = t.customer_id LEFT JOIN audit_logs al ON c.customer_id = al.related_id WHERE t.transaction_date >= date('now') - INTERVAL '1 year' AND al.audit_id IS NULL	risk_control
SELECT re.event_type, re.severity, COUNT(*) as event_count, AVG(CASE WHEN re.status = '已解决' THEN al.audit_time - re.created_at ELSE NULL END) as avg_resolution_time FROM risk_events re LEFT JOIN audit_logs al ON re.event_id = al.event_id GROUP BY re.event_type, re.severity ORDER BY re.event_type, re.severity	risk_control
SELECT e.event_id, e.event_type, e.severity, a.audit_id, a.auditor, a.audit_result FROM risk_events e LEFT JOIN audit_logs a ON e.event_id = a.event_id WHERE e.status != '已解决' AND e.severity >= 4	risk_control
SELECT re.event_id, re.event_description, ra.assessment_id FROM risk_events re LEFT JOIN risk_assessments ra ON re.event_id = ra.event_id	risk_control
SELECT ri.indicator_id, ri.indicator_name, rml.monitoring_date, rml.actual_value, rml.is_exceeding_threshold, rml.notes FROM risk_indicators ri INNER JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id ORDER BY ri.indicator_id, rml.monitoring_date	risk_control
SELECT DISTINCT c.customer_id, c.customer_name FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN alerts a ON t.event_id = a.event_id WHERE t.risk_score > 90 AND t.transaction_date >= '2023-01-01' AND t.transaction_date < '2024-01-01'	risk_control
SELECT ri.indicator_name, rml.actual_value, rml.monitoring_date, rc.rule_name, rc.rule_condition FROM risk_indicators ri LEFT JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id LEFT JOIN rule_configurations rc ON ri.indicator_id = rc.indicator_id WHERE rml.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id)	risk_control
SELECT t.transaction_id, t.amount, t.transaction_type FROM transactions t WHERE t.risk_score > 70	risk_control
SELECT rr.report_id, re.event_description FROM risk_reports rr LEFT JOIN risk_events re ON rr.event_id = re.event_id	risk_control
SELECT e.event_type, AVG(e.severity) AS avg_severity, AVG(a.assessment_date - e.occurrence_time) AS avg_resolution_time FROM risk_events e LEFT JOIN risk_assessments a ON e.event_id = a.event_id GROUP BY e.event_type	risk_control
SELECT t.transaction_id, t.amount FROM transactions t WHERE t.amount > 300000	risk_control
SELECT rc.rule_name, COUNT(a.alert_id) as alert_count, AVG(al.audit_time - a.alert_time) as avg_resolution_time FROM rule_configurations rc JOIN alerts a ON rc.rule_id = a.rule_id JOIN audit_logs al ON a.alert_id = al.alert_id WHERE a.status = '已解决' AND EXTRACT(YEAR FROM a.alert_time) = 2023 GROUP BY rc.rule_id, rc.rule_name ORDER BY alert_count DESC	risk_control
SELECT t.*, c.risk_level FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.amount > 500000 AND c.risk_level = '高'	risk_control
SELECT c.customer_name, t.transaction_id, t.amount, t.risk_score FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.transaction_date >= '2023-01-01' AND t.transaction_date < '2024-01-01' AND t.risk_score >= 7 AND t.amount > 10000	risk_control
SELECT stddev(amount) FROM transactions WHERE event_id IS NOT NULL	risk_control
SELECT event_id, event_description, severity FROM risk_events	risk_control
SELECT a.alert_id, a.alert_content, a.alert_time, a.assigned_to FROM alerts a JOIN risk_assessments ra ON a.event_id = ra.event_id WHERE a.alert_level = '高' AND a.status = '已解决' AND ra.assessor = '林波'	risk_control
SELECT * FROM risk_reports WHERE author = '吴超'	risk_control
SELECT re.event_id, re.event_type, re.severity FROM risk_events re WHERE re.occurrence_time >= '2023-01-01' AND re.occurrence_time < '2024-01-01'	risk_control
SELECT re.event_description, ra.risk_level, ra.mitigation_plan FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE re.severity = 4	risk_control
SELECT customer_type, AVG(credit_score) AS avg_credit_score, COUNT(*) FILTER (WHERE risk_level = '低') AS low_risk_count, COUNT(*) FILTER (WHERE risk_level = '中') AS medium_risk_count, COUNT(*) FILTER (WHERE risk_level = '高') AS high_risk_count FROM customers GROUP BY customer_type ORDER BY avg_credit_score DESC	risk_control
SELECT ra.assessment_id, al.audit_result FROM risk_assessments ra JOIN audit_logs al ON ra.event_id = al.event_id WHERE al.audit_result = '通过'	risk_control
SELECT c.customer_id, c.customer_name, COUNT(t.transaction_id) as transaction_count FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_id, c.customer_name	risk_control
SELECT rc.rule_type, c.risk_level, COUNT(a.alert_id) AS alert_count, AVG(t.risk_score) AS avg_risk_score FROM rule_configurations rc JOIN alerts a ON rc.rule_id = a.rule_id JOIN transactions t ON a.event_id = t.event_id JOIN customers c ON t.customer_id = c.customer_id GROUP BY rc.rule_type, c.risk_level ORDER BY rc.rule_type, alert_count DESC	risk_control
WITH latest_logs AS (SELECT DISTINCT ON (indicator_id) * FROM risk_monitoring_logs ORDER BY indicator_id, monitoring_date DESC) SELECT ll.log_id, ll.actual_value, ri.indicator_name, ri.threshold_value, rc.rule_name, rc.rule_condition FROM latest_logs ll INNER JOIN risk_indicators ri ON ll.indicator_id = ri.indicator_id LEFT JOIN rule_configurations rc ON ri.indicator_id = rc.indicator_id	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.amount, t.risk_score, t.transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.transaction_id IN (SELECT transaction_id FROM (SELECT transaction_id, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY transaction_date DESC) as rn FROM transactions) sub WHERE rn <= 5) ORDER BY c.customer_id, t.transaction_date DESC	risk_control
SELECT al.audit_id, al.auditor FROM audit_logs al	risk_control
SELECT re.event_id, MIN(re.created_at) as earliest_created_at, re.severity FROM risk_events re GROUP BY re.event_id, re.severity	risk_control
SELECT indicator_name, threshold_value FROM risk_indicators WHERE update_frequency = '每年' AND threshold_value > 20	risk_control
SELECT * FROM risk_reports WHERE report_date = '2023-05-25'	risk_control
SELECT re.event_id, ra.assessment_id FROM risk_events re LEFT JOIN risk_assessments ra ON re.event_id = ra.event_id	risk_control
SELECT ri.indicator_id, ri.indicator_name, ml.actual_value, ml.is_exceeding_threshold FROM risk_indicators ri JOIN risk_monitoring_logs ml ON ri.indicator_id = ml.indicator_id WHERE ml.is_exceeding_threshold = TRUE	risk_control
SELECT re.event_id, re.event_description, COUNT(rr.report_id) AS report_count FROM risk_events re LEFT JOIN risk_reports rr ON re.event_id = rr.event_id WHERE re.occurrence_time > '2023-01-01' GROUP BY re.event_id, re.event_description	risk_control
SELECT rr.approval_status, re.event_type FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.approval_status = '已拒绝'	risk_control
SELECT c.customer_id, c.customer_name, t.* FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' ORDER BY t.transaction_date DESC	risk_control
SELECT a.audit_id, a.audit_type, a.audit_result, a.audit_comments, t.transaction_type, t.amount, c.customer_name, c.risk_level FROM audit_logs a JOIN transactions t ON a.transaction_id = t.transaction_id JOIN customers c ON t.customer_id = c.customer_id WHERE a.audit_result = '需进一步调查' ORDER BY a.audit_time DESC	risk_control
WITH current_values AS (SELECT indicator_id, actual_value as current_value FROM risk_monitoring_logs rml WHERE monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = rml.indicator_id)), historical_values AS (SELECT indicator_id, MAX(actual_value) as max_value, MIN(actual_value) as min_value FROM risk_monitoring_logs GROUP BY indicator_id) SELECT ri.indicator_id, ri.indicator_name, cv.current_value, hv.max_value, hv.min_value FROM risk_indicators ri LEFT JOIN current_values cv ON ri.indicator_id = cv.indicator_id LEFT JOIN historical_values hv ON ri.indicator_id = hv.indicator_id	risk_control
SELECT rc.rule_id, rc.rule_name, ri.indicator_name, ri.threshold_value, rml.actual_value FROM rule_configurations rc JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id LEFT JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id)	risk_control
SELECT re.event_id, re.event_type, rr.report_id, rr.report_type, ra.assessment_id, ra.risk_level, a.alert_id, a.alert_level FROM risk_events re LEFT JOIN risk_reports rr ON re.event_id = rr.event_id LEFT JOIN risk_assessments ra ON re.event_id = ra.event_id LEFT JOIN alerts a ON re.event_id = a.event_id	risk_control
SELECT DISTINCT c.customer_id, c.customer_name, c.registration_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.risk_score > 80 AND t.transaction_date >= datetime('now') - INTERVAL '1 year' AND c.registration_date >= datetime('now') - INTERVAL '2 years'	risk_control
SELECT report_id, report_type, approval_status FROM risk_reports WHERE approval_status = '已拒绝'	risk_control
SELECT ri.indicator_id, ri.indicator_name, ml.monitoring_date, ml.actual_value FROM risk_indicators ri JOIN risk_monitoring_logs ml ON ri.indicator_id = ml.indicator_id WHERE ml.monitoring_date = (SELECT MAX(m.monitoring_date) FROM risk_monitoring_logs m WHERE m.indicator_id = ri.indicator_id)	risk_control
WITH alert_stats AS (SELECT a.assigned_to AS department, a.alert_type, a.alert_level, COUNT(*) AS total_alerts, SUM(CASE WHEN a.status = '已解决' THEN 1 ELSE 0 END) AS resolved_alerts, AVG(CASE WHEN a.status = '已解决' THEN EXTRACT(EPOCH FROM (a.alert_time - e.occurrence_time))/3600 ELSE NULL END) AS avg_response_time_hours FROM alerts a JOIN risk_events e ON a.event_id = e.event_id GROUP BY a.assigned_to, a.alert_type, a.alert_level) SELECT department, alert_type, alert_level, total_alerts, resolved_alerts, avg_response_time_hours, (resolved_alerts / total_alerts) AS resolution_rate FROM alert_stats ORDER BY department, total_alerts DESC	risk_control
SELECT rc.rule_id, rc.rule_name, rc.rule_type, rc.rule_condition, ri.indicator_name, ri.threshold_value FROM rule_configurations rc LEFT JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id WHERE rc.is_active = TRUE	risk_control
SELECT ri.indicator_name, rml.actual_value, ri.threshold_value, rml.is_exceeding_threshold FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id)	risk_control
SELECT al.audit_type, AVG(al.audit_time - re.occurrence_time) as avg_audit_duration FROM audit_logs al INNER JOIN risk_events re ON al.event_id = re.event_id GROUP BY al.audit_type	risk_control
SELECT alert_id, event_id FROM alerts WHERE status = '未处理'	risk_control
SELECT a.audit_id, a.audit_time, a.auditor, a.audit_comments, al.alert_content FROM audit_logs a JOIN alerts al ON a.alert_id = al.alert_id WHERE a.audit_result = '拒绝'	risk_control
SELECT report_id, approval_status FROM risk_reports	risk_control
SELECT DISTINCT c.customer_name, c.customer_id FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.risk_score > 5 AND t.transaction_date > '2023-09-08'	risk_control
SELECT rr.author AS department, COUNT(*) AS report_count, AVG(EXTRACT(EPOCH FROM (SELECT MIN(assessment_date) FROM risk_assessments WHERE event_id = rr.event_id) - rr.report_date) / 86400) AS avg_approval_time_days FROM risk_reports rr WHERE rr.approval_status = '已批准' GROUP BY rr.author ORDER BY report_count DESC, avg_approval_time_days DESC	risk_control
SELECT event_type, AVG(severity) as avg_severity FROM risk_events GROUP BY event_type ORDER BY avg_severity DESC	risk_control
SELECT e.event_id, e.event_type, e.severity, a.risk_level, a.impact_score, a.probability_score, a.mitigation_plan FROM risk_events e LEFT JOIN risk_assessments a ON e.event_id = a.event_id WHERE e.status != '已解决' AND e.severity >= 4 AND a.assessment_date = (SELECT MAX(assessment_date) FROM risk_assessments WHERE event_id = e.event_id)	risk_control
SELECT re.event_id, al.audit_result, al.audit_comments FROM risk_events re LEFT JOIN audit_logs al ON re.event_id = al.event_id	risk_control
SELECT report_type, MAX(report_date) AS latest_report_date, author FROM risk_reports GROUP BY report_type, author	risk_control
SELECT re.*, ra.impact_score FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE ra.risk_level = '高' AND ra.impact_score > 7	risk_control
WITH customer_alerts AS (SELECT DISTINCT c.customer_id, c.customer_name, c.risk_level, a.alert_level, a.alert_time FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN alerts a ON t.event_id = a.event_id WHERE a.alert_level = '高' AND a.alert_time >= date('now') - INTERVAL '1 year') SELECT ca.customer_id, ca.customer_name, ca.risk_level as current_risk_level, c_old.risk_level as old_risk_level, ca.alert_time FROM customer_alerts ca JOIN customers c_old ON ca.customer_id = c_old.customer_id AND ca.alert_time < c_old.last_update_date ORDER BY ca.alert_time DESC	risk_control
SELECT t.transaction_id, t.status, re.event_description FROM transactions t JOIN risk_events re ON t.event_id = re.event_id WHERE t.status = '失败'	risk_control
SELECT DISTINCT re.* FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id JOIN alerts a ON re.event_id = a.event_id WHERE ra.risk_level = '高' AND a.alert_level = '高' AND re.occurrence_time >= date('now') - INTERVAL '1 year'	risk_control
SELECT customer_id, customer_name, credit_score FROM customers WHERE risk_level = '高'	risk_control
SELECT event_id, reporter FROM risk_events WHERE status = '处理中'	risk_control
SELECT rc.rule_name, rc.rule_type, rc.created_at FROM rule_configurations rc JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id WHERE rc.is_active = TRUE AND ri.indicator_name = '杠杆率##' AND rc.created_at > '2023-01-01'	risk_control
SELECT created_at, event_description FROM risk_events	risk_control
SELECT risk_level, COUNT(*) as customer_count, AVG(credit_score) as avg_credit_score FROM customers GROUP BY risk_level ORDER BY risk_level	risk_control
SELECT DISTINCT c.customer_id, c.customer_name, c.credit_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.credit_score < 600 AND t.risk_score > 80 AND t.transaction_date >= date('now') - INTERVAL '1 year'	risk_control
SELECT re.event_type, AVG((ra.impact_score + ra.probability_score) / 2.0) as avg_risk_score FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id GROUP BY re.event_type	risk_control
SELECT i.indicator_id, i.indicator_name, l.monitoring_date, l.actual_value, r.rule_id, r.rule_name FROM risk_indicators i LEFT JOIN risk_monitoring_logs l ON i.indicator_id = l.indicator_id LEFT JOIN rule_configurations r ON i.indicator_id = r.indicator_id WHERE l.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = i.indicator_id)	risk_control
SELECT AVG(impact_score) AS average_impact_score FROM risk_assessments WHERE mitigation_plan LIKE '%审核%'	risk_control
WITH risk_level_changes AS (SELECT customer_id, COUNT(*) as change_count FROM (SELECT customer_id, risk_level, LAG(risk_level) OVER (PARTITION BY customer_id ORDER BY last_update_date) as prev_risk_level FROM customers WHERE last_update_date >= date('now') - INTERVAL '1 year') subquery WHERE risk_level != prev_risk_level OR prev_risk_level IS NULL GROUP BY customer_id), avg_transaction_risk AS (SELECT customer_id, AVG(risk_score) as avg_risk_score FROM transactions WHERE transaction_date >= date('now') - INTERVAL '1 year' GROUP BY customer_id) SELECT c.customer_id, c.customer_name, rlc.change_count, COALESCE(atr.avg_risk_score, 0) as avg_transaction_risk_score FROM customers c JOIN risk_level_changes rlc ON c.customer_id = rlc.customer_id LEFT JOIN avg_transaction_risk atr ON c.customer_id = atr.customer_id ORDER BY rlc.change_count DESC LIMIT 5	risk_control
SELECT notes FROM risk_monitoring_logs	risk_control
WITH time_segmented_values AS (SELECT ri.indicator_id, ri.indicator_name, CASE WHEN EXTRACT(DOW FROM rml.monitoring_date) IN (0, 6) THEN 'weekend' WHEN EXTRACT(HOUR FROM rml.monitoring_date) BETWEEN 9 AND 17 THEN 'workday_daytime' ELSE 'workday_evening' END as time_segment, AVG(rml.actual_value) as avg_value FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id GROUP BY ri.indicator_id, ri.indicator_name, time_segment), indicator_variation AS (SELECT indicator_id, indicator_name, MAX(avg_value) - MIN(avg_value) as max_difference FROM time_segmented_values GROUP BY indicator_id, indicator_name) SELECT iv.indicator_name, iv.max_difference, tsv.time_segment, tsv.avg_value FROM indicator_variation iv JOIN time_segmented_values tsv ON iv.indicator_id = tsv.indicator_id ORDER BY iv.max_difference DESC LIMIT 30	risk_control
SELECT AVG(threshold_value) AS average_threshold FROM risk_indicators WHERE indicator_description LIKE '%合规%'	risk_control
WITH customer_stats AS (SELECT c.customer_type, COUNT(t.transaction_id) as total_transactions, AVG(t.amount) as avg_amount, SUM(CASE WHEN t.risk_score > 80 THEN 1 ELSE 0 END) as high_risk_transactions, SUM(CASE WHEN a.alert_level = '高' THEN 1 ELSE 0 END) as high_level_alerts FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id LEFT JOIN alerts a ON t.event_id = a.event_id WHERE EXTRACT(YEAR FROM t.transaction_date) = 2023 GROUP BY c.customer_type) SELECT customer_type, avg_amount, (high_risk_transactions / total_transactions * 100) as high_risk_percentage, (high_level_alerts / total_transactions * 100) as high_alert_percentage FROM customer_stats ORDER BY avg_amount DESC	risk_control
SELECT e.event_id, e.event_type, e.status, a.assessment_id, a.risk_level, al.alert_id, al.alert_type FROM risk_events e LEFT JOIN risk_assessments a ON e.event_id = a.event_id LEFT JOIN alerts al ON e.event_id = al.event_id WHERE e.status != '已解决' AND (a.assessment_date = (SELECT MAX(assessment_date) FROM risk_assessments WHERE event_id = e.event_id) OR a.assessment_date IS NULL) AND (al.status = '未处理' OR al.status IS NULL)	risk_control
SELECT re.event_id, ra.assessment_id FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id	risk_control
SELECT rr.approved_by, COUNT(rr.report_id) AS report_count FROM risk_reports rr GROUP BY rr.approved_by	risk_control
SELECT ra.assessment_id, re.event_id, re.event_description FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id WHERE ra.assessor = '梁芳' AND ra.risk_level = '高'	risk_control
SELECT assessment_id, mitigation_plan, assessor FROM risk_assessments	risk_control
WITH quarterly_stats AS (SELECT ri.indicator_id, ri.indicator_name, DATE_TRUNC('quarter', rml.monitoring_date) as quarter, AVG(rml.actual_value) as avg_value, MAX(rml.actual_value) as max_value, MIN(rml.actual_value) as min_value FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.monitoring_date >= DATE_TRUNC('year', date('now')) - INTERVAL '1 year' GROUP BY ri.indicator_id, ri.indicator_name, DATE_TRUNC('quarter', rml.monitoring_date)) SELECT current_quarter.indicator_name, current_quarter.quarter, current_quarter.avg_value, current_quarter.max_value, current_quarter.min_value, ROUND((current_quarter.avg_value - previous_quarter.avg_value) / previous_quarter.avg_value * 100, 2) as quarter_over_quarter_change, ROUND((current_quarter.avg_value - previous_year_quarter.avg_value) / previous_year_quarter.avg_value * 100, 2) as year_over_year_change FROM quarterly_stats current_quarter LEFT JOIN quarterly_stats previous_quarter ON current_quarter.indicator_id = previous_quarter.indicator_id AND current_quarter.quarter = previous_quarter.quarter + INTERVAL '3 months' LEFT JOIN quarterly_stats previous_year_quarter ON current_quarter.indicator_id = previous_year_quarter.indicator_id AND current_quarter.quarter = previous_year_quarter.quarter + INTERVAL '1 year' ORDER BY current_quarter.indicator_name, current_quarter.quarter	risk_control
SELECT * FROM audit_logs WHERE event_id = 'RE5966'	risk_control
SELECT customer_id, credit_score FROM customers	risk_control
WITH assessments_with_alerts AS (SELECT ra.assessment_id, ra.assessor, CASE WHEN a.alert_id IS NULL THEN 1 ELSE 0 END as is_accurate FROM risk_assessments ra LEFT JOIN alerts a ON ra.event_id = a.event_id AND a.alert_time BETWEEN ra.assessment_date AND ra.assessment_date + INTERVAL '30 days' WHERE ra.assessment_date >= date('now') - INTERVAL '1 year') SELECT assessor, COUNT(*) as total_assessments, SUM(is_accurate) as accurate_assessments, ROUND(SUM(is_accurate) / COUNT(*) * 100, 2) as accuracy_rate FROM assessments_with_alerts GROUP BY assessor ORDER BY accuracy_rate DESC LIMIT 5	risk_control
SELECT mitigation_plan, assessment_date FROM risk_assessments	risk_control
SELECT t.* FROM transactions t WHERE t.event_id IS NOT NULL	risk_control
SELECT re.event_id, re.event_description, t.transaction_id FROM risk_events re JOIN transactions t ON re.event_id = t.event_id WHERE re.status = '已解决'	risk_control
SELECT a.alert_id, a.alert_content, a.alert_level, a.alert_time, re.event_description, re.severity FROM alerts a LEFT JOIN risk_events re ON a.event_id = re.event_id WHERE a.status = '未处理' ORDER BY a.alert_level DESC, a.alert_time	risk_control
SELECT DISTINCT c.customer_id, c.customer_name, c.risk_level FROM customers c INNER JOIN transactions t ON c.customer_id = t.customer_id INNER JOIN risk_events re ON t.event_id = re.event_id INNER JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE ra.risk_level = '高' AND re.status != '已解决'	risk_control
SELECT c.risk_level, t.transaction_type, COUNT(a.alert_id) AS alert_count FROM customers c JOIN transactions t ON c.customer_id = t.customer_id LEFT JOIN alerts a ON t.event_id = a.event_id GROUP BY c.risk_level, t.transaction_type ORDER BY c.risk_level, alert_count DESC	risk_control
SELECT rr.report_id, rr.report_type, rr.approval_status, re.event_description FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.approval_status = '已批准'	risk_control
SELECT status, COUNT(*) as count FROM risk_events GROUP BY status	risk_control
SELECT customer_id, MAX(risk_score) AS max_risk_score, MIN(risk_score) AS min_risk_score FROM transactions GROUP BY customer_id HAVING COUNT(transaction_id) > 0	risk_control
SELECT ri.indicator_name, DATE_TRUNC('month', rml.monitoring_date) as month, AVG(rml.actual_value) as avg_value, MAX(rml.actual_value) as max_value, MIN(rml.actual_value) as min_value, SUM(CASE WHEN rml.is_exceeding_threshold THEN 1 ELSE 0 END) as threshold_exceeded_count FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id GROUP BY ri.indicator_id, ri.indicator_name, DATE_TRUNC('month', rml.monitoring_date) ORDER BY ri.indicator_name, month	risk_control
SELECT a.*, re.event_type, re.event_description FROM alerts a JOIN rule_configurations rc ON a.rule_id = rc.rule_id JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id LEFT JOIN risk_events re ON a.event_id = re.event_id WHERE ri.indicator_name = '流动性覆盖率##'	risk_control
SELECT ri.indicator_name, AVG(ri.threshold_value) as avg_threshold, MAX(rml.monitoring_date) as last_exceeded_date FROM risk_indicators ri LEFT JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id AND rml.is_exceeding_threshold = true GROUP BY ri.indicator_name	risk_control
SELECT SUM(actual_value) FROM risk_monitoring_logs WHERE notes IS NULL	risk_control
SELECT rc.*, ri.indicator_name, ri.threshold_value FROM rule_configurations rc LEFT JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id WHERE rc.is_active = false	risk_control
SELECT c.customer_type, CASE WHEN t.amount < 10000 THEN '小额' WHEN t.amount BETWEEN 10000 AND 100000 THEN '中额' ELSE '大额' END AS amount_range, COUNT(*) AS transaction_count, AVG(t.risk_score) AS avg_risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_type, amount_range ORDER BY c.customer_type, transaction_count DESC	risk_control
SELECT c.customer_id, c.customer_name, c.registration_date, c.risk_level FROM customers c ORDER BY c.risk_level	risk_control
SELECT event_type, AVG(severity) as avg_severity FROM risk_events GROUP BY event_type ORDER BY avg_severity DESC	risk_control
SELECT re.event_id, re.event_description, a.alert_level, a.alert_content FROM risk_events re JOIN alerts a ON re.event_id = a.event_id WHERE a.alert_level = '高'	risk_control
SELECT re.event_description, rr.report_content FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id WHERE rr.approval_status = '已拒绝'	risk_control
SELECT re.event_id, re.event_description, ra.assessment_id, ra.risk_level FROM risk_events re LEFT JOIN risk_assessments ra ON re.event_id = ra.event_id	risk_control
SELECT c.customer_name, MAX(ra.assessment_date) as last_high_risk_assessment, COUNT(DISTINCT a.alert_id) as unresolved_alerts FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN risk_assessments ra ON t.event_id = ra.event_id JOIN alerts a ON t.event_id = a.event_id WHERE ra.risk_level = '高' AND a.status != '已解决' AND EXTRACT(YEAR FROM ra.assessment_date) = 2023 GROUP BY c.customer_id, c.customer_name HAVING COUNT(DISTINCT a.alert_id) > 0 ORDER BY unresolved_alerts DESC, last_high_risk_assessment DESC	risk_control
SELECT assessment_id, assessor FROM risk_assessments WHERE assessment_date >= '2023-04-01' AND assessment_date < '2023-05-01'	risk_control
SELECT ri.indicator_name, rml.actual_value, rml.is_exceeding_threshold, rc.rule_name FROM risk_indicators ri LEFT JOIN (SELECT indicator_id, actual_value, is_exceeding_threshold, ROW_NUMBER() OVER (PARTITION BY indicator_id ORDER BY monitoring_date DESC) as rn FROM risk_monitoring_logs) rml ON ri.indicator_id = rml.indicator_id AND rml.rn = 1 LEFT JOIN rule_configurations rc ON ri.indicator_id = rc.indicator_id ORDER BY ri.indicator_name	risk_control
SELECT auditor, COUNT(audit_id) AS audit_count FROM audit_logs GROUP BY auditor	risk_control
SELECT * FROM risk_assessments WHERE impact_score > 7	risk_control
SELECT AVG(impact_score) as avg_impact, AVG(probability_score) as avg_probability FROM risk_assessments	risk_control
SELECT re.event_description, rr.report_content FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id WHERE rr.approval_status = '已批准'	risk_control
SELECT ri.indicator_id, ri.indicator_name, ml.log_id, ml.actual_value FROM risk_indicators ri JOIN risk_monitoring_logs ml ON ri.indicator_id = ml.indicator_id WHERE ml.is_exceeding_threshold = TRUE	risk_control
SELECT approval_status, COUNT(*) AS status_count FROM risk_reports WHERE report_date > '2022-12-31' GROUP BY approval_status	risk_control
SELECT a.alert_id, a.alert_type, a.alert_content, c.customer_id, c.customer_name, c.risk_level FROM alerts a INNER JOIN risk_events re ON a.event_id = re.event_id INNER JOIN transactions t ON re.event_id = t.event_id INNER JOIN customers c ON t.customer_id = c.customer_id WHERE a.status = '未处理' AND c.risk_level = '高'	risk_control
SELECT t.transaction_id, re.event_description FROM transactions t JOIN risk_events re ON t.event_id = re.event_id	risk_control
SELECT re.event_id, rr.report_id FROM risk_events re LEFT JOIN risk_reports rr ON re.event_id = rr.event_id WHERE re.status = '未处理'	risk_control
SELECT alert_id, alert_type, status FROM alerts	risk_control
SELECT event_type, SUM(CASE WHEN EXTRACT(MONTH FROM occurrence_time) = 1 THEN 1 ELSE 0 END) as Jan, SUM(CASE WHEN EXTRACT(MONTH FROM occurrence_time) = 2 THEN 1 ELSE 0 END) as Feb, SUM(CASE WHEN EXTRACT(MONTH FROM occurrence_time) = 3 THEN 1 ELSE 0 END) as Mar, SUM(CASE WHEN EXTRACT(MONTH FROM occurrence_time) = 4 THEN 1 ELSE 0 END) as Apr, SUM(CASE WHEN EXTRACT(MONTH FROM occurrence_time) = 5 THEN 1 ELSE 0 END) as May, SUM(CASE WHEN EXTRACT(MONTH FROM occurrence_time) = 6 THEN 1 ELSE 0 END) as Jun, SUM(CASE WHEN EXTRACT(MONTH FROM occurrence_time) = 7 THEN 1 ELSE 0 END) as Jul, SUM(CASE WHEN EXTRACT(MONTH FROM occurrence_time) = 8 THEN 1 ELSE 0 END) as Aug, SUM(CASE WHEN EXTRACT(MONTH FROM occurrence_time) = 9 THEN 1 ELSE 0 END) as Sep, SUM(CASE WHEN EXTRACT(MONTH FROM occurrence_time) = 10 THEN 1 ELSE 0 END) as Oct, SUM(CASE WHEN EXTRACT(MONTH FROM occurrence_time) = 11 THEN 1 ELSE 0 END) as Nov, SUM(CASE WHEN EXTRACT(MONTH FROM occurrence_time) = 12 THEN 1 ELSE 0 END) as Dec, COUNT(*) as total FROM risk_events WHERE EXTRACT(YEAR FROM occurrence_time) = 2023 GROUP BY event_type ORDER BY total DESC	risk_control
SELECT rule_id, rule_name, rule_type FROM rule_configurations WHERE is_active = TRUE	risk_control
SELECT c.customer_name, t.transaction_id, t.status FROM customers c JOIN transactions t ON c.customer_id = t.customer_id	risk_control
SELECT event_id, event_description FROM risk_events WHERE status = '已解决'	risk_control
SELECT COUNT(*) FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.risk_level = '高' AND t.transaction_date >= '2023-01-01' AND t.transaction_date < '2024-01-01' AND t.risk_score > 50	risk_control
SELECT c.customer_id, c.customer_name, c.credit_score, t.status FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date = (SELECT MAX(t2.transaction_date) FROM transactions t2 WHERE t2.customer_id = c.customer_id)	risk_control
SELECT c.customer_name, t.transaction_id, t.risk_score, t.transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date >= '2023-01-01' AND t.transaction_date < '2024-01-01' AND t.risk_score > 50 AND c.risk_level = '高'	risk_control
SELECT COUNT(*) FROM alerts WHERE alert_level = '高' AND status = '未处理'	risk_control
WITH monthly_audits AS (SELECT DATE_TRUNC('month', audit_time) as month, audit_result, COUNT(*) as result_count FROM audit_logs GROUP BY month, audit_result) SELECT month, audit_result, result_count, result_count / SUM(result_count) OVER (PARTITION BY month) as result_percentage FROM monthly_audits ORDER BY month, audit_result	risk_control
SELECT c.risk_level, COUNT(c.customer_id) AS customer_count, AVG(t.amount) AS avg_transaction_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.risk_level	risk_control
SELECT customer_id, customer_name, credit_score FROM customers WHERE credit_score < 600	risk_control
SELECT rr.report_id, re.event_description FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.approval_status = '已批准'	risk_control
SELECT ri.indicator_name, ri.threshold_value, rml.actual_value, rml.monitoring_date, COUNT(rc.rule_id) as active_rule_count FROM risk_indicators ri LEFT JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id LEFT JOIN rule_configurations rc ON ri.indicator_id = rc.indicator_id WHERE rml.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id) AND rc.is_active = TRUE GROUP BY ri.indicator_id, ri.indicator_name, ri.threshold_value, rml.actual_value, rml.monitoring_date	risk_control
SELECT rr.report_content, re.event_description FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id ORDER BY rr.report_date	risk_control
SELECT ri.indicator_name, ri.update_frequency, rml.actual_value, rml.monitoring_date FROM risk_indicators ri JOIN ( SELECT indicator_id, MAX(monitoring_date) AS latest_date FROM risk_monitoring_logs GROUP BY indicator_id ) rml_latest ON ri.indicator_id = rml_latest.indicator_id JOIN risk_monitoring_logs rml ON rml_latest.indicator_id = rml.indicator_id AND rml_latest.latest_date = rml.monitoring_date	risk_control
SELECT ml.* FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id WHERE ml.actual_value > ri.threshold_value	risk_control
SELECT re.event_description, al.audit_result FROM risk_events re JOIN audit_logs al ON re.event_id = al.event_id WHERE re.status = '已解决'	risk_control
SELECT rr.approved_by, COUNT(rr.report_id) AS approved_count FROM risk_reports rr WHERE rr.approval_status = '已批准' GROUP BY rr.approved_by HAVING COUNT(rr.report_id) > 1	risk_control
SELECT customer_type, AVG(credit_score) as avg_credit_score FROM customers GROUP BY customer_type	risk_control
SELECT al.auditor, re.severity, AVG(EXTRACT(EPOCH FROM (al.audit_time - a.alert_time))/3600) as avg_audit_hours, COUNT(*) FILTER (WHERE al.audit_result = '通过') as approved_count, COUNT(*) FILTER (WHERE al.audit_result = '拒绝') as rejected_count, COUNT(*) FILTER (WHERE al.audit_result = '需进一步调查') as investigation_count FROM audit_logs al JOIN alerts a ON al.alert_id = a.alert_id JOIN risk_events re ON a.event_id = re.event_id GROUP BY al.auditor, re.severity ORDER BY al.auditor, re.severity	risk_control
SELECT ri.indicator_name, ml.monitoring_date, ml.actual_value FROM risk_indicators ri JOIN risk_monitoring_logs ml ON ri.indicator_id = ml.indicator_id	risk_control
SELECT report_type, COUNT(*) AS approved_count FROM risk_reports WHERE approval_status = '已批准' GROUP BY report_type	risk_control
SELECT transaction_type, AVG(risk_score) as avg_risk_score, SUM(amount) as total_amount FROM transactions GROUP BY transaction_type	risk_control
SELECT re.event_id, re.event_description, rr.report_id FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id WHERE re.severity = 1	risk_control
SELECT indicator_name FROM risk_indicators WHERE indicator_name LIKE '%流动性%' AND threshold_value < 30	risk_control
SELECT indicator_name, update_frequency FROM risk_indicators	risk_control
WITH current_values AS (SELECT indicator_id, actual_value as current_value FROM risk_monitoring_logs WHERE monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs)), avg_30_days AS (SELECT indicator_id, AVG(actual_value) as avg_30_days FROM risk_monitoring_logs WHERE monitoring_date >= date('now') - INTERVAL '30 days' GROUP BY indicator_id), avg_90_days AS (SELECT indicator_id, AVG(actual_value) as avg_90_days FROM risk_monitoring_logs WHERE monitoring_date >= date('now') - INTERVAL '90 days' GROUP BY indicator_id) SELECT i.indicator_id, i.indicator_name, i.threshold_value, cv.current_value, a30.avg_30_days, a90.avg_90_days, CASE WHEN cv.current_value > i.threshold_value THEN 'Above' WHEN cv.current_value < i.threshold_value THEN 'Below' ELSE 'Equal' END as threshold_comparison FROM risk_indicators i LEFT JOIN current_values cv ON i.indicator_id = cv.indicator_id LEFT JOIN avg_30_days a30 ON i.indicator_id = a30.indicator_id LEFT JOIN avg_90_days a90 ON i.indicator_id = a90.indicator_id	risk_control
SELECT re.event_id, re.event_description, rr.report_content FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id WHERE re.event_type = '流动性风险'	risk_control
SELECT customer_name, credit_score FROM customers WHERE risk_level = '中' AND credit_score > 700	risk_control
SELECT c.customer_name, t.transaction_id, t.amount, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date >= '2023-01-01' AND t.transaction_date < '2024-01-01' AND t.amount > 500000 AND t.risk_score > 70	risk_control
SELECT c.customer_name, t.amount, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date >= '2023-12-01' AND t.transaction_date < '2024-01-01'	risk_control
SELECT report_id, report_date FROM risk_reports WHERE author = '郑华'	risk_control
SELECT event_type, AVG(severity) as avg_severity FROM risk_events GROUP BY event_type ORDER BY avg_severity DESC	risk_control
SELECT customer_name, credit_score FROM customers ORDER BY credit_score DESC LIMIT 1	risk_control
SELECT alert_level, status FROM alerts	risk_control
SELECT al.auditor, re.event_type, COUNT(*) as event_count, AVG(EXTRACT(EPOCH FROM (al.audit_time - re.occurrence_time)) / 3600) as avg_processing_hours FROM audit_logs al JOIN risk_events re ON al.event_id = re.event_id GROUP BY al.auditor, re.event_type ORDER BY al.auditor, event_count DESC	risk_control
SELECT ra.assessor, COUNT(ra.assessment_id) AS assessment_count, ra.risk_level FROM risk_assessments ra GROUP BY ra.assessor, ra.risk_level	risk_control
SELECT re.*, a.alert_type, a.alert_content FROM risk_events re LEFT JOIN alerts a ON re.event_id = a.event_id	risk_control
SELECT a.alert_id, a.alert_content, re.event_description FROM alerts a JOIN risk_events re ON a.event_id = re.event_id	risk_control
SELECT re.event_description, ra.risk_level FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE re.reporter = '吴超'	risk_control
SELECT DATE_TRUNC('month', occurrence_time) as month, COUNT(*) as event_count, AVG(severity) as avg_severity FROM risk_events GROUP BY DATE_TRUNC('month', occurrence_time) ORDER BY month	risk_control
SELECT DISTINCT c.customer_id, c.customer_name FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN audit_logs a ON t.transaction_id = a.transaction_id WHERE t.risk_score > 50 AND t.transaction_date >= '2023-09-01' AND t.transaction_date < '2023-10-01' AND a.audit_result = '需进一步调查'	risk_control
SELECT report_id, approval_status, approved_by FROM risk_reports	risk_control
SELECT c.customer_id, c.customer_name, SUM(t.amount) AS total_amount FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_id ORDER BY total_amount DESC	risk_control
SELECT a.alert_id, a.alert_type, t.transaction_id, t.amount FROM alerts a JOIN transactions t ON a.event_id = t.event_id WHERE a.assigned_to = '吴超' ORDER BY t.amount DESC LIMIT 5	risk_control
SELECT c.customer_name, t.transaction_id, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.risk_score > 10	risk_control
SELECT ra.risk_level, COUNT(*) AS event_count FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id WHERE re.severity > 3 GROUP BY ra.risk_level	risk_control
SELECT ml.log_id, ml.actual_value, ri.indicator_name FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id WHERE ml.is_exceeding_threshold = TRUE	risk_control
SELECT e.*, r.report_id, r.report_content FROM risk_events e LEFT JOIN risk_reports r ON e.event_id = r.event_id WHERE e.event_type = '市场风险'	risk_control
WITH latest_assessment AS (SELECT DISTINCT ON (event_id) * FROM risk_assessments ORDER BY event_id, assessment_date DESC), latest_transaction AS (SELECT DISTINCT ON (customer_id) * FROM transactions ORDER BY customer_id, transaction_date DESC) SELECT c.customer_id, c.customer_name, c.risk_level, la.risk_level as latest_assessment_risk, la.assessment_date, lt.transaction_id, lt.amount, lt.transaction_date FROM customers c LEFT JOIN latest_transaction lt ON c.customer_id = lt.customer_id LEFT JOIN risk_events re ON lt.event_id = re.event_id LEFT JOIN latest_assessment la ON re.event_id = la.event_id	risk_control
SELECT c.customer_id, c.customer_name, c.credit_score FROM customers c WHERE c.customer_type = '企业'	risk_control
SELECT a.alert_id, a.alert_content, a.assigned_to FROM alerts a WHERE a.status = '未处理'	risk_control
SELECT DISTINCT auditor, FROM audit_logs WHERE audit_result = '通过' AND audit_time >= '2023-12-01' AND audit_time < '2024-01-01'	risk_control
SELECT DISTINCT c.customer_id, c.customer_name, t.amount, ra.risk_level FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN risk_events re ON t.event_id = re.event_id JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE t.amount > 100000 AND t.transaction_date >= datetime('now') - INTERVAL '1 year' AND ra.risk_level = '高' AND ra.assessment_date = (SELECT MAX(assessment_date) FROM risk_assessments WHERE event_id = re.event_id)	risk_control
SELECT e.event_id, e.event_type, a.assessment_date, a.risk_level, al.alert_content, al.status FROM risk_events e JOIN risk_assessments a ON e.event_id = a.event_id JOIN alerts al ON e.event_id = al.event_id WHERE a.assessment_date >= datetime('now') - INTERVAL '1 year' AND a.risk_level = '高' AND al.status != '已解决'	risk_control
SELECT amount, status FROM transactions WHERE risk_score > 7	risk_control
SELECT assessor, mitigation_plan FROM risk_assessments ORDER BY assessment_date DESC LIMIT 1	risk_control
SELECT ri.indicator_name, rml.* FROM risk_monitoring_logs rml JOIN risk_indicators ri ON rml.indicator_id = ri.indicator_id WHERE rml.is_exceeding_threshold = TRUE	risk_control
SELECT re.event_type, MAX(re.severity) AS max_severity, rr.report_date FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id GROUP BY re.event_type, rr.report_date	risk_control
SELECT AVG(amount) AS average_amount FROM transactions WHERE status = '失败' AND transaction_date >= DATE_TRUNC('quarter', date('now') - INTERVAL '3 months') AND transaction_date < DATE_TRUNC('quarter', date('now'))	risk_control
SELECT auditor, audit_time FROM audit_logs	risk_control
SELECT ri.indicator_name, ml.actual_value FROM risk_indicators ri JOIN risk_monitoring_logs ml ON ri.indicator_id = ml.indicator_id WHERE ml.is_exceeding_threshold = TRUE	risk_control
SELECT rr.report_id, rr.report_date, rr.approval_status, rr.approved_by FROM risk_reports rr WHERE rr.approval_status = '已拒绝'	risk_control
SELECT i.indicator_name, i.threshold_value, COUNT(*) AS exceed_count FROM risk_indicators i JOIN risk_monitoring_logs l ON i.indicator_id = l.indicator_id WHERE l.is_exceeding_threshold = TRUE AND l.monitoring_date >= date('now') - INTERVAL '1 year' GROUP BY i.indicator_id, i.indicator_name, i.threshold_value ORDER BY exceed_count DESC	risk_control
SELECT ri.indicator_id, ri.indicator_name, ri.update_frequency FROM risk_indicators ri	risk_control
SELECT COUNT(*) FROM risk_monitoring_logs WHERE is_exceeding_threshold = true	risk_control
WITH ranked_transactions AS (SELECT t.*, ROW_NUMBER() OVER (PARTITION BY t.customer_id ORDER BY t.transaction_date DESC) AS rn FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.risk_level = '高') SELECT rt.customer_id, rt.transaction_id, rt.amount, rt.transaction_date, al.audit_result, al.audit_comments FROM ranked_transactions rt LEFT JOIN audit_logs al ON rt.transaction_id = al.transaction_id WHERE rt.rn <= 5 ORDER BY rt.customer_id, rt.transaction_date DESC	risk_control
SELECT rr.report_id, rr.report_content, re.event_description FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.approval_status = '待审批'	risk_control
SELECT t.transaction_id, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.risk_level = '高'	risk_control
SELECT event_id, created_at, status FROM risk_events	risk_control
WITH high_risk_events AS (SELECT ra.event_id FROM risk_assessments ra WHERE ra.risk_level = '高' AND ra.assessment_date >= date('now') - INTERVAL '1 year'), event_alerts AS (SELECT a.event_id, MAX(CASE WHEN a.alert_level = '高' THEN 1 ELSE 0 END) as has_high_alert FROM alerts a WHERE a.alert_time >= date('now') - INTERVAL '1 year' GROUP BY a.event_id) SELECT re.event_id, re.event_type, re.event_description, AVG(ra.impact_score) as avg_impact_score, AVG(ra.probability_score) as avg_probability_score FROM risk_events re JOIN high_risk_events hre ON re.event_id = hre.event_id LEFT JOIN event_alerts ea ON re.event_id = ea.event_id JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE (ea.event_id IS NULL OR ea.has_high_alert = 0) AND re.created_at >= date('now') - INTERVAL '1 year' GROUP BY re.event_id, re.event_type, re.event_description	risk_control
SELECT re.event_type, AVG(EXTRACT(EPOCH FROM (al.audit_time - re.occurrence_time)) / 86400) as avg_resolution_days, AVG(t.amount) as avg_transaction_amount FROM risk_events re LEFT JOIN audit_logs al ON re.event_id = al.event_id LEFT JOIN transactions t ON re.event_id = t.event_id WHERE re.status = '已解决' GROUP BY re.event_type ORDER BY avg_resolution_days DESC	risk_control
SELECT AVG(amount) FROM transactions WHERE risk_score = 5	risk_control
SELECT DATE_TRUNC('month', registration_date) as month, COUNT(*) as new_customers FROM customers GROUP BY DATE_TRUNC('month', registration_date) ORDER BY month	risk_control
SELECT t.transaction_id, re.event_description FROM transactions t JOIN risk_events re ON t.event_id = re.event_id	risk_control
SELECT ri.indicator_id, ri.indicator_name, ml.actual_value, ml.is_exceeding_threshold FROM risk_indicators ri JOIN risk_monitoring_logs ml ON ri.indicator_id = ml.indicator_id WHERE ml.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id)	risk_control
SELECT c.risk_level, AVG(monthly_amount) as avg_monthly_amount, AVG(transaction_count) as avg_transaction_count FROM customers c JOIN (SELECT customer_id, DATE_TRUNC('month', transaction_date) as month, SUM(amount) as monthly_amount, COUNT(*) as transaction_count FROM transactions GROUP BY customer_id, DATE_TRUNC('month', transaction_date)) t ON c.customer_id = t.customer_id GROUP BY c.risk_level	risk_control
SELECT event_id, severity, event_description FROM risk_events	risk_control
SELECT c.customer_name, t.amount, c.risk_level FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.amount > 500000 AND c.risk_level = '高'	risk_control
SELECT log_id, monitoring_date FROM risk_monitoring_logs	risk_control
SELECT auditor, COUNT(*) as total_audits, SUM(CASE WHEN audit_result = '通过' THEN 1 ELSE 0 END) as passed_audits, CAST(SUM(CASE WHEN audit_result = '通过' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*) as pass_rate FROM audit_logs GROUP BY auditor ORDER BY pass_rate DESC	risk_control
SELECT report_id, report_type, author FROM risk_reports	risk_control
SELECT event_description FROM risk_events WHERE severity = 5	risk_control
SELECT customer_id, customer_name, credit_score, risk_level FROM customers	risk_control
SELECT ri.indicator_id, ri.indicator_name, current.actual_value as current_value, max_value.actual_value as max_value, min_value.actual_value as min_value FROM risk_indicators ri JOIN (SELECT indicator_id, actual_value FROM risk_monitoring_logs WHERE (indicator_id, monitoring_date) IN (SELECT indicator_id, MAX(monitoring_date) FROM risk_monitoring_logs GROUP BY indicator_id)) current ON ri.indicator_id = current.indicator_id JOIN (SELECT indicator_id, MAX(actual_value) as actual_value FROM risk_monitoring_logs GROUP BY indicator_id) max_value ON ri.indicator_id = max_value.indicator_id JOIN (SELECT indicator_id, MIN(actual_value) as actual_value FROM risk_monitoring_logs GROUP BY indicator_id) min_value ON ri.indicator_id = min_value.indicator_id	risk_control
SELECT DATE_TRUNC('month', registration_date) as month, COUNT(*) as new_high_risk_customers, AVG(credit_score) as avg_credit_score FROM customers WHERE risk_level = '高' GROUP BY DATE_TRUNC('month', registration_date) ORDER BY month DESC	risk_control
SELECT report_id, report_date, report_content FROM risk_reports WHERE report_date BETWEEN '2023-01-01' AND '2023-12-31'	risk_control
SELECT a.alert_id, a.alert_content, a.alert_level, e.event_type, e.event_description FROM alerts a JOIN risk_events e ON a.event_id = e.event_id WHERE a.alert_level = '高' AND a.status = '未处理'	risk_control
SELECT AVG(ra.probability_score) AS average_probability FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id WHERE re.occurrence_time >= datetime('now') - INTERVAL '6 months'	risk_control
SELECT alert_content, alert_level FROM alerts WHERE status = '未处理' AND assigned_to = '周健'	risk_control
SELECT ml.log_id, ml.actual_value, ri.indicator_name FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id WHERE ml.actual_value > ri.threshold_value	risk_control
SELECT log_id, actual_value FROM risk_monitoring_logs	risk_control
SELECT t.transaction_id, t.amount, t.risk_score, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.risk_score > 80	risk_control
SELECT c.customer_name, t.transaction_type, t.status FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.credit_score > 700	risk_control
SELECT assessment_id, event_id, assessor FROM risk_assessments WHERE risk_level = '高'	risk_control
SELECT MIN(actual_value) AS min_actual_value, COUNT(*) FILTER (WHERE is_exceeding_threshold) AS exceeding_threshold_count FROM risk_monitoring_logs	risk_control
SELECT c.risk_level, AVG(t.amount) AS average_transaction_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date >= date('now') - INTERVAL '1 year' GROUP BY c.risk_level	risk_control
SELECT event_id, event_description FROM risk_events WHERE event_type = '流动性风险' AND status = '未处理'	risk_control
SELECT re.event_id, ra.mitigation_plan FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE ra.risk_level = '中'	risk_control
SELECT COUNT(ra.assessment_id) AS risk_assessment_count FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE re.severity = 5	risk_control
SELECT rc.* FROM rule_configurations rc JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id WHERE ri.indicator_name = '流动性覆盖率##'	risk_control
WITH monthly_new_customers AS (SELECT DATE_TRUNC('month', registration_date) as month, COUNT(*) as total_new, SUM(CASE WHEN risk_level = '高' THEN 1 ELSE 0 END) as high_risk_new FROM customers GROUP BY DATE_TRUNC('month', registration_date)) SELECT month, high_risk_new, ROUND(high_risk_new / total_new * 100, 2) as high_risk_percentage FROM monthly_new_customers ORDER BY month	risk_control
SELECT a.alert_id, a.alert_content, a.alert_time, r.event_description FROM alerts a JOIN risk_events r ON a.event_id = r.event_id WHERE a.alert_level = '高' AND r.reporter = '郑霞' AND a.status = '未处理'	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.transaction_date FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id ORDER BY t.transaction_date DESC	risk_control
SELECT rr.report_id, rr.approval_status FROM risk_reports rr WHERE rr.author = '李明'	risk_control
SELECT r.report_id, r.author, r.report_type, e.event_description FROM risk_reports r JOIN risk_events e ON r.event_id = e.event_id WHERE r.approval_status = '待审批'	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.credit_score > 700	risk_control
SELECT t.transaction_id, t.amount, c.customer_name FROM transactions t JOIN risk_events re ON t.event_id = re.event_id JOIN customers c ON t.customer_id = c.customer_id WHERE re.severity >= 4	risk_control
SELECT transaction_id, amount, status FROM transactions	risk_control
SELECT re.event_id, re.event_type, re.severity, re.status, ra.risk_level, ra.impact_score, ra.probability_score FROM risk_events re LEFT JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE re.severity >= 4 AND re.status != '已解决' AND ra.assessment_date = (SELECT MAX(assessment_date) FROM risk_assessments WHERE event_id = re.event_id)	risk_control
SELECT re.event_id, re.event_description, ra.assessment_id, ra.mitigation_plan FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE ra.risk_level = '高'	risk_control
SELECT customer_id, credit_score, last_update_date FROM customers	risk_control
SELECT re.severity, re.event_type, a.alert_content FROM risk_events re LEFT JOIN alerts a ON re.event_id = a.event_id WHERE re.reporter = '周健'	risk_control
SELECT DISTINCT c.customer_id, c.customer_name FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.risk_score > 80 AND t.transaction_date >= datetime('now') - INTERVAL '1 year'	risk_control
SELECT DISTINCT c.customer_id, c.customer_name, c.risk_level, MAX(t.risk_score) AS max_risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id LEFT JOIN alerts a ON c.customer_id = a.event_id WHERE t.transaction_date >= date('now') - INTERVAL '1 year' AND t.risk_score >= 80 AND a.alert_id IS NULL GROUP BY c.customer_id, c.customer_name, c.risk_level	risk_control
SELECT t.transaction_id, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.risk_level = '高'	risk_control
SELECT DATE_TRUNC('month', t.transaction_date) as month, c.risk_level, SUM(t.amount) as total_amount, AVG(t.risk_score) as avg_risk_score FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id GROUP BY DATE_TRUNC('month', t.transaction_date), c.risk_level ORDER BY month, c.risk_level	risk_control
SELECT ml.log_id, ri.indicator_name FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id WHERE ml.is_exceeding_threshold = TRUE	risk_control
SELECT rule_id, rule_description FROM rule_configurations WHERE is_active = TRUE	risk_control
WITH customer_stats AS (SELECT customer_id, SUM(amount) as total_amount, AVG(risk_score) as avg_risk_score FROM transactions WHERE transaction_date >= date('now') - INTERVAL '1 year' GROUP BY customer_id), overall_avg AS (SELECT AVG(avg_risk_score) as overall_avg_risk_score FROM customer_stats) SELECT c.customer_name, cs.total_amount, cs.avg_risk_score FROM customers c JOIN customer_stats cs ON c.customer_id = cs.customer_id, overall_avg WHERE cs.avg_risk_score > overall_avg.overall_avg_risk_score ORDER BY cs.avg_risk_score DESC	risk_control
WITH alert_event_pairs AS (SELECT a.alert_id, a.alert_time, e.occurrence_time, i.indicator_id, i.indicator_name FROM alerts a JOIN risk_events e ON a.event_id = e.event_id JOIN rule_configurations rc ON a.rule_id = rc.rule_id JOIN risk_indicators i ON rc.indicator_id = i.indicator_id WHERE e.occurrence_time > a.alert_time), indicator_lead_times AS (SELECT indicator_id, indicator_name, AVG(EXTRACT(EPOCH FROM (occurrence_time - alert_time)) / 3600) as avg_lead_time_hours, STDDEV(EXTRACT(EPOCH FROM (occurrence_time - alert_time)) / 3600) as stddev_lead_time_hours FROM alert_event_pairs GROUP BY indicator_id, indicator_name) SELECT indicator_name, avg_lead_time_hours, stddev_lead_time_hours, avg_lead_time_hours / NULLIF(stddev_lead_time_hours, 0) as lead_time_reliability FROM indicator_lead_times ORDER BY avg_lead_time_hours DESC, lead_time_reliability DESC LIMIT 10	risk_control
SELECT ri.indicator_name, ml.monitoring_date, ml.actual_value FROM risk_indicators ri JOIN risk_monitoring_logs ml ON ri.indicator_id = ml.indicator_id WHERE ml.is_exceeding_threshold = TRUE	risk_control
SELECT re.event_id, re.event_description, rr.report_id, rr.report_content FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id WHERE rr.approval_status = '已批准'	risk_control
SELECT assessment_id, assessor FROM risk_assessments	risk_control
SELECT rr.report_id, rr.report_type, rr.approval_status, re.event_id, re.event_type, re.severity FROM risk_reports rr INNER JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.approval_status = '已批准'	risk_control
SELECT rc.rule_name, ri.indicator_name, rml.actual_value, ri.threshold_value FROM rule_configurations rc JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id JOIN (SELECT indicator_id, actual_value, ROW_NUMBER() OVER (PARTITION BY indicator_id ORDER BY monitoring_date DESC) as rn FROM risk_monitoring_logs) rml ON ri.indicator_id = rml.indicator_id WHERE rc.is_active = true AND rml.rn = 1 AND rml.actual_value > ri.threshold_value ORDER BY (rml.actual_value - ri.threshold_value) DESC	risk_control
SELECT report_type, author, COUNT(*) AS rejection_count FROM risk_reports WHERE approval_status = '已拒绝' GROUP BY report_type, author HAVING COUNT(*) > 2	risk_control
SELECT e.event_id, e.event_type, e.occurrence_time, r.report_id, a.assessment_id, al.alert_id FROM risk_events e JOIN risk_reports r ON e.event_id = r.event_id JOIN risk_assessments a ON e.event_id = a.event_id JOIN alerts al ON e.event_id = al.event_id WHERE EXTRACT(YEAR FROM e.occurrence_time) = 2023	risk_control
SELECT ri.indicator_id, ri.threshold_value, ri.indicator_description FROM risk_indicators ri	risk_control
SELECT * FROM customers WHERE risk_level IN ('低') AND registration_date < date('now') - INTERVAL '2 years'	risk_control
SELECT rr.report_id, rr.report_type, re.event_description FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.approval_status = '待审批'	risk_control
SELECT AVG(c.credit_score) AS average_credit_score, t.status, COUNT(t.status) AS status_count FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' GROUP BY t.status	risk_control
SELECT audit_type, AVG(EXTRACT(EPOCH FROM (audit_time - created_at)) / 3600) AS avg_audit_hours, COUNT(*) FILTER (WHERE audit_result = '拒绝') * 100.0 / COUNT(*) AS rejection_rate FROM audit_logs al JOIN risk_events re ON al.event_id = re.event_id GROUP BY audit_type ORDER BY rejection_rate DESC	risk_control
SELECT re.event_id, re.event_description, ra.risk_level FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE re.occurrence_time > '2023-08-01'	risk_control
SELECT COUNT(t.transaction_id) AS transaction_count, SUM(t.amount) AS total_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.credit_score < 500	risk_control
SELECT rc.rule_id, rc.rule_name, rc.rule_description FROM rule_configurations rc JOIN alerts a ON rc.rule_id = a.rule_id WHERE rc.is_active = TRUE AND a.alert_level = '高'	risk_control
SELECT rc.rule_name, rc.rule_description, a.alert_content FROM rule_configurations rc JOIN alerts a ON rc.rule_id = a.rule_id WHERE rc.is_active = TRUE AND a.alert_level = '高' AND a.status = '未处理'	risk_control
SELECT rr.report_id, rr.report_date, rr.report_type, re.event_description FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.approval_status = '已拒绝'	risk_control
SELECT re.event_description, ra.assessment_date, rr.author, rr.approval_status FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id JOIN risk_reports rr ON re.event_id = rr.event_id WHERE ra.risk_level = '高' AND EXTRACT(YEAR FROM ra.assessment_date) = 2023 AND rr.approval_status != '已批准'	risk_control
SELECT r.rule_id, r.rule_name, r.rule_type, COUNT(a.alert_id) as alert_count FROM rule_configurations r LEFT JOIN alerts a ON r.rule_id = a.rule_id WHERE r.is_active = TRUE GROUP BY r.rule_id, r.rule_name, r.rule_type ORDER BY alert_count DESC	risk_control
SELECT c.risk_level, t.transaction_type, AVG(t.amount) as avg_amount, AVG(t.risk_score) as avg_risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.risk_level, t.transaction_type ORDER BY c.risk_level, t.transaction_type	risk_control
SELECT event_id, event_description FROM risk_events WHERE occurrence_time = '2023-09-26'	risk_control
SELECT re.event_id, re.event_description, re.severity, ra.risk_level, ra.impact_score, ra.probability_score, ra.mitigation_plan FROM risk_events re LEFT JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE re.event_type = '流动性风险' ORDER BY re.severity DESC, ra.impact_score DESC	risk_control
SELECT re.event_id, re.event_type, re.event_description, rr.report_content FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id WHERE re.severity = 5 AND rr.report_content LIKE '%风险接受%'	risk_control
SELECT rml.monitoring_date, ri.indicator_name FROM risk_monitoring_logs rml JOIN risk_indicators ri ON rml.indicator_id = ri.indicator_id WHERE rml.monitoring_date >= date('now') - INTERVAL '1 year'	risk_control
SELECT ri.indicator_id, ri.indicator_name, ri.measurement_unit, AVG(rml.actual_value) AS avg_value, STDDEV(rml.actual_value) AS stddev_value, COUNT(*) FILTER (WHERE rml.is_exceeding_threshold = TRUE) * 100.0 / COUNT(*) AS anomaly_rate FROM risk_indicators ri LEFT JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id GROUP BY ri.indicator_id, ri.indicator_name, ri.measurement_unit ORDER BY anomaly_rate DESC	risk_control
SELECT c.customer_name, c.credit_score, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.amount > 100000	risk_control
SELECT re.event_id, re.event_description, ra.mitigation_plan FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id WHERE ra.risk_level = '高'	risk_control
SELECT indicator_name, threshold_value, update_frequency FROM risk_indicators	risk_control
SELECT ri.indicator_id, ri.indicator_name, COUNT(*) AS threshold_exceeded_count, AVG(rml.actual_value - ri.threshold_value) AS avg_exceed_amount FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.is_exceeding_threshold = TRUE AND rml.monitoring_date >= date('now') - INTERVAL '1 year' GROUP BY ri.indicator_id, ri.indicator_name	risk_control
SELECT rc.rule_id, rc.rule_name, rc.rule_type, COUNT(a.alert_id) as alert_count, AVG(EXTRACT(EPOCH FROM (al.audit_time - a.alert_time))/3600) as avg_processing_time_hours FROM rule_configurations rc LEFT JOIN alerts a ON rc.rule_id = a.rule_id LEFT JOIN audit_logs al ON a.alert_id = al.alert_id WHERE rc.is_active = TRUE GROUP BY rc.rule_id, rc.rule_name, rc.rule_type	risk_control
SELECT c.customer_name, t.transaction_id, t.transaction_date, a.audit_result FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN audit_logs a ON t.transaction_id = a.transaction_id WHERE t.transaction_date >= '2023-01-01' AND t.transaction_date < '2024-01-01' AND c.risk_level = '高' AND a.audit_result = '拒绝'	risk_control
SELECT ri.indicator_id, ri.indicator_name, rml.monitoring_date, rml.actual_value, rml.is_exceeding_threshold, a.alert_id, a.alert_type, a.alert_content FROM risk_indicators ri INNER JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id LEFT JOIN alerts a ON ri.indicator_id = a.rule_id AND rml.monitoring_date = a.alert_time ORDER BY ri.indicator_id, rml.monitoring_date	risk_control
SELECT re.event_id, re.event_description, rr.approval_status FROM risk_events re LEFT JOIN risk_reports rr ON re.event_id = rr.event_id	risk_control
SELECT DISTINCT c.customer_name, c.risk_level, c.credit_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN alerts a ON t.event_id = a.event_id WHERE a.alert_type = '交易异常' ORDER BY c.risk_level DESC, c.credit_score ASC	risk_control
SELECT c.customer_id, c.customer_name, c.risk_level, t.transaction_id, t.transaction_type, t.amount, t.transaction_date FROM customers c INNER JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.transaction_date = (SELECT MAX(transaction_date) FROM transactions WHERE customer_id = c.customer_id)	risk_control
SELECT indicator_id, indicator_name, threshold_value FROM risk_indicators	risk_control
SELECT amount, transaction_date FROM transactions WHERE risk_score = 5 AND status = '成功'	risk_control
SELECT rr.report_id, rr.report_type, rr.author, ra.risk_level, ra.impact_score FROM risk_reports rr LEFT JOIN risk_assessments ra ON rr.event_id = ra.event_id WHERE rr.approval_status = '待审批' ORDER BY ra.impact_score DESC, rr.report_date	risk_control
SELECT re.event_type, AVG(ra.impact_score) as avg_impact_score, AVG(ra.probability_score) as avg_probability_score, AVG(ra.impact_score * ra.probability_score) as composite_risk_score FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id GROUP BY re.event_type ORDER BY composite_risk_score DESC	risk_control
SELECT alert_id, assigned_to FROM alerts WHERE status = '已解决'	risk_control
SELECT risk_level, COUNT(*) as customer_count, AVG(credit_score) as avg_credit_score FROM customers GROUP BY risk_level	risk_control
SELECT ra.assessment_id, ra.assessment_date, ra.risk_level FROM risk_assessments ra WHERE ra.assessment_date >= '2023-08-01' AND ra.assessment_date < '2023-09-01'	risk_control
SELECT r.report_type, r.author, e.event_description, e.severity FROM risk_reports r JOIN risk_events e ON r.event_id = e.event_id WHERE r.approval_status = '待审批' ORDER BY e.severity DESC, r.report_date DESC	risk_control
SELECT re.event_type, DATE_TRUNC('month', re.occurrence_time) as month, COUNT(*) as event_count, AVG(EXTRACT(EPOCH FROM (al.audit_time - re.occurrence_time))/86400) as avg_processing_days FROM risk_events re LEFT JOIN audit_logs al ON re.event_id = al.event_id GROUP BY re.event_type, DATE_TRUNC('month', re.occurrence_time) ORDER BY re.event_type, month	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.status FROM customers c JOIN transactions t ON c.customer_id = t.customer_id	risk_control
SELECT i.indicator_name, i.threshold_value, l.actual_value, l.monitoring_date FROM risk_indicators i JOIN risk_monitoring_logs l ON i.indicator_id = l.indicator_id WHERE l.is_exceeding_threshold = TRUE ORDER BY l.monitoring_date DESC	risk_control
SELECT rc.rule_name, rc.rule_type, ri.indicator_name, ri.threshold_value FROM rule_configurations rc JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id WHERE rc.is_active = true	risk_control
SELECT t.transaction_id, t.amount, re.event_description FROM transactions t JOIN risk_events re ON t.event_id = re.event_id WHERE t.amount > 100000	risk_control
SELECT ra.assessment_id, ra.mitigation_plan FROM risk_assessments ra WHERE ra.risk_level = '高'	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.amount < 1000	risk_control
WITH rule_effectiveness AS (SELECT r.rule_id, r.rule_name, COUNT(a.alert_id) as total_alerts, SUM(CASE WHEN e.severity >= 4 THEN 1 ELSE 0 END) as confirmed_risks FROM rule_configurations r LEFT JOIN alerts a ON r.rule_id = a.rule_id LEFT JOIN risk_events e ON a.event_id = e.event_id GROUP BY r.rule_id, r.rule_name) SELECT rule_id, rule_name, total_alerts, confirmed_risks, ROUND(confirmed_risks / NULLIF(total_alerts, 0) * 100, 2) as effectiveness_percentage FROM rule_effectiveness WHERE total_alerts > 0 ORDER BY effectiveness_percentage ASC LIMIT 5	risk_control
SELECT DATE_TRUNC('month', alert_time) as month, alert_type, COUNT(*) as alert_count FROM alerts GROUP BY DATE_TRUNC('month', alert_time), alert_type ORDER BY month, alert_type	risk_control
SELECT event_id, event_type, severity FROM risk_events WHERE DATE_TRUNC('month', occurrence_time) = '2023-09-01' AND severity = (SELECT MAX(severity) FROM risk_events WHERE DATE_TRUNC('month', occurrence_time) = '2023-09-01')	risk_control
SELECT alert_type, COUNT(*) AS alert_count FROM alerts WHERE alert_level IN ('中', '高') GROUP BY alert_type	risk_control
SELECT ri.indicator_name, ml.actual_value, ri.threshold_value FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id WHERE ml.is_exceeding_threshold = TRUE	risk_control
SELECT i.indicator_name, l.actual_value, l.is_exceeding_threshold, l.monitoring_date FROM risk_indicators i JOIN risk_monitoring_logs l ON i.indicator_id = l.indicator_id WHERE l.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = i.indicator_id) ORDER BY l.is_exceeding_threshold DESC, l.monitoring_date DESC	risk_control
SELECT a.alert_id, a.alert_type, a.alert_level, t.transaction_id, t.amount FROM alerts a JOIN transactions t ON a.event_id = t.event_id WHERE a.status = '未处理' ORDER BY t.amount DESC LIMIT 10	risk_control
SELECT rr.author, c.* FROM risk_reports rr JOIN customers c ON rr.author = c.customer_name WHERE rr.approval_status = '已拒绝' AND rr.report_date >= date('now') - INTERVAL '1 year' GROUP BY rr.author, c.customer_id HAVING COUNT(*) > 1	risk_control
SELECT c.customer_name, t.transaction_id, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date >= '2023-01-01' AND t.transaction_date < '2024-01-01' AND t.amount > 100000	risk_control
SELECT DISTINCT c.customer_name, c.risk_level, MAX(t.amount) as max_transaction_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.customer_type = '企业' AND c.risk_level = '高' AND t.transaction_date >= date('now') - INTERVAL '1 year' AND t.amount > 500000 GROUP BY c.customer_id, c.customer_name, c.risk_level ORDER BY max_transaction_amount DESC	risk_control
SELECT created_at, severity FROM risk_events WHERE occurrence_time >= '2023-04-01' AND occurrence_time < '2023-05-01'	risk_control
SELECT rr.report_id, rr.approval_status, rr.approved_by FROM risk_reports rr WHERE rr.approval_status = '已拒绝'	risk_control
SELECT audit_id, audit_result FROM audit_logs WHERE event_id IS NOT NULL	risk_control
SELECT customer_type, risk_level, COUNT(*) as customer_count FROM customers GROUP BY customer_type, risk_level ORDER BY customer_type, risk_level	risk_control
SELECT ri.indicator_id, ri.indicator_name, ri.threshold_value, current.actual_value as current_value, max_value.max_actual_value, last_exceeded.last_exceeded_time FROM risk_indicators ri LEFT JOIN (SELECT indicator_id, actual_value FROM risk_monitoring_logs WHERE monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs)) current ON ri.indicator_id = current.indicator_id LEFT JOIN (SELECT indicator_id, MAX(actual_value) as max_actual_value FROM risk_monitoring_logs GROUP BY indicator_id) max_value ON ri.indicator_id = max_value.indicator_id LEFT JOIN (SELECT indicator_id, MAX(monitoring_date) as last_exceeded_time FROM risk_monitoring_logs WHERE is_exceeding_threshold = true GROUP BY indicator_id) last_exceeded ON ri.indicator_id = last_exceeded.indicator_id	risk_control
SELECT re.event_type, COUNT(re.event_id) AS event_count, MIN(re.occurrence_time) AS earliest_occurrence FROM risk_events re GROUP BY re.event_type	risk_control
SELECT log_id, actual_value FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id WHERE ml.actual_value < ri.threshold_value	risk_control
SELECT DISTINCT c.customer_id, c.customer_name, c.credit_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.credit_score < 600 AND t.risk_score >= 8 AND t.transaction_date >= date('now') - INTERVAL '1 year'	risk_control
SELECT re.event_type, ra.risk_level, AVG(al.audit_time - re.occurrence_time) as avg_resolution_time FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id JOIN audit_logs al ON re.event_id = al.event_id WHERE re.status = '已解决' AND EXTRACT(YEAR FROM re.occurrence_time) = 2023 GROUP BY re.event_type, ra.risk_level ORDER BY re.event_type, ra.risk_level	risk_control
SELECT auditor, COUNT(*) as total_audits, SUM(CASE WHEN audit_result = '通过' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) as approval_rate FROM audit_logs WHERE audit_time >= datetime('now') - INTERVAL '1 year' GROUP BY auditor ORDER BY total_audits DESC	risk_control
SELECT event_type, COUNT(event_id) AS event_count FROM risk_events GROUP BY event_type	risk_control
SELECT rr.author, COUNT(rr.report_id) AS report_count, rr.approval_status FROM risk_reports rr GROUP BY rr.author, rr.approval_status	risk_control
SELECT report_id, report_content FROM risk_reports WHERE report_content LIKE '%合规风险%'	risk_control
SELECT DATE_TRUNC('month', occurrence_time) as month, event_type, severity, COUNT(*) as new_event_count FROM risk_events WHERE occurrence_time >= DATE_TRUNC('month', datetime('now')) - INTERVAL '1 year' GROUP BY DATE_TRUNC('month', occurrence_time), event_type, severity ORDER BY month, event_type, severity	risk_control
SELECT alert_level, COUNT(*) as alert_count FROM alerts GROUP BY alert_level	risk_control
SELECT transaction_type, amount FROM transactions	risk_control
SELECT transaction_id, amount, risk_score FROM transactions	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.amount, t.transaction_date, re.event_type, re.severity FROM customers c JOIN transactions t ON c.customer_id = t.customer_id LEFT JOIN risk_events re ON t.event_id = re.event_id WHERE c.risk_level = '高' ORDER BY c.customer_id, t.transaction_date DESC	risk_control
SELECT ra.assessment_id, ra.risk_level, re.event_description, rr.report_content FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id LEFT JOIN risk_reports rr ON re.event_id = rr.event_id WHERE ra.risk_level = '高'	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.amount, t.transaction_date, t.risk_score FROM customers c JOIN (SELECT *, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY transaction_date DESC) AS rn FROM transactions) t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.rn <= 5 ORDER BY c.customer_id, t.transaction_date DESC	risk_control
SELECT DISTINCT c.customer_name, c.risk_level, MAX(t.transaction_date) as last_transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN alerts a ON t.event_id = a.event_id WHERE a.alert_type = '交易异常' GROUP BY c.customer_id, c.customer_name, c.risk_level	risk_control
SELECT event_type, AVG(EXTRACT(EPOCH FROM (resolved_time - created_at))/3600) as avg_resolution_time_hours FROM (SELECT event_type, created_at, MAX(CASE WHEN status = '已解决' THEN occurrence_time ELSE NULL END) OVER (PARTITION BY event_id) as resolved_time FROM risk_events) subquery WHERE resolved_time IS NOT NULL GROUP BY event_type	risk_control
SELECT DATE_TRUNC('month', created_at) as month, COUNT(*) as event_count, AVG(severity) as avg_severity FROM risk_events GROUP BY DATE_TRUNC('month', created_at) ORDER BY month	risk_control
SELECT c.risk_level, COUNT(DISTINCT c.customer_id) as customer_count, SUM(t.amount) as total_transaction_amount FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.risk_level	risk_control
SELECT re.event_id, al.audit_id FROM risk_events re JOIN audit_logs al ON re.event_id = al.event_id	risk_control
SELECT rule_id, created_at, is_active FROM rule_configurations	risk_control
SELECT event_type, AVG(severity) as avg_severity FROM risk_events GROUP BY event_type ORDER BY avg_severity DESC	risk_control
SELECT a.alert_id, a.alert_content, re.event_id FROM alerts a JOIN risk_events re ON a.event_id = re.event_id WHERE a.status = '未处理'	risk_control
SELECT a.alert_id, a.alert_content FROM alerts a JOIN transactions t ON a.event_id = t.event_id JOIN customers c ON t.customer_id = c.customer_id WHERE c.risk_level = '高'	risk_control
SELECT risk_level, COUNT(*) AS customer_count FROM customers WHERE risk_level = '高' GROUP BY risk_level	risk_control
SELECT re.*, rr.report_id, rr.report_content, ra.assessment_id, ra.risk_level FROM risk_events re LEFT JOIN risk_reports rr ON re.event_id = rr.event_id LEFT JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE re.event_type = '合规风险'	risk_control
SELECT ri.indicator_name, ri.threshold_value, rml.actual_value, rml.monitoring_date FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.is_exceeding_threshold = TRUE AND rml.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id)	risk_control
SELECT al.auditor, COUNT(CASE WHEN al.audit_result = '通过' THEN 1 END) AS approved_count, COUNT(CASE WHEN al.audit_result = '拒绝' THEN 1 END) AS rejected_count FROM audit_logs al GROUP BY al.auditor	risk_control
SELECT c.customer_id, c.customer_name, c.credit_score, c.risk_level FROM customers c WHERE c.risk_level IN ('中', '高')	risk_control
SELECT rml.log_id, ri.indicator_name, rml.actual_value, ri.threshold_value, rml.monitoring_date FROM risk_monitoring_logs rml JOIN risk_indicators ri ON rml.indicator_id = ri.indicator_id LEFT JOIN alerts a ON rml.log_id = a.event_id WHERE rml.is_exceeding_threshold = true AND a.alert_id IS NULL	risk_control
SELECT DATE_TRUNC('month', registration_date) AS month, COUNT(*) AS high_risk_new_customers FROM customers WHERE risk_level = '高' GROUP BY DATE_TRUNC('month', registration_date) ORDER BY month	risk_control
SELECT c.customer_name, c.risk_level, t.transaction_id FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高'	risk_control
SELECT re.event_id, re.severity, a.alert_level FROM risk_events re JOIN alerts a ON re.event_id = a.event_id WHERE re.status = '已解决'	risk_control
SELECT ra.assessment_id, ra.risk_level, ra.impact_score, re.event_id, re.event_description FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id	risk_control
SELECT COUNT(*) FROM customers WHERE registration_date BETWEEN '2023-04-01' AND '2023-06-30' AND credit_score < 600	risk_control
SELECT re.event_id, rr.report_date, rr.author as report_author, ra.assessor FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE DATE(rr.report_date) = DATE(ra.assessment_date) ORDER BY rr.report_date	risk_control
SELECT AVG(amount) AS average_amount, MAX(amount) AS max_amount FROM transactions WHERE status = '处理中'	risk_control
SELECT a.alert_id, a.alert_content, re.event_description FROM alerts a JOIN risk_events re ON a.event_id = re.event_id WHERE a.status = '未处理'	risk_control
SELECT a.alert_id, a.alert_content, a.alert_level, e.event_type, e.event_description FROM alerts a JOIN risk_events e ON a.event_id = e.event_id WHERE a.status = '未处理' AND a.alert_level = '高'	risk_control
SELECT risk_level, AVG(LENGTH(mitigation_plan)) AS avg_plan_length, COUNT(*) AS plan_count FROM risk_assessments GROUP BY risk_level	risk_control
SELECT c.customer_id, c.risk_level, t.transaction_id FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level IN ('中', '高')	risk_control
SELECT al.audit_id, al.audit_result, al.related_id FROM audit_logs al JOIN alerts a ON al.alert_id = a.alert_id	risk_control
SELECT indicator_description, measurement_unit FROM risk_indicators	risk_control
SELECT e.event_type, AVG(EXTRACT(EPOCH FROM (SELECT MAX(a.assessment_date) FROM risk_assessments a WHERE a.event_id = e.event_id) - e.created_at) / 3600) as avg_resolution_time_hours FROM risk_events e WHERE e.status = '已解决' GROUP BY e.event_type ORDER BY avg_resolution_time_hours DESC	risk_control
SELECT ml.monitoring_date, ri.indicator_name FROM risk_monitoring_logs ml JOIN risk_indicators ri ON ml.indicator_id = ri.indicator_id	risk_control
SELECT event_id, COUNT(report_id) AS report_count FROM risk_reports GROUP BY event_id	risk_control
SELECT ri.indicator_name, rml.actual_value, rml.is_exceeding_threshold, ri.threshold_value, COUNT(rc.rule_id) as active_rules_count FROM risk_indicators ri LEFT JOIN (SELECT indicator_id, actual_value, is_exceeding_threshold, ROW_NUMBER() OVER (PARTITION BY indicator_id ORDER BY monitoring_date DESC) as rn FROM risk_monitoring_logs) rml ON ri.indicator_id = rml.indicator_id AND rml.rn = 1 LEFT JOIN rule_configurations rc ON ri.indicator_id = rc.indicator_id AND rc.is_active = true GROUP BY ri.indicator_id, ri.indicator_name, rml.actual_value, rml.is_exceeding_threshold, ri.threshold_value ORDER BY active_rules_count DESC, ri.indicator_name	risk_control
SELECT re.severity, a.alert_level FROM risk_events re JOIN alerts a ON re.event_id = a.event_id WHERE a.alert_level = '低'	risk_control
SELECT c.customer_name, a.alert_content, a.alert_time FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN alerts a ON t.event_id = a.event_id WHERE c.risk_level = '高' AND a.status = '未处理' ORDER BY a.alert_time DESC	risk_control
SELECT c.customer_id, c.customer_name, r.report_id, r.report_type, r.report_content, e.event_type, e.severity FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN risk_events e ON t.event_id = e.event_id JOIN risk_reports r ON e.event_id = r.event_id WHERE c.risk_level = '高' AND r.report_date = (SELECT MAX(report_date) FROM risk_reports WHERE event_id = e.event_id) ORDER BY r.report_date DESC	risk_control
SELECT alert_id, alert_type, status FROM alerts	risk_control
SELECT DATE_TRUNC('month', a.alert_time) as month, COUNT(*) as alert_count, AVG(t.amount) as avg_transaction_amount, COUNT(DISTINCT t.customer_id) as affected_customers FROM alerts a JOIN transactions t ON a.event_id = t.event_id GROUP BY DATE_TRUNC('month', a.alert_time) ORDER BY month	risk_control
SELECT a.alert_time, a.status FROM alerts a JOIN risk_events re ON a.event_id = re.event_id	risk_control
SELECT event_type, COUNT(*) AS event_count FROM risk_events GROUP BY event_type	risk_control
SELECT rc.rule_name, a.alert_type, a.alert_content FROM rule_configurations rc JOIN alerts a ON rc.rule_id = a.rule_id WHERE rc.is_active = TRUE	risk_control
SELECT al.audit_id, al.audit_time, re.event_description FROM audit_logs al JOIN risk_events re ON al.event_id = re.event_id	risk_control
SELECT c.customer_id, c.customer_name, t.transaction_id, t.amount, t.transaction_date, a.alert_type, a.alert_level FROM customers c JOIN transactions t ON c.customer_id = t.customer_id LEFT JOIN alerts a ON t.event_id = a.event_id WHERE c.risk_level = '高' AND t.transaction_date = (SELECT MAX(transaction_date) FROM transactions WHERE customer_id = c.customer_id)	risk_control
SELECT event_type, AVG(severity) AS avg_severity, COUNT(*) FILTER (WHERE status = '已解决') AS resolved_count FROM risk_events GROUP BY event_type	risk_control
SELECT alert_id, alert_type, status FROM alerts	risk_control
SELECT auditor, COUNT(*) as audit_count FROM audit_logs GROUP BY auditor ORDER BY audit_count DESC LIMIT 1	risk_control
SELECT re.event_id, rr.approval_status FROM risk_events re LEFT JOIN risk_reports rr ON re.event_id = rr.event_id	risk_control
SELECT re.event_id, re.event_description FROM risk_events re JOIN risk_reports rr ON re.event_id = rr.event_id WHERE rr.approval_status = '待审批' AND re.severity = 1	risk_control
SELECT indicator_name, indicator_description FROM risk_indicators WHERE threshold_value BETWEEN 50 AND 100	risk_control
SELECT c.customer_id, c.customer_name, SUM(t.amount) AS total_amount, AVG(t.risk_score) AS avg_risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.transaction_date >= '2023-01-01' GROUP BY c.customer_id, c.customer_name	risk_control
SELECT a.alert_id, a.alert_content, re.event_id, a.status FROM alerts a JOIN risk_events re ON a.event_id = re.event_id	risk_control
SELECT a.alert_id, a.alert_content, re.event_description, al.audit_time, al.audit_result FROM alerts a JOIN risk_events re ON a.event_id = re.event_id LEFT JOIN audit_logs al ON a.alert_id = al.alert_id WHERE a.status != '已解决' AND al.audit_time = (SELECT MAX(audit_time) FROM audit_logs WHERE alert_id = a.alert_id)	risk_control
SELECT assessor, risk_level FROM risk_assessments	risk_control
SELECT rule_id, created_at, updated_at FROM rule_configurations	risk_control
SELECT c.customer_name, t.transaction_type, t.amount, t.transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.amount > 100000 AND EXTRACT(YEAR FROM t.transaction_date) = 2023 ORDER BY t.amount DESC	risk_control
SELECT c.customer_id, c.risk_level FROM customers c JOIN (SELECT customer_id, SUM(amount) AS total_amount FROM transactions WHERE transaction_date >= date('now') - INTERVAL '1 year' GROUP BY customer_id HAVING SUM(amount) > 10000) t ON c.customer_id = t.customer_id	risk_control
SELECT risk_level, COUNT(*) AS event_count FROM risk_assessments WHERE risk_level IN ('低', '中') GROUP BY risk_level	risk_control
SELECT i.indicator_id, i.indicator_name, AVG(l.actual_value) as avg_actual_value, SUM(CASE WHEN l.is_exceeding_threshold THEN 1 ELSE 0 END) as threshold_exceed_count FROM risk_indicators i LEFT JOIN risk_monitoring_logs l ON i.indicator_id = l.indicator_id GROUP BY i.indicator_id, i.indicator_name ORDER BY threshold_exceed_count DESC	risk_control
SELECT rc.rule_id, rc.rule_name, rc.rule_type, ri.indicator_name, ri.threshold_value FROM rule_configurations rc LEFT JOIN risk_indicators ri ON rc.indicator_id = ri.indicator_id WHERE rc.is_active = FALSE	risk_control
SELECT DATE_TRUNC('month', occurrence_time) as month, COUNT(*) as event_count, AVG(severity) as avg_severity FROM risk_events GROUP BY DATE_TRUNC('month', occurrence_time) ORDER BY month	risk_control
SELECT c.customer_name, t.transaction_id, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.risk_score > 50 AND t.transaction_date >= '2023-01-01' AND t.transaction_date < '2024-01-01' AND c.risk_level = '高'	risk_control
SELECT c.customer_name, t.transaction_id FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高'	risk_control
SELECT transaction_id, amount FROM transactions WHERE amount > 100000	risk_control
SELECT t.transaction_id, t.amount FROM transactions t JOIN risk_events re ON t.event_id = re.event_id WHERE t.transaction_type = '转账' AND re.event_type = '信用风险'	risk_control
SELECT a.alert_id, a.alert_content, re.event_description FROM alerts a JOIN risk_events re ON a.event_id = re.event_id WHERE a.status = '未处理'	risk_control
SELECT c.customer_id, c.customer_name, t.risk_score FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date = (SELECT MAX(t2.transaction_date) FROM transactions t2 WHERE t2.customer_id = c.customer_id)	risk_control
SELECT ri.indicator_name, ri.threshold_value, rml.actual_value, rml.monitoring_date, COUNT(DISTINCT rc.rule_id) as active_rule_count, COUNT(DISTINCT a.alert_id) as pending_alert_count FROM risk_indicators ri LEFT JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id LEFT JOIN rule_configurations rc ON ri.indicator_id = rc.indicator_id LEFT JOIN alerts a ON rc.rule_id = a.rule_id AND a.status = '未处理' WHERE rml.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id) AND rc.is_active = TRUE GROUP BY ri.indicator_id, ri.indicator_name, ri.threshold_value, rml.actual_value, rml.monitoring_date	risk_control
SELECT al.audit_id, al.audit_type, al.auditor FROM audit_logs al WHERE al.audit_result = '需进一步调查'	risk_control
SELECT rule_name, rule_description FROM rule_configurations	risk_control
WITH alert_stats AS (SELECT alert_type, COUNT(*) as total_alerts, COUNT(CASE WHEN status = '已解决' THEN 1 END) as resolved_alerts, AVG(CASE WHEN status = '已解决' THEN EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - alert_time))/3600 END) as avg_resolution_time_hours FROM alerts GROUP BY alert_type) SELECT alert_type, avg_resolution_time_hours, ROUND(resolved_alerts / total_alerts * 100, 2) as resolution_rate FROM alert_stats	risk_control
SELECT a.alert_id, a.alert_type, a.alert_content, c.customer_name, c.risk_level, t.amount as last_transaction_amount FROM alerts a JOIN risk_events e ON a.event_id = e.event_id JOIN transactions t ON e.event_id = t.event_id JOIN customers c ON t.customer_id = c.customer_id WHERE a.status = '未处理' AND c.risk_level = '高' AND t.amount > 100000 AND t.transaction_date = (SELECT MAX(transaction_date) FROM transactions WHERE customer_id = c.customer_id) ORDER BY t.amount DESC	risk_control
SELECT assessor, risk_level FROM risk_assessments	risk_control
WITH audit_duration AS (SELECT audit_type, EXTRACT(EPOCH FROM (audit_time - created_at))/3600 as duration_hours FROM audit_logs al JOIN risk_events re ON al.event_id = re.event_id) SELECT audit_type, AVG(duration_hours) as avg_duration_hours FROM audit_duration GROUP BY audit_type ORDER BY avg_duration_hours DESC; WITH ranked_audits AS (SELECT al.audit_id, al.audit_type, al.auditor, al.audit_result, EXTRACT(EPOCH FROM (al.audit_time - re.created_at))/3600 as duration_hours, ROW_NUMBER() OVER (ORDER BY EXTRACT(EPOCH FROM (al.audit_time - re.created_at)) DESC) as rn FROM audit_logs al JOIN risk_events re ON al.event_id = re.event_id) SELECT audit_id, audit_type, auditor, audit_result, duration_hours FROM ranked_audits WHERE rn <= 5 ORDER BY duration_hours DESC	risk_control
SELECT a.alert_id, a.alert_time, rc.rule_id FROM alerts a JOIN rule_configurations rc ON a.rule_id = rc.rule_id	risk_control
SELECT c.customer_name, c.risk_level, t.transaction_id, t.amount, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高' AND t.amount > 100000 AND t.risk_score > 50 AND t.transaction_date >= '2023-01-01' AND t.transaction_date < '2024-01-01'	risk_control
SELECT DATE_TRUNC('month', registration_date) as month, COUNT(*) as new_customers, AVG(credit_score) as avg_credit_score FROM customers GROUP BY DATE_TRUNC('month', registration_date) ORDER BY month	risk_control
SELECT t.transaction_id, t.risk_score, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.transaction_date >= '2023-01-01' AND t.transaction_date < '2024-01-01'	risk_control
SELECT a.audit_id, a.audit_result, re.event_id, re.event_description FROM audit_logs a JOIN risk_events re ON a.event_id = re.event_id WHERE a.audit_result = '通过'	risk_control
SELECT rr.report_id, rr.report_content, rr.approval_status FROM risk_reports rr WHERE rr.report_content LIKE '%流动性风险%'	risk_control
SELECT * FROM risk_reports WHERE event_id = 'RE5686'	risk_control
SELECT event_id, MAX(report_date) AS latest_report_date FROM risk_reports GROUP BY event_id	risk_control
SELECT COUNT(*) AS total_count, report_type FROM risk_reports WHERE approval_status = '待审批' GROUP BY report_type	risk_control
SELECT c.customer_type, AVG(c.credit_score) as avg_credit_score, AVG(t.amount) as avg_transaction_amount FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_type	risk_control
SELECT c.customer_name, t.transaction_id, t.risk_score, a.audit_result FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN audit_logs a ON t.transaction_id = a.transaction_id WHERE a.audit_result = '拒绝' AND t.risk_score > 70	risk_control
SELECT ri.indicator_name, rml.actual_value, ri.threshold_value, rml.is_exceeding_threshold, rml.monitoring_date AS last_update_time FROM risk_indicators ri LEFT JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id) ORDER BY rml.is_exceeding_threshold DESC, ri.indicator_name	risk_control
SELECT fii.institution_name, rr.report_date, rr.submission_date FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '半年度报告' AND rr.approval_status = '待审核' AND EXTRACT(YEAR FROM rr.submission_date) = 2023	supervise
SELECT fii.institution_name, rr.report_date FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '半年度报告' AND rr.approval_status = '待审核'	supervise
SELECT fii.institution_name, rr.report_id, rr.approval_status, car.total_car FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE rr.approval_status = '已批准' AND rr.submission_date > '2023-08-01' AND car.total_car > 10.0	supervise
SELECT COUNT(*) FROM (SELECT institution_id FROM balance_sheet ORDER BY total_assets DESC LIMIT 30) AS top_institutions INNER JOIN liquidity_ratio ON top_institutions.institution_id = liquidity_ratio.institution_id WHERE net_stable_funding_ratio < 100	supervise
SELECT fi.institution_name FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id WHERE npl.report_date = '2023-11-01' AND npl.provision_coverage_ratio > 180	supervise
SELECT report_date, approval_status FROM regulatory_reports	supervise
SELECT institution_name, registered_capital, establishment_date FROM financial_institution_info	supervise
SELECT * FROM compliance_records WHERE resolution_date IS NOT NULL ORDER BY resolution_date - record_date DESC LIMIT 5	supervise
SELECT fii.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT fii.institution_name, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT institution_id FROM (SELECT institution_id, MAX(operational_risk_exposure) / MIN(operational_risk_exposure) AS op_growth, MIN(credit_risk_exposure) / MAX(credit_risk_exposure) AS cr_growth FROM risk_exposure GROUP BY institution_id) AS growth_rates ORDER BY op_growth DESC, cr_growth ASC LIMIT 1	supervise
SELECT fi.institution_name, bs.total_liabilities / bs.total_assets AS asset_liability_ratio FROM balance_sheet bs JOIN financial_institution_info fi ON bs.institution_id = fi.institution_id ORDER BY asset_liability_ratio DESC LIMIT 5	supervise
WITH indicator_volatility AS (SELECT car.institution_id, STDDEV(car.total_car) AS car_volatility, STDDEV(lr.liquidity_coverage_ratio) AS lcr_volatility, STDDEV(npl.npl_ratio) AS npl_volatility FROM capital_adequacy_ratio car JOIN liquidity_ratio lr ON car.institution_id = lr.institution_id AND car.report_date = lr.report_date JOIN non_performing_loans npl ON car.institution_id = npl.institution_id AND car.report_date = npl.report_date WHERE car.report_date >= date('now') - INTERVAL '3 years' GROUP BY car.institution_id), normalized_volatility AS (SELECT institution_id, car_volatility / AVG(car_volatility) OVER () AS normalized_car_volatility, lcr_volatility / AVG(lcr_volatility) OVER () AS normalized_lcr_volatility, npl_volatility / AVG(npl_volatility) OVER () AS normalized_npl_volatility FROM indicator_volatility), composite_volatility AS (SELECT institution_id, (normalized_car_volatility + normalized_lcr_volatility + normalized_npl_volatility) / 3 AS composite_volatility_score FROM normalized_volatility) SELECT fi.institution_name, cv.composite_volatility_score FROM financial_institution_info fi JOIN composite_volatility cv ON fi.institution_id = cv.institution_id ORDER BY cv.composite_volatility_score ASC LIMIT 5	supervise
SELECT AVG(transaction_amount) FROM related_party_transactions WHERE transaction_type = '资产转移' AND EXTRACT(YEAR FROM transaction_date) = 2023	supervise
SELECT fii.institution_id, COUNT(DISTINCT rpt.transaction_type) AS transaction_type_diversity, fii.registered_capital FROM financial_institution_info fii JOIN related_party_transactions rpt ON fii.institution_id = rpt.institution_id GROUP BY fii.institution_id, fii.registered_capital	supervise
SELECT r.institution_id, f.institution_name, r.report_type, r.approval_status, n.npl_ratio FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND n.npl_ratio > 2.0 AND r.report_date = n.report_date	supervise
SELECT rr.report_type, car.core_tier_1_ratio FROM regulatory_reports rr JOIN capital_adequacy_ratio car ON rr.institution_id = car.institution_id WHERE rr.report_date = '2024-01-01' AND car.report_date = '2024-01-01'	supervise
SELECT fii.institution_name, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.approval_status = '需修改' AND npl.npl_ratio > 2 AND rr.report_date BETWEEN '2023-07-01' AND '2023-09-30' AND npl.report_date BETWEEN '2023-07-01' AND '2023-09-30'	supervise
SELECT * FROM capital_adequacy_ratio WHERE report_date = '2023-11-01'	supervise
SELECT EXTRACT(QUARTER FROM submission_date) AS quarter, COUNT(*) AS report_count FROM regulatory_reports WHERE EXTRACT(YEAR FROM submission_date) = 2023 GROUP BY quarter ORDER BY quarter	supervise
SELECT institution_id, liquidity_coverage_ratio, net_stable_funding_ratio, loan_to_deposit_ratio FROM liquidity_ratio WHERE report_date = '2023-10-01'	supervise
SELECT institution_id, non_interest_income FROM income_statement WHERE report_date BETWEEN '2023-07-01' AND '2023-09-30' ORDER BY non_interest_income DESC	supervise
SELECT contact_number, address FROM financial_institution_info	supervise
SELECT institution_id FROM capital_adequacy_ratio WHERE report_date = '2023-11-01'	supervise
SELECT institution_id, SUM(loans_and_advances) AS total_loans_and_advances FROM balance_sheet GROUP BY institution_id	supervise
SELECT corr(re.total_risk_exposure, isi.registered_capital) AS correlation FROM risk_exposure re JOIN financial_institution_info isi ON re.institution_id = isi.institution_id	supervise
SELECT fi.institution_name, re.institution_id, re.report_date, re.market_risk_exposure FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id WHERE re.report_date >= date('now') - INTERVAL '1 year' ORDER BY re.market_risk_exposure DESC LIMIT 1	supervise
SELECT institution_name, registered_capital FROM financial_institution_info ORDER BY establishment_date ASC LIMIT 5	supervise
SELECT CORR(liquidity_coverage_ratio, net_stable_funding_ratio) AS correlation FROM liquidity_ratio	supervise
SELECT npl.npl_ratio, c.severity FROM non_performing_loans npl JOIN compliance_records c ON npl.institution_id = c.institution_id AND npl.report_date = c.record_date	supervise
SELECT * FROM related_party_transactions WHERE transaction_date = '2023-12-22'	supervise
SELECT fii.institution_name, rr.report_type, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_type = '半年度报告' AND rr.approval_status = '待审核' AND npl.npl_ratio > 2 AND rr.report_date >= '2023-10-01' AND rr.report_date < '2023-11-01'	supervise
SELECT * FROM non_performing_loans WHERE npl_ratio > 1	supervise
SELECT fii.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT institution_id, report_date, liquidity_coverage_ratio FROM liquidity_ratio	supervise
SELECT record_id, institution_id, record_date, resolution_date, description, severity, status, compliance_type FROM compliance_records WHERE record_date >= '2023-10-01' AND record_date < '2023-11-01'	supervise
SELECT institution_id, credit_risk_exposure, market_risk_exposure FROM risk_exposure WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01'	supervise
SELECT fi.institution_name, car.core_tier_1_ratio, car.total_car FROM financial_institution_info fi JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id WHERE car.core_tier_1_ratio < 8.5 AND car.total_car < 11.5	supervise
SELECT institution_name, registered_capital FROM financial_institution_info ORDER BY registered_capital DESC LIMIT 1	supervise
SELECT fi.institution_name, npl.npl_ratio FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id ORDER BY npl.npl_ratio DESC LIMIT 1	supervise
SELECT fii.institution_name, rr.report_type, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '半年度报告' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND fii.registered_capital > 10000000	supervise
SELECT fi.institution_name, lr.liquidity_coverage_ratio, lr.net_stable_funding_ratio, lr.loan_to_deposit_ratio FROM liquidity_ratio lr JOIN financial_institution_info fi ON lr.institution_id = fi.institution_id WHERE lr.institution_id IN ( SELECT bs.institution_id FROM balance_sheet bs ORDER BY bs.total_assets DESC LIMIT (SELECT COUNT(*) * 0.25 FROM balance_sheet) ) ORDER BY lr.liquidity_coverage_ratio ASC, lr.net_stable_funding_ratio ASC, lr.loan_to_deposit_ratio ASC LIMIT 5	supervise
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id WHERE EXTRACT(YEAR FROM rr.report_date) = 2023	supervise
SELECT fii.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT fii.institution_name FROM liquidity_ratio lr JOIN financial_institution_info fii ON lr.institution_id = fii.institution_id WHERE lr.report_date >= '2023-10-01' AND lr.report_date <= '2023-12-31' ORDER BY lr.liquidity_coverage_ratio DESC LIMIT 1	supervise
SELECT institution_type, AVG(EXTRACT(YEAR FROM date('now')) - EXTRACT(YEAR FROM establishment_date)) AS avg_establishment_years FROM financial_institution_info GROUP BY institution_type	supervise
WITH lcr_nsfr_variance AS (SELECT institution_id, VARIANCE(liquidity_coverage_ratio) AS lcr_variance, VARIANCE(net_stable_funding_ratio) AS nsfr_variance FROM liquidity_ratio WHERE report_date >= datetime('now') - INTERVAL '1 year' GROUP BY institution_id) SELECT institution_id FROM lcr_nsfr_variance ORDER BY lcr_variance + nsfr_variance DESC LIMIT 1	supervise
SELECT institution_id, liquidity_coverage_ratio FROM liquidity_ratio	supervise
SELECT COUNT(*) FROM compliance_records WHERE severity = '高' AND status = '未解决'	supervise
SELECT fi.institution_name FROM balance_sheet bs JOIN financial_institution_info fi ON bs.institution_id = fi.institution_id ORDER BY bs.total_assets DESC LIMIT 100	supervise
SELECT * FROM balance_sheet WHERE report_date = '2039-06-08'	supervise
SELECT re.*, fi.institution_name FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id WHERE re.report_date = '2023-09-01'	supervise
SELECT institution_id, liquidity_coverage_ratio FROM liquidity_ratio ORDER BY liquidity_coverage_ratio DESC	supervise
SELECT fi.institution_name, rr.report_type, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝' AND npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01' AND npl.npl_ratio > 1.00	supervise
SELECT fii.institution_name, rr.report_id FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT COUNT(DISTINCT institution_id) FROM non_performing_loans WHERE npl_ratio > 2	supervise
SELECT COUNT(DISTINCT re1.institution_id) FROM risk_exposure re1 JOIN risk_exposure re2 ON re1.institution_id = re2.institution_id AND re1.report_date < re2.report_date WHERE re1.report_date >= date('now') - INTERVAL '1 year' AND re2.report_date >= date('now') - INTERVAL '1 year' AND re1.market_risk_exposure < re2.market_risk_exposure AND re1.credit_risk_exposure > re2.credit_risk_exposure	supervise
SELECT COUNT(DISTINCT car.institution_id) FROM capital_adequacy_ratio car JOIN financial_institution_info fii ON car.institution_id = fii.institution_id WHERE car.report_date >= date('now') - INTERVAL '1 year' AND fii.registered_capital > (SELECT registered_capital FROM financial_institution_info WHERE institution_id = car.institution_id AND establishment_date < date('now') - INTERVAL '1 year') AND car.total_car < (SELECT total_car FROM capital_adequacy_ratio WHERE institution_id = car.institution_id AND report_date < date('now') - INTERVAL '1 year')	supervise
SELECT fii.institution_name, rpt.transaction_amount, rpt.approval_status FROM related_party_transactions rpt JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id WHERE rpt.transaction_amount > 5000000 AND rpt.approval_status = '待审批' AND rpt.transaction_date >= '2023-10-01' AND rpt.transaction_date < '2023-11-01'	supervise
SELECT * FROM related_party_transactions WHERE institution_id = 1599	supervise
SELECT fii.institution_name, npl.total_loans FROM non_performing_loans npl JOIN financial_institution_info fii ON npl.institution_id = fii.institution_id WHERE npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01' ORDER BY npl.npl_amount DESC LIMIT 1	supervise
SELECT fii.institution_name, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-05-01' AND rr.submission_date < '2023-06-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT AVG(npl_ratio) AS average_npl_ratio FROM (SELECT institution_id, AVG(npl_ratio) AS npl_ratio FROM non_performing_loans GROUP BY institution_id ORDER BY (SELECT total_assets FROM balance_sheet WHERE balance_sheet.institution_id = non_performing_loans.institution_id ORDER BY report_date DESC LIMIT 1) DESC LIMIT 50) AS top_50_institutions	supervise
SELECT institution_id, provision_coverage_ratio, npl_ratio FROM non_performing_loans WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01'	supervise
SELECT COUNT(DISTINCT bs.institution_id) FROM balance_sheet bs JOIN non_performing_loans npl ON bs.institution_id = npl.institution_id AND bs.report_date = npl.report_date WHERE (bs.loans_and_advances / bs.total_assets) > 0.6 AND npl.npl_ratio > 2	supervise
SELECT fi.institution_name FROM liquidity_ratio lr JOIN financial_institution_info fi ON lr.institution_id = fi.institution_id ORDER BY ABS(lr.loan_to_deposit_ratio - 100) LIMIT 1	supervise
SELECT institution_id, compliance_type, severity FROM compliance_records WHERE record_date >= '2023-01-01' AND record_date < '2024-01-01'	supervise
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01' AND npl.npl_amount > 0	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN liquidity_ratio l ON f.institution_id = l.institution_id WHERE l.report_date = '2023-10-01' AND l.net_stable_funding_ratio > 100	supervise
SELECT institution_name FROM financial_institution_info WHERE registered_capital > 1000000000	supervise
SELECT core_tier_1_ratio FROM capital_adequacy_ratio WHERE report_date = '2023-11-01'	supervise
SELECT COUNT(DISTINCT cr.institution_id) AS high_risk_compliance_count FROM ( SELECT rpt.institution_id FROM related_party_transactions rpt JOIN balance_sheet bs ON rpt.institution_id = bs.institution_id WHERE rpt.transaction_date = bs.report_date GROUP BY rpt.institution_id ORDER BY SUM(rpt.transaction_amount) / MAX(bs.total_assets) DESC LIMIT 10 ) AS top_institutions JOIN compliance_records cr ON top_institutions.institution_id = cr.institution_id WHERE cr.severity = '高风险'	supervise
SELECT institution_id, report_date FROM regulatory_reports WHERE submission_date = '2023-08-01'	supervise
SELECT operating_expenses / net_profit AS expense_to_profit_ratio FROM income_statement	supervise
SELECT COUNT(DISTINCT institution_id) FROM capital_adequacy_ratio WHERE core_tier_1_ratio >= 9 AND report_date >= date('now') - INTERVAL '2 years'	supervise
SELECT fii.institution_name, rr.report_id, rr.submission_date, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.approval_status = '需修改' AND rr.submission_date > '2023-07-01' AND fii.registered_capital > 100000000	supervise
SELECT institution_id, liquidity_coverage_ratio FROM liquidity_ratio WHERE liquidity_coverage_ratio > 100	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN balance_sheet bs ON fii.institution_id = bs.institution_id JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE bs.total_assets > 100000000000 AND car.core_tier_1_ratio < 9	supervise
SELECT MAX(operational_risk_exposure) FROM risk_exposure WHERE report_date = '2023-10-01'	supervise
SELECT * FROM income_statement WHERE report_date = '2024-01-01'	supervise
SELECT institution_id FROM capital_adequacy_ratio GROUP BY institution_id ORDER BY MAX(total_car) - MIN(total_car) DESC LIMIT 5	supervise
SELECT COUNT(*) FROM related_party_transactions WHERE transaction_amount < 100000000 AND approval_status = '未批准' AND EXTRACT(YEAR FROM transaction_date) = 2023	supervise
SELECT institution_id, net_profit, net_interest_income FROM income_statement WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01'	supervise
SELECT fi.institution_name FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id ORDER BY re.market_risk_exposure DESC LIMIT 1	supervise
SELECT COUNT(DISTINCT institution_id) FROM regulatory_reports WHERE approval_status = '审核中' AND EXTRACT(YEAR FROM report_date) = 2024	supervise
SELECT fi.institution_name, rr.report_type, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '半年度报告' AND npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01' AND npl.npl_ratio > 2.0	supervise
SELECT COUNT(DISTINCT institution_id) FROM capital_adequacy_ratio WHERE ABS(core_tier_1_ratio - total_car) > 3	supervise
SELECT fii.institution_name, rr.report_date FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT fii.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND rr.report_date >= '2023-07-01' AND rr.report_date < '2023-10-01'	supervise
SELECT institution_id, credit_risk_exposure, market_risk_exposure FROM risk_exposure WHERE report_date = '2024-01-01'	supervise
SELECT institution_id, operating_expenses, non_interest_income FROM income_statement	supervise
SELECT institution_id, loan_to_deposit_ratio FROM liquidity_ratio WHERE report_date = '2024-01-01'	supervise
SELECT fii.institution_name, rr.report_type, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.report_date >= '2023-07-01' AND rr.report_date < '2023-08-01' AND npl.npl_ratio > 2.00	supervise
SELECT institution_id, total_car, risk_weighted_assets FROM capital_adequacy_ratio WHERE report_date >= '2024-01-01' AND report_date < '2025-01-01'	supervise
SELECT institution_id FROM capital_adequacy_ratio WHERE tier_1_ratio > 10	supervise
SELECT fii.institution_name, rr.report_id FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN balance_sheet bs ON fii.institution_id = bs.institution_id JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE bs.total_liabilities / bs.total_assets > 0.8 AND car.core_tier_1_ratio < 8	supervise
SELECT institution_id FROM income_statement ORDER BY net_interest_income DESC LIMIT 10	supervise
SELECT fii.institution_name, rr.report_type, rr.submission_date FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.approval_status = '需修改'	supervise
SELECT fii.institution_name, re.total_risk_exposure, car.core_tier_1_ratio FROM risk_exposure re JOIN financial_institution_info fii ON re.institution_id = fii.institution_id JOIN capital_adequacy_ratio car ON re.institution_id = car.institution_id AND re.report_date = car.report_date WHERE re.report_date = '2023-11-01' AND re.total_risk_exposure > 2000000000000 AND car.core_tier_1_ratio < 10.0	supervise
SELECT fii.institution_name, rr.report_type, rr.approval_status, rr.submission_date FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2024-01-01' AND rr.submission_date < '2025-01-01' AND rr.report_type = '年度报告' AND rr.approval_status = '已批准'	supervise
SELECT record_date, severity FROM compliance_records WHERE record_date >= '2023-12-01' AND record_date < '2024-01-01'	supervise
SELECT DISTINCT fi.institution_id, fi.institution_name FROM financial_institution_info fi JOIN related_party_transactions rpt ON fi.institution_id = rpt.institution_id JOIN risk_exposure re ON fi.institution_id = re.institution_id WHERE rpt.transaction_amount / (SELECT SUM(transaction_amount) FROM related_party_transactions WHERE institution_id = fi.institution_id) > 0.5 AND re.market_risk_exposure > (SELECT AVG(market_risk_exposure) FROM risk_exposure WHERE report_date = re.report_date) ORDER BY fi.institution_id	supervise
SELECT r.institution_id, f.institution_name FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND n.npl_ratio > 2.0	supervise
SELECT * FROM liquidity_ratio WHERE institution_id = 6403	supervise
SELECT institution_id, COUNT(*) AS resolution_count FROM compliance_records WHERE status = '已解决' GROUP BY institution_id ORDER BY resolution_count DESC	supervise
SELECT r.institution_id, f.institution_name FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN capital_adequacy_ratio c ON r.institution_id = c.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND c.report_date >= '2023-01-01' AND c.report_date < '2024-01-01' AND c.core_tier_1_ratio < 10.0	supervise
SELECT fi.institution_name, npl.npl_ratio, npl.provision_coverage_ratio, car.total_car FROM non_performing_loans npl JOIN capital_adequacy_ratio car ON npl.institution_id = car.institution_id AND npl.report_date = car.report_date JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id ORDER BY npl.npl_ratio ASC, npl.provision_coverage_ratio DESC, car.total_car DESC LIMIT 5	supervise
SELECT related_party, SUM(transaction_amount) AS total_amount FROM related_party_transactions WHERE EXTRACT(YEAR FROM transaction_date) = 2023 GROUP BY related_party ORDER BY total_amount DESC LIMIT 1	supervise
SELECT * FROM balance_sheet WHERE institution_id = 3101	supervise
SELECT fi.institution_name FROM capital_adequacy_ratio car JOIN financial_institution_info fi ON car.institution_id = fi.institution_id ORDER BY ABS(car.core_tier_1_ratio - car.total_car) DESC LIMIT 1	supervise
SELECT fi.institution_name FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id WHERE npl.npl_ratio > 1	supervise
SELECT * FROM financial_institution_info WHERE institution_name = '中国进出口银行'	supervise
SELECT r.institution_id, f.institution_name, f.registered_capital, r.report_type, r.approval_status FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '半年度报告' AND r.approval_status = '待审核' AND f.registered_capital > 100000000	supervise
SELECT fii.institution_name, rr.report_type, SUM(rpt.transaction_amount) AS total_transaction_amount FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN related_party_transactions rpt ON rr.institution_id = rpt.institution_id WHERE rr.report_date = '2023-07-01' AND rr.report_type = '季度报告' GROUP BY fii.institution_name, rr.report_type HAVING SUM(rpt.transaction_amount) > 10000000	supervise
SELECT * FROM capital_adequacy_ratio WHERE institution_id = 7618	supervise
SELECT report_id, report_date, approval_status FROM regulatory_reports WHERE report_date = '2023-10-01'	supervise
SELECT fi.institution_name, rr.report_type, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND npl.report_date >= '2023-01-01' AND npl.report_date < '2023-04-01' AND npl.npl_ratio > 2.0	supervise
SELECT * FROM related_party_transactions ORDER BY transaction_amount DESC LIMIT 5	supervise
SELECT fii.institution_name, rr.report_type, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '半年度报告' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND fii.registered_capital > 1000000000	supervise
SELECT registered_capital, establishment_date FROM financial_institution_info	supervise
SELECT car.core_tier_1_ratio, car.tier_1_ratio, car.total_car, car.risk_weighted_assets, (car.risk_weighted_assets - LAG(car.risk_weighted_assets) OVER (PARTITION BY car.institution_id ORDER BY car.report_date)) / LAG(car.risk_weighted_assets) OVER (PARTITION BY car.institution_id ORDER BY car.report_date) AS risk_weighted_assets_growth_rate FROM capital_adequacy_ratio car	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_type = '年度报告' AND rr.approval_status = '已批准' AND npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01' AND npl.npl_ratio < 2	supervise
SELECT fii.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT fii.institution_name, rr.report_id, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT institution_id, credit_risk_exposure FROM risk_exposure WHERE report_date = '2023-02-01'	supervise
SELECT fi.institution_name, car.risk_weighted_assets FROM capital_adequacy_ratio car JOIN financial_institution_info fi ON car.institution_id = fi.institution_id ORDER BY car.total_car DESC LIMIT 3	supervise
SELECT TO_CHAR(submission_date, 'YYYY-MM') AS month, COUNT(*) AS report_count FROM regulatory_reports WHERE EXTRACT(YEAR FROM submission_date) = 2023 GROUP BY month ORDER BY month	supervise
SELECT comments FROM regulatory_reports WHERE submission_date = '2023-08-01'	supervise
SELECT fii.institution_name FROM capital_adequacy_ratio car JOIN financial_institution_info fii ON car.institution_id = fii.institution_id WHERE car.report_date = '2023-02-01' AND car.core_tier_1_ratio < 8	supervise
SELECT re.credit_risk_exposure, fi.registered_capital FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id WHERE re.report_date = '2023-06-01'	supervise
SELECT * FROM related_party_transactions WHERE transaction_amount > 100000000	supervise
SELECT COUNT(DISTINCT b.institution_id) FROM balance_sheet b JOIN (SELECT institution_id, AVG(deposits) AS avg_deposits FROM balance_sheet GROUP BY institution_id) a ON b.institution_id = a.institution_id WHERE b.deposits < a.avg_deposits AND b.loans_and_advances > (SELECT AVG(loans_and_advances) FROM balance_sheet)	supervise
SELECT fii.institution_name, rr.report_type, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-04-01' AND rr.submission_date < '2023-07-01' ORDER BY fii.institution_name	supervise
SELECT fii.institution_name, rr.report_type, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '半年度报告' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND fii.registered_capital > 10000000	supervise
SELECT fi.institution_name, (bs.cash_and_equivalents / bs.total_assets * 100) AS cash_ratio FROM financial_institution_info fi JOIN balance_sheet bs ON fi.institution_id = bs.institution_id ORDER BY cash_ratio DESC LIMIT 1	supervise
SELECT transaction_type FROM related_party_transactions WHERE EXTRACT(YEAR FROM transaction_date) = 2023 GROUP BY transaction_type ORDER BY AVG(transaction_date - transaction_date) DESC LIMIT 1	supervise
SELECT fii.institution_name FROM non_performing_loans npl JOIN financial_institution_info fii ON npl.institution_id = fii.institution_id WHERE npl.npl_ratio > ( SELECT PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY npl_ratio) FROM non_performing_loans ) AND npl.provision_coverage_ratio > ( SELECT AVG(provision_coverage_ratio) FROM non_performing_loans )	supervise
SELECT institution_id FROM non_performing_loans WHERE report_date = '2023-05-01' AND provision_coverage_ratio > 150	supervise
SELECT fii.institution_name, rr.report_type, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND rr.report_date = '2023-07-01' AND npl.report_date = '2023-07-01' AND npl.npl_ratio > 1.5	supervise
SELECT fii.institution_name, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT r.institution_id, f.institution_name, r.report_id, r.report_type, r.approval_status, c.core_tier_1_ratio FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN capital_adequacy_ratio c ON r.institution_id = c.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '已拒绝' AND c.report_date >= '2023-01-01' AND c.report_date < '2024-01-01' AND c.core_tier_1_ratio < 10.0	supervise
SELECT fii.institution_name, (re.credit_risk_exposure - LAG(re.credit_risk_exposure) OVER (PARTITION BY re.institution_id ORDER BY re.report_date)) / LAG(re.credit_risk_exposure) OVER (PARTITION BY re.institution_id ORDER BY re.report_date) AS growth_rate FROM risk_exposure re JOIN financial_institution_info fii ON re.institution_id = fii.institution_id WHERE re.report_date >= date('now') - INTERVAL '1 year' ORDER BY growth_rate DESC LIMIT 5	supervise
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN related_party_transactions rpt ON fi.institution_id = rpt.institution_id WHERE rr.approval_status = '需修改' AND rpt.transaction_amount > 5000000 AND rr.report_date BETWEEN '2023-07-01' AND '2023-09-30'	supervise
SELECT npl.total_loans, npl.npl_ratio FROM non_performing_loans npl WHERE npl.report_date = '2023-06-01'	supervise
SELECT institution_id, operating_expenses, net_profit FROM income_statement WHERE report_date >= '2024-01-01' AND report_date < '2024-02-01'	supervise
SELECT fii.institution_type, rpt.transaction_type, COUNT(*) AS transaction_count FROM related_party_transactions rpt JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id GROUP BY fii.institution_type, rpt.transaction_type	supervise
SELECT fii.institution_name, rr.report_type, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.report_date = '2023-07-01' AND npl.report_date = '2023-07-01' AND npl.npl_ratio > 1.00	supervise
WITH related_transaction_sum AS (SELECT institution_id, SUM(transaction_amount) AS total_related_amount FROM related_party_transactions WHERE transaction_date >= date('now') - INTERVAL '2 years' GROUP BY institution_id), asset_ratio AS (SELECT rt.institution_id, rt.total_related_amount / MAX(bs.total_assets) AS related_asset_ratio FROM related_transaction_sum rt JOIN balance_sheet bs ON rt.institution_id = bs.institution_id WHERE bs.report_date >= date('now') - INTERVAL '2 years' GROUP BY rt.institution_id, rt.total_related_amount) SELECT fi.institution_name, ar.related_asset_ratio, AVG(car.total_car) AS avg_capital_adequacy_ratio FROM financial_institution_info fi JOIN asset_ratio ar ON fi.institution_id = ar.institution_id JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id WHERE car.report_date >= date('now') - INTERVAL '2 years' GROUP BY fi.institution_name, ar.related_asset_ratio ORDER BY ar.related_asset_ratio DESC LIMIT 5	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN balance_sheet bs ON fi.institution_id = bs.institution_id WHERE bs.report_date = '2024-04-01' AND bs.total_assets > 500000000000	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND npl.npl_ratio > 1.00	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN risk_exposure re ON fi.institution_id = re.institution_id WHERE re.report_date >= '2023-01-01' AND re.report_date < '2024-01-01' ORDER BY re.credit_risk_exposure ASC LIMIT 1	supervise
SELECT fi.institution_id, fi.institution_name FROM financial_institution_info fi JOIN risk_exposure re ON fi.institution_id = re.institution_id JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE re.operational_risk_exposure / re.total_risk_exposure > 0.15 AND npl.npl_ratio > (SELECT AVG(npl_ratio) FROM non_performing_loans)	supervise
SELECT liquidity_coverage_ratio, net_stable_funding_ratio FROM liquidity_ratio ORDER BY institution_id LIMIT 1 OFFSET (SELECT COUNT(*) FROM liquidity_ratio) / 2	supervise
SELECT fii.institution_name, npl.npl_ratio FROM non_performing_loans npl JOIN financial_institution_info fii ON npl.institution_id = fii.institution_id WHERE npl.npl_amount > 46000000000	supervise
SELECT fii.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT corr(car.total_car - 10.5, re.total_risk_exposure) AS correlation FROM capital_adequacy_ratio car JOIN risk_exposure re ON car.institution_id = re.institution_id AND car.report_date = re.report_date	supervise
SELECT institution_id, report_date, liquidity_coverage_ratio, net_stable_funding_ratio FROM liquidity_ratio WHERE liquidity_coverage_ratio <> net_stable_funding_ratio	supervise
SELECT institution_id FROM risk_exposure WHERE (market_risk_exposure + operational_risk_exposure) > total_risk_exposure * 0.4	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id WHERE car.report_date >= '2023-01-01' AND car.report_date < '2024-01-01' AND car.core_tier_1_ratio < 8 AND rr.approval_status = '已批准'	supervise
SELECT fi.institution_name, (bs.cash_and_equivalents / bs.total_assets) AS cash_ratio FROM balance_sheet bs JOIN financial_institution_info fi ON bs.institution_id = fi.institution_id ORDER BY cash_ratio DESC LIMIT 1	supervise
SELECT COUNT(DISTINCT npl1.institution_id) FROM non_performing_loans npl1 JOIN non_performing_loans npl2 ON npl1.institution_id = npl2.institution_id AND npl1.report_date < npl2.report_date JOIN balance_sheet bs1 ON npl1.institution_id = bs1.institution_id AND npl1.report_date = bs1.report_date JOIN balance_sheet bs2 ON npl1.institution_id = bs2.institution_id AND npl2.report_date = bs2.report_date WHERE npl1.npl_ratio < npl2.npl_ratio AND bs1.loans_and_advances < bs2.loans_and_advances	supervise
SELECT institution_id FROM related_party_transactions WHERE transaction_date >= '2023-11-01' AND transaction_date < '2023-12-01' AND transaction_amount > 10000000	supervise
SELECT AVG(provision_coverage_ratio) FROM (SELECT provision_coverage_ratio FROM non_performing_loans ORDER BY npl_ratio DESC LIMIT 10) AS top_institutions	supervise
SELECT fii.institution_name, car.core_tier_1_ratio, npl.npl_ratio FROM capital_adequacy_ratio car JOIN non_performing_loans npl ON car.institution_id = npl.institution_id AND car.report_date = npl.report_date JOIN financial_institution_info fii ON car.institution_id = fii.institution_id WHERE car.report_date = '2023-05-01' AND car.core_tier_1_ratio < 10 AND npl.npl_ratio > 2	supervise
SELECT institution_id, transaction_amount, transaction_date, related_party, transaction_type, approval_status FROM related_party_transactions WHERE transaction_date >= '2024-01-01' AND transaction_date < '2025-01-01'	supervise
SELECT fii.institution_name, car.core_tier_1_ratio, npl.npl_ratio FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE car.report_date >= '2023-01-01' AND car.report_date < '2023-04-01' AND car.core_tier_1_ratio < 10 AND npl.npl_ratio > 2	supervise
SELECT institution_id, AVG(resolution_date - record_date) AS avg_resolution_time FROM compliance_records WHERE resolution_date IS NOT NULL AND record_date >= date('now') - INTERVAL '1 year' GROUP BY institution_id ORDER BY avg_resolution_time ASC LIMIT 5	supervise
SELECT report_type, report_date FROM regulatory_reports WHERE EXTRACT(YEAR FROM report_date) = 2024	supervise
SELECT institution_name, registered_capital FROM financial_institution_info	supervise
WITH avg_risk_exposure AS (SELECT AVG(credit_risk_exposure) AS avg_credit_risk, AVG(market_risk_exposure) AS avg_market_risk, AVG(operational_risk_exposure) AS avg_operational_risk FROM risk_exposure WHERE report_date >= date('now') - INTERVAL '1 year'), high_risk_institutions AS (SELECT re.institution_id, MAX(re.credit_risk_exposure) AS max_credit_risk, MAX(re.market_risk_exposure) AS max_market_risk, MAX(re.operational_risk_exposure) AS max_operational_risk FROM risk_exposure re, avg_risk_exposure are WHERE re.report_date >= date('now') - INTERVAL '1 year' AND re.credit_risk_exposure > are.avg_credit_risk AND re.market_risk_exposure > are.avg_market_risk AND re.operational_risk_exposure > are.avg_operational_risk GROUP BY re.institution_id) SELECT fi.institution_name, (hri.max_credit_risk + hri.max_market_risk + hri.max_operational_risk) / (SELECT SUM(total_risk_exposure) FROM risk_exposure WHERE report_date = (SELECT MAX(report_date) FROM risk_exposure)) AS composite_risk_index FROM financial_institution_info fi JOIN high_risk_institutions hri ON fi.institution_id = hri.institution_id ORDER BY composite_risk_index DESC	supervise
SELECT * FROM risk_exposure WHERE report_date = '2023-02-01'	supervise
SELECT * FROM liquidity_ratio WHERE institution_id = 4691	supervise
SELECT DISTINCT institution_id FROM compliance_records WHERE record_date >= '2023-01-01' AND record_date < '2024-01-01' AND compliance_type = '信息披露'	supervise
SELECT * FROM capital_adequacy_ratio WHERE report_date = '2023-03-01'	supervise
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE npl.report_date >= '2023-01-01' AND npl.provision_coverage_ratio > 200	supervise
SELECT fii.institution_name FROM risk_exposure re JOIN financial_institution_info fii ON re.institution_id = fii.institution_id WHERE EXTRACT(YEAR FROM re.report_date) = 2023 ORDER BY re.market_risk_exposure ASC LIMIT 1	supervise
SELECT COUNT(*) FROM regulatory_reports WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01' AND approval_status = '待审核'	supervise
SELECT AVG(liquidity_coverage_ratio) AS avg_liquidity_coverage_ratio, institution_id FROM liquidity_ratio GROUP BY institution_id	supervise
SELECT DISTINCT fi.institution_name, fi.registered_capital, rr.report_type, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id AND rr.report_date = npl.report_date WHERE npl.npl_ratio > 2 AND fi.registered_capital > 10000 AND rr.report_date >= '2023-01-01' AND rr.report_date < '2024-01-01'	supervise
SELECT npl.institution_id, npl.total_loans FROM non_performing_loans npl WHERE npl.report_date = '2023-06-01' AND npl.npl_amount > 0	supervise
SELECT institution_id FROM liquidity_ratio ORDER BY ABS(liquidity_coverage_ratio - net_stable_funding_ratio) DESC LIMIT 10	supervise
SELECT * FROM related_party_transactions ORDER BY transaction_amount DESC LIMIT 1	supervise
SELECT rpt.transaction_amount, rpt.transaction_date, rpt.related_party, fii.institution_name, fii.institution_type FROM related_party_transactions rpt JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id WHERE rpt.approval_status = '已批准' AND EXTRACT(YEAR FROM rpt.transaction_date) = 2023	supervise
SELECT fii.institution_name, rr.report_type, rr.approval_status, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND fii.registered_capital > 100000000 AND rr.report_date BETWEEN '2023-07-01' AND '2023-09-30'	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN risk_exposure re ON fi.institution_id = re.institution_id WHERE re.report_date = '2023-05-01' AND re.market_risk_exposure > 30000000000	supervise
SELECT record_id, institution_id, record_date, resolution_date, description, severity, status, compliance_type FROM compliance_records WHERE record_date = '2023-12-30'	supervise
SELECT institution_id, report_date, credit_risk_exposure, market_risk_exposure, operational_risk_exposure, total_risk_exposure FROM risk_exposure ORDER BY institution_id, report_date	supervise
SELECT fii.institution_name, rr.report_id FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '半年度报告' AND rr.approval_status = '待审核'	supervise
SELECT corr(rpt.transaction_amount, bs.total_assets) AS correlation FROM related_party_transactions rpt JOIN balance_sheet bs ON rpt.institution_id = bs.institution_id AND rpt.transaction_date = bs.report_date	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND rr.report_date BETWEEN '2023-07-01' AND '2023-09-30' AND npl.npl_ratio > 2.00	supervise
SELECT AVG(total_liabilities / total_assets) AS avg_asset_liability_ratio, AVG(total_assets / total_equity) AS avg_equity_multiplier FROM balance_sheet WHERE institution_id IN (SELECT institution_id FROM balance_sheet ORDER BY total_assets DESC LIMIT 300)	supervise
SELECT institution_id, credit_risk_exposure, operational_risk_exposure FROM risk_exposure WHERE report_date = '2023-12-01'	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN balance_sheet bs ON fi.institution_id = bs.institution_id WHERE bs.cash_and_equivalents > 3000000000 AND bs.report_date = (SELECT MAX(report_date) FROM balance_sheet)	supervise
SELECT institution_id, COUNT(*) AS problem_count FROM compliance_records WHERE record_date >= '2023-01-01' GROUP BY institution_id ORDER BY problem_count DESC LIMIT 5	supervise
SELECT fi.institution_name, COUNT(DISTINCT rpt.transaction_type) AS distinct_transaction_types FROM related_party_transactions rpt JOIN financial_institution_info fi ON rpt.institution_id = fi.institution_id WHERE EXTRACT(YEAR FROM rpt.transaction_date) = 2023 GROUP BY fi.institution_name ORDER BY distinct_transaction_types DESC LIMIT 1	supervise
SELECT * FROM compliance_records WHERE status = '未解决'	supervise
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN related_party_transactions rpt ON fi.institution_id = rpt.institution_id WHERE rr.approval_status = '需修改' AND rpt.approval_status = '已拒绝' AND rr.report_date BETWEEN '2023-07-01' AND '2023-09-30'	supervise
SELECT fii.institution_name FROM liquidity_ratio lr JOIN financial_institution_info fii ON lr.institution_id = fii.institution_id WHERE lr.report_date BETWEEN '2023-07-01' AND '2023-09-30' ORDER BY lr.net_stable_funding_ratio ASC LIMIT 1	supervise
SELECT fi.institution_name, COUNT(rpt.approval_status) FILTER (WHERE rpt.approval_status = '已批准') * 1.0 / COUNT(rpt.approval_status) AS approval_rate FROM financial_institution_info fi JOIN related_party_transactions rpt ON fi.institution_id = rpt.institution_id GROUP BY fi.institution_name ORDER BY approval_rate ASC LIMIT 5	supervise
SELECT fii.institution_name, rr.report_date, rr.submission_date FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '半年度报告' AND rr.approval_status = '待审核' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01'	supervise
SELECT fii.institution_name, rr.report_type, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND fii.registered_capital > 100000000	supervise
SELECT fii.institution_name, rr.report_id, rr.approval_status, car.total_car FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN capital_adequacy_ratio car ON rr.institution_id = car.institution_id WHERE rr.approval_status = '已批准' AND rr.submission_date > '2023-09-01' AND car.total_car > 12.00	supervise
SELECT fii.institution_name, rr.report_type, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_type = '半年度报告' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND npl.npl_ratio > 2.0	supervise
SELECT fi.institution_name, rr.report_type, SUM(rpt.transaction_amount) AS total_transaction_amount FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id JOIN related_party_transactions rpt ON rr.institution_id = rpt.institution_id WHERE rr.report_type = '半年度报告' AND rr.report_date >= '2023-10-01' AND rr.report_date < '2023-11-01' GROUP BY fi.institution_name, rr.report_type HAVING SUM(rpt.transaction_amount) > 10000000	supervise
SELECT COUNT(DISTINCT npl.institution_id) FROM non_performing_loans npl WHERE npl.npl_ratio < (SELECT AVG(npl_ratio) FROM non_performing_loans) AND npl.provision_coverage_ratio > (SELECT AVG(provision_coverage_ratio) FROM non_performing_loans)	supervise
SELECT fii.institution_name, rr.report_id, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_date = '2023-07-01' AND rr.approval_status = '需修改' AND fii.registered_capital > 1000000000	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND npl.npl_ratio > 2.0 AND rr.report_date = npl.report_date	supervise
SELECT institution_id FROM income_statement WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01' AND net_profit > 100000000	supervise
SELECT transaction_id, transaction_type FROM related_party_transactions WHERE transaction_date = '2023-12-22'	supervise
SELECT submission_date, report_type FROM regulatory_reports	supervise
SELECT institution_type, stddev_pop(total_car) / avg(total_car) AS coefficient_of_variation FROM capital_adequacy_ratio JOIN financial_institution_info ON capital_adequacy_ratio.institution_id = financial_institution_info.institution_id GROUP BY institution_type ORDER BY coefficient_of_variation DESC LIMIT 1	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE car.report_date = '2023-05-01' AND npl.report_date = '2023-05-01' AND car.total_car < 12 AND npl.npl_ratio > 2	supervise
SELECT record_id, institution_id, record_date, resolution_date, description, severity, status, compliance_type FROM compliance_records WHERE record_date >= '2023-10-01' AND record_date < '2023-11-01'	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE car.report_date = '2023-12-01' AND npl.report_date = '2023-12-01' AND car.core_tier_1_ratio < 8 AND npl.npl_ratio > 2	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN non_performing_loans n ON f.institution_id = n.institution_id WHERE n.report_date = '2023-10-01' AND n.provision_coverage_ratio > 150	supervise
SELECT institution_id FROM non_performing_loans WHERE report_date = '2023-06-01' AND npl_amount > 10000000000	supervise
WITH ranked_institutions AS (SELECT istat.institution_id, (rpt.transaction_amount / ist.net_profit) AS transaction_to_profit_ratio FROM related_party_transactions rpt JOIN income_statement ist ON rpt.institution_id = ist.institution_id JOIN financial_institution_info istat ON rpt.institution_id = istat.institution_id ORDER BY transaction_to_profit_ratio DESC LIMIT 10), high_risk_institutions AS (SELECT re.institution_id FROM risk_exposure re WHERE re.credit_risk_exposure > (SELECT AVG(credit_risk_exposure) FROM risk_exposure)) SELECT COUNT(*) FROM ranked_institutions ri JOIN high_risk_institutions hri ON ri.institution_id = hri.institution_id	supervise
SELECT report_type, AVG(revision_count) AS average_revision_count FROM (SELECT report_type, COUNT(*) AS revision_count FROM regulatory_reports WHERE EXTRACT(YEAR FROM report_date) = 2023 GROUP BY report_type, report_id) AS revisions GROUP BY report_type	supervise
SELECT fii.institution_name, fii.registered_capital, cr.description, cr.severity FROM compliance_records cr JOIN financial_institution_info fii ON cr.institution_id = fii.institution_id WHERE cr.record_date = '2023-11-12' AND cr.status = '未解决' AND fii.registered_capital > 50000000	supervise
SELECT report_type, COUNT(CASE WHEN approval_status = '已批准' THEN 1 END) * 100.0 / COUNT(*) AS approval_rate FROM regulatory_reports WHERE submission_date BETWEEN '2023-10-01' AND '2023-12-31' GROUP BY report_type ORDER BY approval_rate ASC LIMIT 1	supervise
SELECT rr.submission_date, npl.npl_amount FROM regulatory_reports rr JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_date = '2024-01-01'	supervise
SELECT COUNT(*) FROM (SELECT institution_id FROM balance_sheet ORDER BY total_assets DESC LIMIT 200) AS top_200 INNER JOIN liquidity_ratio ON top_200.institution_id = liquidity_ratio.institution_id WHERE liquidity_coverage_ratio > 100 AND net_stable_funding_ratio > 100	supervise
SELECT AVG(liquidity_coverage_ratio) FROM liquidity_ratio WHERE report_date = '2023-06-30'	supervise
SELECT institution_id FROM liquidity_ratio ORDER BY liquidity_coverage_ratio DESC LIMIT 1	supervise
SELECT report_date, credit_risk_exposure / total_risk_exposure AS credit_risk_ratio, market_risk_exposure / total_risk_exposure AS market_risk_ratio, operational_risk_exposure / total_risk_exposure AS operational_risk_ratio FROM risk_exposure	supervise
SELECT institution_id, MAX(total_car) - MIN(total_car) AS car_fluctuation FROM capital_adequacy_ratio WHERE report_date >= date('now') - INTERVAL '2 years' GROUP BY institution_id ORDER BY car_fluctuation DESC LIMIT 1	supervise
SELECT fi.institution_name, (re.operational_risk_exposure / NULLIF(re.total_risk_exposure, 0)) * 100 as operational_risk_ratio FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id WHERE EXTRACT(YEAR FROM re.report_date) = 2023 AND (re.operational_risk_exposure / NULLIF(re.total_risk_exposure, 0)) > 0.3 ORDER BY operational_risk_ratio DESC	supervise
SELECT * FROM related_party_transactions WHERE approval_status = '已批准'	supervise
SELECT institution_id, report_date, credit_risk_exposure, market_risk_exposure, operational_risk_exposure, total_risk_exposure FROM risk_exposure ORDER BY institution_id, report_date	supervise
SELECT institution_id FROM compliance_records WHERE record_date >= '2023-01-01' AND record_date < '2024-01-01' AND severity = '严重'	supervise
SELECT fii.institution_name, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT fii.institution_name, npl.npl_ratio, re.total_risk_exposure FROM non_performing_loans npl JOIN financial_institution_info fii ON npl.institution_id = fii.institution_id JOIN risk_exposure re ON npl.institution_id = re.institution_id AND npl.report_date = re.report_date WHERE npl.report_date = '2023-12-01' AND npl.npl_ratio > 2 AND re.total_risk_exposure > 100000000000	supervise
SELECT fii.institution_name FROM related_party_transactions rpt JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id WHERE rpt.transaction_date >= '2023-01-01' ORDER BY rpt.transaction_amount DESC LIMIT 5	supervise
SELECT institution_id, total_car, report_date FROM capital_adequacy_ratio WHERE report_date >= '2024-01-01' AND report_date < '2024-02-01'	supervise
SELECT COUNT(*) FROM capital_adequacy_ratio WHERE core_tier_1_ratio < 8	supervise
SELECT fi.institution_name, (bs.loans_and_advances / bs.total_assets * 100) AS loan_asset_ratio FROM financial_institution_info fi JOIN balance_sheet bs ON fi.institution_id = bs.institution_id WHERE (bs.loans_and_advances / bs.total_assets) > 0.5	supervise
SELECT COUNT(DISTINCT lr.institution_id) FROM liquidity_ratio lr JOIN (SELECT institution_id, MAX(liquidity_coverage_ratio) - MIN(liquidity_coverage_ratio) AS ratio_diff FROM liquidity_ratio GROUP BY institution_id) sub ON lr.institution_id = sub.institution_id WHERE sub.ratio_diff > 50 AND lr.institution_id NOT IN (SELECT institution_id FROM compliance_records WHERE compliance_type = '流动性问题' AND severity = '严重')	supervise
SELECT institution_id, report_date, core_tier_1_ratio, total_car FROM capital_adequacy_ratio WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01'	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN risk_exposure re ON fi.institution_id = re.institution_id ORDER BY re.operational_risk_exposure / re.total_risk_exposure DESC LIMIT 3	supervise
SELECT fii.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT fii.institution_name FROM liquidity_ratio lr JOIN financial_institution_info fii ON lr.institution_id = fii.institution_id WHERE lr.report_date BETWEEN '2023-07-01' AND '2023-09-30' ORDER BY lr.liquidity_coverage_ratio DESC LIMIT 1	supervise
SELECT fi.institution_name FROM balance_sheet bs JOIN financial_institution_info fi ON bs.institution_id = fi.institution_id ORDER BY (bs.cash_and_equivalents / bs.total_assets) DESC LIMIT 1	supervise
SELECT corr(c.total_car, i.net_profit / b.total_equity) AS correlation FROM capital_adequacy_ratio c JOIN income_statement i ON c.institution_id = i.institution_id AND c.report_date = i.report_date JOIN balance_sheet b ON c.institution_id = b.institution_id AND c.report_date = b.report_date	supervise
SELECT AVG(loan_to_deposit_ratio) FROM liquidity_ratio WHERE report_date = '2023-03-31'	supervise
SELECT fi.institution_name, rpt.transaction_amount FROM related_party_transactions rpt JOIN financial_institution_info fi ON rpt.institution_id = fi.institution_id WHERE EXTRACT(YEAR FROM rpt.transaction_date) = 2023 ORDER BY rpt.transaction_amount DESC LIMIT 1	supervise
SELECT fii.institution_name, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT institution_id FROM non_performing_loans WHERE npl_ratio > 1.5	supervise
SELECT fii.institution_name, rr.report_type, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND npl.npl_ratio > 2.00	supervise
SELECT npl.*, fi.institution_name FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id WHERE npl.report_date = '2023-03-01'	supervise
SELECT fi.institution_name FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND car.report_date = '2023-07-01' AND car.core_tier_1_ratio < 10	supervise
SELECT fii.institution_name, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date = '2023-11-01' AND rr.report_type = '半年度报告' AND rr.approval_status = '待审核'	supervise
SELECT record_id, institution_id, record_date, resolution_date, description, severity, status, compliance_type FROM compliance_records WHERE record_date >= '2023-05-01' AND record_date < '2023-06-01'	supervise
SELECT fii.institution_name, rr.report_type, rr.submission_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT institution_id, SUM(total_loans) AS total_loans_amount, SUM(npl_amount) AS total_npl_amount FROM non_performing_loans WHERE report_date >= '2023-12-01' AND report_date < '2024-01-01' GROUP BY institution_id	supervise
SELECT description, status FROM compliance_records WHERE record_date = '2023-09-03'	supervise
SELECT * FROM risk_exposure WHERE report_date = '2023-02-01'	supervise
SELECT fii.institution_name, rr.report_type, car.total_car FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN capital_adequacy_ratio car ON rr.institution_id = car.institution_id WHERE rr.report_date = '2024-01-01' AND rr.report_type = '年度报告' AND car.total_car > 10	supervise
SELECT fii.institution_name, rr.report_type, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_date = '2023-07-01' AND rr.report_type = '季度报告' AND npl.npl_ratio > 2.00	supervise
SELECT institution_id FROM capital_adequacy_ratio ORDER BY risk_weighted_assets DESC LIMIT 5	supervise
SELECT fii.institution_name, rr.report_id FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT fi.address AS region, AVG(bs.total_liabilities / bs.total_assets) AS avg_asset_liability_ratio FROM financial_institution_info fi JOIN balance_sheet bs ON fi.institution_id = bs.institution_id GROUP BY fi.address ORDER BY avg_asset_liability_ratio ASC LIMIT 1	supervise
SELECT npl_ratio, provision_coverage_ratio FROM non_performing_loans	supervise
SELECT institution_id, (non_interest_income / net_profit) AS dependency_ratio FROM income_statement WHERE report_date >= '2023-10-01' AND report_date <= '2023-12-31' ORDER BY dependency_ratio DESC	supervise
SELECT r.submission_date, f.institution_name FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id WHERE r.submission_date >= '2024-01-01' AND r.submission_date < '2025-01-01'	supervise
SELECT institution_id, AVG(resolution_date - record_date) AS avg_resolution_time FROM compliance_records GROUP BY institution_id ORDER BY avg_resolution_time LIMIT 10	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN balance_sheet b ON f.institution_id = b.institution_id WHERE b.report_date = '2031-12-07' AND b.total_assets > 600000000000	supervise
SELECT corr(npl_ratio, loan_to_deposit_ratio) FROM non_performing_loans JOIN liquidity_ratio USING (institution_id, report_date)	supervise
SELECT institution_id, loan_to_deposit_ratio FROM liquidity_ratio	supervise
SELECT institution_name FROM financial_institution_info ORDER BY registered_capital DESC LIMIT 1	supervise
SELECT re.institution_id, re.total_risk_exposure, re.credit_risk_exposure / re.total_risk_exposure AS credit_risk_exposure_ratio FROM risk_exposure re WHERE re.report_date = '2024-01-01'	supervise
SELECT fi.institution_name FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id ORDER BY npl.npl_ratio ASC LIMIT 1	supervise
SELECT institution_id, related_party, transaction_amount FROM related_party_transactions	supervise
SELECT fii.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE rr.report_type = '半年度报告' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND car.report_date >= '2023-01-01' AND car.report_date < '2024-01-01' AND car.total_car > 12	supervise
SELECT fii.institution_name, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.approval_status = '需修改' AND rr.submission_date >= '2023-08-01' AND rr.submission_date < '2023-09-01' AND fii.registered_capital > 50000000	supervise
SELECT fii.institution_name, rr.report_id, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id AND rr.report_date = npl.report_date WHERE rr.approval_status = '需修改' AND rr.report_date >= '2023-07-01' AND rr.report_date < '2023-10-01' AND npl.npl_ratio > 1.00	supervise
SELECT institution_id FROM non_performing_loans WHERE npl_ratio < 5 AND provision_coverage_ratio > 150	supervise
SELECT report_date, core_tier_1_ratio FROM capital_adequacy_ratio ORDER BY report_date	supervise
SELECT fi.institution_id, fi.institution_name, COUNT(cr.record_id) AS compliance_issues, bs.total_assets FROM financial_institution_info fi JOIN compliance_records cr ON fi.institution_id = cr.institution_id JOIN balance_sheet bs ON fi.institution_id = bs.institution_id WHERE cr.record_date >= '2023-01-01' GROUP BY fi.institution_id, fi.institution_name, bs.total_assets ORDER BY COUNT(cr.record_id) DESC, bs.total_assets DESC LIMIT 5	supervise
SELECT fii.institution_name, rr.report_type, npl.npl_ratio, car.total_car FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id AND rr.report_date = npl.report_date JOIN capital_adequacy_ratio car ON rr.institution_id = car.institution_id AND rr.report_date = car.report_date WHERE rr.report_date >= '2023-01-01' AND rr.report_date < '2024-01-01' AND npl.npl_ratio > 2.0 AND car.total_car < 12.0	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN regulatory_reports r ON f.institution_id = r.institution_id WHERE r.submission_date = '2023-05-01' AND r.comments LIKE '%重大问题%'	supervise
SELECT npl_ratio, provision_coverage_ratio FROM non_performing_loans WHERE report_date = '2023-03-01'	supervise
SELECT COUNT(DISTINCT cr.institution_id) FROM compliance_records cr JOIN (SELECT institution_id FROM related_party_transactions WHERE transaction_date >= date('now') - INTERVAL '1 year' GROUP BY institution_id HAVING COUNT(*) > 1) rpt ON cr.institution_id = rpt.institution_id WHERE cr.record_date >= date('now') - INTERVAL '1 year' AND cr.compliance_type = '业绩波动'	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN (SELECT institution_id FROM income_statement WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01' ORDER BY net_interest_income DESC LIMIT 10) top_institutions ON fii.institution_id = top_institutions.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id AND npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01' WHERE npl.npl_ratio > 2	supervise
SELECT fi.address AS region, AVG(car.total_car) AS avg_capital_adequacy_ratio, RANK() OVER (ORDER BY AVG(car.total_car) DESC) AS rank FROM financial_institution_info fi JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id GROUP BY fi.address ORDER BY rank	supervise
SELECT net_interest_income / non_interest_income AS interest_to_non_interest_ratio FROM income_statement	supervise
SELECT fi.institution_name, rr.report_type, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝' AND npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01' AND npl.npl_ratio > 1.00	supervise
SELECT fii.institution_name FROM balance_sheet bs JOIN financial_institution_info fii ON bs.institution_id = fii.institution_id ORDER BY (bs.deposits / bs.total_assets) DESC LIMIT 1	supervise
SELECT car.*, lr.liquidity_coverage_ratio FROM capital_adequacy_ratio car JOIN liquidity_ratio lr ON car.institution_id = lr.institution_id WHERE car.report_date = '2023-03-01'	supervise
SELECT * FROM compliance_records WHERE record_date >= '2023-01-01' AND record_date < '2024-01-01' AND severity = '高'	supervise
SELECT fi.institution_name, bs.total_assets / bs.total_equity AS leverage_ratio FROM balance_sheet bs JOIN financial_institution_info fi ON bs.institution_id = fi.institution_id ORDER BY leverage_ratio DESC LIMIT 5	supervise
SELECT institution_id, net_stable_funding_ratio FROM liquidity_ratio WHERE EXTRACT(YEAR FROM report_date) = 2024	supervise
SELECT fii.institution_name, AVG(crt.resolution_date - crt.record_date) AS avg_approval_time FROM compliance_records crt JOIN financial_institution_info fii ON crt.institution_id = fii.institution_id WHERE crt.record_date >= '2023-01-01' GROUP BY fii.institution_name ORDER BY avg_approval_time DESC LIMIT 1	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN liquidity_ratio l ON f.institution_id = l.institution_id WHERE l.report_date = '2023-11-01' ORDER BY l.liquidity_coverage_ratio ASC LIMIT 1	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id WHERE car.report_date = '2023-12-01' AND car.core_tier_1_ratio < 10 AND rr.approval_status = '待审核'	supervise
SELECT compliance_type, COUNT(*) AS recurrence_count FROM compliance_records GROUP BY compliance_type ORDER BY recurrence_count DESC LIMIT 1	supervise
SELECT fii.institution_id, fii.institution_name, fii.institution_type, fii.license_number, fii.contact_number, fii.address, fii.legal_representative, car.report_date, car.core_tier_1_ratio FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE car.core_tier_1_ratio < 9	supervise
SELECT * FROM regulatory_reports WHERE institution_id = 2033	supervise
SELECT lr.liquidity_coverage_ratio, lr.net_stable_funding_ratio, lr.loan_to_deposit_ratio, npl.npl_ratio FROM liquidity_ratio lr JOIN non_performing_loans npl ON lr.institution_id = npl.institution_id AND lr.report_date = npl.report_date	supervise
SELECT npl_ratio FROM non_performing_loans WHERE report_date = '2023-06-01'	supervise
SELECT DISTINCT institution_id FROM compliance_records WHERE severity = '严重' AND record_date >= date('now') - INTERVAL '1 year'	supervise
SELECT fii.institution_name, rr.report_type, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '半年度报告' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND fii.registered_capital > 50000000	supervise
SELECT institution_id, provision_for_loan_losses FROM income_statement WHERE report_date = '2023-06-01'	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE car.report_date = '2023-03-01' AND npl.report_date = '2023-03-01' AND car.total_car < 12 AND npl.npl_ratio > 2	supervise
SELECT institution_type, AVG(total_car) AS average_capital_adequacy_ratio FROM capital_adequacy_ratio JOIN financial_institution_info ON capital_adequacy_ratio.institution_id = financial_institution_info.institution_id GROUP BY institution_type	supervise
SELECT SUM(total_liabilities) / SUM(total_assets) AS liability_to_asset_ratio FROM balance_sheet WHERE EXTRACT(YEAR FROM report_date) = 2024	supervise
SELECT institution_id FROM liquidity_ratio WHERE loan_to_deposit_ratio > 75 AND liquidity_coverage_ratio < 120	supervise
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN compliance_records cr ON fi.institution_id = cr.institution_id WHERE cr.status = '未解决' AND cr.severity = '严重'	supervise
SELECT * FROM related_party_transactions WHERE transaction_date = '2023-04-18'	supervise
SELECT fii.institution_name, AVG(rpt.transaction_amount) AS avg_transaction_amount FROM related_party_transactions rpt JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id WHERE EXTRACT(YEAR FROM rpt.transaction_date) = 2023 GROUP BY fii.institution_name ORDER BY avg_transaction_amount DESC LIMIT 1	supervise
SELECT * FROM regulatory_reports WHERE report_date = '2023-10-01'	supervise
SELECT institution_id, net_profit FROM income_statement WHERE report_date = '2023-03-01'	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND car.risk_weighted_assets > 100000000000 AND rr.report_date BETWEEN '2023-07-01' AND '2023-09-30'	supervise
SELECT institution_id, transaction_amount, transaction_date, related_party, transaction_type FROM related_party_transactions WHERE transaction_date >= '2023-12-01' AND transaction_date < '2024-01-01'	supervise
SELECT risk_weighted_assets FROM capital_adequacy_ratio WHERE report_date = '2023-11-01'	supervise
SELECT fii.* FROM financial_institution_info fii JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01' AND npl.npl_ratio > 2	supervise
SELECT institution_id FROM liquidity_ratio WHERE loan_to_deposit_ratio < 70	supervise
SELECT transaction_type, COUNT(*) AS total_transactions, COUNT(*) FILTER (WHERE approval_status = '已批准') AS approved_transactions, COUNT(*) FILTER (WHERE approval_status = '已批准') / COUNT(*) AS approval_rate FROM related_party_transactions WHERE transaction_date >= '2023-01-01' AND transaction_date < '2024-01-01' GROUP BY transaction_type ORDER BY approval_rate LIMIT 1	supervise
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id WHERE rr.approval_status = '已批准' AND EXTRACT(YEAR FROM rr.report_date) = 2024	supervise
SELECT fi.institution_name FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id WHERE npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01' AND npl.npl_ratio > 2	supervise
SELECT institution_id FROM non_performing_loans WHERE provision_coverage_ratio > 3	supervise
SELECT AVG(core_tier_1_ratio) FROM capital_adequacy_ratio WHERE institution_id IN (SELECT institution_id FROM capital_adequacy_ratio ORDER BY risk_weighted_assets DESC LIMIT 3)	supervise
SELECT COUNT(DISTINCT npl1.institution_id) FROM non_performing_loans npl1 JOIN non_performing_loans npl2 ON npl1.institution_id = npl2.institution_id AND npl1.report_date = npl2.report_date - INTERVAL '3 months' JOIN non_performing_loans npl3 ON npl1.institution_id = npl3.institution_id AND npl1.report_date = npl3.report_date - INTERVAL '6 months' WHERE npl1.npl_ratio < npl2.npl_ratio AND npl2.npl_ratio < npl3.npl_ratio	supervise
SELECT COUNT(DISTINCT institution_id) FROM non_performing_loans WHERE provision_coverage_ratio < 150	supervise
SELECT compliance_type, AVG(resolution_date - record_date) AS avg_resolution_time FROM compliance_records WHERE EXTRACT(YEAR FROM record_date) = 2023 AND resolution_date IS NOT NULL GROUP BY compliance_type HAVING AVG(resolution_date - record_date) > 60 ORDER BY avg_resolution_time DESC	supervise
SELECT fii.institution_name, cr.compliance_type, cr.description FROM compliance_records cr JOIN financial_institution_info fii ON cr.institution_id = fii.institution_id WHERE cr.record_date = '2023-10-28' AND cr.severity = '严重' AND cr.status = '处理中'	supervise
SELECT * FROM financial_institution_info WHERE legal_representative = '张伟'	supervise
SELECT fi.address AS city, AVG(car.total_car) AS avg_capital_adequacy_ratio FROM capital_adequacy_ratio car JOIN financial_institution_info fi ON car.institution_id = fi.institution_id GROUP BY fi.address ORDER BY avg_capital_adequacy_ratio DESC LIMIT 10	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE rr.report_type = '年度报告' AND rr.approval_status = '已批准' AND car.total_car > 12 AND car.report_date >= '2023-01-01' AND car.report_date < '2024-01-01'	supervise
SELECT * FROM regulatory_reports WHERE submission_date > '2023-11-01'	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_date = '2023-04-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT total_liabilities / total_assets AS liability_to_asset_ratio FROM balance_sheet	supervise
SELECT fii.institution_name, rr.report_type, rr.submission_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT COUNT(DISTINCT institution_id) FROM income_statement WHERE report_date >= '2023-07-01' AND report_date < '2023-10-01' AND (net_interest_income / (SELECT total_assets - total_liabilities FROM balance_sheet WHERE balance_sheet.institution_id = income_statement.institution_id AND balance_sheet.report_date = income_statement.report_date)) < 0.02	supervise
SELECT fii.institution_name, rr.report_id FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT fii.institution_name, rr.report_type, rr.approval_status, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '半年度报告' AND rr.approval_status = '待审核' AND rr.report_date >= '2023-10-01' AND rr.report_date < '2023-11-01' AND fii.registered_capital > 10000000	supervise
SELECT institution_id FROM non_performing_loans WHERE total_loans > 2000000000000	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND npl.npl_ratio > 1.5	supervise
SELECT fii.institution_name, rr.report_id, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT CORR(npl_ratio, provision_coverage_ratio) AS correlation FROM non_performing_loans	supervise
SELECT fi.address AS province, AVG(lr.loan_to_deposit_ratio) AS avg_loan_to_deposit_ratio FROM liquidity_ratio lr JOIN financial_institution_info fi ON lr.institution_id = fi.institution_id GROUP BY fi.address ORDER BY avg_loan_to_deposit_ratio ASC LIMIT 1	supervise
SELECT institution_name FROM financial_institution_info WHERE legal_representative = '刘秀英'	supervise
SELECT fii.institution_name, rr.report_id, rr.report_type, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date = '2023-08-01' AND rr.approval_status = '需修改' AND fii.registered_capital > 50000000	supervise
SELECT * FROM liquidity_ratio WHERE report_date = '2040-07-13'	supervise
SELECT r.institution_id, r.report_id, r.report_type, r.approval_status, n.npl_ratio FROM regulatory_reports r JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND n.report_date >= '2023-01-01' AND n.report_date < '2024-01-01' AND n.npl_ratio > 2.0	supervise
SELECT compliance_type, COUNT(*) AS frequency FROM compliance_records GROUP BY compliance_type ORDER BY frequency DESC LIMIT 1	supervise
SELECT institution_id, npl_ratio, total_loans FROM non_performing_loans WHERE EXTRACT(YEAR FROM report_date) = 2023	supervise
SELECT rpt.* FROM related_party_transactions rpt JOIN non_performing_loans npl ON rpt.institution_id = npl.institution_id WHERE npl.npl_amount > 400000000	supervise
SELECT description, severity FROM compliance_records	supervise
SELECT fi.address AS region, AVG(npl.npl_ratio) AS average_npl_ratio FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id GROUP BY fi.address ORDER BY average_npl_ratio DESC LIMIT 1	supervise
SELECT COUNT(DISTINCT npl.institution_id) FROM non_performing_loans npl JOIN capital_adequacy_ratio car ON npl.institution_id = car.institution_id WHERE npl.npl_ratio < 1 AND (car.core_tier_1_ratio < 8 OR car.tier_1_ratio < 9 OR car.total_car < 10.5)	supervise
SELECT institution_id, loan_to_deposit_ratio FROM liquidity_ratio ORDER BY loan_to_deposit_ratio	supervise
SELECT liquidity_coverage_ratio, loan_to_deposit_ratio FROM liquidity_ratio	supervise
SELECT fi.institution_name FROM balance_sheet bs JOIN financial_institution_info fi ON bs.institution_id = fi.institution_id WHERE bs.total_assets > 734000000000	supervise
SELECT r.institution_id, f.institution_name FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN income_statement i ON r.institution_id = i.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND i.report_date = '2023-11-01' AND i.net_profit > 1000000000	supervise
SELECT DISTINCT r.institution_id FROM regulatory_reports r JOIN compliance_records c ON r.institution_id = c.institution_id WHERE r.report_date >= '2023-01-01' AND r.report_date < '2024-01-01' AND r.approval_status = '待审核' AND c.record_date >= '2023-01-01' AND c.record_date < '2024-01-01' AND c.status = '未解决'	supervise
SELECT fii.institution_name, rr.report_id, rr.approval_status, car.core_tier_1_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN capital_adequacy_ratio car ON rr.institution_id = car.institution_id AND rr.report_date = car.report_date WHERE rr.approval_status = '需修改' AND rr.submission_date >= '2023-08-01' AND rr.submission_date < '2023-09-01' AND car.core_tier_1_ratio < 8.0	supervise
SELECT fi.institution_name, (bs.loans_and_advances / bs.total_assets) AS loan_to_asset_ratio FROM balance_sheet bs JOIN financial_institution_info fi ON bs.institution_id = fi.institution_id ORDER BY loan_to_asset_ratio DESC LIMIT 1	supervise
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN related_party_transactions rpt ON fi.institution_id = rpt.institution_id WHERE rr.report_type = '季度报告' AND rr.report_date >= '2023-07-01' AND rr.report_date < '2023-08-01' AND rpt.transaction_type = '资产转移'	supervise
SELECT r.institution_id, COUNT(*) AS report_count FROM regulatory_reports r WHERE r.submission_date >= date('now') - INTERVAL '1 year' GROUP BY r.institution_id ORDER BY report_count DESC LIMIT 5	supervise
SELECT fi.institution_name, (bs.deposits - LAG(bs.deposits) OVER (PARTITION BY bs.institution_id ORDER BY bs.report_date)) / LAG(bs.deposits) OVER (PARTITION BY bs.institution_id ORDER BY bs.report_date) AS deposit_growth_rate FROM balance_sheet bs JOIN financial_institution_info fi ON bs.institution_id = fi.institution_id ORDER BY deposit_growth_rate DESC LIMIT 10	supervise
SELECT institution_id FROM liquidity_ratio WHERE liquidity_coverage_ratio > 100	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id WHERE car.report_date >= '2024-01-01' AND car.report_date < '2025-01-01' AND car.total_car < 12	supervise
SELECT corr(npl.npl_ratio, car.core_tier_1_ratio) AS correlation FROM non_performing_loans npl JOIN capital_adequacy_ratio car ON npl.institution_id = car.institution_id AND npl.report_date = car.report_date	supervise
SELECT COUNT(*) FROM (SELECT b.institution_id FROM balance_sheet b JOIN capital_adequacy_ratio c ON b.institution_id = c.institution_id AND b.report_date = c.report_date JOIN liquidity_ratio l ON b.institution_id = l.institution_id AND b.report_date = l.report_date WHERE c.total_car >= 8 AND l.liquidity_coverage_ratio >= 100 AND l.net_stable_funding_ratio >= 100 ORDER BY b.total_assets DESC LIMIT 200) AS top_institutions	supervise
SELECT corr(tier_1_ratio, total_car) AS correlation FROM capital_adequacy_ratio	supervise
SELECT COUNT(DISTINCT institution_id) FROM non_performing_loans WHERE npl_ratio < 1 AND provision_coverage_ratio > 250	supervise
SELECT DISTINCT rpt.institution_id FROM related_party_transactions rpt JOIN compliance_records cr ON rpt.institution_id = cr.institution_id WHERE rpt.transaction_date >= date('now') - INTERVAL '1 year' AND cr.status = '未解决' AND cr.record_date >= date('now') - INTERVAL '1 year'	supervise
SELECT institution_id FROM balance_sheet WHERE loans_and_advances / total_assets > 0.5	supervise
SELECT institution_id, SUM(loans_and_advances) AS total_loans_and_advances FROM balance_sheet GROUP BY institution_id ORDER BY total_loans_and_advances ASC LIMIT 1	supervise
SELECT COUNT(DISTINCT b.institution_id) FROM balance_sheet b JOIN capital_adequacy_ratio c ON b.institution_id = c.institution_id WHERE b.deposits > 100000000000 AND c.total_car < 10	supervise
SELECT r.institution_id, f.institution_name, f.registered_capital FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '半年度报告' AND f.registered_capital > 10000000	supervise
SELECT fii.institution_name, rr.report_id FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT COUNT(DISTINCT lr.institution_id) FROM liquidity_ratio lr JOIN capital_adequacy_ratio car ON lr.institution_id = car.institution_id WHERE lr.loan_to_deposit_ratio < 65 AND car.total_car < 11	supervise
SELECT compliance_type FROM compliance_records WHERE EXTRACT(YEAR FROM record_date) = 2023 GROUP BY compliance_type ORDER BY AVG(resolution_date - record_date) DESC LIMIT 1	supervise
SELECT institution_type, AVG(registered_capital) AS average_registered_capital FROM financial_institution_info GROUP BY institution_type	supervise
SELECT fi.institution_name, rr.report_date, npl.npl_ratio, car.core_tier_1_ratio FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id AND rr.report_date = npl.report_date JOIN capital_adequacy_ratio car ON rr.institution_id = car.institution_id AND rr.report_date = car.report_date WHERE rr.report_date >= '2023-01-01' AND rr.report_date <= '2023-12-31' AND npl.npl_ratio > 1 AND car.core_tier_1_ratio < 10	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN liquidity_ratio l ON f.institution_id = l.institution_id WHERE l.report_date = '2023-10-01' AND l.liquidity_coverage_ratio > 120	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE rr.report_type = '半年度报告' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND car.total_car > 10	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_date = '2023-07-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT institution_id, non_interest_income, net_interest_income FROM income_statement WHERE report_date >= '2023-03-01' AND report_date < '2023-04-01'	supervise
SELECT fii.institution_name, rr.report_type, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND fii.registered_capital > 50000000	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE car.report_date = '2023-08-01' AND car.core_tier_1_ratio < 8 AND npl.report_date = '2023-08-01' AND npl.npl_ratio > 2	supervise
SELECT rpt.institution_id, COUNT(rpt.transaction_id) AS transaction_frequency, SUM(rpt.transaction_amount) AS total_transaction_amount, cr.severity AS governance_level FROM related_party_transactions rpt JOIN compliance_records cr ON rpt.institution_id = cr.institution_id GROUP BY rpt.institution_id, cr.severity	supervise
SELECT rpt.transaction_id, rpt.transaction_amount, rpt.transaction_date, rpt.related_party, fii.institution_name FROM related_party_transactions rpt JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id WHERE EXTRACT(YEAR FROM rpt.transaction_date) = 2023 ORDER BY rpt.transaction_amount DESC LIMIT 1	supervise
SELECT AVG(liquidity_coverage_ratio) FROM liquidity_ratio WHERE EXTRACT(YEAR FROM report_date) = 2023	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND rr.report_date = '2023-07-01' AND npl.report_date = '2023-07-01' AND npl.npl_ratio > 1.00	supervise
SELECT * FROM financial_institution_info WHERE institution_type = '商业银行'	supervise
WITH rorwa_calc AS (SELECT i.institution_id, MAX(i.net_profit) / MAX(c.risk_weighted_assets) AS rorwa FROM income_statement i JOIN capital_adequacy_ratio c ON i.institution_id = c.institution_id WHERE i.report_date >= date('now') - INTERVAL '1 year' AND c.report_date >= date('now') - INTERVAL '1 year' GROUP BY i.institution_id), avg_rorwa AS (SELECT AVG(rorwa) AS industry_avg_rorwa FROM rorwa_calc), ranked_rorwa AS (SELECT fi.institution_name, rc.rorwa, rc.rorwa - ar.industry_avg_rorwa AS rorwa_difference, RANK() OVER (ORDER BY rc.rorwa DESC) AS rank_desc, RANK() OVER (ORDER BY rc.rorwa ASC) AS rank_asc FROM financial_institution_info fi JOIN rorwa_calc rc ON fi.institution_id = rc.institution_id CROSS JOIN avg_rorwa ar) SELECT institution_name, rorwa, rorwa_difference, CASE WHEN rank_desc <= 3 THEN 'Top 3' WHEN rank_asc <= 3 THEN 'Bottom 3' END AS performance_category FROM ranked_rorwa WHERE rank_desc <= 3 OR rank_asc <= 3 ORDER BY rorwa DESC	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_date = '2023-07-01' AND rr.approval_status = '需修改' AND npl.npl_ratio > 2.0	supervise
SELECT COUNT(*) FROM related_party_transactions WHERE transaction_type = '贷款' AND transaction_amount > 100000000 AND transaction_date >= '2023-01-01'	supervise
SELECT compliance_type, EXTRACT(QUARTER FROM record_date) AS quarter, EXTRACT(YEAR FROM record_date) AS year, COUNT(*) AS frequency FROM compliance_records GROUP BY compliance_type, quarter, year ORDER BY compliance_type, year, quarter	supervise
SELECT fii.institution_type, AVG(isi.net_interest_income / (isi.net_interest_income + isi.non_interest_income)) AS net_interest_income_ratio FROM financial_institution_info fii JOIN income_statement isi ON fii.institution_id = isi.institution_id GROUP BY fii.institution_type	supervise
SELECT COUNT(DISTINCT institution_id) FROM regulatory_reports WHERE approval_status = '待审批' AND EXTRACT(YEAR FROM report_date) = 2023	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN balance_sheet bs ON fi.institution_id = bs.institution_id WHERE bs.deposits > 0.8 * bs.total_assets	supervise
SELECT institution_id, net_interest_income / (net_interest_income + non_interest_income) AS net_interest_income_ratio FROM income_statement ORDER BY net_interest_income_ratio DESC LIMIT 10	supervise
SELECT institution_id, report_date, (liquidity_coverage_ratio - net_stable_funding_ratio) AS difference FROM liquidity_ratio	supervise
SELECT fii.institution_name, rr.report_type, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id AND rr.report_date = npl.report_date WHERE rr.report_type = '季度报告' AND rr.report_date = '2023-07-01' AND npl.npl_ratio > 2.00	supervise
SELECT COUNT(DISTINCT institution_id) FROM compliance_records WHERE record_date >= '2023-10-01' AND record_date < '2023-11-01'	supervise
SELECT fii.institution_name, rr.report_type, rr.approval_status, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND rr.report_date >= '2023-07-01' AND rr.report_date < '2023-10-01' AND fii.registered_capital > 50000000	supervise
SELECT compliance_type, AVG(resolution_date - record_date) AS avg_resolution_time FROM compliance_records GROUP BY compliance_type	supervise
SELECT SUM(total_assets) FROM balance_sheet WHERE report_date = '2023-12-31'	supervise
SELECT fi.institution_name, re.market_risk_exposure / re.total_risk_exposure AS market_risk_ratio FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id WHERE re.report_date >= '2023-01-01' AND re.report_date < '2024-01-01' ORDER BY market_risk_ratio DESC LIMIT 1	supervise
SELECT * FROM capital_adequacy_ratio WHERE report_date = '2023-11-01'	supervise
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN related_party_transactions rpt ON fi.institution_id = rpt.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND rpt.transaction_type = '存款' AND rpt.transaction_amount > 5000000	supervise
SELECT fii.institution_name FROM capital_adequacy_ratio car JOIN financial_institution_info fii ON car.institution_id = fii.institution_id ORDER BY ABS(car.tier_1_ratio - car.core_tier_1_ratio) DESC LIMIT 1	supervise
SELECT r.institution_id, f.institution_name FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN capital_adequacy_ratio c ON r.institution_id = c.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND c.report_date = '2023-07-01' AND c.core_tier_1_ratio < 9	supervise
SELECT institution_id FROM regulatory_reports WHERE report_date = '2023-10-01'	supervise
SELECT * FROM compliance_records WHERE record_date >= '2023-07-01' AND record_date < '2023-08-01'	supervise
SELECT fii.institution_name, rr.report_type, rr.submission_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT institution_id, provision_coverage_ratio, npl_ratio FROM non_performing_loans WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01'	supervise
SELECT fii.institution_name, rr.report_type, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '季度报告' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND fii.registered_capital > 10000000	supervise
SELECT c.severity, f.institution_type FROM compliance_records c JOIN financial_institution_info f ON c.institution_id = f.institution_id	supervise
SELECT fii.* FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id WHERE rr.submission_date >= '2024-01-01' AND rr.submission_date < '2025-01-01' AND rr.approval_status = '已批准'	supervise
SELECT fii.institution_name FROM capital_adequacy_ratio car JOIN financial_institution_info fii ON car.institution_id = fii.institution_id ORDER BY (car.total_car - car.tier_1_ratio) DESC LIMIT 3	supervise
SELECT institution_id, provision_coverage_ratio, npl_ratio FROM non_performing_loans WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01'	supervise
SELECT COUNT(DISTINCT institution_id) FROM capital_adequacy_ratio WHERE total_car < 10.5	supervise
SELECT * FROM risk_exposure WHERE report_date = '2023-09-01' AND market_risk_exposure > 40000000000	supervise
SELECT r.institution_id, f.institution_name, f.registered_capital FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '半年度报告' AND f.registered_capital > 5000	supervise
SELECT city, AVG(registered_capital) AS avg_registered_capital FROM (SELECT DISTINCT ON (fi.institution_id) fi.institution_id, fi.registered_capital, SUBSTRING(fi.address FROM '[^,]+$') AS city FROM financial_institution_info fi) subquery GROUP BY city ORDER BY avg_registered_capital DESC LIMIT 5	supervise
SELECT * FROM financial_institution_info WHERE institution_id = 1429	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_date = '2023-04-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '已拒绝' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01'	supervise
SELECT fii.institution_name, rr.report_type, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND rr.report_date = '2023-07-01' AND npl.report_date = '2023-07-01' AND npl.npl_ratio > 2.00	supervise
SELECT institution_id FROM risk_exposure WHERE operational_risk_exposure / total_risk_exposure > 0.15	supervise
SELECT COUNT(DISTINCT institution_id) FROM liquidity_ratio WHERE liquidity_coverage_ratio > 150 AND net_stable_funding_ratio > 150	supervise
SELECT fii.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT institution_type, AVG(liquidity_coverage_ratio) AS avg_lcr FROM liquidity_ratio JOIN financial_institution_info ON liquidity_ratio.institution_id = financial_institution_info.institution_id GROUP BY institution_type ORDER BY avg_lcr DESC LIMIT 1	supervise
SELECT COUNT(*) FROM related_party_transactions WHERE transaction_type = '股权转让' AND transaction_amount BETWEEN 100000000 AND 500000000 AND EXTRACT(YEAR FROM transaction_date) = 2023	supervise
SELECT institution_id FROM non_performing_loans WHERE npl_amount > 200000000	supervise
SELECT compliance_type, institution_id FROM compliance_records GROUP BY compliance_type, institution_id ORDER BY COUNT(*) DESC LIMIT 1	supervise
SELECT fii.institution_name, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.approval_status = '需修改' AND rr.report_date BETWEEN '2023-07-01' AND '2023-09-30' AND fii.registered_capital > 50000000	supervise
SELECT fii.institution_name, npl.npl_amount, npl.total_loans FROM non_performing_loans npl JOIN financial_institution_info fii ON npl.institution_id = fii.institution_id WHERE npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01' AND npl.npl_ratio > 1.00	supervise
SELECT c.institution_id, c.compliance_type, c.severity, c.status, f.institution_name, f.institution_type FROM compliance_records c JOIN financial_institution_info f ON c.institution_id = f.institution_id WHERE c.status = '已解决' ORDER BY c.institution_id, c.record_date	supervise
SELECT institution_id, net_profit, operating_expenses, (net_profit / operating_expenses) AS profit_to_expense_ratio FROM income_statement WHERE report_date >= '2024-01-01' AND report_date < '2024-02-01'	supervise
SELECT institution_id FROM capital_adequacy_ratio WHERE core_tier_1_ratio < 7.5	supervise
SELECT fii.institution_name, AVG(car.total_car) AS avg_capital_adequacy_ratio FROM capital_adequacy_ratio car JOIN financial_institution_info fii ON car.institution_id = fii.institution_id GROUP BY fii.institution_name ORDER BY avg_capital_adequacy_ratio DESC LIMIT 5	supervise
SELECT * FROM capital_adequacy_ratio WHERE report_date = '2023-11-01'	supervise
SELECT institution_id, AVG(resolution_date - record_date) AS avg_resolution_time FROM compliance_records WHERE record_date >= '2023-01-01' AND resolution_date IS NOT NULL GROUP BY institution_id ORDER BY avg_resolution_time DESC LIMIT 3	supervise
SELECT fii.institution_name, rr.report_type, rr.submission_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_date = '2023-07-01' AND rr.approval_status = '需修改'	supervise
SELECT COUNT(*) FROM financial_institution_info fii JOIN balance_sheet bs ON fii.institution_id = bs.institution_id WHERE fii.registered_capital > 5000000000 AND (bs.total_liabilities / bs.total_assets) > 0.9	supervise
SELECT institution_id, report_date, total_risk_exposure, credit_risk_exposure FROM risk_exposure WHERE report_date >= '2024-01-01' AND report_date < '2025-01-01'	supervise
SELECT re.credit_risk_exposure, re.market_risk_exposure, re.operational_risk_exposure, re.total_risk_exposure, isi.institution_name, isi.institution_type, isi.registered_capital FROM risk_exposure re JOIN financial_institution_info isi ON re.institution_id = isi.institution_id	supervise
SELECT institution_id, operating_expenses / net_profit AS expense_to_profit_ratio FROM income_statement WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01'	supervise
SELECT COUNT(*) FROM (SELECT institution_id FROM capital_adequacy_ratio ORDER BY risk_weighted_assets DESC LIMIT 10) AS top_institutions WHERE (SELECT total_car FROM capital_adequacy_ratio WHERE institution_id = top_institutions.institution_id ORDER BY report_date DESC LIMIT 1) < 12	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND rr.report_date BETWEEN '2023-07-01' AND '2023-09-30' AND npl.npl_ratio > 2.0	supervise
SELECT fii.institution_name, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT r.institution_id, r.report_date, r.report_type, r.approval_status FROM regulatory_reports r WHERE EXTRACT(YEAR FROM r.report_date) = 2023	supervise
SELECT fii.institution_name, fii.registered_capital FROM compliance_records cr JOIN financial_institution_info fii ON cr.institution_id = fii.institution_id WHERE cr.record_date = '2023-12-12' AND cr.severity = '严重'	supervise
SELECT AVG(compliance_count) AS average_compliance_issues_per_institution FROM (SELECT institution_id, COUNT(*) AS compliance_count FROM compliance_records WHERE EXTRACT(YEAR FROM record_date) = 2023 GROUP BY institution_id) AS compliance_counts	supervise
SELECT institution_id, provision_for_loan_losses, net_profit FROM income_statement WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01'	supervise
SELECT institution_id FROM non_performing_loans ORDER BY provision_coverage_ratio DESC LIMIT 1	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.approval_status = '已拒绝' GROUP BY fii.institution_name ORDER BY COUNT(*) DESC LIMIT 1	supervise
SELECT transaction_type, AVG(transaction_amount) AS avg_amount FROM related_party_transactions WHERE EXTRACT(YEAR FROM transaction_date) = 2023 GROUP BY transaction_type ORDER BY avg_amount DESC LIMIT 1	supervise
SELECT AVG(npl_ratio) FROM non_performing_loans WHERE report_date BETWEEN '2023-10-01' AND '2023-12-31' AND institution_id IN (SELECT institution_id FROM balance_sheet WHERE report_date BETWEEN '2023-10-01' AND '2023-12-31' ORDER BY total_assets DESC LIMIT 10)	supervise
SELECT COUNT(DISTINCT fi.institution_id) FROM financial_institution_info fi JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id WHERE fi.establishment_date > date('now') - INTERVAL '5 years' AND car.total_car > 12	supervise
SELECT fii.institution_name, car.total_car, fii.registered_capital FROM capital_adequacy_ratio car JOIN financial_institution_info fii ON car.institution_id = fii.institution_id WHERE car.report_date = '2023-08-01' AND car.total_car > 10 AND fii.registered_capital > 100000000	supervise
SELECT institution_id, report_date, core_tier_1_ratio, total_car FROM capital_adequacy_ratio	supervise
SELECT r.institution_id, f.institution_name, f.registered_capital, r.report_type FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '半年度报告' AND f.registered_capital > 1000000000	supervise
SELECT compliance_type, COUNT(*) AS issue_count FROM compliance_records GROUP BY compliance_type	supervise
SELECT fii.institution_name, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN non_performing_loans n ON f.institution_id = n.institution_id WHERE n.report_date = '2023-10-01' AND n.npl_amount > 40000000000	supervise
SELECT COUNT(DISTINCT institution_id) FROM balance_sheet WHERE total_assets > 1000000000000000	supervise
SELECT fii.institution_id, fii.registered_capital, car.core_tier_1_ratio FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE car.report_date = '2024-01-01'	supervise
SELECT fi.institution_name, npl.total_loans, bs.deposits FROM financial_institution_info fi JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id JOIN balance_sheet bs ON fi.institution_id = bs.institution_id WHERE npl.total_loans > bs.deposits	supervise
SELECT institution_id FROM income_statement WHERE net_profit / operating_expenses > 5	supervise
SELECT COUNT(DISTINCT institution_id) FROM liquidity_ratio WHERE loan_to_deposit_ratio < 50	supervise
SELECT net_interest_income FROM income_statement WHERE report_date = '2024-01-01'	supervise
SELECT fi.institution_name, car.core_tier_1_ratio FROM capital_adequacy_ratio car JOIN financial_institution_info fi ON car.institution_id = fi.institution_id WHERE EXTRACT(YEAR FROM car.report_date) = 2023 AND car.core_tier_1_ratio < 8.5 ORDER BY car.core_tier_1_ratio	supervise
SELECT compliance_type, AVG(resolution_date - record_date) AS avg_resolution_time FROM compliance_records WHERE EXTRACT(YEAR FROM record_date) = 2023 AND resolution_date IS NOT NULL GROUP BY compliance_type ORDER BY avg_resolution_time ASC LIMIT 1	supervise
SELECT approval_status, COUNT(*) FROM regulatory_reports WHERE submission_date = '2023-08-01' GROUP BY approval_status	supervise
SELECT institution_id, SUM(total_risk_exposure) AS total_risk_exposure FROM risk_exposure WHERE report_date >= '2023-11-01' AND report_date < '2023-12-01' GROUP BY institution_id	supervise
SELECT institution_id, report_date, report_type FROM regulatory_reports WHERE EXTRACT(YEAR FROM report_date) = 2023	supervise
SELECT institution_id, credit_risk_exposure, total_risk_exposure, (credit_risk_exposure / total_risk_exposure) AS exposure_ratio FROM risk_exposure WHERE report_date = '2023-03-01'	supervise
SELECT institution_id, AVG(total_car) AS avg_total_car_increase FROM capital_adequacy_ratio WHERE report_date >= date('now') - INTERVAL '2 years' GROUP BY institution_id ORDER BY avg_total_car_increase DESC LIMIT 5	supervise
SELECT institution_id FROM capital_adequacy_ratio ORDER BY risk_weighted_assets DESC LIMIT 5	supervise
SELECT fii.institution_name, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT institution_id, COUNT(DISTINCT transaction_type) AS distinct_transaction_types FROM related_party_transactions WHERE transaction_date >= '2023-01-01' GROUP BY institution_id ORDER BY distinct_transaction_types DESC LIMIT 1	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE car.report_date = '2023-05-01' AND npl.report_date = '2023-05-01' AND car.core_tier_1_ratio < 10 AND npl.npl_ratio > 1.5	supervise
SELECT record_date, resolution_date FROM compliance_records WHERE record_date = '2023-04-02'	supervise
SELECT COUNT(*) FROM financial_institution_info fii JOIN balance_sheet bs ON fii.institution_id = bs.institution_id WHERE fii.establishment_date > date('now') - INTERVAL '10 years' AND bs.total_assets IN (SELECT total_assets FROM balance_sheet ORDER BY total_assets DESC LIMIT 100)	supervise
SELECT fi.institution_name, AVG(cr.resolution_date - cr.record_date) as avg_resolution_time FROM compliance_records cr JOIN financial_institution_info fi ON cr.institution_id = fi.institution_id WHERE EXTRACT(YEAR FROM cr.record_date) = 2023 AND cr.status = '已解决' GROUP BY fi.institution_id, fi.institution_name HAVING AVG(cr.resolution_date - cr.record_date) > 90 ORDER BY avg_resolution_time DESC	supervise
WITH avg_npl_ratio AS ( SELECT AVG(npl_ratio) as industry_avg FROM non_performing_loans WHERE EXTRACT(YEAR FROM report_date) = 2023 ) SELECT fi.institution_name, npl.npl_ratio, npl.npl_ratio - avg.industry_avg as difference FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id CROSS JOIN avg_npl_ratio avg WHERE EXTRACT(YEAR FROM npl.report_date) = 2023 ORDER BY difference DESC	supervise
SELECT c.institution_id, c.description AS risk_event, c.record_date, car.risk_weighted_assets FROM compliance_records c JOIN capital_adequacy_ratio car ON c.institution_id = car.institution_id AND c.record_date = car.report_date WHERE c.record_date >= date('now') - INTERVAL '2 years' AND c.severity = '严重'	supervise
SELECT * FROM compliance_records WHERE description LIKE '%审计%'	supervise
SELECT institution_id, npl_ratio FROM non_performing_loans WHERE report_date = '2023-03-01'	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01' AND npl.npl_ratio > 2.00	supervise
SELECT fii.institution_name FROM balance_sheet bs JOIN financial_institution_info fii ON bs.institution_id = fii.institution_id WHERE bs.total_liabilities > 50000000000	supervise
SELECT * FROM related_party_transactions WHERE transaction_date >= '2023-01-01' AND transaction_date < '2024-01-01' AND related_party = '国家开发银行'	supervise
SELECT fii.institution_name, rr.report_type, rpt.transaction_amount FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN related_party_transactions rpt ON rr.institution_id = rpt.institution_id WHERE rr.report_type = '半年度报告' AND rr.report_date >= '2023-10-01' AND rr.report_date < '2023-11-01' AND rpt.transaction_amount > 5000000	supervise
SELECT fii.institution_name, rr.report_type, rr.submission_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.approval_status = '已拒绝' AND EXTRACT(YEAR FROM rr.submission_date) = 2023	supervise
SELECT COUNT(*) FROM (SELECT institution_id FROM compliance_records GROUP BY institution_id ORDER BY COUNT(*) DESC LIMIT 10) AS top_institutions WHERE institution_id IN (SELECT institution_id FROM risk_exposure WHERE operational_risk_exposure < (SELECT AVG(operational_risk_exposure) FROM risk_exposure))	supervise
SELECT COUNT(*) FROM (SELECT fi.institution_id FROM financial_institution_info fi JOIN balance_sheet bs ON fi.institution_id = bs.institution_id WHERE fi.institution_type = '商业银行' ORDER BY bs.total_assets DESC LIMIT 10) AS top_banks	supervise
SELECT * FROM regulatory_reports WHERE report_date BETWEEN '2023-01-01' AND '2023-12-31'	supervise
SELECT * FROM compliance_records WHERE record_date = '2023-09-03' AND severity = '严重'	supervise
SELECT fii.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT fii.institution_name, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT fi.institution_type, AVG(car.total_car) as avg_capital_adequacy_ratio, AVG(lr.liquidity_coverage_ratio) as avg_liquidity_coverage_ratio, AVG(npl.npl_ratio) as avg_npl_ratio FROM financial_institution_info fi JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id JOIN liquidity_ratio lr ON fi.institution_id = lr.institution_id JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE EXTRACT(YEAR FROM car.report_date) = 2023 AND EXTRACT(YEAR FROM lr.report_date) = 2023 AND EXTRACT(YEAR FROM npl.report_date) = 2023 GROUP BY fi.institution_type	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN related_party_transactions rpt ON rr.institution_id = rpt.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND rpt.transaction_type = '担保'	supervise
WITH compliant_institutions AS (SELECT car.institution_id FROM capital_adequacy_ratio car JOIN liquidity_ratio lr ON car.institution_id = lr.institution_id WHERE car.report_date >= date('now') - INTERVAL '3 years' AND lr.report_date >= date('now') - INTERVAL '3 years' AND car.total_car >= 10.5 AND lr.liquidity_coverage_ratio >= 100 AND lr.net_stable_funding_ratio >= 100 GROUP BY car.institution_id HAVING COUNT(DISTINCT car.report_date) = COUNT(DISTINCT lr.report_date)), asset_growth AS (SELECT institution_id, (MAX(total_assets) - MIN(total_assets)) / MIN(total_assets) AS growth_rate FROM balance_sheet WHERE report_date >= date('now') - INTERVAL '3 years' GROUP BY institution_id) SELECT fi.institution_name, ag.growth_rate * 100 AS asset_growth_percentage FROM financial_institution_info fi JOIN compliant_institutions ci ON fi.institution_id = ci.institution_id JOIN asset_growth ag ON fi.institution_id = ag.institution_id ORDER BY ag.growth_rate DESC LIMIT 5	supervise
SELECT fii.institution_name FROM risk_exposure re JOIN financial_institution_info fii ON re.institution_id = fii.institution_id WHERE re.report_date >= '2023-10-01' AND re.report_date <= '2023-12-31' ORDER BY (re.market_risk_exposure / re.total_risk_exposure) DESC LIMIT 1	supervise
SELECT lr.liquidity_coverage_ratio, re.market_risk_exposure FROM liquidity_ratio lr JOIN risk_exposure re ON lr.institution_id = re.institution_id AND lr.report_date = re.report_date	supervise
SELECT institution_id FROM balance_sheet WHERE total_assets > 40000000000	supervise
SELECT fii.institution_name, rr.report_type, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.approval_status = '已拒绝'	supervise
SELECT * FROM risk_exposure WHERE report_date = '2023-10-01'	supervise
SELECT fii.institution_name, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date <= '2023-12-31' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT fii.institution_name, rr.report_type, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '半年度报告' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND fii.registered_capital > 100000000	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE rr.submission_date = '2023-08-01' AND rr.report_type = '季度报告' AND car.total_car > 10 AND rr.report_date = car.report_date	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN risk_exposure re ON fi.institution_id = re.institution_id ORDER BY re.operational_risk_exposure DESC LIMIT 1	supervise
SELECT fii.institution_name, rr.report_id, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT institution_type, AVG(total_car) AS avg_car FROM capital_adequacy_ratio JOIN financial_institution_info ON capital_adequacy_ratio.institution_id = financial_institution_info.institution_id GROUP BY institution_type ORDER BY avg_car DESC LIMIT 1	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN related_party_transactions rpt ON rr.institution_id = rpt.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND rpt.transaction_type = '提供服务'	supervise
SELECT record_id, institution_id, record_date, resolution_date, description, severity, status, compliance_type FROM compliance_records WHERE record_date >= '2023-11-01' AND record_date < '2023-12-01'	supervise
SELECT fii.institution_name, npl.institution_id, npl.report_date, npl.npl_ratio FROM non_performing_loans npl JOIN financial_institution_info fii ON npl.institution_id = fii.institution_id ORDER BY npl.npl_ratio DESC LIMIT 5	supervise
SELECT r.institution_id, f.institution_name FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND n.report_date >= '2023-01-01' AND n.report_date < '2024-01-01' AND n.npl_ratio > 2.0	supervise
SELECT submission_date FROM regulatory_reports WHERE report_date >= '2024-01-01' AND report_date < '2025-01-01'	supervise
SELECT r.institution_id, f.institution_name, r.report_type, r.approval_status, n.npl_ratio FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '已拒绝' AND n.report_date >= '2023-01-01' AND n.report_date < '2024-01-01' AND n.npl_ratio > 2.0	supervise
SELECT fi.institution_name, rr.submission_date FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01'	supervise
SELECT fii.institution_name, rr.report_type, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_date = '2024-01-01' AND rr.report_type = '年度报告' AND npl.npl_ratio > 2.0	supervise
SELECT institution_id FROM liquidity_ratio WHERE loan_to_deposit_ratio > 60	supervise
SELECT fi.institution_name, re.credit_risk_exposure / re.total_risk_exposure AS credit_risk_ratio FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id ORDER BY credit_risk_ratio DESC LIMIT 3	supervise
SELECT COUNT(*) FROM (SELECT institution_id FROM income_statement ORDER BY net_profit DESC LIMIT 10) AS top_institutions WHERE institution_id IN (SELECT institution_id FROM regulatory_reports WHERE approval_status = '已批准')	supervise
SELECT fii.institution_name, rr.report_type, rr.approval_status, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '半年度报告' AND rr.approval_status = '待审核' AND rr.report_date = '2023-10-01' AND fii.registered_capital > 100000000	supervise
SELECT i.institution_name FROM financial_institution_info i JOIN income_statement s ON i.institution_id = s.institution_id WHERE s.report_date = '2023-12-01' AND s.non_interest_income > s.net_interest_income	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN balance_sheet bs ON fi.institution_id = bs.institution_id WHERE bs.total_liabilities > 35000000000	supervise
SELECT fii.institution_name, car.total_car FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE rr.submission_date >= '2024-01-01' AND rr.submission_date < '2025-01-01' AND rr.report_type = '年度报告' AND car.total_car > 10	supervise
SELECT fii.institution_name FROM capital_adequacy_ratio car JOIN financial_institution_info fii ON car.institution_id = fii.institution_id ORDER BY ABS(car.core_tier_1_ratio - car.tier_1_ratio) + ABS(car.tier_1_ratio - car.total_car) LIMIT 1	supervise
SELECT fii.institution_name, rr.report_type, rr.approval_status, rr.submission_date FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN compliance_records cr ON fi.institution_id = cr.institution_id WHERE EXTRACT(YEAR FROM rr.submission_date) = 2023 AND rr.approval_status = '已拒绝' AND EXTRACT(YEAR FROM cr.record_date) = 2023 AND cr.severity = '严重' AND cr.status != '已解决'	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND EXTRACT(YEAR FROM rr.submission_date) = 2023	supervise
SELECT fi.institution_name, (re.market_risk_exposure / re.total_risk_exposure * 100) AS market_risk_percentage FROM financial_institution_info fi JOIN risk_exposure re ON fi.institution_id = re.institution_id ORDER BY market_risk_percentage DESC LIMIT 1	supervise
SELECT COUNT(DISTINCT institution_id) FROM balance_sheet WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01' AND total_assets > 100000000000	supervise
SELECT c1.institution_id, c1.report_date AS start_date, c2.report_date AS end_date, c1.total_car AS start_car, c2.total_car AS end_car, (c2.total_car - c1.total_car) AS car_increase FROM capital_adequacy_ratio c1 JOIN capital_adequacy_ratio c2 ON c1.institution_id = c2.institution_id WHERE c1.report_date = (SELECT MIN(report_date) FROM capital_adequacy_ratio WHERE report_date >= datetime('now') - INTERVAL '2 years' AND institution_id = c1.institution_id) AND c2.report_date = (SELECT MAX(report_date) FROM capital_adequacy_ratio WHERE report_date >= datetime('now') - INTERVAL '2 years' AND institution_id = c1.institution_id) ORDER BY car_increase DESC	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN income_statement i ON f.institution_id = i.institution_id ORDER BY (i.net_profit / i.non_interest_income) DESC LIMIT 1	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN regulatory_reports r ON f.institution_id = r.institution_id WHERE r.submission_date = '2023-05-01' AND r.approval_status = '已拒绝'	supervise
SELECT AVG(liquidity_coverage_ratio) AS average_liquidity_coverage_ratio FROM (SELECT lr.institution_id, AVG(lr.liquidity_coverage_ratio) AS liquidity_coverage_ratio FROM liquidity_ratio lr JOIN (SELECT institution_id FROM balance_sheet ORDER BY total_assets DESC LIMIT 10) bs ON lr.institution_id = bs.institution_id GROUP BY lr.institution_id) AS top_institutions	supervise
WITH quarterly_deposits AS (SELECT institution_id, report_date, deposits, LAG(deposits, 1) OVER (PARTITION BY institution_id ORDER BY report_date) AS prev_deposits FROM balance_sheet), deposit_growth AS (SELECT institution_id, report_date, (deposits - prev_deposits) / prev_deposits * 100 AS growth_rate FROM quarterly_deposits WHERE prev_deposits IS NOT NULL), industry_avg AS (SELECT report_date, AVG(growth_rate) AS avg_growth_rate FROM deposit_growth GROUP BY report_date), consecutive_quarters AS (SELECT d1.institution_id FROM deposit_growth d1 JOIN deposit_growth d2 ON d1.institution_id = d2.institution_id AND d1.report_date = d2.report_date + INTERVAL '3 months' JOIN deposit_growth d3 ON d2.institution_id = d3.institution_id AND d2.report_date = d3.report_date + INTERVAL '3 months' JOIN deposit_growth d4 ON d3.institution_id = d4.institution_id AND d3.report_date = d4.report_date + INTERVAL '3 months' JOIN industry_avg i1 ON d1.report_date = i1.report_date AND d1.growth_rate > i1.avg_growth_rate JOIN industry_avg i2 ON d2.report_date = i2.report_date AND d2.growth_rate > i2.avg_growth_rate JOIN industry_avg i3 ON d3.report_date = i3.report_date AND d3.growth_rate > i3.avg_growth_rate JOIN industry_avg i4 ON d4.report_date = i4.report_date AND d4.growth_rate > i4.avg_growth_rate) SELECT COUNT(DISTINCT institution_id) FROM consecutive_quarters	supervise
SELECT lr.liquidity_coverage_ratio, lr.net_stable_funding_ratio, lr.loan_to_deposit_ratio FROM liquidity_ratio lr JOIN (SELECT institution_id, AVG(total_car) AS avg_car FROM capital_adequacy_ratio WHERE EXTRACT(YEAR FROM report_date) = 2023 GROUP BY institution_id ORDER BY avg_car DESC LIMIT 5) AS top_institutions ON lr.institution_id = top_institutions.institution_id WHERE EXTRACT(YEAR FROM lr.report_date) = 2023	supervise
SELECT institution_id, non_interest_income, net_interest_income FROM income_statement WHERE report_date >= '2023-12-01' AND report_date < '2024-01-01'	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN related_party_transactions rpt ON fi.institution_id = rpt.institution_id WHERE rpt.transaction_date = '2023-04-18'	supervise
SELECT DISTINCT institution_id FROM compliance_records WHERE record_date = '2023-12-30'	supervise
SELECT rr.*, lr.liquidity_coverage_ratio FROM regulatory_reports rr JOIN liquidity_ratio lr ON rr.institution_id = lr.institution_id WHERE rr.report_date = '2023-07-01'	supervise
SELECT fii.institution_name, rr.report_type, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id AND rr.report_date = npl.report_date WHERE rr.report_date >= '2023-01-01' AND rr.report_date < '2024-01-01' AND npl.npl_ratio > 2.0	supervise
SELECT institution_id, COUNT(*) AS transaction_complexity FROM related_party_transactions WHERE transaction_date >= '2023-01-01' AND transaction_date < '2024-01-01' GROUP BY institution_id ORDER BY transaction_complexity DESC	supervise
SELECT fii.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN capital_adequacy_ratio car ON rr.institution_id = car.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND car.core_tier_1_ratio < 10	supervise
SELECT npl.npl_ratio, lr.liquidity_coverage_ratio FROM non_performing_loans npl JOIN liquidity_ratio lr ON npl.institution_id = lr.institution_id WHERE npl.report_date = '2023-06-01' AND lr.report_date = '2023-06-01'	supervise
SELECT DISTINCT c.institution_id FROM capital_adequacy_ratio c JOIN related_party_transactions r ON c.institution_id = r.institution_id WHERE (c.total_car - c.core_tier_1_ratio) > 5	supervise
SELECT COUNT(DISTINCT institution_id) FROM compliance_records WHERE description LIKE '%违规%' AND record_date >= '2023-01-01' AND record_date < '2024-01-01'	supervise
SELECT SUM(transaction_amount) FROM related_party_transactions WHERE transaction_type = '资产转移'	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN capital_adequacy_ratio c ON f.institution_id = c.institution_id WHERE c.report_date = '2023-10-01' AND c.core_tier_1_ratio BETWEEN 8 AND 10	supervise
SELECT c.compliance_type, COUNT(c.record_id) AS compliance_count, r.approval_status, COUNT(r.report_id) AS report_count FROM compliance_records c JOIN regulatory_reports r ON c.institution_id = r.institution_id GROUP BY c.compliance_type, r.approval_status	supervise
SELECT fii.institution_name FROM risk_exposure re JOIN financial_institution_info fii ON re.institution_id = fii.institution_id GROUP BY re.institution_id, fii.institution_name ORDER BY MAX(credit_risk_exposure) - MIN(credit_risk_exposure) + MAX(market_risk_exposure) - MIN(market_risk_exposure) + MAX(operational_risk_exposure) - MIN(operational_risk_exposure) LIMIT 1	supervise
SELECT re.total_risk_exposure, npl.total_loans FROM risk_exposure re JOIN non_performing_loans npl ON re.institution_id = npl.institution_id WHERE re.report_date = '2023-09-01' AND npl.report_date = '2023-09-01'	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND npl.npl_ratio > 1.00	supervise
SELECT transaction_date, transaction_amount FROM related_party_transactions WHERE transaction_date = '2023-04-18'	supervise
SELECT fii.institution_name, rr.report_id, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id AND rr.report_date = npl.report_date WHERE rr.approval_status = '需修改' AND rr.report_date >= '2023-07-01' AND rr.report_date < '2023-08-01' AND npl.npl_ratio > 1.5	supervise
SELECT report_type, COUNT(*) FILTER (WHERE approval_status = '已批准') * 1.0 / COUNT(*) AS approval_rate FROM regulatory_reports WHERE EXTRACT(YEAR FROM submission_date) = 2023 GROUP BY report_type ORDER BY approval_rate DESC LIMIT 1	supervise
SELECT fii.institution_name, rr.report_id, npl.npl_ratio, re.total_risk_exposure FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id AND rr.report_date = npl.report_date JOIN risk_exposure re ON rr.institution_id = re.institution_id AND rr.report_date = re.report_date WHERE rr.report_date >= '2023-01-01' AND rr.report_date < '2024-01-01' AND npl.npl_ratio > 2 AND re.total_risk_exposure > 100000000000	supervise
SELECT fii.institution_name, rr.report_type, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND fii.registered_capital > 10000000	supervise
SELECT institution_id FROM income_statement WHERE report_date >= '2024-01-01' AND report_date < '2025-01-01' AND net_profit > 7500000000	supervise
SELECT COUNT(DISTINCT car.institution_id) FROM capital_adequacy_ratio car JOIN related_party_transactions rpt ON car.institution_id = rpt.institution_id WHERE car.core_tier_1_ratio < 7	supervise
SELECT * FROM financial_institution_info WHERE registered_capital > 1000000000	supervise
SELECT AVG(lr.liquidity_coverage_ratio) as avg_lcr FROM liquidity_ratio lr JOIN financial_institution_info fi ON lr.institution_id = fi.institution_id WHERE fi.institution_name = '国家开发银行' AND EXTRACT(YEAR FROM lr.report_date) = 2023	supervise
SELECT fi.institution_name FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id WHERE npl.npl_ratio > (SELECT AVG(npl_ratio) FROM non_performing_loans) AND npl.provision_coverage_ratio < (SELECT AVG(provision_coverage_ratio) FROM non_performing_loans)	supervise
SELECT fii.institution_name FROM capital_adequacy_ratio car JOIN financial_institution_info fii ON car.institution_id = fii.institution_id WHERE car.report_date = '2024-01-01' ORDER BY car.risk_weighted_assets DESC LIMIT 1	supervise
SELECT COUNT(DISTINCT institution_id) FROM liquidity_ratio WHERE liquidity_coverage_ratio < 100 AND net_stable_funding_ratio < 100	supervise
SELECT fi.institution_name, re.market_risk_exposure / re.total_risk_exposure AS market_risk_ratio FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id ORDER BY market_risk_ratio DESC LIMIT 5	supervise
WITH approval_rates AS (SELECT rpt.institution_id, COUNT(CASE WHEN rpt.approval_status = '已批准' THEN 1 END) * 1.0 / COUNT(*) AS approval_rate FROM related_party_transactions rpt GROUP BY rpt.institution_id), top_institutions AS (SELECT ar.institution_id FROM approval_rates ar ORDER BY ar.approval_rate DESC LIMIT 10), high_market_risk AS (SELECT re.institution_id FROM risk_exposure re WHERE re.market_risk_exposure > (SELECT AVG(market_risk_exposure) FROM risk_exposure)) SELECT COUNT(*) FROM top_institutions ti JOIN high_market_risk hmr ON ti.institution_id = hmr.institution_id	supervise
SELECT institution_id, operating_expenses, net_profit, (net_profit / operating_expenses) AS profit_to_expense_ratio FROM income_statement WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01'	supervise
SELECT fii.institution_name, rr.report_type, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-11-01' AND rr.submission_date < '2023-12-01' ORDER BY fii.institution_name	supervise
SELECT fi.institution_name FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id ORDER BY npl.npl_ratio DESC LIMIT 3	supervise
SELECT npl_ratio, provision_coverage_ratio FROM non_performing_loans WHERE report_date = '2023-06-01'	supervise
SELECT EXTRACT(MONTH FROM transaction_date) AS month, COUNT(*) AS transaction_count FROM related_party_transactions GROUP BY month ORDER BY month	supervise
SELECT status FROM compliance_records WHERE record_date >= '2023-01-01' AND record_date < '2024-01-01'	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE car.report_date = '2023-10-01' AND npl.report_date = '2023-10-01' AND car.core_tier_1_ratio < 9 AND npl.npl_ratio > 2	supervise
SELECT institution_id, SUM(npl_amount) AS total_npl_amount, SUM(total_loans) AS total_loans FROM non_performing_loans WHERE EXTRACT(YEAR FROM report_date) = 2023 GROUP BY institution_id	supervise
SELECT AVG(total_car) FROM capital_adequacy_ratio JOIN financial_institution_info ON capital_adequacy_ratio.institution_id = financial_institution_info.institution_id WHERE financial_institution_info.institution_type = '银行'	supervise
SELECT c.institution_id, c.core_tier_1_ratio, i.net_profit FROM capital_adequacy_ratio c JOIN income_statement i ON c.institution_id = i.institution_id AND c.report_date = i.report_date WHERE c.report_date >= '2024-01-01' AND c.report_date < '2025-01-01'	supervise
SELECT establishment_date, registered_capital FROM financial_institution_info	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN balance_sheet bs ON fi.institution_id = bs.institution_id WHERE bs.total_assets > 400000000000 ORDER BY bs.report_date DESC	supervise
SELECT fii.address AS region, AVG(car.total_car) AS average_capital_adequacy_ratio FROM capital_adequacy_ratio car JOIN financial_institution_info fii ON car.institution_id = fii.institution_id GROUP BY fii.address ORDER BY average_capital_adequacy_ratio DESC LIMIT 1	supervise
SELECT r.institution_id, f.institution_name, f.registered_capital FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND f.registered_capital > 100000000	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND npl.report_date = '2023-07-01' AND npl.npl_ratio > 2.00	supervise
SELECT rpt.transaction_id, rpt.transaction_amount, rpt.transaction_date, rpt.related_party, fii.institution_name FROM related_party_transactions rpt JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id WHERE EXTRACT(YEAR FROM rpt.transaction_date) = 2023 ORDER BY rpt.transaction_amount DESC LIMIT 1	supervise
SELECT fii.institution_name, npl.npl_ratio FROM non_performing_loans npl JOIN financial_institution_info fii ON npl.institution_id = fii.institution_id WHERE npl.report_date = '2023-12-01' AND npl.total_loans > 4000000000000	supervise
SELECT fii.institution_name, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id AND rr.report_date = npl.report_date WHERE rr.approval_status = '需修改' AND rr.report_date >= '2023-07-01' AND rr.report_date < '2023-10-01' AND npl.npl_ratio > 2.0	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.report_date = '2023-07-01' AND npl.report_date = '2023-07-01' AND npl.npl_ratio > 1.00	supervise
SELECT * FROM regulatory_reports WHERE report_date = '2023-10-01'	supervise
SELECT fii.institution_name, car.core_tier_1_ratio, car.tier_1_ratio, car.total_car FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN capital_adequacy_ratio car ON rr.institution_id = car.institution_id AND rr.report_date = car.report_date WHERE rr.submission_date = '2023-08-01' AND rr.report_type = '季度报告' AND (car.core_tier_1_ratio < 10 OR car.tier_1_ratio < 10 OR car.total_car < 10)	supervise
SELECT approval_status FROM regulatory_reports WHERE report_date = '2023-10-01'	supervise
SELECT COUNT(*) FROM related_party_transactions WHERE transaction_amount > 1000000000 AND approval_status = '未获批准' AND EXTRACT(YEAR FROM transaction_date) = 2023	supervise
SELECT * FROM income_statement WHERE report_date = '2024-01-01'	supervise
SELECT institution_id, SUM(total_loans) AS total_loans, SUM(npl_amount) AS npl_amount FROM non_performing_loans WHERE report_date >= '2023-05-01' AND report_date < '2023-06-01' GROUP BY institution_id	supervise
SELECT institution_id, total_assets - total_liabilities AS net_assets FROM balance_sheet	supervise
SELECT institution_type, AVG(total_assets) AS average_asset_size FROM financial_institution_info JOIN balance_sheet ON financial_institution_info.institution_id = balance_sheet.institution_id GROUP BY institution_type	supervise
SELECT DISTINCT institution_id FROM regulatory_reports WHERE report_date >= '2024-01-01' AND report_date < '2025-01-01' AND comments IS NOT NULL	supervise
SELECT corr(r.market_risk_exposure, i.non_interest_income) AS correlation FROM risk_exposure r JOIN income_statement i ON r.institution_id = i.institution_id AND r.report_date = i.report_date	supervise
SELECT transaction_type, AVG(transaction_date - record_date) AS avg_approval_time FROM related_party_transactions rpt JOIN compliance_records cr ON rpt.institution_id = cr.institution_id WHERE EXTRACT(YEAR FROM rpt.transaction_date) = 2023 GROUP BY transaction_type ORDER BY avg_approval_time DESC LIMIT 1	supervise
SELECT fi.institution_name FROM liquidity_ratio lr JOIN financial_institution_info fi ON lr.institution_id = fi.institution_id WHERE lr.report_date >= '2023-01-01' AND lr.report_date < '2023-07-01' ORDER BY lr.net_stable_funding_ratio DESC LIMIT 5	supervise
SELECT fii.institution_name, rr.report_type, car.total_car FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN capital_adequacy_ratio car ON rr.institution_id = car.institution_id WHERE rr.report_type = '年度报告' AND rr.approval_status = '已批准' AND car.report_date >= '2023-01-01' AND car.report_date < '2024-01-01' AND car.total_car > 10	supervise
SELECT institution_id, submission_date FROM regulatory_reports	supervise
SELECT COUNT(CASE WHEN approval_status = '已批准' THEN 1 END) * 100.0 / COUNT(*) AS approval_rate FROM regulatory_reports WHERE submission_date BETWEEN '2023-10-01' AND '2023-12-31'	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN balance_sheet bs ON fii.institution_id = bs.institution_id JOIN liquidity_ratio lr ON fii.institution_id = lr.institution_id WHERE bs.total_assets > 100000000000 AND lr.liquidity_coverage_ratio > (SELECT PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY liquidity_coverage_ratio) FROM liquidity_ratio) AND lr.net_stable_funding_ratio > (SELECT PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY net_stable_funding_ratio) FROM liquidity_ratio)	supervise
SELECT institution_id, transaction_amount, transaction_date FROM related_party_transactions WHERE EXTRACT(YEAR FROM transaction_date) = 2024	supervise
SELECT fii.institution_name, rr.report_type, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '季度报告' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND fii.registered_capital > 50000000	supervise
SELECT b.institution_id, b.report_date, b.total_assets, b.total_liabilities, b.total_equity, b.cash_and_equivalents, b.loans_and_advances, b.deposits, f.registered_capital FROM balance_sheet b JOIN financial_institution_info f ON b.institution_id = f.institution_id WHERE b.report_date >= '2024-01-01' AND b.report_date < '2025-01-01'	supervise
SELECT r.institution_id, f.institution_name FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND n.npl_ratio > 2.0	supervise
SELECT fii.institution_name FROM liquidity_ratio lr JOIN capital_adequacy_ratio car ON lr.institution_id = car.institution_id AND lr.report_date = car.report_date JOIN financial_institution_info fii ON lr.institution_id = fii.institution_id WHERE lr.report_date >= '2023-01-01' AND lr.report_date < '2024-01-01' ORDER BY lr.liquidity_coverage_ratio ASC, car.total_car ASC LIMIT 10	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN risk_exposure re ON fi.institution_id = re.institution_id ORDER BY (re.credit_risk_exposure + re.market_risk_exposure + re.operational_risk_exposure) / re.total_risk_exposure LIMIT 5	supervise
SELECT DISTINCT institution_id FROM related_party_transactions WHERE transaction_date = '2023-04-18'	supervise
SELECT fi.institution_type, AVG(lr.loan_to_deposit_ratio) as avg_loan_to_deposit_ratio FROM liquidity_ratio lr JOIN financial_institution_info fi ON lr.institution_id = fi.institution_id WHERE EXTRACT(YEAR FROM lr.report_date) = 2023 GROUP BY fi.institution_type	supervise
SELECT institution_id FROM non_performing_loans ORDER BY provision_coverage_ratio DESC LIMIT 10	supervise
SELECT transaction_id, transaction_amount FROM related_party_transactions WHERE transaction_type = '担保' AND EXTRACT(YEAR FROM transaction_date) = 2023	supervise
SELECT MAX(net_stable_funding_ratio) FROM liquidity_ratio	supervise
SELECT license_number, establishment_date FROM financial_institution_info	supervise
SELECT fi.institution_name, COUNT(*) AS issue_count FROM compliance_records cr JOIN financial_institution_info fi ON cr.institution_id = fi.institution_id WHERE cr.compliance_type = '反洗钱' GROUP BY fi.institution_name ORDER BY issue_count DESC LIMIT 5	supervise
SELECT * FROM non_performing_loans WHERE report_date = '2023-06-01'	supervise
SELECT r.institution_id, f.institution_name FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND n.report_date >= '2023-01-01' AND n.report_date < '2024-01-01' AND n.npl_ratio > 2.00	supervise
SELECT transaction_amount, related_party, transaction_type FROM related_party_transactions WHERE EXTRACT(YEAR FROM transaction_date) = 2023 ORDER BY transaction_amount DESC LIMIT 1	supervise
SELECT institution_id, net_stable_funding_ratio, liquidity_coverage_ratio FROM liquidity_ratio	supervise
SELECT rpt.institution_id, rpt.transaction_amount, npl.npl_ratio, car.total_car FROM related_party_transactions rpt JOIN non_performing_loans npl ON rpt.institution_id = npl.institution_id AND rpt.transaction_date = npl.report_date JOIN capital_adequacy_ratio car ON rpt.institution_id = car.institution_id AND rpt.transaction_date = car.report_date	supervise
SELECT rpt.institution_id FROM related_party_transactions rpt JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id GROUP BY rpt.institution_id HAVING SUM(rpt.transaction_amount) > 0.1 * MAX(fii.registered_capital)	supervise
SELECT AVG(report_count) FROM (SELECT institution_id, COUNT(*) AS report_count FROM regulatory_reports WHERE EXTRACT(YEAR FROM submission_date) = 2023 GROUP BY institution_id) AS report_counts	supervise
SELECT COUNT(*) FROM related_party_transactions WHERE transaction_amount > 100000000 AND approval_status = '待审批' AND transaction_date >= '2023-01-01'	supervise
SELECT report_type, AVG(submission_date - report_date) AS avg_approval_time FROM regulatory_reports WHERE submission_date BETWEEN '2023-10-01' AND '2023-12-31' GROUP BY report_type ORDER BY avg_approval_time ASC LIMIT 1	supervise
SELECT * FROM regulatory_reports WHERE approval_status = '待审核'	supervise
SELECT COUNT(DISTINCT institution_id) FROM income_statement WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01' AND operating_expenses > net_interest_income + non_interest_income	supervise
SELECT report_type, approval_status FROM regulatory_reports WHERE submission_date = '2023-08-01'	supervise
SELECT institution_id, non_interest_income, operating_expenses FROM income_statement WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01'	supervise
SELECT institution_id FROM liquidity_ratio WHERE liquidity_coverage_ratio < 120	supervise
SELECT compliance_type, EXTRACT(YEAR FROM record_date) AS year, COUNT(*) AS count FROM compliance_records GROUP BY compliance_type, year ORDER BY year, compliance_type	supervise
SELECT npl.institution_id, npl.total_loans FROM non_performing_loans npl WHERE npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01'	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND car.total_car > 10	supervise
SELECT institution_id, liquidity_coverage_ratio, net_stable_funding_ratio FROM liquidity_ratio	supervise
SELECT COUNT(*) FROM regulatory_reports WHERE approval_status = '未批准' AND report_date >= '2023-01-01'	supervise
SELECT fi.institution_name, (npl.total_loans / bs.deposits * 100) AS loan_to_deposit_ratio, lr.liquidity_coverage_ratio FROM financial_institution_info fi JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id JOIN balance_sheet bs ON fi.institution_id = bs.institution_id JOIN liquidity_ratio lr ON fi.institution_id = lr.institution_id WHERE (npl.total_loans / bs.deposits) > 0.9 AND lr.liquidity_coverage_ratio < 120	supervise
SELECT market_risk_exposure FROM risk_exposure WHERE report_date = '2023-11-01'	supervise
SELECT * FROM non_performing_loans WHERE report_date = '2023-07-01'	supervise
SELECT fii.* FROM financial_institution_info fii JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE npl.npl_amount > 400000000	supervise
SELECT fi.institution_name, bs.total_assets FROM financial_institution_info fi JOIN balance_sheet bs ON fi.institution_id = bs.institution_id ORDER BY bs.total_assets DESC LIMIT 1	supervise
SELECT institution_id, liquidity_coverage_ratio FROM liquidity_ratio WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01'	supervise
SELECT fii.institution_name, fii.registered_capital, car.core_tier_1_ratio FROM capital_adequacy_ratio car JOIN financial_institution_info fii ON car.institution_id = fii.institution_id WHERE car.report_date = '2023-07-01' AND car.core_tier_1_ratio < 10	supervise
SELECT institution_id FROM capital_adequacy_ratio ORDER BY (total_car - core_tier_1_ratio) DESC LIMIT 10	supervise
SELECT fii.institution_name, npl.npl_ratio FROM non_performing_loans npl JOIN financial_institution_info fii ON npl.institution_id = fii.institution_id WHERE npl.npl_ratio > 2	supervise
SELECT fi.institution_name FROM liquidity_ratio lr JOIN financial_institution_info fi ON lr.institution_id = fi.institution_id WHERE lr.report_date = '2024-01-01' ORDER BY lr.loan_to_deposit_ratio ASC LIMIT 1	supervise
SELECT fi.institution_name FROM capital_adequacy_ratio car JOIN financial_institution_info fi ON car.institution_id = fi.institution_id WHERE car.report_date = '2024-01-01' ORDER BY car.total_car ASC LIMIT 1	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN related_party_transactions rpt ON fii.institution_id = rpt.institution_id WHERE rr.report_date = '2023-07-01' AND rr.report_type = '季度报告' GROUP BY fii.institution_name HAVING SUM(rpt.transaction_amount) > 10000000	supervise
SELECT fi.institution_type, AVG(lr.net_stable_funding_ratio) as avg_nsfr FROM liquidity_ratio lr JOIN financial_institution_info fi ON lr.institution_id = fi.institution_id WHERE EXTRACT(YEAR FROM lr.report_date) = 2023 GROUP BY fi.institution_type	supervise
WITH annual_data AS (SELECT i.institution_id, MAX(i.net_profit) AS annual_profit, MAX(r.total_risk_exposure) AS risk_exposure, MAX(c.total_car) AS capital_adequacy_ratio FROM income_statement i JOIN risk_exposure r ON i.institution_id = r.institution_id JOIN capital_adequacy_ratio c ON i.institution_id = c.institution_id WHERE i.report_date >= date('now') - INTERVAL '1 year' AND r.report_date >= date('now') - INTERVAL '1 year' AND c.report_date >= date('now') - INTERVAL '1 year' GROUP BY i.institution_id) SELECT fi.institution_name, (ad.annual_profit / ad.risk_exposure) / (ad.capital_adequacy_ratio / 100) AS raroc FROM financial_institution_info fi JOIN annual_data ad ON fi.institution_id = ad.institution_id ORDER BY raroc DESC LIMIT 10	supervise
SELECT fi.institution_name, rr.report_id, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id AND rr.report_date = npl.report_date WHERE rr.approval_status = '已批准' AND rr.report_date > '2023-09-01' AND npl.npl_ratio > 2.0	supervise
SELECT AVG(total_car) FROM capital_adequacy_ratio	supervise
SELECT fii.institution_name, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_date = '2023-10-01' AND rr.approval_status = '待审核' AND npl.npl_ratio > 2.00	supervise
SELECT npl_ratio, provision_coverage_ratio FROM non_performing_loans	supervise
SELECT corr(i.net_profit, c.total_car) AS correlation FROM income_statement i JOIN capital_adequacy_ratio c ON i.institution_id = c.institution_id AND i.report_date = c.report_date	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN risk_exposure r ON f.institution_id = r.institution_id WHERE r.report_date = '2023-10-01' ORDER BY r.total_risk_exposure DESC LIMIT 1	supervise
SELECT DISTINCT institution_id FROM regulatory_reports WHERE report_date < '2023-07-01' AND report_date >= '2023-01-01'	supervise
SELECT fii.institution_name FROM related_party_transactions rpt JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id WHERE rpt.approval_status = '已批准' AND rpt.transaction_date >= '2023-01-01' GROUP BY fii.institution_name ORDER BY AVG(rpt.transaction_amount) DESC LIMIT 1	supervise
SELECT fii.institution_name FROM risk_exposure re JOIN financial_institution_info fii ON re.institution_id = fii.institution_id ORDER BY (re.credit_risk_exposure / re.total_risk_exposure) DESC LIMIT 1	supervise
SELECT approval_status, AVG(transaction_amount) AS avg_transaction_amount FROM related_party_transactions GROUP BY approval_status	supervise
SELECT approval_status FROM regulatory_reports WHERE report_date = '2023-10-01'	supervise
SELECT institution_id, net_profit, operating_expenses FROM income_statement WHERE report_date >= '2023-10-01' AND report_date < '2023-11-01'	supervise
WITH Top1000Institutions AS (SELECT institution_id FROM balance_sheet ORDER BY total_assets DESC LIMIT 1000), GrowthRates AS (SELECT b1.institution_id, AVG((b2.deposits - b1.deposits) / b1.deposits) AS avg_deposit_growth_rate, AVG((b2.loans_and_advances - b1.loans_and_advances) / b1.loans_and_advances) AS avg_loan_growth_rate, AVG((b2.total_assets - b1.total_assets) / b1.total_assets) AS avg_total_asset_growth_rate FROM balance_sheet b1 JOIN balance_sheet b2 ON b1.institution_id = b2.institution_id AND b1.report_date < b2.report_date WHERE b1.institution_id IN (SELECT institution_id FROM Top1000Institutions) GROUP BY b1.institution_id) SELECT AVG(avg_deposit_growth_rate) AS avg_deposit_growth_rate, AVG(avg_loan_growth_rate) AS avg_loan_growth_rate, AVG(avg_total_asset_growth_rate) AS avg_total_asset_growth_rate FROM GrowthRates	supervise
SELECT fii.institution_name, rr.report_id FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
WITH avg_npl AS (SELECT AVG(npl_ratio) AS avg_npl_ratio FROM non_performing_loans WHERE report_date >= date('now') - INTERVAL '1 year'), car_fluctuation AS (SELECT institution_id, MAX(total_car) - MIN(total_car) AS car_fluctuation FROM capital_adequacy_ratio WHERE report_date >= date('now') - INTERVAL '1 year' GROUP BY institution_id) SELECT fi.institution_name, cf.car_fluctuation, npl.npl_ratio FROM financial_institution_info fi JOIN car_fluctuation cf ON fi.institution_id = cf.institution_id JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id JOIN avg_npl ON 1=1 WHERE npl.npl_ratio > avg_npl.avg_npl_ratio AND npl.report_date = (SELECT MAX(report_date) FROM non_performing_loans) ORDER BY cf.car_fluctuation DESC LIMIT 1	supervise
SELECT institution_name FROM financial_institution_info WHERE institution_name LIKE '%公司%'	supervise
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN related_party_transactions rpt ON fi.institution_id = rpt.institution_id WHERE rr.report_type = '季度报告' AND rr.report_date >= '2023-07-01' AND rr.report_date < '2023-08-01' AND rpt.transaction_type = '担保'	supervise
SELECT COUNT(DISTINCT institution_id) FROM liquidity_ratio WHERE liquidity_coverage_ratio > 100 AND net_stable_funding_ratio > 100	supervise
SELECT institution_name FROM financial_institution_info WHERE institution_id IN (SELECT institution_id FROM income_statement WHERE net_profit > 1500000000)	supervise
SELECT fii.institution_name FROM related_party_transactions rpt JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id GROUP BY fii.institution_name ORDER BY SUM(CASE WHEN rpt.approval_status = '未批准' THEN 1 ELSE 0 END) / COUNT(*) DESC LIMIT 1	supervise
SELECT fii.institution_name, fii.registered_capital, car.total_car FROM capital_adequacy_ratio car JOIN financial_institution_info fii ON car.institution_id = fii.institution_id WHERE car.report_date = '2023-05-01' AND car.core_tier_1_ratio > 8	supervise
SELECT * FROM income_statement WHERE institution_id = 3480	supervise
SELECT corr(npl.npl_ratio, car.total_car) AS correlation_coefficient FROM non_performing_loans npl JOIN capital_adequacy_ratio car ON npl.institution_id = car.institution_id AND npl.report_date = car.report_date	supervise
WITH median_values AS (SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY total_car) AS median_car, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY liquidity_coverage_ratio) AS median_lcr, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY npl_ratio) AS median_npl FROM capital_adequacy_ratio c JOIN liquidity_ratio l ON c.institution_id = l.institution_id JOIN non_performing_loans n ON c.institution_id = n.institution_id WHERE c.report_date >= date('now') - INTERVAL '1 year' AND l.report_date >= date('now') - INTERVAL '1 year' AND n.report_date >= date('now') - INTERVAL '1 year'), outperforming_institutions AS (SELECT c.institution_id, MAX(c.total_car) AS max_car, MAX(l.liquidity_coverage_ratio) AS max_lcr, MIN(n.npl_ratio) AS min_npl FROM capital_adequacy_ratio c JOIN liquidity_ratio l ON c.institution_id = l.institution_id JOIN non_performing_loans n ON c.institution_id = n.institution_id, median_values mv WHERE c.report_date >= date('now') - INTERVAL '1 year' AND l.report_date >= date('now') - INTERVAL '1 year' AND n.report_date >= date('now') - INTERVAL '1 year' AND c.total_car > mv.median_car AND l.liquidity_coverage_ratio > mv.median_lcr AND n.npl_ratio < mv.median_npl GROUP BY c.institution_id) SELECT fi.institution_name, oi.max_car, oi.max_lcr, oi.min_npl, (oi.max_car / mv.median_car * 0.4 + oi.max_lcr / mv.median_lcr * 0.3 + mv.median_npl / oi.min_npl * 0.3) AS composite_score FROM financial_institution_info fi JOIN outperforming_institutions oi ON fi.institution_id = oi.institution_id CROSS JOIN median_values mv ORDER BY composite_score DESC	supervise
SELECT institution_id, total_car, report_date FROM capital_adequacy_ratio WHERE report_date = '2023-11-01'	supervise
SELECT fi.institution_name FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND car.report_date = '2023-10-01' AND car.core_tier_1_ratio < 8	supervise
SELECT report_id, report_date, submission_date FROM regulatory_reports WHERE submission_date >= '2023-05-01' AND submission_date < '2023-06-01'	supervise
SELECT r.institution_id, f.institution_name FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND n.report_date >= '2023-01-01' AND n.report_date < '2024-01-01' AND n.npl_ratio > 1.00	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id WHERE rr.report_type = '季度报告' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.approval_status = '需修改'	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND npl.npl_ratio > 1.00	supervise
SELECT institution_id, net_stable_funding_ratio FROM liquidity_ratio	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id AND rr.report_date = npl.report_date JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id AND rr.report_date = car.report_date WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND npl.npl_ratio > 1.5 AND car.total_car < 12	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_type = '半年度报告' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND npl.npl_ratio > 1.00	supervise
SELECT institution_id, record_date, resolution_date, description, severity, status, compliance_type FROM compliance_records	supervise
SELECT report_type, AVG(submission_date - report_date) AS avg_approval_time FROM regulatory_reports WHERE submission_date BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY report_type ORDER BY avg_approval_time DESC LIMIT 1	supervise
SELECT r.institution_id, f.institution_name, r.report_type, r.approval_status, n.npl_ratio FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND n.report_date >= '2023-01-01' AND n.report_date < '2024-01-01' AND n.npl_ratio > 2.0	supervise
SELECT fii.institution_name, rr.approval_status, SUM(rpt.transaction_amount) AS total_transaction_amount FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN related_party_transactions rpt ON rr.institution_id = rpt.institution_id WHERE rr.approval_status = '待审核' AND rr.submission_date >= '2023-11-01' AND rr.submission_date < '2023-12-01' GROUP BY fii.institution_name, rr.approval_status HAVING SUM(rpt.transaction_amount) > 50000000	supervise
SELECT fii.institution_name, rr.report_type, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND rr.report_date BETWEEN '2023-07-01' AND '2023-09-30' AND npl.report_date BETWEEN '2023-07-01' AND '2023-09-30' AND npl.npl_ratio > 2.00	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN risk_exposure re ON fii.institution_id = re.institution_id WHERE re.report_date = '2024-01-01' AND re.market_risk_exposure > 500000000000	supervise
SELECT c.record_id, c.institution_id, f.institution_name, c.resolution_date - c.record_date AS resolution_time FROM compliance_records c JOIN financial_institution_info f ON c.institution_id = f.institution_id ORDER BY resolution_time ASC LIMIT 5	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN compliance_records c ON f.institution_id = c.institution_id WHERE c.record_date = '2023-05-05' AND c.severity = '低'	supervise
SELECT COUNT(*) FROM (SELECT institution_id FROM balance_sheet ORDER BY total_assets DESC LIMIT 20) AS top_20 INNER JOIN liquidity_ratio ON top_20.institution_id = liquidity_ratio.institution_id WHERE liquidity_coverage_ratio < 100	supervise
SELECT fii.institution_name, rr.report_id, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id AND rr.report_date = npl.report_date WHERE rr.approval_status = '需修改' AND rr.report_date = '2023-07-01' AND npl.npl_ratio > 2.0	supervise
SELECT word, COUNT(*) AS frequency FROM (SELECT unnest(regexp_split_to_array(comments, E'\\W+')) AS word FROM regulatory_reports WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01') subquery WHERE word <> '' GROUP BY word ORDER BY frequency DESC	supervise
SELECT institution_id, net_interest_income, operating_expenses FROM income_statement	supervise
SELECT r.institution_id, f.institution_name, f.registered_capital FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '半年度报告' AND f.registered_capital > 50000000	supervise
SELECT institution_id FROM capital_adequacy_ratio ORDER BY risk_weighted_assets DESC LIMIT 1	supervise
SELECT institution_id, SUM(loans_and_advances) AS total_loans_and_advances FROM balance_sheet GROUP BY institution_id	supervise
SELECT npl.institution_id FROM non_performing_loans npl WHERE npl.npl_ratio > (SELECT AVG(npl_ratio) FROM non_performing_loans) AND npl.provision_coverage_ratio > (SELECT AVG(provision_coverage_ratio) FROM non_performing_loans)	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN risk_exposure r ON f.institution_id = r.institution_id WHERE r.credit_risk_exposure > 150000000000	supervise
SELECT institution_id, (non_interest_income / (net_interest_income + non_interest_income)) AS non_interest_income_ratio FROM income_statement ORDER BY non_interest_income_ratio DESC LIMIT 10	supervise
SELECT institution_id FROM liquidity_ratio WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01' AND net_stable_funding_ratio < 105	supervise
SELECT npl.npl_ratio, npl.provision_coverage_ratio, re.credit_risk_exposure, re.market_risk_exposure, re.operational_risk_exposure FROM capital_adequacy_ratio car JOIN non_performing_loans npl ON car.institution_id = npl.institution_id AND car.report_date = npl.report_date JOIN risk_exposure re ON car.institution_id = re.institution_id AND car.report_date = re.report_date WHERE EXTRACT(YEAR FROM car.report_date) = 2023 ORDER BY ABS(car.total_car - LAG(car.total_car) OVER (PARTITION BY car.institution_id ORDER BY car.report_date)) DESC LIMIT 5	supervise
SELECT fi.institution_name FROM balance_sheet bs JOIN financial_institution_info fi ON bs.institution_id = fi.institution_id ORDER BY (bs.cash_and_equivalents / bs.total_assets) DESC LIMIT 1	supervise
SELECT r.institution_id, f.institution_name, r.report_type, r.approval_status, n.npl_ratio FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND n.npl_ratio > 2.0	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND npl.npl_ratio > 2.0	supervise
SELECT r.institution_id, f.institution_name, r.report_type, r.approval_status, n.npl_ratio FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND n.report_date >= '2023-01-01' AND n.report_date < '2024-01-01' AND n.npl_ratio > 1.5	supervise
SELECT institution_id FROM balance_sheet WHERE loans_and_advances / total_assets > 0.6	supervise
SELECT fii.institution_name, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date <= '2023-12-31' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT fii.institution_name, re.report_date FROM risk_exposure re JOIN financial_institution_info fii ON re.institution_id = fii.institution_id WHERE re.credit_risk_exposure > 100000000000	supervise
SELECT institution_id, MAX(credit_risk_exposure) AS max_credit_risk_exposure FROM risk_exposure GROUP BY institution_id	supervise
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id WHERE rr.report_type = '季度报告' AND rr.submission_date BETWEEN '2023-01-01' AND '2023-12-31' AND car.report_date BETWEEN '2023-01-01' AND '2023-12-31' AND car.total_car > 10	supervise
SELECT core_tier_1_ratio FROM capital_adequacy_ratio	supervise
SELECT institution_id FROM non_performing_loans WHERE npl_amount > 200000000	supervise
SELECT fii.institution_name, rpt.transaction_amount, rpt.transaction_date FROM related_party_transactions rpt JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id WHERE rpt.transaction_date > '2023-09-15' AND rpt.transaction_amount > 5000000 AND rpt.approval_status = '已批准'	supervise
SELECT fi.institution_name FROM financial_institution_info fi JOIN related_party_transactions rpt ON fi.institution_id = rpt.institution_id WHERE rpt.transaction_date >= '2023-12-01' AND rpt.transaction_date < '2024-01-01' AND rpt.transaction_amount > 50000000	supervise
SELECT fi.institution_name, re.total_risk_exposure, car.core_tier_1_ratio, car.tier_1_ratio, car.total_car FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id JOIN capital_adequacy_ratio car ON re.institution_id = car.institution_id WHERE EXTRACT(YEAR FROM re.report_date) = 2023 AND EXTRACT(YEAR FROM car.report_date) = 2023 ORDER BY re.total_risk_exposure DESC LIMIT 5	supervise
SELECT institution_id, MAX(core_tier_1_ratio) - MIN(core_tier_1_ratio) AS core_tier_1_ratio_fluctuation FROM capital_adequacy_ratio WHERE report_date >= datetime('now') - INTERVAL '1 year' GROUP BY institution_id ORDER BY core_tier_1_ratio_fluctuation DESC	supervise
SELECT fii.institution_name, rr.report_type, rr.approval_status, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND fii.registered_capital > 5000 AND rr.report_date BETWEEN '2023-07-01' AND '2023-09-30'	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE rr.report_type = '半年度报告' AND rr.report_date = '2023-10-01' AND car.report_date = '2023-04-01' AND car.total_car > 10	supervise
SELECT r.institution_id, f.institution_name FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.report_type = '季度报告' AND r.approval_status = '需修改' AND r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND n.report_date >= '2023-01-01' AND n.report_date < '2023-04-01' AND n.npl_ratio > 2.0	supervise
SELECT COUNT(*) FROM financial_institution_info WHERE legal_representative LIKE '张%'	supervise
SELECT institution_id FROM non_performing_loans WHERE npl_amount > 10000000000	supervise
SELECT * FROM liquidity_ratio WHERE institution_id = 8752	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_date = '2023-07-01' AND rr.report_type = '季度报告' AND npl.npl_ratio > 2	supervise
SELECT fii.institution_name, car.core_tier_1_ratio, npl.npl_ratio FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE car.report_date = '2023-07-01' AND npl.report_date = '2023-07-01' AND car.core_tier_1_ratio < 10 AND npl.npl_ratio > 2	supervise
SELECT fi.address AS province, AVG(npl.npl_ratio) AS average_npl_ratio FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id GROUP BY fi.address ORDER BY average_npl_ratio ASC LIMIT 1	supervise
SELECT institution_id, total_equity FROM balance_sheet WHERE report_date = '2024-04-01'	supervise
SELECT fii.institution_name, rr.report_id, rr.approval_status, npl.npl_ratio FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id AND rr.report_date = npl.report_date WHERE rr.approval_status = '需修改' AND rr.report_date >= '2023-07-01' AND rr.report_date < '2023-10-01' AND npl.npl_ratio > 2.00	supervise
SELECT institution_id, npl_amount FROM non_performing_loans WHERE report_date >= '2023-06-01' AND report_date < '2023-07-01'	supervise
SELECT loan_to_deposit_ratio, net_stable_funding_ratio FROM liquidity_ratio	supervise
SELECT institution_name FROM financial_institution_info ORDER BY establishment_date ASC LIMIT 5	supervise
SELECT institution_id, record_date, resolution_date, description, severity, status, compliance_type FROM compliance_records WHERE record_date >= '2023-01-01' AND record_date < '2024-01-01'	supervise
SELECT fi.institution_name, (bs.loans_and_advances / bs.total_assets) AS loan_to_asset_ratio FROM balance_sheet bs JOIN financial_institution_info fi ON bs.institution_id = fi.institution_id ORDER BY loan_to_asset_ratio DESC LIMIT 1	supervise
SELECT AVG(transaction_amount) FROM related_party_transactions WHERE transaction_type = '同业拆借'	supervise
SELECT * FROM compliance_records WHERE record_date = '2023-12-30'	supervise
SELECT COUNT(*) FROM (SELECT fi.institution_id FROM financial_institution_info fi JOIN balance_sheet bs ON fi.institution_id = bs.institution_id WHERE fi.institution_type != '商业银行' ORDER BY bs.total_assets DESC LIMIT 20) AS non_bank_institutions	supervise
SELECT * FROM regulatory_reports WHERE report_type = '年度报告' AND EXTRACT(YEAR FROM submission_date) = 2024	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE rr.report_type = '季度报告' AND rr.report_date BETWEEN '2023-07-01' AND '2023-09-30' AND car.core_tier_1_ratio < 8.00	supervise
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id WHERE npl.npl_ratio < (SELECT AVG(npl_ratio) FROM non_performing_loans) AND npl.provision_coverage_ratio > (SELECT AVG(provision_coverage_ratio) FROM non_performing_loans) AND car.total_car > (SELECT AVG(total_car) FROM capital_adequacy_ratio)	supervise
SELECT COUNT(DISTINCT lr.institution_id) FROM liquidity_ratio lr JOIN financial_institution_info fii ON lr.institution_id = fii.institution_id WHERE lr.liquidity_coverage_ratio < 100 AND fii.establishment_date <= date('now') - INTERVAL '10 years'	supervise
SELECT institution_id FROM non_performing_loans WHERE report_date = '2023-10-01' AND provision_coverage_ratio > 200	supervise
SELECT * FROM balance_sheet WHERE report_date = '2039-06-08'	supervise
SELECT institution_id, SUM(total_risk_exposure) AS total_risk_exposure, SUM(credit_risk_exposure) AS credit_risk_exposure FROM risk_exposure WHERE report_date >= '2023-07-01' AND report_date < '2023-08-01' GROUP BY institution_id	supervise
SELECT institution_id, cash_and_equivalents FROM balance_sheet	supervise
WITH deposit_growth AS (SELECT institution_id, (deposits - LAG(deposits) OVER (PARTITION BY institution_id ORDER BY report_date)) / LAG(deposits) OVER (PARTITION BY institution_id ORDER BY report_date) * 100 AS deposit_growth_rate FROM balance_sheet), loan_growth AS (SELECT institution_id, (loans_and_advances - LAG(loans_and_advances) OVER (PARTITION BY institution_id ORDER BY report_date)) / LAG(loans_and_advances) OVER (PARTITION BY institution_id ORDER BY report_date) * 100 AS loan_growth_rate FROM balance_sheet) SELECT d.institution_id FROM deposit_growth d JOIN loan_growth l ON d.institution_id = l.institution_id ORDER BY d.deposit_growth_rate DESC, l.loan_growth_rate ASC LIMIT 1	supervise
SELECT fi.institution_name, (re.operational_risk_exposure / re.total_risk_exposure * 100) AS operational_risk_percentage FROM financial_institution_info fi JOIN risk_exposure re ON fi.institution_id = re.institution_id ORDER BY operational_risk_percentage DESC LIMIT 1	supervise
SELECT COUNT(DISTINCT is2023.institution_id) FROM income_statement is2023 JOIN income_statement is2022 ON is2023.institution_id = is2022.institution_id AND EXTRACT(YEAR FROM is2023.report_date) = 2023 AND EXTRACT(QUARTER FROM is2023.report_date) = 3 AND EXTRACT(YEAR FROM is2022.report_date) = 2022 AND EXTRACT(QUARTER FROM is2022.report_date) = 3 WHERE (is2023.net_profit - is2022.net_profit) / is2022.net_profit > 0.2	supervise
SELECT fii.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id WHERE car.total_car < 12 AND rr.approval_status = '待审核' AND car.report_date >= '2023-07-01' AND car.report_date < '2023-10-01'	supervise
SELECT r.institution_id, f.institution_name, f.registered_capital FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND f.registered_capital > 50000000	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改'	supervise
SELECT DISTINCT institution_id FROM related_party_transactions WHERE EXTRACT(YEAR FROM transaction_date) = 2024	supervise
SELECT institution_id, transaction_type, transaction_amount FROM related_party_transactions WHERE transaction_date >= '2023-05-01' AND transaction_date < '2023-06-01'	supervise
SELECT COUNT(DISTINCT lr.institution_id) FROM liquidity_ratio lr JOIN financial_institution_info fii ON lr.institution_id = fii.institution_id WHERE lr.loan_to_deposit_ratio > 75 AND fii.institution_type = '村镇银行'	supervise
SELECT provision_for_loan_losses, net_profit FROM income_statement WHERE report_date = '2023-03-01'	supervise
SELECT npl_amount, total_loans FROM non_performing_loans WHERE institution_id = 2110	supervise
SELECT institution_id, net_profit, non_interest_income FROM income_statement WHERE report_date >= '2023-11-01' AND report_date < '2023-12-01'	supervise
SELECT institution_type, AVG(npl_ratio) AS avg_npl_ratio FROM non_performing_loans JOIN financial_institution_info ON non_performing_loans.institution_id = financial_institution_info.institution_id GROUP BY institution_type ORDER BY avg_npl_ratio DESC LIMIT 1	supervise
SELECT institution_id, net_stable_funding_ratio FROM liquidity_ratio WHERE report_date >= '2023-11-01' AND report_date < '2023-12-01'	supervise
SELECT r.institution_id, r.report_id, r.report_type, r.approval_status, n.npl_ratio FROM regulatory_reports r JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.submission_date >= '2023-01-01' AND r.submission_date < '2024-01-01' AND r.report_type = '季度报告' AND r.approval_status = '已拒绝' AND n.report_date >= '2023-01-01' AND n.report_date < '2024-01-01' AND n.npl_ratio > 2.00	supervise
SELECT severity, COUNT(*) FROM compliance_records WHERE EXTRACT(YEAR FROM record_date) = 2023 AND status != '已解决' GROUP BY severity	supervise
SELECT fi.institution_name FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id WHERE EXTRACT(YEAR FROM re.report_date) = 2023 ORDER BY (re.credit_risk_exposure / re.total_risk_exposure) LIMIT 1	supervise
SELECT institution_id FROM liquidity_ratio WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01' GROUP BY institution_id ORDER BY AVG(net_stable_funding_ratio) DESC LIMIT 5	supervise
SELECT fi.institution_name, fi.legal_representative FROM financial_institution_info fi WHERE fi.institution_id IN (SELECT DISTINCT npl.institution_id FROM non_performing_loans npl WHERE npl.report_date >= '2023-12-01' AND npl.report_date < '2024-01-01')	supervise
SELECT AVG(core_tier_1_ratio) FROM capital_adequacy_ratio WHERE report_date = '2023-12-31'	supervise
SELECT severity, AVG(resolution_date - record_date) AS avg_resolution_time FROM compliance_records WHERE resolution_date IS NOT NULL GROUP BY severity	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN income_statement i ON f.institution_id = i.institution_id WHERE i.report_date = '2023-10-01' ORDER BY i.net_profit DESC LIMIT 1	supervise
SELECT AVG(total_car) AS average_capital_adequacy_ratio FROM (SELECT institution_id, total_car FROM capital_adequacy_ratio ORDER BY (SELECT net_profit FROM income_statement WHERE income_statement.institution_id = capital_adequacy_ratio.institution_id ORDER BY report_date DESC LIMIT 1) DESC LIMIT 5) AS top_institutions	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id WHERE rr.report_type = '半年度报告' AND rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.approval_status = '待审核'	supervise
SELECT approval_status FROM regulatory_reports ORDER BY submission_date DESC LIMIT 1	supervise
SELECT institution_id FROM liquidity_ratio WHERE liquidity_coverage_ratio > 120	supervise
SELECT fi.institution_name, b.institution_id, b.report_date, b.deposits FROM balance_sheet b JOIN financial_institution_info fi ON b.institution_id = fi.institution_id ORDER BY b.deposits DESC, b.report_date ASC	supervise
SELECT institution_id FROM liquidity_ratio WHERE report_date = '2024-01-01' ORDER BY liquidity_coverage_ratio DESC LIMIT 1	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE EXTRACT(YEAR FROM rr.submission_date) = 2023 GROUP BY fii.institution_name ORDER BY COUNT(*) DESC LIMIT 1	supervise
SELECT COUNT(*) * 1.0 / (SELECT COUNT(DISTINCT institution_id) FROM liquidity_ratio) AS ratio FROM (SELECT lr.institution_id FROM liquidity_ratio lr JOIN capital_adequacy_ratio car ON lr.institution_id = car.institution_id AND lr.report_date = car.report_date WHERE lr.liquidity_coverage_ratio > (SELECT AVG(liquidity_coverage_ratio) FROM liquidity_ratio) AND lr.net_stable_funding_ratio > (SELECT AVG(net_stable_funding_ratio) FROM liquidity_ratio) AND car.total_car > (SELECT AVG(total_car) FROM capital_adequacy_ratio) GROUP BY lr.institution_id) AS qualified_institutions	supervise
SELECT * FROM risk_exposure WHERE institution_id = 5915	supervise
SELECT institution_id, report_date, submission_date FROM regulatory_reports WHERE EXTRACT(YEAR FROM submission_date) = 2024	supervise
SELECT fii.institution_name, rr.report_id, rr.submission_date FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND EXTRACT(YEAR FROM rr.submission_date) = 2023	supervise
SELECT fii.institution_name, fii.registered_capital FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.approval_status = '需修改' AND rr.submission_date >= '2023-07-01' AND rr.submission_date < '2023-10-01' AND fii.registered_capital > 100000000	supervise
SELECT fii.institution_name FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id JOIN related_party_transactions rpt ON rr.institution_id = rpt.institution_id WHERE rr.report_date = '2023-07-01' AND rr.report_type = '季度报告' AND rpt.transaction_amount > 5000000	supervise
SELECT COUNT(DISTINCT institution_id) FROM income_statement WHERE provision_for_loan_losses > 1.5 * (SELECT npl_amount FROM non_performing_loans WHERE non_performing_loans.institution_id = income_statement.institution_id AND non_performing_loans.report_date = income_statement.report_date)	supervise
SELECT fi.institution_name, (re.credit_risk_exposure / NULLIF(re.total_risk_exposure, 0)) * 100 as credit_risk_ratio FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id WHERE EXTRACT(YEAR FROM re.report_date) = 2023 AND (re.credit_risk_exposure / NULLIF(re.total_risk_exposure, 0)) > 0.8 ORDER BY credit_risk_ratio DESC	supervise
SELECT npl_ratio, total_car FROM non_performing_loans JOIN capital_adequacy_ratio ON non_performing_loans.institution_id = capital_adequacy_ratio.institution_id AND non_performing_loans.report_date = capital_adequacy_ratio.report_date	supervise
SELECT COUNT(*) FROM (SELECT institution_id FROM non_performing_loans ORDER BY npl_amount DESC LIMIT 30) AS top_30 WHERE (SELECT provision_coverage_ratio FROM non_performing_loans WHERE institution_id = top_30.institution_id ORDER BY report_date DESC LIMIT 1) < 150	supervise
SELECT institution_id, report_date FROM capital_adequacy_ratio WHERE core_tier_1_ratio < 8	supervise
SELECT institution_id, net_profit, operating_expenses FROM income_statement WHERE report_date >= '2023-12-01' AND report_date < '2024-01-01'	supervise
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN related_party_transactions rpt ON fi.institution_id = rpt.institution_id WHERE rr.approval_status = '已拒绝' AND rpt.approval_status = '已拒绝' AND rr.submission_date >= '2023-05-01' AND rr.submission_date < '2023-06-01' AND rpt.transaction_date >= '2023-05-01' AND rpt.transaction_date < '2023-06-01'	supervise
SELECT COUNT(*) FROM financial_institution_info WHERE institution_type = '村镇银行' AND address LIKE '%深圳%'	supervise
SELECT * FROM risk_exposure WHERE report_date = '2023-02-01'	supervise
SELECT fii.institution_name, rr.report_date FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT institution_id FROM liquidity_ratio WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01' AND net_stable_funding_ratio > 115	supervise
SELECT fi.institution_name FROM liquidity_ratio lr JOIN financial_institution_info fi ON lr.institution_id = fi.institution_id WHERE lr.report_date >= '2023-07-01' AND lr.report_date < '2023-10-01' ORDER BY lr.liquidity_coverage_ratio DESC LIMIT 1	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN non_performing_loans npl ON fii.institution_id = npl.institution_id WHERE rr.report_type = '年度报告' AND rr.approval_status = '已批准' AND npl.report_date >= '2023-01-01' AND npl.report_date < '2024-01-01' AND npl.npl_ratio < 2.00	supervise
SELECT transaction_type FROM related_party_transactions WHERE EXTRACT(YEAR FROM transaction_date) = 2023 GROUP BY transaction_type ORDER BY AVG(transaction_amount) DESC LIMIT 1	supervise
SELECT institution_name FROM financial_institution_info WHERE institution_name LIKE '%银行%'	supervise
SELECT f.institution_name FROM financial_institution_info f JOIN capital_adequacy_ratio c ON f.institution_id = c.institution_id WHERE c.report_date = '2023-11-01' ORDER BY c.risk_weighted_assets ASC LIMIT 1	supervise
SELECT institution_type, AVG(net_profit / total_assets) AS avg_roa FROM financial_institution_info JOIN balance_sheet USING (institution_id) JOIN income_statement USING (institution_id) GROUP BY institution_type ORDER BY avg_roa DESC LIMIT 1	supervise
SELECT fi.address AS province, AVG(npl.npl_ratio) AS avg_npl_ratio FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id GROUP BY fi.address ORDER BY avg_npl_ratio DESC LIMIT 5	supervise
SELECT institution_id FROM liquidity_ratio WHERE report_date >= '2023-01-01' AND report_date < '2023-02-01' AND liquidity_coverage_ratio > 120	supervise
SELECT institution_id FROM non_performing_loans ORDER BY npl_ratio ASC LIMIT 5	supervise
SELECT AVG(provision_coverage_ratio) FROM non_performing_loans WHERE report_date = '2023-06-30'	supervise
SELECT fi.institution_name, car.core_tier_1_ratio FROM financial_institution_info fi JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id WHERE car.core_tier_1_ratio < 8	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id WHERE rr.report_type = '年度报告' AND rr.approval_status = '已批准' AND car.total_car > 12 AND car.report_date >= '2023-01-01' AND car.report_date < '2024-01-01'	supervise
SELECT fi.institution_name, bs.total_equity / bs.total_assets AS net_worth_ratio FROM balance_sheet bs JOIN financial_institution_info fi ON bs.institution_id = fi.institution_id ORDER BY net_worth_ratio DESC LIMIT 5	supervise
SELECT npl_ratio, total_loans FROM non_performing_loans	supervise
SELECT fii.institution_name FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id WHERE car.report_date = '2023-09-01' AND car.total_car > 12 AND rr.approval_status = '已批准'	supervise
SELECT COUNT(*) FROM compliance_records WHERE severity = '高' AND status = '未解决'	supervise
SELECT fii.institution_name, rr.report_id FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND rr.report_date >= '2023-07-01' AND rr.report_date < '2023-10-01'	supervise
SELECT npl_amount FROM non_performing_loans WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01'	supervise
SELECT report_type, COUNT(CASE WHEN approval_status = '已拒绝' THEN 1 END) * 100.0 / COUNT(*) AS rejection_rate FROM regulatory_reports WHERE submission_date BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY report_type ORDER BY rejection_rate DESC LIMIT 1	supervise
SELECT fii.institution_name FROM risk_exposure re JOIN financial_institution_info fii ON re.institution_id = fii.institution_id WHERE re.report_date >= '2024-01-01' AND re.report_date < '2025-01-01' ORDER BY re.market_risk_exposure ASC LIMIT 1	supervise
SELECT fii.institution_name, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fii ON rr.institution_id = fii.institution_id WHERE rr.submission_date >= '2023-01-01' AND rr.submission_date < '2024-01-01' AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝'	supervise
SELECT fii.institution_name, rpt.transaction_amount, rpt.transaction_date, rpt.approval_status FROM related_party_transactions rpt JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id WHERE rpt.transaction_date = '2023-08-10' AND rpt.transaction_amount > 7000000 AND rpt.approval_status = '待审批'	supervise
SELECT fii.institution_name, car.total_car, re.total_risk_exposure FROM financial_institution_info fii JOIN capital_adequacy_ratio car ON fii.institution_id = car.institution_id JOIN risk_exposure re ON fii.institution_id = re.institution_id WHERE car.report_date = '2023-03-01' AND re.report_date = '2023-03-01' ORDER BY car.total_car DESC	supervise
SELECT COUNT(*) FROM regulatory_reports WHERE submission_date >= '2023-01-01' AND submission_date < '2024-01-01' AND approval_status = '待审核'	supervise
SELECT institution_id, report_date, core_tier_1_ratio, tier_1_ratio FROM capital_adequacy_ratio WHERE report_date >= '2023-12-01' AND report_date < '2024-01-01'	supervise
SELECT * FROM compliance_records WHERE severity = '高' ORDER BY record_date DESC	supervise
SELECT net_stable_funding_ratio FROM liquidity_ratio WHERE report_date >= '2023-01-01' AND report_date < '2024-01-01'	supervise
SELECT re.total_risk_exposure, fii.institution_id, fii.institution_name, fii.institution_type, fii.registered_capital, fii.establishment_date, fii.legal_representative, fii.contact_number, fii.address FROM risk_exposure re JOIN financial_institution_info fii ON re.institution_id = fii.institution_id	supervise
SELECT * FROM compliance_records WHERE record_date = '2023-12-30'	supervise
SELECT corr(c.total_car, r.total_risk_exposure) AS correlation FROM capital_adequacy_ratio c JOIN risk_exposure r ON c.institution_id = r.institution_id AND c.report_date = r.report_date	supervise
SELECT establishment_date, legal_representative FROM financial_institution_info WHERE EXTRACT(YEAR FROM establishment_date) = 2023	supervise
SELECT fi.institution_type, cr.severity, COUNT(cr.record_id) AS issue_count FROM compliance_records cr JOIN financial_institution_info fi ON cr.institution_id = fi.institution_id GROUP BY fi.institution_type, cr.severity	supervise
