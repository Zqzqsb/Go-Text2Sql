{"idx":1267934916,"db_id":"concert_singer","query":"What is the total number of singers?","pred":"SELECT COUNT(*) FROM singer;","ground_truth":"SELECT count(*) FROM singer","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n","metadata":{"execution_time":2.335155118,"prompt_tokens":696,"response_tokens":7,"total_tokens":703},"sequence_num":1}
{"idx":2736889970,"db_id":"concert_singer","query":"Show name, country, age for all singers ordered by age from the oldest to the youngest.","pred":"SELECT Name, Country, Age FROM singer ORDER BY Age DESC;","ground_truth":"SELECT name ,  country ,  age FROM singer ORDER BY age DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.727242229,"prompt_tokens":707,"response_tokens":14,"total_tokens":721},"sequence_num":2}
{"idx":2005500839,"db_id":"concert_singer","query":"What are the names, countries, and ages for every singer in descending order of age?","pred":"SELECT Name, Country, Age FROM singer ORDER BY Age DESC;","ground_truth":"SELECT name ,  country ,  age FROM singer ORDER BY age DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n","metadata":{"execution_time":1.604889145,"prompt_tokens":706,"response_tokens":14,"total_tokens":720},"sequence_num":3}
{"idx":3596924342,"db_id":"concert_singer","query":"What is the average, minimum, and maximum age of all singers from France?","pred":"SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';","ground_truth":"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":1.105256749,"prompt_tokens":704,"response_tokens":36,"total_tokens":740},"sequence_num":4}
{"idx":1516090351,"db_id":"concert_singer","query":"What is the average, minimum, and maximum age for all French singers?","pred":"SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';","ground_truth":"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":1.060859055,"prompt_tokens":703,"response_tokens":36,"total_tokens":739},"sequence_num":5}
{"idx":1255541531,"db_id":"concert_singer","query":"Show the name and the release year of the song by the youngest singer.","pred":"SELECT Name, Song_release_year \nFROM singer \nWHERE Age = (SELECT MIN(Age) FROM singer);","ground_truth":"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.747124279,"prompt_tokens":703,"response_tokens":23,"total_tokens":726},"sequence_num":6}
{"idx":2825819788,"db_id":"concert_singer","query":"What are the names and release years for all the songs of the youngest singer?","pred":"SELECT Song_Name, Song_release_year \nFROM singer \nWHERE Age = (SELECT MIN(Age) FROM singer);","ground_truth":"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n","metadata":{"execution_time":1.089352093,"prompt_tokens":704,"response_tokens":24,"total_tokens":728},"sequence_num":7}
{"idx":2733749147,"db_id":"concert_singer","query":"What are all distinct countries where singers above age 20 are from?","pred":"SELECT DISTINCT Country FROM singer WHERE Age \u003e 20;","ground_truth":"SELECT DISTINCT country FROM singer WHERE age  \u003e  20","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.824465973,"prompt_tokens":702,"response_tokens":12,"total_tokens":714},"sequence_num":8}
{"idx":556281625,"db_id":"concert_singer","query":"What are  the different countries with singers above age 20?","pred":"SELECT DISTINCT Country FROM singer WHERE Age \u003e 20;","ground_truth":"SELECT DISTINCT country FROM singer WHERE age  \u003e  20","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.794662104,"prompt_tokens":701,"response_tokens":12,"total_tokens":713},"sequence_num":9}
{"idx":3143165400,"db_id":"concert_singer","query":"Show all countries and the number of singers in each country.","pred":"SELECT Country, COUNT(*) AS Singer_Count FROM singer GROUP BY Country;","ground_truth":"SELECT country ,  count(*) FROM singer GROUP BY country","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.797706581,"prompt_tokens":700,"response_tokens":15,"total_tokens":715},"sequence_num":10}
{"idx":3632365171,"db_id":"concert_singer","query":"How many singers are from each country?","pred":"SELECT Country, COUNT(*) AS Singer_Count FROM singer GROUP BY Country;","ground_truth":"SELECT country ,  count(*) FROM singer GROUP BY country","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n","metadata":{"execution_time":0.714058105,"prompt_tokens":696,"response_tokens":15,"total_tokens":711},"sequence_num":11}
{"idx":1140496687,"db_id":"concert_singer","query":"List all song names by singers above the average age.","pred":"SELECT Song_Name \nFROM singer \nWHERE Age \u003e (SELECT AVG(Age) FROM singer_in_concert);","ground_truth":"SELECT song_name FROM singer WHERE age  \u003e  (SELECT avg(age) FROM singer)","is_correct":false,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":1.094243665,"prompt_tokens":699,"response_tokens":23,"total_tokens":722},"sequence_num":12}
{"idx":2048443111,"db_id":"concert_singer","query":"What are all the song names by singers who are older than average?","pred":"SELECT Song_Name \nFROM singer \nWHERE Age \u003e (SELECT AVG(Age) FROM singer);","ground_truth":"SELECT song_name FROM singer WHERE age  \u003e  (SELECT avg(age) FROM singer)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.770262573,"prompt_tokens":702,"response_tokens":20,"total_tokens":722},"sequence_num":13}
{"idx":808426065,"db_id":"concert_singer","query":"Show location and name for all stadiums with a capacity between 5000 and 10000.","pred":"SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;","ground_truth":"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n","metadata":{"execution_time":0.773420661,"prompt_tokens":707,"response_tokens":18,"total_tokens":725},"sequence_num":14}
{"idx":62112330,"db_id":"concert_singer","query":"What are the locations and names of all stations with capacity between 5000 and 10000?","pred":"SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;","ground_truth":"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n","metadata":{"execution_time":0.796337244,"prompt_tokens":708,"response_tokens":18,"total_tokens":726},"sequence_num":15}
{"idx":1691938762,"db_id":"concert_singer","query":"What is the maximum capacity and the average of all stadiums ?","pred":"SELECT MAX(Capacity), AVG(Capacity) FROM stadium;","ground_truth":"select max(capacity), average from stadium","is_correct":false,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":1.726929479,"prompt_tokens":700,"response_tokens":15,"total_tokens":715},"sequence_num":16}
{"idx":1409687833,"db_id":"concert_singer","query":"What is the average and maximum capacities for all stadiums ?","pred":"SELECT AVG(Capacity) AS average_capacity, MAX(Capacity) AS maximum_capacity FROM stadium;","ground_truth":"select avg(capacity) ,  max(capacity) from stadium","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.948659575,"prompt_tokens":699,"response_tokens":22,"total_tokens":721},"sequence_num":17}
{"idx":2569797852,"db_id":"concert_singer","query":"What is the name and capacity for the stadium with highest average attendance?","pred":"SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);","ground_truth":"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n","metadata":{"execution_time":0.720523908,"prompt_tokens":702,"response_tokens":19,"total_tokens":721},"sequence_num":18}
{"idx":2512080685,"db_id":"concert_singer","query":"What is the name and capacity for the stadium with the highest average attendance?","pred":"SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);","ground_truth":"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.756744049,"prompt_tokens":703,"response_tokens":19,"total_tokens":722},"sequence_num":19}
{"idx":2993496392,"db_id":"concert_singer","query":"How many concerts are there in year 2014 or 2015?","pred":"SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015');","ground_truth":"SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.707295501,"prompt_tokens":703,"response_tokens":17,"total_tokens":720},"sequence_num":20}
{"idx":3366832696,"db_id":"concert_singer","query":"How many concerts occurred in 2014 or 2015?","pred":"SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015');","ground_truth":"SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.717406253,"prompt_tokens":701,"response_tokens":17,"total_tokens":718},"sequence_num":21}
{"idx":1482516249,"db_id":"concert_singer","query":"Show the stadium name and the number of concerts in each stadium.","pred":"SELECT Name, COUNT(concert_ID) AS num_concerts FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY Name;","ground_truth":"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":1.058478502,"prompt_tokens":701,"response_tokens":32,"total_tokens":733},"sequence_num":22}
{"idx":3653638711,"db_id":"concert_singer","query":"For each stadium, how many concerts play there?","pred":"SELECT Location, COUNT(concert_ID) AS num_concerts_play\nFROM stadium\nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID\nGROUP BY Location;","ground_truth":"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":1.7267165439999999,"prompt_tokens":698,"response_tokens":37,"total_tokens":735},"sequence_num":23}
{"idx":292183198,"db_id":"concert_singer","query":"Show the stadium name and capacity with most number of concerts in year 2014 or after.","pred":"SELECT Name, Capacity \nFROM stadium \nWHERE Stadium_ID = (\n    SELECT Stadium_ID \n    FROM concert \n    WHERE Year \u003e= '2014' \n    GROUP BY Stadium_ID \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n);","ground_truth":"SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  \u003e=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n","metadata":{"execution_time":1.13451831,"prompt_tokens":707,"response_tokens":51,"total_tokens":758},"sequence_num":24}
{"idx":1944308957,"db_id":"concert_singer","query":"What is the name and capacity of the stadium with the most concerts after 2013 ?","pred":"SELECT Name, Capacity \nFROM stadium \nWHERE Stadium_ID = (\n    SELECT Stadium_ID \n    FROM concert \n    WHERE Year \u003e '2013' \n    GROUP BY Stadium_ID \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n);","ground_truth":"select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  \u003e  2013 group by t2.stadium_id order by count(*) desc limit 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n","metadata":{"execution_time":1.195486399,"prompt_tokens":706,"response_tokens":51,"total_tokens":757},"sequence_num":25}
{"idx":739522244,"db_id":"concert_singer","query":"Which year has most number of concerts?","pred":"SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.851604329,"prompt_tokens":696,"response_tokens":17,"total_tokens":713},"sequence_num":26}
{"idx":2089687389,"db_id":"concert_singer","query":"What is the year that had the most concerts?","pred":"SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":2.295343181,"prompt_tokens":698,"response_tokens":17,"total_tokens":715},"sequence_num":27}
{"idx":4039449052,"db_id":"concert_singer","query":"Show the stadium names without any concert.","pred":"SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert);","ground_truth":"SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.740234686,"prompt_tokens":696,"response_tokens":18,"total_tokens":714},"sequence_num":28}
{"idx":3908551754,"db_id":"concert_singer","query":"What are the names of the stadiums without any concerts?","pred":"SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);","ground_truth":"SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.905332561,"prompt_tokens":699,"response_tokens":17,"total_tokens":716},"sequence_num":29}
{"idx":3944142722,"db_id":"concert_singer","query":"Show countries where a singer above age 40 and a singer below 30 are from.","pred":"SELECT DISTINCT Country FROM singer WHERE Age \u003e 40\nINTERSECT\nSELECT DISTINCT Country FROM singer WHERE Age \u003c 30;","ground_truth":"SELECT country FROM singer WHERE age  \u003e  40 INTERSECT SELECT country FROM singer WHERE age  \u003c  30","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.870328686,"prompt_tokens":706,"response_tokens":27,"total_tokens":733},"sequence_num":30}
{"idx":1977589339,"db_id":"concert_singer","query":"Show names for all stadiums except for stadiums having a concert in year 2014.","pred":"SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN \n    (SELECT Stadium_ID \n     FROM concert \n     WHERE Year = '2014');","ground_truth":"SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014","is_correct":false,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n","metadata":{"execution_time":1.230561817,"prompt_tokens":705,"response_tokens":31,"total_tokens":736},"sequence_num":31}
{"idx":349432025,"db_id":"concert_singer","query":"What are the names of all stadiums that did not have a concert in 2014?","pred":"SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');","ground_truth":"SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014","is_correct":false,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n","metadata":{"execution_time":0.986670483,"prompt_tokens":706,"response_tokens":23,"total_tokens":729},"sequence_num":32}
{"idx":901105588,"db_id":"concert_singer","query":"Show the name and theme for all concerts and the number of singers in each concert.","pred":"SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS Singer_Count\nFROM concert\nJOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\nGROUP BY concert.concert_Name, concert.Theme;","ground_truth":"SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":3.206801516,"prompt_tokens":705,"response_tokens":56,"total_tokens":761},"sequence_num":33}
{"idx":1122716985,"db_id":"concert_singer","query":"What are the names , themes , and number of singers for every concert ?","pred":"SELECT concert_Name, Theme, COUNT(Singer_ID) AS number_of_singers FROM concert\nJOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\nGROUP BY concert_Name, Theme;","ground_truth":"select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":1.225824893,"prompt_tokens":703,"response_tokens":46,"total_tokens":749},"sequence_num":34}
{"idx":1054890627,"db_id":"concert_singer","query":"List singer names and number of concerts for each singer.","pred":"SELECT singer.Name, COUNT(singer_in_concert.Singer_ID) AS Number_of_Concerts\nFROM singer\nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nGROUP BY singer.Name;","ground_truth":"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.898668326,"prompt_tokens":699,"response_tokens":49,"total_tokens":748},"sequence_num":35}
{"idx":557294915,"db_id":"concert_singer","query":"What are the names of the singers and number of concerts for each person?","pred":"SELECT singer.Name, COUNT(singer_in_concert.Singer_ID) AS concert_count\nFROM singer\nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nGROUP BY singer.Name;","ground_truth":"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":3.130719482,"prompt_tokens":703,"response_tokens":46,"total_tokens":749},"sequence_num":36}
{"idx":694455021,"db_id":"concert_singer","query":"List all singer names in concerts in year 2014.","pred":"SELECT s.Name\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.Year = '2014';","ground_truth":"SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":1.019281974,"prompt_tokens":700,"response_tokens":48,"total_tokens":748},"sequence_num":37}
{"idx":803185790,"db_id":"concert_singer","query":"What are the names of the singers who performed in a concert in 2014?","pred":"SELECT DISTINCT s.Name\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.Year = '2014';","ground_truth":"SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014","is_correct":false,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":1.081844027,"prompt_tokens":705,"response_tokens":49,"total_tokens":754},"sequence_num":38}
{"idx":536836607,"db_id":"concert_singer","query":"what is the name and nation of the singer who have a song having 'Hey' in its name?","pred":"SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';","ground_truth":"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":1.7637347239999999,"prompt_tokens":709,"response_tokens":15,"total_tokens":724},"sequence_num":39}
{"idx":2310929212,"db_id":"concert_singer","query":"What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?","pred":"SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';","ground_truth":"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.710094859,"prompt_tokens":713,"response_tokens":15,"total_tokens":728},"sequence_num":40}
{"idx":1170092969,"db_id":"concert_singer","query":"Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.","pred":"SELECT Name, Location \nFROM stadium \nWHERE Stadium_ID IN (\n    SELECT Stadium_ID \n    FROM concert \n    WHERE Year = '2014'\n) \nAND Stadium_ID IN (\n    SELECT Stadium_ID \n    FROM concert \n    WHERE Year = '2015'\n);","ground_truth":"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n","metadata":{"execution_time":0.96543955,"prompt_tokens":713,"response_tokens":56,"total_tokens":769},"sequence_num":41}
{"idx":2634983879,"db_id":"concert_singer","query":"What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?","pred":"SELECT Name, Location\nFROM stadium\nWHERE Stadium_ID IN (\n    SELECT Stadium_ID\n    FROM concert\n    WHERE Year = '2014'\n    INTERSECT\n    SELECT Stadium_ID\n    FROM concert\n    WHERE Year = '2015'\n);","ground_truth":"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n","metadata":{"execution_time":2.310356962,"prompt_tokens":712,"response_tokens":54,"total_tokens":766},"sequence_num":42}
{"idx":614647823,"db_id":"concert_singer","query":"Find the number of concerts happened in the stadium with the highest capacity .","pred":"SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);","ground_truth":"select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.782644492,"prompt_tokens":702,"response_tokens":24,"total_tokens":726},"sequence_num":43}
{"idx":1969898986,"db_id":"concert_singer","query":"What are the number of concerts that occurred in the stadium with the largest capacity ?","pred":"SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);","ground_truth":"select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: stadium\n列:\n  - Stadium_ID: number (主键)\n  - Location: text\n  - Name: text\n  - Capacity: number\n  - Highest: number\n  - Lowest: number\n  - Average: number\n\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Country: text\n  - Song_Name: text\n  - Song_release_year: text\n  - Age: number\n  - Is_male: others\n\n表名: concert\n列:\n  - concert_ID: number (主键)\n  - concert_Name: text\n  - Theme: text\n  - Stadium_ID: text (外键)\n  - Year: text\n\n表名: singer_in_concert\n列:\n  - concert_ID: number (主键) (外键)\n  - Singer_ID: text (外键)\n\n外键关系:\n  - concert.concert_ID -\u003e singer_in_concert.concert_ID\n  - stadium.Stadium_ID -\u003e concert.Stadium_ID\n  - singer.Singer_ID -\u003e singer_in_concert.Singer_ID\n","metadata":{"execution_time":0.778995402,"prompt_tokens":704,"response_tokens":24,"total_tokens":728},"sequence_num":44}
{"idx":2608692610,"db_id":"pets_1","query":"Find the number of pets whose weight is heavier than 10.","pred":"SELECT COUNT(*) FROM Pets WHERE weight \u003e 10;","ground_truth":"SELECT count(*) FROM pets WHERE weight  \u003e  10","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":0.961300724,"prompt_tokens":627,"response_tokens":12,"total_tokens":639},"sequence_num":45}
{"idx":1280792635,"db_id":"pets_1","query":"How many pets have a greater weight than 10?","pred":"SELECT COUNT(*) FROM Pets WHERE weight \u003e 10;","ground_truth":"SELECT count(*) FROM pets WHERE weight  \u003e  10","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":0.636645898,"prompt_tokens":625,"response_tokens":12,"total_tokens":637},"sequence_num":46}
{"idx":242516914,"db_id":"pets_1","query":"Find the weight of the youngest dog.","pred":"SELECT weight\nFROM Pets\nWHERE PetType = 'DOG'\nORDER BY pet_age\nLIMIT 1;","ground_truth":"SELECT weight FROM pets ORDER BY pet_age LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.098092852,"prompt_tokens":622,"response_tokens":23,"total_tokens":645},"sequence_num":47}
{"idx":984141426,"db_id":"pets_1","query":"How much does the youngest dog weigh?","pred":"SELECT MIN(weight) FROM Pets WHERE PetType = 'DOG';","ground_truth":"SELECT weight FROM pets ORDER BY pet_age LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.134508035,"prompt_tokens":622,"response_tokens":14,"total_tokens":636},"sequence_num":48}
{"idx":2484381671,"db_id":"pets_1","query":"Find the maximum weight for each type of pet. List the maximum weight and pet type.","pred":"SELECT PetType, MAX(weight) AS max_weight\nFROM Pets\nGROUP BY PetType;","ground_truth":"SELECT max(weight) ,  petType FROM pets GROUP BY petType","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Student.StuID -\u003e Has_Pet.StuID\n  - Has_Pet.PetID -\u003e Pets.PetID\n","metadata":{"execution_time":3.205352798,"prompt_tokens":632,"response_tokens":20,"total_tokens":652},"sequence_num":49}
{"idx":323938504,"db_id":"pets_1","query":"List the maximum weight and type for each type of pet.","pred":"SELECT PetType, MAX(weight) AS max_weight\nFROM Pets\nGROUP BY PetType;","ground_truth":"SELECT max(weight) ,  petType FROM pets GROUP BY petType","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":0.714302393,"prompt_tokens":626,"response_tokens":20,"total_tokens":646},"sequence_num":50}
{"idx":2343147244,"db_id":"pets_1","query":"Find number of pets owned by students who are older than 20.","pred":"SELECT COUNT(Pets.PetID) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Age \u003e 20;","ground_truth":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  \u003e  20","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":2.085745617,"prompt_tokens":628,"response_tokens":52,"total_tokens":680},"sequence_num":51}
{"idx":3847066600,"db_id":"pets_1","query":"How many pets are owned by students that have an age greater than 20?","pred":"SELECT COUNT(Pets.PetID) \nFROM Pets \nJOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \nJOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Student.Age \u003e 20;","ground_truth":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  \u003e  20","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.263437106,"prompt_tokens":630,"response_tokens":52,"total_tokens":682},"sequence_num":52}
{"idx":3526020281,"db_id":"pets_1","query":"Find the number of dog pets that are raised by female students (with sex F).","pred":"SELECT COUNT(*) \nFROM Has_Pet hp \nJOIN Pets p ON hp.PetID = p.PetID \nJOIN Student s ON hp.StuID = s.StuID \nWHERE p.PetType = 'Dog' AND s.Sex = 'F';","ground_truth":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.039455973,"prompt_tokens":631,"response_tokens":56,"total_tokens":687},"sequence_num":53}
{"idx":1857337195,"db_id":"pets_1","query":"How many dog pets are raised by female students?","pred":"SELECT COUNT(*) \nFROM Has_Pet hp\nJOIN Pets p ON hp.PetID = p.PetID\nJOIN Student s ON hp.StuID = s.StuID\nWHERE p.PetType = 'Dog' AND s.Sex = 'Female';","ground_truth":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":2.031461509,"prompt_tokens":624,"response_tokens":56,"total_tokens":680},"sequence_num":54}
{"idx":3616909671,"db_id":"pets_1","query":"Find the number of distinct type of pets.","pred":"SELECT COUNT(DISTINCT PetType) FROM Pets;","ground_truth":"SELECT count(DISTINCT pettype) FROM pets","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Student.StuID -\u003e Has_Pet.StuID\n  - Has_Pet.PetID -\u003e Pets.PetID\n","metadata":{"execution_time":0.698272094,"prompt_tokens":623,"response_tokens":12,"total_tokens":635},"sequence_num":55}
{"idx":2732992614,"db_id":"pets_1","query":"How many different types of pet are there?","pred":"SELECT COUNT(DISTINCT PetType) AS num_types FROM Pets;","ground_truth":"SELECT count(DISTINCT pettype) FROM pets","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":0.668809314,"prompt_tokens":623,"response_tokens":15,"total_tokens":638},"sequence_num":56}
{"idx":2598056242,"db_id":"pets_1","query":"Find the first name of students who have cat or dog pet.","pred":"","ground_truth":"SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"error":"向LLM发送请求失败: API请求失败，状态码: 504，响应: {\"error\":{\"code\":503,\"message\":\"Service Unavailable.\",\"param\":null,\"type\":\"cf_service_unavailable\"}}"},"sequence_num":57}
{"idx":2451597413,"db_id":"pets_1","query":"What are the first names of every student who has a cat or dog as a pet?","pred":"SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType IN ('cat', 'dog'));","ground_truth":"SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":0.948960111,"prompt_tokens":632,"response_tokens":44,"total_tokens":676},"sequence_num":58}
{"idx":592653732,"db_id":"pets_1","query":"Find the first name of students who have both cat and dog pets .","pred":"SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'));","ground_truth":"select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.047522043,"prompt_tokens":628,"response_tokens":65,"total_tokens":693},"sequence_num":59}
{"idx":2359914239,"db_id":"pets_1","query":"What are the students' first names who have both cats and dogs as pets?","pred":"SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'));","ground_truth":"SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Student.StuID -\u003e Has_Pet.StuID\n  - Has_Pet.PetID -\u003e Pets.PetID\n","metadata":{"execution_time":1.165169009,"prompt_tokens":630,"response_tokens":65,"total_tokens":695},"sequence_num":60}
{"idx":3011658018,"db_id":"pets_1","query":"Find the major and age of students who do not have a cat pet.","pred":"SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat');","ground_truth":"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":0.959827058,"prompt_tokens":629,"response_tokens":43,"total_tokens":672},"sequence_num":61}
{"idx":1590928924,"db_id":"pets_1","query":"What major is every student who does not own a cat as a pet, and also how old are they?","pred":"SELECT Major, Age\nFROM Student\nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat');","ground_truth":"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.009046315,"prompt_tokens":636,"response_tokens":45,"total_tokens":681},"sequence_num":62}
{"idx":315987794,"db_id":"pets_1","query":"Find the id of students who do not have a cat pet.","pred":"SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat');","ground_truth":"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.029289807,"prompt_tokens":627,"response_tokens":43,"total_tokens":670},"sequence_num":63}
{"idx":3902656609,"db_id":"pets_1","query":"What are the ids of the students who do not own cats as pets?","pred":"SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'CAT');","ground_truth":"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Student.StuID -\u003e Has_Pet.StuID\n  - Has_Pet.PetID -\u003e Pets.PetID\n","metadata":{"execution_time":1.136417272,"prompt_tokens":629,"response_tokens":43,"total_tokens":672},"sequence_num":64}
{"idx":1673304209,"db_id":"pets_1","query":"Find the first name and age of students who have a dog but do not have a cat as a pet.","pred":"SELECT Fname, Age FROM Student\nWHERE StuID IN (SELECT StuID FROM Has_Pet\n                JOIN Pets ON Has_Pet.PetID = Pets.PetID\n                WHERE PetType = 'DOG')\nAND StuID NOT IN (SELECT StuID FROM Has_Pet\n                  JOIN Pets ON Has_Pet.PetID = Pets.PetID\n                  WHERE PetType = 'CAT');","ground_truth":"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Student.StuID -\u003e Has_Pet.StuID\n  - Has_Pet.PetID -\u003e Pets.PetID\n","metadata":{"execution_time":1.5787916910000002,"prompt_tokens":636,"response_tokens":88,"total_tokens":724},"sequence_num":65}
{"idx":137040897,"db_id":"pets_1","query":"What is the first name of every student who has a dog but does not have a cat?","pred":"SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog') AND StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat');","ground_truth":"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.470006985,"prompt_tokens":633,"response_tokens":77,"total_tokens":710},"sequence_num":66}
{"idx":189193988,"db_id":"pets_1","query":"Find the type and weight of the youngest pet.","pred":"SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1;","ground_truth":"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":0.982555318,"prompt_tokens":624,"response_tokens":17,"total_tokens":641},"sequence_num":67}
{"idx":2825052770,"db_id":"pets_1","query":"What type of pet is the youngest animal, and how much does it weigh?","pred":"SELECT PetType, weight\nFROM Pets\nWHERE pet_age = (SELECT MIN(pet_age) FROM Pets);","ground_truth":"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.025717969,"prompt_tokens":630,"response_tokens":24,"total_tokens":654},"sequence_num":68}
{"idx":2060989611,"db_id":"pets_1","query":"Find the id and weight of all pets whose age is older than 1.","pred":"SELECT PetID, weight FROM Pets WHERE pet_age \u003e 1;","ground_truth":"SELECT petid ,  weight FROM pets WHERE pet_age  \u003e  1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":0.945960633,"prompt_tokens":630,"response_tokens":15,"total_tokens":645},"sequence_num":69}
{"idx":2732058053,"db_id":"pets_1","query":"What is the id and weight of every pet who is older than 1?","pred":"SELECT PetID, weight FROM Pets WHERE pet_age \u003e 1;","ground_truth":"SELECT petid ,  weight FROM pets WHERE pet_age  \u003e  1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":0.707749779,"prompt_tokens":630,"response_tokens":15,"total_tokens":645},"sequence_num":70}
{"idx":3875290827,"db_id":"pets_1","query":"Find the average and maximum age for each type of pet.","pred":"SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age\nFROM Pets\nGROUP BY PetType;","ground_truth":"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.057431448,"prompt_tokens":626,"response_tokens":31,"total_tokens":657},"sequence_num":71}
{"idx":2091754630,"db_id":"pets_1","query":"What is the average and maximum age for each pet type?","pred":"SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age\nFROM Pets\nGROUP BY PetType;","ground_truth":"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.063233108,"prompt_tokens":626,"response_tokens":31,"total_tokens":657},"sequence_num":72}
{"idx":297265742,"db_id":"pets_1","query":"Find the average weight for each pet type.","pred":"SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;","ground_truth":"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":0.776495709,"prompt_tokens":623,"response_tokens":18,"total_tokens":641},"sequence_num":73}
{"idx":2609991875,"db_id":"pets_1","query":"What is the average weight for each type of pet?","pred":"SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;","ground_truth":"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Student.StuID -\u003e Has_Pet.StuID\n  - Has_Pet.PetID -\u003e Pets.PetID\n","metadata":{"execution_time":0.788336608,"prompt_tokens":625,"response_tokens":18,"total_tokens":643},"sequence_num":74}
{"idx":3327771992,"db_id":"pets_1","query":"Find the first name and age of students who have a pet.","pred":"SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);","ground_truth":"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":0.741025882,"prompt_tokens":627,"response_tokens":23,"total_tokens":650},"sequence_num":75}
{"idx":584729477,"db_id":"pets_1","query":"What are the different first names and ages of the students who do have pets?","pred":"SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);","ground_truth":"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":0.77267835,"prompt_tokens":630,"response_tokens":24,"total_tokens":654},"sequence_num":76}
{"idx":4084146362,"db_id":"pets_1","query":"Find the id of the pet owned by student whose last name is ‘Smith’.","pred":"SELECT PetID\nFROM Pets\nWHERE PetID IN (\n    SELECT PetID\n    FROM Has_Pet\n    WHERE StuID IN (\n        SELECT StuID\n        FROM Student\n        WHERE LName = 'Smith'\n    )\n);","ground_truth":"SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.94799121,"prompt_tokens":630,"response_tokens":52,"total_tokens":682},"sequence_num":77}
{"idx":4080750046,"db_id":"pets_1","query":"What is the id of the pet owned by the student whose last name is 'Smith'?","pred":"SELECT PetID \nFROM Has_Pet \nWHERE StuID = (SELECT StuID \n               FROM Student \n               WHERE LName = 'Smith');","ground_truth":"SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":0.851799168,"prompt_tokens":633,"response_tokens":33,"total_tokens":666},"sequence_num":78}
{"idx":4207478931,"db_id":"pets_1","query":"Find the number of pets for each student who has any pet and student id.","pred":"SELECT StuID, COUNT(PetID) AS num_of_pets\nFROM Has_Pet\nGROUP BY StuID;","ground_truth":"SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Student.StuID -\u003e Has_Pet.StuID\n  - Has_Pet.PetID -\u003e Pets.PetID\n","metadata":{"execution_time":0.851273037,"prompt_tokens":630,"response_tokens":28,"total_tokens":658},"sequence_num":79}
{"idx":3149270945,"db_id":"pets_1","query":"For students who have pets , how many pets does each student have ? list their ids instead of names .","pred":"SELECT Student.StuID, COUNT(Has_Pet.PetID) AS num_pets\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nGROUP BY Student.StuID;","ground_truth":"select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.003789631,"prompt_tokens":635,"response_tokens":48,"total_tokens":683},"sequence_num":80}
{"idx":2931052696,"db_id":"pets_1","query":"Find the first name and gender of student who have more than one pet.","pred":"SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) \u003e 1);","ground_truth":"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  \u003e  1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":0.940320127,"prompt_tokens":629,"response_tokens":35,"total_tokens":664},"sequence_num":81}
{"idx":2780939348,"db_id":"pets_1","query":"What is the first name and gender of the all the students who have more than one pet?","pred":"SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) \u003e 1);","ground_truth":"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  \u003e  1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":0.926460968,"prompt_tokens":633,"response_tokens":38,"total_tokens":671},"sequence_num":82}
{"idx":2271516602,"db_id":"pets_1","query":"Find the last name of the student who has a cat that is age 3.","pred":"SELECT LName\nFROM Student\nWHERE StuID IN (SELECT StuID\n                FROM Has_Pet\n                JOIN Pets ON Has_Pet.PetID = Pets.PetID\n                WHERE PetType = 'cat' AND pet_age = 3);","ground_truth":"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.039754732,"prompt_tokens":631,"response_tokens":56,"total_tokens":687},"sequence_num":83}
{"idx":1788645010,"db_id":"pets_1","query":"What is the last name of the student who has a cat that is 3 years old?","pred":"SELECT LName \nFROM Student \nWHERE StuID IN (SELECT StuID \n                FROM Has_Pet \n                JOIN Pets ON Has_Pet.PetID = Pets.PetID \n                WHERE PetType = 'cat' AND pet_age = 3);","ground_truth":"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.704419679,"prompt_tokens":633,"response_tokens":56,"total_tokens":689},"sequence_num":84}
{"idx":1631504412,"db_id":"pets_1","query":"Find the average age of students who do not have any pet .","pred":"SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);","ground_truth":"select avg(age) from student where stuid not in (select stuid from has_pet)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.116646647,"prompt_tokens":627,"response_tokens":24,"total_tokens":651},"sequence_num":85}
{"idx":4109021808,"db_id":"pets_1","query":"What is the average age for all students who do not own any pets ?","pred":"SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);","ground_truth":"select avg(age) from student where stuid not in (select stuid from has_pet)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Student\n列:\n  - StuID: number (主键)\n  - LName: text\n  - Fname: text\n  - Age: number\n  - Sex: text\n  - Major: number\n  - Advisor: number\n  - city_code: text\n\n表名: Has_Pet\n列:\n  - StuID: number (外键)\n  - PetID: number (外键)\n\n表名: Pets\n列:\n  - PetID: number (主键)\n  - PetType: text\n  - pet_age: number\n  - weight: number\n\n外键关系:\n  - Has_Pet.PetID -\u003e Pets.PetID\n  - Student.StuID -\u003e Has_Pet.StuID\n","metadata":{"execution_time":1.146448106,"prompt_tokens":629,"response_tokens":24,"total_tokens":653},"sequence_num":86}
{"idx":1213160843,"db_id":"car_1","query":"How many continents are there?","pred":"SELECT COUNT(*) FROM continents;","ground_truth":"SELECT count(*) FROM CONTINENTS;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n","metadata":{"execution_time":1.229150551,"prompt_tokens":746,"response_tokens":7,"total_tokens":753},"sequence_num":87}
{"idx":3837036977,"db_id":"car_1","query":"What is the number of continents?","pred":"SELECT COUNT(*) FROM continents;","ground_truth":"SELECT count(*) FROM CONTINENTS;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n","metadata":{"execution_time":0.641676502,"prompt_tokens":747,"response_tokens":7,"total_tokens":754},"sequence_num":88}
{"idx":4143965431,"db_id":"car_1","query":"How many countries does each continent have? List the continent id, continent name and the number of countries.","pred":"SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumOfCountries\nFROM continents\nJOIN countries ON continents.ContId = countries.Continent\nGROUP BY continents.ContId, continents.Continent;","ground_truth":"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.985793522,"prompt_tokens":761,"response_tokens":45,"total_tokens":806},"sequence_num":89}
{"idx":954450554,"db_id":"car_1","query":"For each continent, list its id, name, and how many countries it has?","pred":"SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS CountryCount\nFROM continents\nJOIN countries ON continents.ContId = countries.Continent\nGROUP BY continents.ContId, continents.Continent;","ground_truth":"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.315598483,"prompt_tokens":757,"response_tokens":44,"total_tokens":801},"sequence_num":90}
{"idx":1973666637,"db_id":"car_1","query":"How many countries are listed?","pred":"SELECT COUNT(*) FROM countries;","ground_truth":"SELECT count(*) FROM COUNTRIES;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n","metadata":{"execution_time":0.791238276,"prompt_tokens":746,"response_tokens":7,"total_tokens":753},"sequence_num":91}
{"idx":452566737,"db_id":"car_1","query":"How many countries exist?","pred":"SELECT COUNT(*) FROM countries;","ground_truth":"SELECT count(*) FROM COUNTRIES;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n","metadata":{"execution_time":0.690144089,"prompt_tokens":745,"response_tokens":7,"total_tokens":752},"sequence_num":92}
{"idx":449725666,"db_id":"car_1","query":"How many models does each car maker produce? List maker full name, id and the number.","pred":"SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) AS number\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nGROUP BY car_makers.FullName, car_makers.Id;","ground_truth":"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.940282562,"prompt_tokens":759,"response_tokens":51,"total_tokens":810},"sequence_num":93}
{"idx":1569812976,"db_id":"car_1","query":"What is the full name of each car maker, along with its id and how many models it produces?","pred":"SELECT Id, FullName, COUNT(model_list.Model) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY Id, FullName;","ground_truth":"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":2.060400576,"prompt_tokens":761,"response_tokens":37,"total_tokens":798},"sequence_num":94}
{"idx":1379706618,"db_id":"car_1","query":"Which model of the car has the minimum horsepower?","pred":"SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);","ground_truth":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.438245888,"prompt_tokens":750,"response_tokens":21,"total_tokens":771},"sequence_num":95}
{"idx":1292095150,"db_id":"car_1","query":"What is the model of the car with the smallest amount of horsepower?","pred":"SELECT Model FROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nORDER BY CAST(Horsepower AS INTEGER) ASC LIMIT 1;","ground_truth":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n","metadata":{"execution_time":0.863228114,"prompt_tokens":754,"response_tokens":46,"total_tokens":800},"sequence_num":96}
{"idx":1542074956,"db_id":"car_1","query":"Find the model of the car whose weight is below the average weight.","pred":"SELECT model_list.Model\nFROM model_list\nJOIN car_names ON model_list.Model = car_names.Model\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Weight \u003c (SELECT AVG(Weight) FROM cars_data);","ground_truth":"SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  \u003c  (SELECT avg(Weight) FROM CARS_DATA)","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n","metadata":{"execution_time":1.167645502,"prompt_tokens":754,"response_tokens":50,"total_tokens":804},"sequence_num":97}
{"idx":1757354863,"db_id":"car_1","query":"What is the model for the car with a weight smaller than the average?","pred":"SELECT model_list.Model\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nWHERE cars_data.Weight \u003c (SELECT AVG(Weight) FROM cars_data);","ground_truth":"SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  \u003c  (SELECT avg(Weight) FROM CARS_DATA)","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n","metadata":{"execution_time":1.124499772,"prompt_tokens":755,"response_tokens":50,"total_tokens":805},"sequence_num":98}
{"idx":2876298386,"db_id":"car_1","query":"Find the name of the makers that produced some cars in the year of 1970?","pred":"SELECT DISTINCT Maker\nFROM car_makers\nWHERE Id IN (SELECT Maker\n             FROM model_list\n             WHERE Model IN (SELECT Model\n                             FROM car_names\n                             WHERE MakeId IN (SELECT Id\n                                              FROM cars_data\n                                              WHERE Year = 1970)));","ground_truth":"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.305105916,"prompt_tokens":758,"response_tokens":57,"total_tokens":815},"sequence_num":99}
{"idx":3481880266,"db_id":"car_1","query":"What is the name of the different car makers who produced a car in 1970?","pred":"SELECT DISTINCT Maker\nFROM car_makers\nWHERE Id IN (SELECT Maker\n             FROM model_list\n             WHERE ModelId IN (SELECT MakeId\n                               FROM car_names\n                               WHERE Model IN (SELECT Id\n                                                FROM cars_data\n                                                WHERE Year = 1970)));","ground_truth":"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.949394278,"prompt_tokens":758,"response_tokens":58,"total_tokens":816},"sequence_num":100}
{"idx":2635910967,"db_id":"car_1","query":"Find the make and production time of the cars that were produced in the earliest year?","pred":"SELECT Maker, MIN(Year) AS EarliestProductionYear FROM cars_data;","ground_truth":"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n","metadata":{"execution_time":0.727976554,"prompt_tokens":757,"response_tokens":17,"total_tokens":774},"sequence_num":101}
{"idx":3782856550,"db_id":"car_1","query":"What is the maker of the carr produced in the earliest year and what year was it?","pred":"SELECT Maker, MIN(Year) AS EarliestYear FROM cars_data\nINNER JOIN car_names ON cars_data.Id = car_names.MakeId\nINNER JOIN model_list ON car_names.Model = model_list.ModelId\nINNER JOIN car_makers ON model_list.Maker = car_makers.Id\nGROUP BY Maker\nORDER BY EarliestYear\nLIMIT 1;","ground_truth":"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.226972344,"prompt_tokens":758,"response_tokens":74,"total_tokens":832},"sequence_num":102}
{"idx":525262231,"db_id":"car_1","query":"Which distinct car models are the produced after 1980?","pred":"SELECT DISTINCT Model \nFROM model_list \nJOIN car_names ON model_list.Model = car_names.ModelId \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Year \u003e 1980;","ground_truth":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  \u003e  1980;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n","metadata":{"execution_time":0.907202749,"prompt_tokens":752,"response_tokens":44,"total_tokens":796},"sequence_num":103}
{"idx":1806181550,"db_id":"car_1","query":"What are the different models for the cards produced after 1980?","pred":"SELECT DISTINCT Model \nFROM model_list \nJOIN car_names ON model_list.Model = car_names.Model \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Year \u003e 1980;","ground_truth":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  \u003e  1980;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n","metadata":{"execution_time":1.031398217,"prompt_tokens":754,"response_tokens":43,"total_tokens":797},"sequence_num":104}
{"idx":521115491,"db_id":"car_1","query":"How many car makers are there in each continents? List the continent name and the count.","pred":"SELECT c.Continent, COUNT(DISTINCT cm.Id) AS MakerCount\nFROM continents c\nJOIN countries co ON c.ContId = co.Continent\nJOIN car_makers cm ON co.CountryId = cm.Country\nGROUP BY c.Continent;","ground_truth":"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.587509491,"prompt_tokens":758,"response_tokens":52,"total_tokens":810},"sequence_num":105}
{"idx":2367303324,"db_id":"car_1","query":"What is the name of each continent and how many car makers are there in each one?","pred":"SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS CarMakersCount\nFROM continents\nJOIN countries ON continents.ContId = countries.Continent\nJOIN car_makers ON countries.CountryId = car_makers.Country\nGROUP BY continents.Continent;","ground_truth":"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.816882139,"prompt_tokens":758,"response_tokens":55,"total_tokens":813},"sequence_num":106}
{"idx":1198297343,"db_id":"car_1","query":"Which of the countries has the most car makers? List the country name.","pred":"SELECT CountryName\nFROM countries\nWHERE CountryId = (SELECT Country\n                   FROM car_makers\n                   GROUP BY Country\n                   ORDER BY COUNT(*) DESC\n                   LIMIT 1);","ground_truth":"SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.334376719,"prompt_tokens":755,"response_tokens":39,"total_tokens":794},"sequence_num":107}
{"idx":2522094150,"db_id":"car_1","query":"What is the name of the country with the most car makers?","pred":"SELECT Country\nFROM car_makers\nGROUP BY Country\nORDER BY COUNT(*) DESC\nLIMIT 1;","ground_truth":"SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.96935113,"prompt_tokens":753,"response_tokens":23,"total_tokens":776},"sequence_num":108}
{"idx":864221138,"db_id":"car_1","query":"How many car models are produced by each maker ? Only list the count and the maker full name .","pred":"SELECT car_makers.FullName, COUNT(model_list.Model) AS ModelCount\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nGROUP BY car_makers.FullName;","ground_truth":"select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.596244778,"prompt_tokens":760,"response_tokens":42,"total_tokens":802},"sequence_num":109}
{"idx":413374189,"db_id":"car_1","query":"What is the number of car models that are produced by each maker and what is the id and full name of each maker?","pred":"SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) AS NumberOfModels\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nGROUP BY car_makers.Id, car_makers.FullName;","ground_truth":"SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":2.016220915,"prompt_tokens":765,"response_tokens":52,"total_tokens":817},"sequence_num":110}
{"idx":1925364172,"db_id":"car_1","query":"What is the accelerate of the car make amc hornet sportabout (sw)?","pred":"SELECT Accelerate \nFROM cars_data \nWHERE Id = (SELECT MakeId \n            FROM car_names \n            WHERE Model = 'amc hornet sportabout (sw)');","ground_truth":"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n","metadata":{"execution_time":2.098340803,"prompt_tokens":757,"response_tokens":37,"total_tokens":794},"sequence_num":111}
{"idx":370011644,"db_id":"car_1","query":"How much does the car accelerate that makes amc hornet sportabout (sw)?","pred":"SELECT Accelerate \nFROM cars_data \nWHERE Id = (\n    SELECT MakeId \n    FROM car_names \n    WHERE Model = 'amc hornet sportabout (sw)'\n);","ground_truth":"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n","metadata":{"execution_time":1.3198833030000001,"prompt_tokens":757,"response_tokens":38,"total_tokens":795},"sequence_num":112}
{"idx":597236281,"db_id":"car_1","query":"How many car makers are there in france?","pred":"SELECT COUNT(*) FROM car_makers WHERE COUNTRY = 'France';","ground_truth":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n","metadata":{"execution_time":2.282651694,"prompt_tokens":749,"response_tokens":15,"total_tokens":764},"sequence_num":113}
{"idx":3219101617,"db_id":"car_1","query":"What is the number of makers of care in France?","pred":"SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = 'France';","ground_truth":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.915742978,"prompt_tokens":751,"response_tokens":18,"total_tokens":769},"sequence_num":114}
{"idx":3806982019,"db_id":"car_1","query":"How many car models are produced in the usa?","pred":"SELECT COUNT(*) FROM car_names \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nJOIN model_list ON car_names.Model = model_list.ModelId \nJOIN car_makers ON model_list.Maker = car_makers.Id \nJOIN countries ON car_makers.Country = countries.CountryId \nWHERE countries.CountryName = 'USA';","ground_truth":"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n","metadata":{"execution_time":1.745007474,"prompt_tokens":750,"response_tokens":69,"total_tokens":819},"sequence_num":115}
{"idx":2082722414,"db_id":"car_1","query":"What is the count of the car models produced in the United States?","pred":"SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryName WHERE countries.CountryName = 'United States';","ground_truth":"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.813855505,"prompt_tokens":754,"response_tokens":28,"total_tokens":782},"sequence_num":116}
{"idx":531065326,"db_id":"car_1","query":"What is the average miles per gallon(mpg) of the cars with 4 cylinders?","pred":"SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;","ground_truth":"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.697821252,"prompt_tokens":758,"response_tokens":17,"total_tokens":775},"sequence_num":117}
{"idx":3977535766,"db_id":"car_1","query":"What is the average miles per gallon of all the cards with 4 cylinders?","pred":"SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;","ground_truth":"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.908113667,"prompt_tokens":756,"response_tokens":17,"total_tokens":773},"sequence_num":118}
{"idx":1155789500,"db_id":"car_1","query":"What is the smallest weight of the car produced with 8 cylinders on 1974 ?","pred":"SELECT MIN(Weight) \nFROM cars_data \nWHERE Cylinders = 8 AND Year = 1974;","ground_truth":"select min(weight) from cars_data where cylinders  =  8 and year  =  1974","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n","metadata":{"execution_time":0.741306381,"prompt_tokens":758,"response_tokens":25,"total_tokens":783},"sequence_num":119}
{"idx":2582997501,"db_id":"car_1","query":"What is the minimum weight of the car with 8 cylinders produced in 1974 ?","pred":"SELECT MIN(Weight) \nFROM cars_data \nWHERE Cylinders = 8 AND Year = 1974;","ground_truth":"select min(weight) from cars_data where cylinders  =  8 and year  =  1974","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n","metadata":{"execution_time":0.924810288,"prompt_tokens":758,"response_tokens":25,"total_tokens":783},"sequence_num":120}
{"idx":892885085,"db_id":"car_1","query":"What are all the makers and models?","pred":"SELECT Maker, Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;","ground_truth":"SELECT Maker ,  Model FROM MODEL_LIST;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.786767797,"prompt_tokens":748,"response_tokens":23,"total_tokens":771},"sequence_num":121}
{"idx":308451582,"db_id":"car_1","query":"What are the makers and models?","pred":"SELECT Maker, Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;","ground_truth":"SELECT Maker ,  Model FROM MODEL_LIST;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n","metadata":{"execution_time":0.784410949,"prompt_tokens":747,"response_tokens":23,"total_tokens":770},"sequence_num":122}
{"idx":84049232,"db_id":"car_1","query":"What are the countries having at least one car maker? List name and id.","pred":"SELECT CountryId, CountryName\nFROM countries\nWHERE CountryId IN (SELECT DISTINCT Country\n                    FROM car_makers);","ground_truth":"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  \u003e=  1;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n","metadata":{"execution_time":0.853837888,"prompt_tokens":756,"response_tokens":26,"total_tokens":782},"sequence_num":123}
{"idx":1616240755,"db_id":"car_1","query":"What are the names and ids of all countries with at least one car maker?","pred":"SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT DISTINCT Country FROM car_makers);","ground_truth":"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  \u003e=  1;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n","metadata":{"execution_time":1.4916108000000001,"prompt_tokens":756,"response_tokens":22,"total_tokens":778},"sequence_num":124}
{"idx":395492488,"db_id":"car_1","query":"What is the number of the cars with horsepower more than 150?","pred":"SELECT COUNT(*) FROM cars_data WHERE Horsepower \u003e 150;","ground_truth":"SELECT count(*) FROM CARS_DATA WHERE horsepower  \u003e  150;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":2.023556745,"prompt_tokens":754,"response_tokens":14,"total_tokens":768},"sequence_num":125}
{"idx":2676068123,"db_id":"car_1","query":"What is the number of cars with a horsepower greater than 150?","pred":"SELECT COUNT(*) FROM cars_data WHERE Horsepower \u003e 150;","ground_truth":"SELECT count(*) FROM CARS_DATA WHERE horsepower  \u003e  150;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n","metadata":{"execution_time":0.917934082,"prompt_tokens":754,"response_tokens":14,"total_tokens":768},"sequence_num":126}
{"idx":3231381475,"db_id":"car_1","query":"What is the average weight of cars each year?","pred":"SELECT Year, AVG(Weight) AS Average_Weight\nFROM cars_data\nGROUP BY Year;","ground_truth":"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n","metadata":{"execution_time":0.950952791,"prompt_tokens":750,"response_tokens":21,"total_tokens":771},"sequence_num":127}
{"idx":642186284,"db_id":"car_1","query":"What is the average weight and year for each year?","pred":"SELECT AVG(Weight) AS average_weight, AVG(Year) AS average_year\nFROM cars_data\nGROUP BY Year;","ground_truth":"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n","metadata":{"execution_time":0.76213305,"prompt_tokens":751,"response_tokens":26,"total_tokens":777},"sequence_num":128}
{"idx":4072905512,"db_id":"car_1","query":"Which countries in europe have at least 3 car manufacturers?","pred":"SELECT DISTINCT countries.CountryName \nFROM countries \nJOIN car_makers ON countries.CountryId = car_makers.Country \nJOIN continents ON countries.Continent = continents.ContId \nWHERE continents.Continent = 'Europe' \nGROUP BY countries.CountryName \nHAVING COUNT(DISTINCT car_makers.Id) \u003e= 3;","ground_truth":"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  \u003e=  3;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n","metadata":{"execution_time":1.674952222,"prompt_tokens":752,"response_tokens":65,"total_tokens":817},"sequence_num":129}
{"idx":600050820,"db_id":"car_1","query":"What are the names of all European countries with at least 3 manufacturers?","pred":"SELECT CountryName\nFROM countries\nWHERE Continent = (SELECT ContId\n                   FROM continents\n                   WHERE Continent = 'Europe')\nGROUP BY CountryName\nHAVING COUNT(DISTINCT CountryId) \u003e= 3;","ground_truth":"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  \u003e=  3;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.663610864,"prompt_tokens":755,"response_tokens":45,"total_tokens":800},"sequence_num":130}
{"idx":1419618936,"db_id":"car_1","query":"What is the maximum horsepower and the make of the car models with 3 cylinders?","pred":"SELECT MAX(Horsepower), Make\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.ModelId\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE Cylinders = 3;","ground_truth":"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n","metadata":{"execution_time":1.221870231,"prompt_tokens":757,"response_tokens":62,"total_tokens":819},"sequence_num":131}
{"idx":410419533,"db_id":"car_1","query":"What is the largest amount of horsepower for the models with 3 cylinders and what make is it?","pred":"SELECT Maker, MAX(Horsepower) AS MaxHorsepower\nFROM cars_data\nWHERE Cylinders = 3;","ground_truth":"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.767764931,"prompt_tokens":760,"response_tokens":27,"total_tokens":787},"sequence_num":132}
{"idx":1351548289,"db_id":"car_1","query":"Which model saves the most gasoline? That is to say, have the maximum miles per gallon.","pred":"SELECT Model\nFROM cars_data\nORDER BY CAST(MPG AS DECIMAL) DESC\nLIMIT 1;","ground_truth":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n","metadata":{"execution_time":0.972564743,"prompt_tokens":759,"response_tokens":23,"total_tokens":782},"sequence_num":133}
{"idx":4211437406,"db_id":"car_1","query":"What is the car model with the highest mpg ?","pred":"SELECT Model\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nORDER BY CAST(REPLACE(MPG, 'MPG', '') AS DECIMAL) DESC\nLIMIT 1;","ground_truth":"select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.003907348,"prompt_tokens":750,"response_tokens":56,"total_tokens":806},"sequence_num":134}
{"idx":3691116575,"db_id":"car_1","query":"What is the average horsepower of the cars before 1980?","pred":"SELECT AVG(Horsepower) FROM cars_data WHERE Year \u003c 1980;","ground_truth":"SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  \u003c  1980;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n","metadata":{"execution_time":1.461992848,"prompt_tokens":753,"response_tokens":17,"total_tokens":770},"sequence_num":135}
{"idx":3132139063,"db_id":"car_1","query":"What is the average horsepower for all cars produced before 1980 ?","pred":"SELECT AVG(Horsepower) FROM cars_data WHERE Year \u003c 1980;","ground_truth":"select avg(horsepower) from cars_data where year  \u003c  1980;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n","metadata":{"execution_time":1.173984551,"prompt_tokens":754,"response_tokens":17,"total_tokens":771},"sequence_num":136}
{"idx":4082506223,"db_id":"car_1","query":"What is the average edispl of the cars of model volvo?","pred":"SELECT AVG(Edispl) FROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE car_makers.Maker = 'volvo';","ground_truth":"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n","metadata":{"execution_time":1.479638003,"prompt_tokens":755,"response_tokens":63,"total_tokens":818},"sequence_num":137}
{"idx":1639817255,"db_id":"car_1","query":"What is the average edispl for all volvos?","pred":"SELECT AVG(cars_data.Edispl) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'VOLVO';","ground_truth":"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n","metadata":{"execution_time":6.8290692790000005,"prompt_tokens":752,"response_tokens":186,"total_tokens":938},"sequence_num":138}
{"idx":284608920,"db_id":"car_1","query":"What is the maximum accelerate for different number of cylinders?","pred":"SELECT Cylinders, MAX(Accelerate) AS Max_Accelerate\nFROM cars_data\nGROUP BY Cylinders;","ground_truth":"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.918794275,"prompt_tokens":751,"response_tokens":29,"total_tokens":780},"sequence_num":139}
{"idx":2169689652,"db_id":"car_1","query":"What is the maximum accelerate for all the different cylinders?","pred":"SELECT Cylinders, MAX(Accelerate) AS Max_Accelerate FROM cars_data GROUP BY Cylinders;","ground_truth":"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.8601382389999999,"prompt_tokens":751,"response_tokens":27,"total_tokens":778},"sequence_num":140}
{"idx":2392936966,"db_id":"car_1","query":"Which model has the most version(make) of cars?","pred":"SELECT Model, COUNT(DISTINCT Make) AS VersionCount\nFROM car_names\nGROUP BY Model\nORDER BY VersionCount DESC\nLIMIT 1;","ground_truth":"SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n","metadata":{"execution_time":1.056655285,"prompt_tokens":751,"response_tokens":32,"total_tokens":783},"sequence_num":141}
{"idx":3898818100,"db_id":"car_1","query":"What model has the most different versions?","pred":"SELECT Model, COUNT(DISTINCT Make) AS Num_Versions\nFROM car_names\nGROUP BY Model\nORDER BY Num_Versions DESC\nLIMIT 1;","ground_truth":"SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.879446579,"prompt_tokens":748,"response_tokens":34,"total_tokens":782},"sequence_num":142}
{"idx":2044216822,"db_id":"car_1","query":"How many cars have more than 4 cylinders?","pred":"SELECT COUNT(*) FROM cars_data WHERE Cylinders \u003e 4;","ground_truth":"SELECT count(*) FROM CARS_DATA WHERE Cylinders  \u003e  4;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.851148505,"prompt_tokens":750,"response_tokens":15,"total_tokens":765},"sequence_num":143}
{"idx":1334913258,"db_id":"car_1","query":"What is the number of cars with more than 4 cylinders?","pred":"SELECT COUNT(*) FROM cars_data WHERE Cylinders \u003e 4;","ground_truth":"SELECT count(*) FROM CARS_DATA WHERE Cylinders  \u003e  4;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.751176013,"prompt_tokens":753,"response_tokens":15,"total_tokens":768},"sequence_num":144}
{"idx":646130885,"db_id":"car_1","query":"how many cars were produced in 1980?","pred":"SELECT COUNT(*) FROM cars_data WHERE Year = 1980;","ground_truth":"SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n","metadata":{"execution_time":1.495255711,"prompt_tokens":750,"response_tokens":14,"total_tokens":764},"sequence_num":145}
{"idx":2865640182,"db_id":"car_1","query":"In 1980, how many cars were made?","pred":"SELECT COUNT(*) FROM cars_data WHERE Year = 1980;","ground_truth":"SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.547121492,"prompt_tokens":751,"response_tokens":14,"total_tokens":765},"sequence_num":146}
{"idx":3273992985,"db_id":"car_1","query":"How many car models were produced by the maker with full name American Motor Company?","pred":"SELECT COUNT(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company');","ground_truth":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.784393064,"prompt_tokens":756,"response_tokens":25,"total_tokens":781},"sequence_num":147}
{"idx":2196148320,"db_id":"car_1","query":"What is the number of car models created by the car maker American Motor Company?","pred":"SELECT COUNT(*) \nFROM car_makers \nWHERE Maker = 'American Motor Company';","ground_truth":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n","metadata":{"execution_time":1.093757823,"prompt_tokens":756,"response_tokens":18,"total_tokens":774},"sequence_num":148}
{"idx":381621878,"db_id":"car_1","query":"Which makers designed more than 3 car models? List full name and the id.","pred":"SELECT Id, FullName FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) \u003e 3);","ground_truth":"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  \u003e  3;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n","metadata":{"execution_time":0.746849792,"prompt_tokens":757,"response_tokens":29,"total_tokens":786},"sequence_num":149}
{"idx":160068815,"db_id":"car_1","query":"What are the names and ids of all makers with more than 3 models?","pred":"SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) \u003e 3);","ground_truth":"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  \u003e  3;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n","metadata":{"execution_time":1.270176587,"prompt_tokens":756,"response_tokens":29,"total_tokens":785},"sequence_num":150}
{"idx":2478402207,"db_id":"car_1","query":"Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?","pred":"SELECT DISTINCT model_list.Model\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nJOIN car_names ON model_list.Model = car_names.Model\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE car_makers.FullName = 'General Motors' OR cars_data.Weight \u003e 3500;","ground_truth":"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  \u003e  3500;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n","metadata":{"execution_time":1.529664457,"prompt_tokens":761,"response_tokens":70,"total_tokens":831},"sequence_num":151}
{"idx":2484823812,"db_id":"car_1","query":"What are the different models created by either the car maker General Motors or weighed more than 3500?","pred":"SELECT DISTINCT model_list.Model\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nJOIN cars_data ON car_makers.Id = cars_data.Id\nWHERE car_makers.Maker = 'General Motors' OR cars_data.Weight \u003e 3500;","ground_truth":"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  \u003e  3500;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n","metadata":{"execution_time":1.121944951,"prompt_tokens":761,"response_tokens":59,"total_tokens":820},"sequence_num":152}
{"idx":3792491305,"db_id":"car_1","query":"In which years cars were produced weighing no less than 3000 and no more than 4000 ?","pred":"SELECT DISTINCT Year FROM cars_data WHERE Weight \u003e= 3000 AND Weight \u003c= 4000;","ground_truth":"select distinct year from cars_data where weight between 3000 and 4000;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.734333701,"prompt_tokens":761,"response_tokens":20,"total_tokens":781},"sequence_num":153}
{"idx":1789679123,"db_id":"car_1","query":"What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?","pred":"SELECT DISTINCT Year FROM cars_data WHERE Weight \u003c 4000 OR Weight \u003e 3000;","ground_truth":"select distinct year from cars_data where weight between 3000 and 4000;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.753424653,"prompt_tokens":769,"response_tokens":20,"total_tokens":789},"sequence_num":154}
{"idx":309052830,"db_id":"car_1","query":"What is the horsepower of the car with the largest accelerate?","pred":"SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1;","ground_truth":"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.75869433,"prompt_tokens":752,"response_tokens":16,"total_tokens":768},"sequence_num":155}
{"idx":1810588507,"db_id":"car_1","query":"What is the horsepower of the car with the greatest accelerate?","pred":"SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1;","ground_truth":"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.827622507,"prompt_tokens":752,"response_tokens":16,"total_tokens":768},"sequence_num":156}
{"idx":1400820168,"db_id":"car_1","query":"For model volvo, how many cylinders does the car with the least accelerate have?","pred":"SELECT MIN(Cylinders) \nFROM cars_data \nWHERE Id = (SELECT MakeId \n            FROM car_names \n            WHERE Model = 'volvo');","ground_truth":"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.888482277,"prompt_tokens":757,"response_tokens":33,"total_tokens":790},"sequence_num":157}
{"idx":2637718556,"db_id":"car_1","query":"For a volvo model, how many cylinders does the version with least accelerate have?","pred":"SELECT MIN(Cylinders) \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nWHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo');","ground_truth":"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.014212789,"prompt_tokens":757,"response_tokens":57,"total_tokens":814},"sequence_num":158}
{"idx":2748208023,"db_id":"car_1","query":"How many cars have a larger accelerate than the car with the largest horsepower?","pred":"SELECT COUNT(*) \nFROM cars_data \nWHERE Accelerate \u003e (SELECT MAX(Horsepower) FROM cars_data);","ground_truth":"SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  \u003e  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.021908851,"prompt_tokens":755,"response_tokens":24,"total_tokens":779},"sequence_num":159}
{"idx":159737201,"db_id":"car_1","query":"What is the number of cars with a greater accelerate than the one with the most horsepower?","pred":"SELECT COUNT(*) FROM cars_data WHERE Accelerate \u003e (SELECT MAX(Horsepower) FROM cars_data);","ground_truth":"SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  \u003e  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.062379838,"prompt_tokens":758,"response_tokens":22,"total_tokens":780},"sequence_num":160}
{"idx":6658251,"db_id":"car_1","query":"How many countries has more than 2 car makers ?","pred":"SELECT COUNT(DISTINCT CountryName) FROM countries GROUP BY Continent HAVING COUNT(DISTINCT Maker) \u003e 2;","ground_truth":"select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  \u003e  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":2.584487146,"prompt_tokens":751,"response_tokens":26,"total_tokens":777},"sequence_num":161}
{"idx":3056927003,"db_id":"car_1","query":"What is the number of countries with more than 2 car makers ?","pred":"SELECT COUNT(*) FROM countries GROUP BY Continent HAVING COUNT(DISTINCT Maker) \u003e 2;","ground_truth":"select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  \u003e  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.886407453,"prompt_tokens":754,"response_tokens":21,"total_tokens":775},"sequence_num":162}
{"idx":3576342446,"db_id":"car_1","query":"How many cars has over 6 cylinders?","pred":"SELECT COUNT(*) FROM cars_data WHERE Cylinders \u003e 6;","ground_truth":"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  \u003e  6;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.205603532,"prompt_tokens":749,"response_tokens":15,"total_tokens":764},"sequence_num":163}
{"idx":4179401118,"db_id":"car_1","query":"What is the number of carsw ith over 6 cylinders?","pred":"SELECT COUNT(*) FROM cars_data WHERE Cylinders \u003e 6;","ground_truth":"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  \u003e  6;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.669490163,"prompt_tokens":753,"response_tokens":15,"total_tokens":768},"sequence_num":164}
{"idx":4097128754,"db_id":"car_1","query":"For the cars with 4 cylinders, which model has the largest horsepower?","pred":"SELECT Model\nFROM model_list\nJOIN cars_data ON model_list.ModelId = cars_data.Id\nWHERE Cylinders = 4\nORDER BY CAST(Horsepower AS INTEGER) DESC\nLIMIT 1;","ground_truth":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.908360758,"prompt_tokens":755,"response_tokens":44,"total_tokens":799},"sequence_num":165}
{"idx":2974088588,"db_id":"car_1","query":"For all of the 4 cylinder cars, which model has the most horsepower?","pred":"SELECT Model\nFROM model_list\nJOIN cars_data ON model_list.ModelId = cars_data.Id\nWHERE cars_data.Cylinders = 4\nORDER BY cars_data.Horsepower DESC\nLIMIT 1;","ground_truth":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":0.938901329,"prompt_tokens":756,"response_tokens":44,"total_tokens":800},"sequence_num":166}
{"idx":1938953569,"db_id":"car_1","query":"Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.","pred":"SELECT MakeId, Make\nFROM car_names\nWHERE MakeId IN (\n    SELECT DISTINCT MakeId\n    FROM cars_data\n    WHERE Horsepower \u003e (\n        SELECT MIN(Horsepower)\n        FROM cars_data\n    )\n    AND Cylinders \u003c= 3\n);","ground_truth":"SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  \u003e  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  \u003c=  3;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.311637236,"prompt_tokens":769,"response_tokens":57,"total_tokens":826},"sequence_num":167}
{"idx":1813199263,"db_id":"car_1","query":"Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?","pred":"SELECT MakeId, Make FROM car_names WHERE Model IN (SELECT Model FROM cars_data WHERE Cylinders \u003c 4 AND Horsepower \u003e (SELECT MIN(Horsepower) FROM cars_data));","ground_truth":"select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  \u003e  (select min(horsepower) from cars_data) and t1.cylinders  \u003c  4;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.011580675,"prompt_tokens":768,"response_tokens":40,"total_tokens":808},"sequence_num":168}
{"idx":3285802139,"db_id":"car_1","query":"What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?","pred":"SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year \u003c 1980;","ground_truth":"select max(mpg) from cars_data where cylinders  =  8 or year  \u003c  1980","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n","metadata":{"execution_time":0.838563387,"prompt_tokens":761,"response_tokens":23,"total_tokens":784},"sequence_num":169}
{"idx":2446440432,"db_id":"car_1","query":"What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?","pred":"SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year \u003c 1980;","ground_truth":"select max(mpg) from cars_data where cylinders  =  8 or year  \u003c  1980","is_correct":true,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n","metadata":{"execution_time":0.795136717,"prompt_tokens":762,"response_tokens":23,"total_tokens":785},"sequence_num":170}
{"idx":4220753961,"db_id":"car_1","query":"Which models are lighter than 3500 but not built by the 'Ford Motor Company'?","pred":"SELECT model_list.Model\nFROM model_list\nJOIN cars_data ON model_list.ModelId = cars_data.Id\nJOIN car_names ON model_list.Model = car_names.Model\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE cars_data.Weight \u003c 3500 AND car_makers.Maker != 'Ford Motor Company';","ground_truth":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  \u003c  3500 AND T4.FullName != 'Ford Motor Company';","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n","metadata":{"execution_time":2.852411287,"prompt_tokens":759,"response_tokens":70,"total_tokens":829},"sequence_num":171}
{"idx":4089043891,"db_id":"car_1","query":"What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?","pred":"SELECT DISTINCT model_list.Model\nFROM model_list\nJOIN car_names ON model_list.Model = car_names.Model\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE cars_data.Weight \u003c 3500 AND car_makers.Maker \u003c\u003e 'Ford Motor Company';","ground_truth":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  \u003c  3500 AND T4.FullName != 'Ford Motor Company';","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n","metadata":{"execution_time":1.417339828,"prompt_tokens":763,"response_tokens":71,"total_tokens":834},"sequence_num":172}
{"idx":4162154724,"db_id":"car_1","query":"What are the name of the countries where there is not a single car maker?","pred":"SELECT CountryName\nFROM countries\nWHERE CountryId NOT IN (SELECT DISTINCT Country\n                        FROM car_makers);","ground_truth":"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n","metadata":{"execution_time":0.834980378,"prompt_tokens":756,"response_tokens":24,"total_tokens":780},"sequence_num":173}
{"idx":81370870,"db_id":"car_1","query":"What are the names of the countries with no car makers?","pred":"SELECT CountryName \nFROM countries \nWHERE CountryId NOT IN (SELECT DISTINCT Country \n                        FROM car_makers);","ground_truth":"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.047605047,"prompt_tokens":752,"response_tokens":24,"total_tokens":776},"sequence_num":174}
{"idx":1171426052,"db_id":"car_1","query":"Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .","pred":"SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) \u003e= 2) AND Country IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) \u003e 3);","ground_truth":"select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  \u003e=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  \u003e  3;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n","metadata":{"execution_time":1.21491025,"prompt_tokens":767,"response_tokens":54,"total_tokens":821},"sequence_num":175}
{"idx":2954342297,"db_id":"car_1","query":"What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?","pred":"SELECT Id, Maker\nFROM car_makers\nWHERE Id IN (\n    SELECT Maker\n    FROM model_list\n    GROUP BY Maker\n    HAVING COUNT(*) \u003e= 2\n)\nAND Id IN (\n    SELECT MakeId\n    FROM car_names\n    GROUP BY MakeId\n    HAVING COUNT(*) \u003e 3\n);","ground_truth":"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  \u003e=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  \u003e  3;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.335128136,"prompt_tokens":765,"response_tokens":69,"total_tokens":834},"sequence_num":176}
{"idx":3780083728,"db_id":"car_1","query":"What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?","pred":"SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT DISTINCT Country FROM car_makers WHERE Maker = 'fiat') OR CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) \u003e 3);","ground_truth":"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  \u003e  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.28388864,"prompt_tokens":766,"response_tokens":50,"total_tokens":816},"sequence_num":177}
{"idx":615987845,"db_id":"car_1","query":"What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?","pred":"SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) \u003e 3) OR CountryId IN (SELECT MakeId FROM car_names WHERE Make = 'FIAT');","ground_truth":"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  \u003e  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';","is_correct":false,"db_schema":"数据库Schema信息:\n表名: continents\n列:\n  - ContId: number (主键)\n  - Continent: text\n\n表名: countries\n列:\n  - CountryId: number (主键)\n  - CountryName: text\n  - Continent: number (外键)\n\n表名: car_makers\n列:\n  - Id: number (主键)\n  - Maker: text\n  - FullName: text\n  - Country: text (外键)\n\n表名: model_list\n列:\n  - ModelId: number (主键)\n  - Maker: number (外键)\n  - Model: text\n\n表名: car_names\n列:\n  - MakeId: number (主键)\n  - Model: text (外键)\n  - Make: text\n\n表名: cars_data\n列:\n  - Id: number (主键) (外键)\n  - MPG: text\n  - Cylinders: number\n  - Edispl: number\n  - Horsepower: text\n  - Weight: number\n  - Accelerate: number\n  - Year: number\n\n外键关系:\n  - countries.CountryId -\u003e car_makers.Country\n  - continents.ContId -\u003e countries.Continent\n  - car_makers.Id -\u003e model_list.Maker\n  - model_list.Model -\u003e car_names.Model\n  - car_names.MakeId -\u003e cars_data.Id\n","metadata":{"execution_time":1.659924921,"prompt_tokens":763,"response_tokens":53,"total_tokens":816},"sequence_num":178}
{"idx":1181854149,"db_id":"flight_2","query":"Which country does Airline \"JetBlue Airways\" belong to?","pred":"SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';","ground_truth":"SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.883813428,"prompt_tokens":619,"response_tokens":14,"total_tokens":633},"sequence_num":179}
{"idx":3685120758,"db_id":"flight_2","query":"What country is Jetblue Airways affiliated with?","pred":"SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';","ground_truth":"SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":2.811554568,"prompt_tokens":615,"response_tokens":14,"total_tokens":629},"sequence_num":180}
{"idx":1445348533,"db_id":"flight_2","query":"What is the abbreviation of Airline \"JetBlue Airways\"?","pred":"SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';","ground_truth":"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.774285135,"prompt_tokens":618,"response_tokens":16,"total_tokens":634},"sequence_num":181}
{"idx":1892460975,"db_id":"flight_2","query":"Which abbreviation corresponds to Jetblue Airways?","pred":"SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';","ground_truth":"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.757611694,"prompt_tokens":614,"response_tokens":16,"total_tokens":630},"sequence_num":182}
{"idx":3835692154,"db_id":"flight_2","query":"List all airline names and their abbreviations in \"USA\".","pred":"SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';","ground_truth":"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.689215991,"prompt_tokens":618,"response_tokens":16,"total_tokens":634},"sequence_num":183}
{"idx":701449968,"db_id":"flight_2","query":"What are the airline names and abbreviations for airlines in the USA?","pred":"SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';","ground_truth":"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":3.304605316,"prompt_tokens":620,"response_tokens":16,"total_tokens":636},"sequence_num":184}
{"idx":2239001867,"db_id":"flight_2","query":"List the airport code and name in the city of Anthony.","pred":"SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';","ground_truth":"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":3.761196369,"prompt_tokens":618,"response_tokens":15,"total_tokens":633},"sequence_num":185}
{"idx":1706001823,"db_id":"flight_2","query":"Give the airport code and airport name corresonding to the city Anthony.","pred":"SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';","ground_truth":"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.879771872,"prompt_tokens":621,"response_tokens":15,"total_tokens":636},"sequence_num":186}
{"idx":2231482985,"db_id":"flight_2","query":"How many airlines do we have?","pred":"SELECT COUNT(DISTINCT Airline) FROM airlines;","ground_truth":"SELECT count(*) FROM AIRLINES","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.755932468,"prompt_tokens":613,"response_tokens":12,"total_tokens":625},"sequence_num":187}
{"idx":3330514108,"db_id":"flight_2","query":"What is the total number of airlines?","pred":"SELECT COUNT(*) AS total_airlines FROM airlines;","ground_truth":"SELECT count(*) FROM AIRLINES","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.281793649,"prompt_tokens":614,"response_tokens":11,"total_tokens":625},"sequence_num":188}
{"idx":3028344572,"db_id":"flight_2","query":"How many airports do we have?","pred":"SELECT COUNT(*) FROM airports;","ground_truth":"SELECT count(*) FROM AIRPORTS","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.629666582,"prompt_tokens":613,"response_tokens":7,"total_tokens":620},"sequence_num":189}
{"idx":3998282528,"db_id":"flight_2","query":"Return the number of  airports.","pred":"SELECT COUNT(*) FROM airports;","ground_truth":"SELECT count(*) FROM AIRPORTS","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.373893572,"prompt_tokens":613,"response_tokens":7,"total_tokens":620},"sequence_num":190}
{"idx":2157859843,"db_id":"flight_2","query":"How many flights do we have?","pred":"SELECT COUNT(*) FROM flights;","ground_truth":"SELECT count(*) FROM FLIGHTS","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.633897373,"prompt_tokens":613,"response_tokens":7,"total_tokens":620},"sequence_num":191}
{"idx":1371054117,"db_id":"flight_2","query":"Return the number of flights.","pred":"SELECT COUNT(*) FROM flights;","ground_truth":"SELECT count(*) FROM FLIGHTS","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.627966179,"prompt_tokens":612,"response_tokens":7,"total_tokens":619},"sequence_num":192}
{"idx":3070322913,"db_id":"flight_2","query":"Which airline has abbreviation 'UAL'?","pred":"SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';","ground_truth":"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.917977625,"prompt_tokens":614,"response_tokens":14,"total_tokens":628},"sequence_num":193}
{"idx":1072959361,"db_id":"flight_2","query":"Give the airline with abbreviation 'UAL'.","pred":"SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';","ground_truth":"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.945526078,"prompt_tokens":614,"response_tokens":14,"total_tokens":628},"sequence_num":194}
{"idx":270473685,"db_id":"flight_2","query":"How many airlines are from USA?","pred":"SELECT COUNT(*) FROM airlines WHERE Country = 'USA';","ground_truth":"SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.681732456,"prompt_tokens":613,"response_tokens":12,"total_tokens":625},"sequence_num":195}
{"idx":3818047748,"db_id":"flight_2","query":"Return the number of airlines in the USA.","pred":"SELECT COUNT(*) FROM airlines WHERE Country = 'USA';","ground_truth":"SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.746443394,"prompt_tokens":615,"response_tokens":12,"total_tokens":627},"sequence_num":196}
{"idx":1721384584,"db_id":"flight_2","query":"Which city and country is the Alton airport at?","pred":"SELECT City, Country FROM airports WHERE AirportName = 'Alton';","ground_truth":"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.692292093,"prompt_tokens":617,"response_tokens":15,"total_tokens":632},"sequence_num":197}
{"idx":1179294306,"db_id":"flight_2","query":"Give the city and country for the Alton airport.","pred":"SELECT City, Country FROM airports WHERE AirportName = 'Alton';","ground_truth":"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.804692742,"prompt_tokens":617,"response_tokens":15,"total_tokens":632},"sequence_num":198}
{"idx":4176165410,"db_id":"flight_2","query":"What is the airport name for airport 'AKO'?","pred":"SELECT AirportName FROM airports WHERE AirportCode = 'AKO';","ground_truth":"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.5629817940000001,"prompt_tokens":618,"response_tokens":14,"total_tokens":632},"sequence_num":199}
{"idx":2714176478,"db_id":"flight_2","query":"Return the name of the airport with code 'AKO'.","pred":"SELECT AirportName FROM airports WHERE AirportCode = 'AKO';","ground_truth":"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.871114878,"prompt_tokens":618,"response_tokens":14,"total_tokens":632},"sequence_num":200}
{"idx":803262193,"db_id":"flight_2","query":"What are airport names at City 'Aberdeen'?","pred":"SELECT AirportName FROM airports WHERE City = 'Aberdeen';","ground_truth":"SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.688505282,"prompt_tokens":618,"response_tokens":14,"total_tokens":632},"sequence_num":201}
{"idx":2200989331,"db_id":"flight_2","query":"What are the names of airports in Aberdeen?","pred":"SELECT AirportName FROM airports WHERE City = 'Aberdeen';","ground_truth":"SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.723930139,"prompt_tokens":615,"response_tokens":14,"total_tokens":629},"sequence_num":202}
{"idx":3940746250,"db_id":"flight_2","query":"How many flights depart from 'APG'?","pred":"SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';","ground_truth":"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.8770462,"prompt_tokens":616,"response_tokens":14,"total_tokens":630},"sequence_num":203}
{"idx":4271301046,"db_id":"flight_2","query":"Count the number of flights departing from 'APG'.","pred":"SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';","ground_truth":"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.190782355,"prompt_tokens":617,"response_tokens":14,"total_tokens":631},"sequence_num":204}
{"idx":156103318,"db_id":"flight_2","query":"How many flights have destination ATO?","pred":"SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';","ground_truth":"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.903012233,"prompt_tokens":614,"response_tokens":13,"total_tokens":627},"sequence_num":205}
{"idx":2683443980,"db_id":"flight_2","query":"Count the number of flights into ATO.","pred":"SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';","ground_truth":"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.937297401,"prompt_tokens":615,"response_tokens":13,"total_tokens":628},"sequence_num":206}
{"idx":1014301235,"db_id":"flight_2","query":"How many flights depart from City Aberdeen?","pred":"SELECT COUNT(*) FROM flights\nJOIN airports ON flights.SourceAirport = airports.AirportCode\nWHERE airports.City = 'Aberdeen';","ground_truth":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.011189539,"prompt_tokens":614,"response_tokens":29,"total_tokens":643},"sequence_num":207}
{"idx":938996137,"db_id":"flight_2","query":"Return the number of flights departing from Aberdeen.","pred":"SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen';","ground_truth":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.361757757,"prompt_tokens":615,"response_tokens":15,"total_tokens":630},"sequence_num":208}
{"idx":2754651794,"db_id":"flight_2","query":"How many flights arriving in Aberdeen city?","pred":"SELECT COUNT(*) FROM flights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE City = 'Aberdeen';","ground_truth":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.861218853,"prompt_tokens":614,"response_tokens":29,"total_tokens":643},"sequence_num":209}
{"idx":4188106352,"db_id":"flight_2","query":"Return the number of flights arriving in Aberdeen.","pred":"SELECT COUNT(*) FROM flights WHERE DestAirport = 'Aberdeen';","ground_truth":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.962139273,"prompt_tokens":615,"response_tokens":15,"total_tokens":630},"sequence_num":210}
{"idx":2288415537,"db_id":"flight_2","query":"How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?","pred":"SELECT COUNT(*) FROM flights\nWHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')\nAND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley');","ground_truth":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.124910627,"prompt_tokens":626,"response_tokens":42,"total_tokens":668},"sequence_num":211}
{"idx":28754950,"db_id":"flight_2","query":"How many flights fly from Aberdeen to Ashley?","pred":"SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';","ground_truth":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":2.565170259,"prompt_tokens":615,"response_tokens":23,"total_tokens":638},"sequence_num":212}
{"idx":198494738,"db_id":"flight_2","query":"How many flights does airline 'JetBlue Airways' have?","pred":"SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways';","ground_truth":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.94402704,"prompt_tokens":618,"response_tokens":15,"total_tokens":633},"sequence_num":213}
{"idx":3408307171,"db_id":"flight_2","query":"Give the number of Jetblue Airways flights.","pred":"SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways';","ground_truth":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.979098273,"prompt_tokens":615,"response_tokens":15,"total_tokens":630},"sequence_num":214}
{"idx":1689550069,"db_id":"flight_2","query":"How many 'United Airlines' flights go to Airport 'ASY'?","pred":"SELECT COUNT(*) FROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nWHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY';","ground_truth":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.944541484,"prompt_tokens":620,"response_tokens":37,"total_tokens":657},"sequence_num":215}
{"idx":4264553983,"db_id":"flight_2","query":"Count the number of United Airlines flights arriving in ASY Airport.","pred":"SELECT COUNT(*) \nFROM flights \nWHERE Airline = 'United Airlines' \nAND DestAirport = 'ASY';","ground_truth":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.977621523,"prompt_tokens":619,"response_tokens":24,"total_tokens":643},"sequence_num":216}
{"idx":3254191048,"db_id":"flight_2","query":"How many 'United Airlines' flights depart from Airport 'AHD'?","pred":"SELECT COUNT(*) FROM flights \nWHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';","ground_truth":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.832408049,"prompt_tokens":621,"response_tokens":23,"total_tokens":644},"sequence_num":217}
{"idx":303035243,"db_id":"flight_2","query":"Return the number of United Airlines flights leaving from AHD Airport.","pred":"SELECT COUNT(*) \nFROM flights \nWHERE Airline = 'United Airlines' AND SourceAirport = 'AHD Airport';","ground_truth":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.791087402,"prompt_tokens":619,"response_tokens":25,"total_tokens":644},"sequence_num":218}
{"idx":3753989524,"db_id":"flight_2","query":"How many United Airlines flights go to City 'Aberdeen'?","pred":"SELECT COUNT(*) FROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';","ground_truth":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.009527573,"prompt_tokens":620,"response_tokens":51,"total_tokens":671},"sequence_num":219}
{"idx":3590003903,"db_id":"flight_2","query":"Count the number of United Airlines flights that arrive in Aberdeen.","pred":"SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';","ground_truth":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.076571066,"prompt_tokens":618,"response_tokens":52,"total_tokens":670},"sequence_num":220}
{"idx":2684783962,"db_id":"flight_2","query":"Which city has most number of arriving flights?","pred":"SELECT City FROM airports WHERE AirportCode IN (SELECT DestAirport FROM flights) GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.151715132,"prompt_tokens":615,"response_tokens":28,"total_tokens":643},"sequence_num":221}
{"idx":787762891,"db_id":"flight_2","query":"Which city has the most frequent destination airport?","pred":"SELECT City\nFROM airports\nWHERE AirportCode IN (\n    SELECT DestAirport\n    FROM flights\n    GROUP BY DestAirport\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);","ground_truth":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.950165413,"prompt_tokens":615,"response_tokens":40,"total_tokens":655},"sequence_num":222}
{"idx":272503644,"db_id":"flight_2","query":"Which city has most number of departing flights?","pred":"SELECT SourceAirport AS City, COUNT(*) AS DepartingFlights\nFROM flights\nGROUP BY SourceAirport\nORDER BY DepartingFlights DESC\nLIMIT 1;","ground_truth":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.864786603,"prompt_tokens":615,"response_tokens":35,"total_tokens":650},"sequence_num":223}
{"idx":3561427162,"db_id":"flight_2","query":"Which city is the most frequent source airport?","pred":"SELECT SourceAirport AS City, COUNT(SourceAirport) AS Frequency\nFROM flights\nGROUP BY SourceAirport\nORDER BY Frequency DESC\nLIMIT 1;","ground_truth":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.05447472,"prompt_tokens":615,"response_tokens":31,"total_tokens":646},"sequence_num":224}
{"idx":2364079245,"db_id":"flight_2","query":"What is the code of airport that has the highest number of flights?","pred":"SELECT SourceAirport\nFROM flights\nGROUP BY SourceAirport\nORDER BY COUNT(*) DESC\nLIMIT 1;","ground_truth":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.15678573,"prompt_tokens":620,"response_tokens":23,"total_tokens":643},"sequence_num":225}
{"idx":2900690431,"db_id":"flight_2","query":"What is the airport code of the airport with the most flights?","pred":"SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.685142356,"prompt_tokens":619,"response_tokens":60,"total_tokens":679},"sequence_num":226}
{"idx":1265149004,"db_id":"flight_2","query":"What is the code of airport that has fewest number of flights?","pred":"SELECT AirportCode FROM flights GROUP BY DestAirport ORDER BY COUNT(*) ASC LIMIT 1;","ground_truth":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.938962053,"prompt_tokens":620,"response_tokens":19,"total_tokens":639},"sequence_num":227}
{"idx":2197077546,"db_id":"flight_2","query":"Give the code of the airport with the least flights.","pred":"SELECT SourceAirport\nFROM flights\nGROUP BY SourceAirport\nORDER BY COUNT(*) ASC\nLIMIT 1;","ground_truth":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.770393965,"prompt_tokens":617,"response_tokens":23,"total_tokens":640},"sequence_num":228}
{"idx":3701579913,"db_id":"flight_2","query":"Which airline has most number of flights?","pred":"SELECT Airline, COUNT(*) AS FlightCount\nFROM flights\nJOIN airlines ON flights.Airline = airlines.uid\nGROUP BY Airline\nORDER BY FlightCount DESC\nLIMIT 1;","ground_truth":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.045117935,"prompt_tokens":614,"response_tokens":40,"total_tokens":654},"sequence_num":229}
{"idx":1645788309,"db_id":"flight_2","query":"What airline serves the most flights?","pred":"SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.809402553,"prompt_tokens":613,"response_tokens":19,"total_tokens":632},"sequence_num":230}
{"idx":2846271925,"db_id":"flight_2","query":"Find the abbreviation and country of the airline that has fewest number of flights?","pred":"SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1);","ground_truth":"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.034842091,"prompt_tokens":622,"response_tokens":31,"total_tokens":653},"sequence_num":231}
{"idx":479690838,"db_id":"flight_2","query":"What is the abbreviation of the airilne has the fewest flights and what country is it in?","pred":"SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1);","ground_truth":"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.047625836,"prompt_tokens":627,"response_tokens":31,"total_tokens":658},"sequence_num":232}
{"idx":745291658,"db_id":"flight_2","query":"What are airlines that have some flight departing from airport 'AHD'?","pred":"SELECT DISTINCT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';","ground_truth":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.78986485,"prompt_tokens":621,"response_tokens":26,"total_tokens":647},"sequence_num":233}
{"idx":3814814252,"db_id":"flight_2","query":"Which airlines have a flight with source airport AHD?","pred":"SELECT DISTINCT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';","ground_truth":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.790982754,"prompt_tokens":617,"response_tokens":26,"total_tokens":643},"sequence_num":234}
{"idx":3535889946,"db_id":"flight_2","query":"What are airlines that have flights arriving at airport 'AHD'?","pred":"SELECT DISTINCT Airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.Airline\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.AirportCode = 'AHD';","ground_truth":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.957245039,"prompt_tokens":620,"response_tokens":45,"total_tokens":665},"sequence_num":235}
{"idx":2853274809,"db_id":"flight_2","query":"Which airlines have a flight with destination airport AHD?","pred":"SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';","ground_truth":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.402264573,"prompt_tokens":617,"response_tokens":26,"total_tokens":643},"sequence_num":236}
{"idx":2575415686,"db_id":"flight_2","query":"Find all airlines that have flights from both airports 'APG' and 'CVO'.","pred":"SELECT Airline \nFROM airlines \nWHERE Airline IN (\n    SELECT Airline \n    FROM flights \n    JOIN airports ON flights.SourceAirport = airports.AirportCode \n    WHERE airports.AirportCode = 'APG'\n) \nAND Airline IN (\n    SELECT Airline \n    FROM flights \n    JOIN airports ON flights.SourceAirport = airports.AirportCode \n    WHERE airports.AirportCode = 'CVO'\n);","ground_truth":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.360813722,"prompt_tokens":624,"response_tokens":91,"total_tokens":715},"sequence_num":237}
{"idx":3419009603,"db_id":"flight_2","query":"Which airlines have departing flights from both APG and CVO airports?","pred":"SELECT Airline \nFROM airlines \nINNER JOIN flights ON airlines.uid = flights.Airline \nWHERE flights.SourceAirport IN ('APG', 'CVO') \nGROUP BY Airline \nHAVING COUNT(DISTINCT flights.SourceAirport) = 2;","ground_truth":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.473078956,"prompt_tokens":620,"response_tokens":53,"total_tokens":673},"sequence_num":238}
{"idx":1067812865,"db_id":"flight_2","query":"Find all airlines that have flights from airport 'CVO' but not from 'APG'.","pred":"SELECT DISTINCT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE SourceAirport = 'CVO' AND Airline NOT IN ( SELECT Airline FROM flights WHERE SourceAirport = 'APG' );","ground_truth":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":2.743629854,"prompt_tokens":625,"response_tokens":172,"total_tokens":797},"sequence_num":239}
{"idx":1280519685,"db_id":"flight_2","query":"Which airlines have departures from CVO but not from APG airports?","pred":"SELECT DISTINCT Airline \nFROM airlines \nJOIN flights ON airlines.uid = flights.Airline \nWHERE flights.SourceAirport = 'CVO' \nAND Airline NOT IN \n(SELECT Airline \nFROM airlines \nJOIN flights ON airlines.uid = flights.Airline \nWHERE flights.SourceAirport = 'APG');","ground_truth":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.5698245,"prompt_tokens":621,"response_tokens":63,"total_tokens":684},"sequence_num":240}
{"idx":2577916099,"db_id":"flight_2","query":"Find all airlines that have at least 10 flights.","pred":"SELECT Airline FROM airlines \nGROUP BY Airline \nHAVING COUNT(*) \u003e= 10;","ground_truth":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  \u003e  10","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.012144874,"prompt_tokens":617,"response_tokens":20,"total_tokens":637},"sequence_num":241}
{"idx":219452256,"db_id":"flight_2","query":"Which airlines have at least 10 flights?","pred":"SELECT Airline FROM airlines\nGROUP BY Airline\nHAVING COUNT(*) \u003e= 10;","ground_truth":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  \u003e  10","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.763133675,"prompt_tokens":615,"response_tokens":20,"total_tokens":635},"sequence_num":242}
{"idx":2374975266,"db_id":"flight_2","query":"Find all airlines that have fewer than 200 flights.","pred":"SELECT Airline FROM airlines \nWHERE uid IN (SELECT Airline FROM flights \nGROUP BY Airline \nHAVING COUNT(*) \u003c 200);","ground_truth":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  \u003c  200","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.896380812,"prompt_tokens":617,"response_tokens":30,"total_tokens":647},"sequence_num":243}
{"idx":561506985,"db_id":"flight_2","query":"Which airlines have less than 200 flights?","pred":"SELECT Airline FROM airlines\nWHERE uid IN (SELECT Airline FROM flights\nGROUP BY Airline\nHAVING COUNT(*) \u003c 200);","ground_truth":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  \u003c  200","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.857280258,"prompt_tokens":615,"response_tokens":30,"total_tokens":645},"sequence_num":244}
{"idx":4144878179,"db_id":"flight_2","query":"What are flight numbers of Airline \"United Airlines\"?","pred":"SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';","ground_truth":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.310365088,"prompt_tokens":617,"response_tokens":14,"total_tokens":631},"sequence_num":245}
{"idx":3613771242,"db_id":"flight_2","query":"Which flight numbers correspond to United Airlines flights?","pred":"SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';","ground_truth":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.084080872,"prompt_tokens":615,"response_tokens":14,"total_tokens":629},"sequence_num":246}
{"idx":1769764699,"db_id":"flight_2","query":"What are flight numbers of flights departing from Airport \"APG\"?","pred":"SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';","ground_truth":"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.697237315,"prompt_tokens":619,"response_tokens":14,"total_tokens":633},"sequence_num":247}
{"idx":1398846777,"db_id":"flight_2","query":"Give the flight numbers of flights leaving from APG.","pred":"SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';","ground_truth":"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.026566147,"prompt_tokens":617,"response_tokens":14,"total_tokens":631},"sequence_num":248}
{"idx":3814472666,"db_id":"flight_2","query":"What are flight numbers of flights arriving at Airport \"APG\"?","pred":"SELECT FlightNo FROM flights WHERE DestAirport = 'APG';","ground_truth":"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.883854017,"prompt_tokens":619,"response_tokens":14,"total_tokens":633},"sequence_num":249}
{"idx":3377834739,"db_id":"flight_2","query":"Give the flight numbers of flights landing at APG.","pred":"SELECT FlightNo FROM flights WHERE DestAirport = 'APG';","ground_truth":"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.690812527,"prompt_tokens":617,"response_tokens":14,"total_tokens":631},"sequence_num":250}
{"idx":696235077,"db_id":"flight_2","query":"What are flight numbers of flights departing from City \"Aberdeen \"?","pred":"SELECT FlightNo FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');","ground_truth":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.747803184,"prompt_tokens":621,"response_tokens":24,"total_tokens":645},"sequence_num":251}
{"idx":26667635,"db_id":"flight_2","query":"Give the flight numbers of flights leaving from Aberdeen.","pred":"SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen';","ground_truth":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.399756535,"prompt_tokens":616,"response_tokens":15,"total_tokens":631},"sequence_num":252}
{"idx":2186761300,"db_id":"flight_2","query":"What are flight numbers of flights arriving at City \"Aberdeen\"?","pred":"SELECT FlightNo FROM flights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE City = 'Aberdeen';","ground_truth":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.071636278,"prompt_tokens":620,"response_tokens":29,"total_tokens":649},"sequence_num":253}
{"idx":3845061216,"db_id":"flight_2","query":"Give the flight numbers of flights arriving in Aberdeen.","pred":"SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE City = 'Aberdeen';","ground_truth":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":0.993722678,"prompt_tokens":616,"response_tokens":27,"total_tokens":643},"sequence_num":254}
{"idx":400055282,"db_id":"flight_2","query":"Find the number of flights landing in the city of Aberdeen or Abilene.","pred":"SELECT COUNT(*) FROM flights\nWHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')\nOR DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Abilene');","ground_truth":"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.2846739679999999,"prompt_tokens":622,"response_tokens":43,"total_tokens":665},"sequence_num":255}
{"idx":2771166745,"db_id":"flight_2","query":"How many flights land in Aberdeen or Abilene?","pred":"SELECT COUNT(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene');","ground_truth":"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.134315051,"prompt_tokens":617,"response_tokens":20,"total_tokens":637},"sequence_num":256}
{"idx":992395878,"db_id":"flight_2","query":"Find the name of airports which do not have any flight in and out.","pred":"SELECT AirportName \nFROM airports \nWHERE AirportCode NOT IN (SELECT SourceAirport FROM flights \n                          UNION \n                          SELECT DestAirport FROM flights);","ground_truth":"SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.010048643,"prompt_tokens":621,"response_tokens":30,"total_tokens":651},"sequence_num":257}
{"idx":113228561,"db_id":"flight_2","query":"Which airports do not have departing or arriving flights?","pred":"SELECT AirportName \nFROM airports \nWHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);","ground_truth":"SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: airlines\n列:\n  - uid: number (主键)\n  - Airline: text\n  - Abbreviation: text\n  - Country: text\n\n表名: airports\n列:\n  - City: text\n  - AirportCode: text (主键)\n  - AirportName: text\n  - Country: text\n  - CountryAbbrev: text\n\n表名: flights\n列:\n  - Airline: number (主键)\n  - FlightNo: number\n  - SourceAirport: text (外键)\n  - DestAirport: text (外键)\n\n外键关系:\n  - airports.AirportCode -\u003e flights.DestAirport\n  - airports.AirportCode -\u003e flights.SourceAirport\n","metadata":{"execution_time":1.120825623,"prompt_tokens":616,"response_tokens":26,"total_tokens":642},"sequence_num":258}
{"idx":2188445103,"db_id":"employee_hire_evaluation","query":"How many employees are there?","pred":"SELECT COUNT(*) FROM employee;","ground_truth":"SELECT count(*) FROM employee","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":1.1956515859999999,"prompt_tokens":659,"response_tokens":7,"total_tokens":666},"sequence_num":259}
{"idx":2772329199,"db_id":"employee_hire_evaluation","query":"Count the number of employees","pred":"SELECT COUNT(*) FROM employee;","ground_truth":"SELECT count(*) FROM employee","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":0.940790066,"prompt_tokens":659,"response_tokens":7,"total_tokens":666},"sequence_num":260}
{"idx":1035942751,"db_id":"employee_hire_evaluation","query":"Sort employee names by their age in ascending order.","pred":"SELECT Name FROM employee ORDER BY Age ASC;","ground_truth":"SELECT name FROM employee ORDER BY age","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n","metadata":{"execution_time":0.748998065,"prompt_tokens":663,"response_tokens":10,"total_tokens":673},"sequence_num":261}
{"idx":367012061,"db_id":"employee_hire_evaluation","query":"List the names of employees and sort in ascending order of age.","pred":"SELECT Name FROM employee ORDER BY Age ASC;","ground_truth":"SELECT name FROM employee ORDER BY age","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":2.174785966,"prompt_tokens":666,"response_tokens":10,"total_tokens":676},"sequence_num":262}
{"idx":2202098001,"db_id":"employee_hire_evaluation","query":"What is the number of employees from each city?","pred":"SELECT City, COUNT(Employee_ID) AS Number_of_employees FROM employee GROUP BY City;","ground_truth":"SELECT count(*) ,  city FROM employee GROUP BY city","is_correct":false,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":1.45264545,"prompt_tokens":663,"response_tokens":19,"total_tokens":682},"sequence_num":263}
{"idx":137409100,"db_id":"employee_hire_evaluation","query":"Count the number of employees for each city.","pred":"SELECT City, COUNT(Employee_ID) AS Employee_count FROM employee GROUP BY City;","ground_truth":"SELECT count(*) ,  city FROM employee GROUP BY city","is_correct":false,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n","metadata":{"execution_time":0.957825498,"prompt_tokens":662,"response_tokens":17,"total_tokens":679},"sequence_num":264}
{"idx":3828359124,"db_id":"employee_hire_evaluation","query":"Which cities do more than one employee under age 30 come from?","pred":"SELECT City\nFROM employee\nWHERE Age \u003c 30\nGROUP BY City\nHAVING COUNT(Employee_ID) \u003e 1;","ground_truth":"SELECT city FROM employee WHERE age  \u003c  30 GROUP BY city HAVING count(*)  \u003e  1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n","metadata":{"execution_time":1.909663409,"prompt_tokens":667,"response_tokens":27,"total_tokens":694},"sequence_num":265}
{"idx":1529528840,"db_id":"employee_hire_evaluation","query":"Find the cities that have more than one employee under age 30.","pred":"SELECT City\nFROM employee\nWHERE Age \u003c 30\nGROUP BY City\nHAVING COUNT(*) \u003e 1;","ground_truth":"SELECT city FROM employee WHERE age  \u003c  30 GROUP BY city HAVING count(*)  \u003e  1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":0.734966881,"prompt_tokens":667,"response_tokens":25,"total_tokens":692},"sequence_num":266}
{"idx":3790087694,"db_id":"employee_hire_evaluation","query":"Find the number of shops in each location.","pred":"SELECT Location, COUNT(Shop_ID) AS Number_of_shops\nFROM shop\nGROUP BY Location;","ground_truth":"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION","is_correct":false,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":1.12059525,"prompt_tokens":662,"response_tokens":22,"total_tokens":684},"sequence_num":267}
{"idx":3281640142,"db_id":"employee_hire_evaluation","query":"How many shops are there in each location?","pred":"SELECT Location, COUNT(Shop_ID) AS Number_of_shops\nFROM shop\nGROUP BY Location;","ground_truth":"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION","is_correct":false,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n","metadata":{"execution_time":1.143963809,"prompt_tokens":662,"response_tokens":22,"total_tokens":684},"sequence_num":268}
{"idx":3994466248,"db_id":"employee_hire_evaluation","query":"Find the manager name and district of the shop whose number of products is the largest.","pred":"SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1;","ground_truth":"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":0.969655209,"prompt_tokens":670,"response_tokens":17,"total_tokens":687},"sequence_num":269}
{"idx":2274694794,"db_id":"employee_hire_evaluation","query":"What are the manager name and district of the shop that sells the largest number of products?","pred":"SELECT Manager_name, District\nFROM shop\nWHERE Number_products = (SELECT MAX(Number_products) FROM shop);","ground_truth":"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":1.178315424,"prompt_tokens":671,"response_tokens":23,"total_tokens":694},"sequence_num":270}
{"idx":4088839953,"db_id":"employee_hire_evaluation","query":"find the minimum and maximum number of products of all stores.","pred":"SELECT MIN(Number_products), MAX(Number_products) FROM shop;","ground_truth":"SELECT min(Number_products) ,  max(Number_products) FROM shop","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":0.90605679,"prompt_tokens":665,"response_tokens":13,"total_tokens":678},"sequence_num":271}
{"idx":3092417813,"db_id":"employee_hire_evaluation","query":"What are the minimum and maximum number of products across all the shops?","pred":"SELECT MIN(Number_products) AS min_number_products, MAX(Number_products) AS max_number_products FROM shop;","ground_truth":"SELECT min(Number_products) ,  max(Number_products) FROM shop","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":0.787085944,"prompt_tokens":667,"response_tokens":22,"total_tokens":689},"sequence_num":272}
{"idx":1205892769,"db_id":"employee_hire_evaluation","query":"Return the name, location and district of all shops in descending order of number of products.","pred":"SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;","ground_truth":"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":0.853602544,"prompt_tokens":671,"response_tokens":15,"total_tokens":686},"sequence_num":273}
{"idx":2872216229,"db_id":"employee_hire_evaluation","query":"Sort all the shops by number products in descending order, and return the name, location and district of each shop.","pred":"SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;","ground_truth":"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":1.974240107,"prompt_tokens":676,"response_tokens":15,"total_tokens":691},"sequence_num":274}
{"idx":1216898496,"db_id":"employee_hire_evaluation","query":"Find the names of stores whose number products is more than the average number of products.","pred":"SELECT Name FROM shop WHERE Number_products \u003e (SELECT AVG(Number_products) FROM shop);","ground_truth":"SELECT name FROM shop WHERE number_products  \u003e  (SELECT avg(number_products) FROM shop)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":0.88393662,"prompt_tokens":670,"response_tokens":18,"total_tokens":688},"sequence_num":275}
{"idx":4021222398,"db_id":"employee_hire_evaluation","query":"Which shops' number products is above the average? Give me the shop names.","pred":"SELECT Name\nFROM shop\nWHERE Number_products \u003e (SELECT AVG(Number_products) FROM shop);","ground_truth":"SELECT name FROM shop WHERE number_products  \u003e  (SELECT avg(number_products) FROM shop)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":0.820527512,"prompt_tokens":669,"response_tokens":20,"total_tokens":689},"sequence_num":276}
{"idx":398965255,"db_id":"employee_hire_evaluation","query":"find the name of employee who was awarded the most times in the evaluation.","pred":"SELECT Name \nFROM employee \nWHERE Employee_ID = (\n    SELECT Employee_ID \n    FROM evaluation \n    GROUP BY Employee_ID \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n);","ground_truth":"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":1.9982870130000001,"prompt_tokens":668,"response_tokens":40,"total_tokens":708},"sequence_num":277}
{"idx":360585126,"db_id":"employee_hire_evaluation","query":"Which employee received the most awards in evaluations? Give me the employee name.","pred":"SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nGROUP BY e.Name\nORDER BY COUNT(*) DESC\nLIMIT 1;","ground_truth":"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":1.33095343,"prompt_tokens":668,"response_tokens":36,"total_tokens":704},"sequence_num":278}
{"idx":4196622282,"db_id":"employee_hire_evaluation","query":"Find the name of the employee who got the highest one time bonus.","pred":"SELECT Name\nFROM employee\nJOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID\nORDER BY Bonus DESC\nLIMIT 1;","ground_truth":"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":0.979964059,"prompt_tokens":667,"response_tokens":27,"total_tokens":694},"sequence_num":279}
{"idx":4061252469,"db_id":"employee_hire_evaluation","query":"Which employee received the biggest bonus? Give me the employee name.","pred":"SELECT Name\nFROM employee\nJOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID\nORDER BY Bonus DESC\nLIMIT 1;","ground_truth":"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":1.6780587200000001,"prompt_tokens":666,"response_tokens":27,"total_tokens":693},"sequence_num":280}
{"idx":375215385,"db_id":"employee_hire_evaluation","query":"Find the names of employees who never won any award in the evaluation.","pred":"SELECT Name \nFROM employee \nWHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);","ground_truth":"SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n","metadata":{"execution_time":0.855199763,"prompt_tokens":667,"response_tokens":19,"total_tokens":686},"sequence_num":281}
{"idx":1347938318,"db_id":"employee_hire_evaluation","query":"What are the names of the employees who never received any evaluation?","pred":"SELECT Name \nFROM employee \nWHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);","ground_truth":"SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":0.927038371,"prompt_tokens":666,"response_tokens":19,"total_tokens":685},"sequence_num":282}
{"idx":2068091799,"db_id":"employee_hire_evaluation","query":"What is the name of the shop that is hiring the largest number of employees?","pred":"SELECT Name FROM shop WHERE Shop_ID = (SELECT Shop_ID FROM hiring GROUP BY Shop_ID ORDER BY COUNT(Employee_ID) DESC LIMIT 1);","ground_truth":"SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":0.776638205,"prompt_tokens":669,"response_tokens":30,"total_tokens":699},"sequence_num":283}
{"idx":1817014242,"db_id":"employee_hire_evaluation","query":"Which shop has the most employees? Give me the shop name.","pred":"SELECT Name FROM shop WHERE Shop_ID = (SELECT Shop_ID FROM hiring GROUP BY Shop_ID ORDER BY COUNT(Employee_ID) DESC LIMIT 1);","ground_truth":"SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n","metadata":{"execution_time":1.624997209,"prompt_tokens":666,"response_tokens":30,"total_tokens":696},"sequence_num":284}
{"idx":1283821057,"db_id":"employee_hire_evaluation","query":"Find the name of the shops that do not hire any employee.","pred":"SELECT Name\nFROM shop\nWHERE Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM hiring);","ground_truth":"SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":1.152416363,"prompt_tokens":666,"response_tokens":20,"total_tokens":686},"sequence_num":285}
{"idx":106107986,"db_id":"employee_hire_evaluation","query":"Which shops run with no employees? Find the shop names","pred":"SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM hiring);","ground_truth":"SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":1.388366435,"prompt_tokens":665,"response_tokens":18,"total_tokens":683},"sequence_num":286}
{"idx":3978611521,"db_id":"employee_hire_evaluation","query":"Find the number of employees hired in each shop; show the shop name as well.","pred":"SELECT shop.Name, COUNT(hiring.Employee_ID) AS num_employees_hired\nFROM shop\nLEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID\nGROUP BY shop.Name;","ground_truth":"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","is_correct":false,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":1.279318424,"prompt_tokens":670,"response_tokens":40,"total_tokens":710},"sequence_num":287}
{"idx":970178644,"db_id":"employee_hire_evaluation","query":"For each shop, return the number of employees working there and the name of the shop.","pred":"SELECT shop.Name, COUNT(hiring.Employee_ID) AS num_employees\nFROM shop\nLEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID\nGROUP BY shop.Name;","ground_truth":"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","is_correct":false,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n","metadata":{"execution_time":1.43511806,"prompt_tokens":671,"response_tokens":38,"total_tokens":709},"sequence_num":288}
{"idx":1593049604,"db_id":"employee_hire_evaluation","query":"What is total bonus given in all evaluations?","pred":"SELECT SUM(Bonus) FROM evaluation;","ground_truth":"SELECT sum(bonus) FROM evaluation","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":1.244226516,"prompt_tokens":662,"response_tokens":9,"total_tokens":671},"sequence_num":289}
{"idx":3075412301,"db_id":"employee_hire_evaluation","query":"Find the total amount of bonus given in all the evaluations.","pred":"SELECT SUM(Bonus) FROM evaluation;","ground_truth":"SELECT sum(bonus) FROM evaluation","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":0.862408552,"prompt_tokens":665,"response_tokens":9,"total_tokens":674},"sequence_num":290}
{"idx":3976687435,"db_id":"employee_hire_evaluation","query":"Give me all the information about hiring.","pred":"SELECT * FROM hiring;","ground_truth":"SELECT * FROM hiring","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n","metadata":{"execution_time":0.85934734,"prompt_tokens":661,"response_tokens":6,"total_tokens":667},"sequence_num":291}
{"idx":1703718555,"db_id":"employee_hire_evaluation","query":"What is all the information about hiring?","pred":"SELECT * FROM hiring;","ground_truth":"SELECT * FROM hiring","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n","metadata":{"execution_time":0.661623401,"prompt_tokens":661,"response_tokens":6,"total_tokens":667},"sequence_num":292}
{"idx":1667659000,"db_id":"employee_hire_evaluation","query":"Which district has both stores with less than 3000 products and stores with more than 10000 products?","pred":"SELECT District \nFROM shop \nGROUP BY District \nHAVING SUM(CASE WHEN Number_products \u003c 3000 THEN 1 ELSE 0 END) \u003e 0 \nAND SUM(CASE WHEN Number_products \u003e 10000 THEN 1 ELSE 0 END) \u003e 0;","ground_truth":"SELECT district FROM shop WHERE Number_products  \u003c  3000 INTERSECT SELECT district FROM shop WHERE Number_products  \u003e  10000","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n","metadata":{"execution_time":2.183576789,"prompt_tokens":675,"response_tokens":58,"total_tokens":733},"sequence_num":293}
{"idx":3389134913,"db_id":"employee_hire_evaluation","query":"Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.","pred":"SELECT District \nFROM shop \nWHERE Number_products \u003c 3000 \nAND District IN \n    (SELECT District \n     FROM shop \n     WHERE Number_products \u003e 10000)\nGROUP BY District;","ground_truth":"SELECT district FROM shop WHERE Number_products  \u003c  3000 INTERSECT SELECT district FROM shop WHERE Number_products  \u003e  10000","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":1.28594309,"prompt_tokens":679,"response_tokens":41,"total_tokens":720},"sequence_num":294}
{"idx":195681372,"db_id":"employee_hire_evaluation","query":"How many different store locations are there?","pred":"SELECT COUNT(DISTINCT Location) FROM shop;","ground_truth":"SELECT count(DISTINCT LOCATION) FROM shop","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":0.742932262,"prompt_tokens":661,"response_tokens":11,"total_tokens":672},"sequence_num":295}
{"idx":318805309,"db_id":"employee_hire_evaluation","query":"Count the number of distinct store locations.","pred":"SELECT COUNT(DISTINCT Location) FROM shop;","ground_truth":"SELECT count(DISTINCT LOCATION) FROM shop","is_correct":true,"db_schema":"数据库Schema信息:\n表名: employee\n列:\n  - Employee_ID: number (主键)\n  - Name: text\n  - Age: number\n  - City: text\n\n表名: shop\n列:\n  - Shop_ID: number (主键)\n  - Name: text\n  - Location: text\n  - District: text\n  - Number_products: number\n  - Manager_name: text\n\n表名: hiring\n列:\n  - Shop_ID: number (外键)\n  - Employee_ID: number (主键) (外键)\n  - Start_from: text\n  - Is_full_time: others\n\n表名: evaluation\n列:\n  - Employee_ID: text (主键) (外键)\n  - Year_awarded: text\n  - Bonus: number\n\n外键关系:\n  - employee.Employee_ID -\u003e hiring.Employee_ID\n  - employee.Employee_ID -\u003e evaluation.Employee_ID\n  - shop.Shop_ID -\u003e hiring.Shop_ID\n","metadata":{"execution_time":1.373881581,"prompt_tokens":661,"response_tokens":11,"total_tokens":672},"sequence_num":296}
{"idx":1508492214,"db_id":"cre_Doc_Template_Mgt","query":"How many documents do we have?","pred":"SELECT COUNT(*) FROM Documents;","ground_truth":"SELECT count(*) FROM Documents","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n","metadata":{"execution_time":0.755061791,"prompt_tokens":678,"response_tokens":7,"total_tokens":685},"sequence_num":297}
{"idx":1398890077,"db_id":"cre_Doc_Template_Mgt","query":"Count the number of documents.","pred":"SELECT COUNT(*) FROM Documents;","ground_truth":"SELECT count(*) FROM Documents","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.810006514,"prompt_tokens":677,"response_tokens":7,"total_tokens":684},"sequence_num":298}
{"idx":3914239012,"db_id":"cre_Doc_Template_Mgt","query":"List document IDs, document names, and document descriptions for all documents.","pred":"SELECT Document_ID, Document_Name, Document_Description FROM Documents;","ground_truth":"SELECT document_id ,  document_name ,  document_description FROM Documents","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.5809014399999999,"prompt_tokens":685,"response_tokens":13,"total_tokens":698},"sequence_num":299}
{"idx":3857844427,"db_id":"cre_Doc_Template_Mgt","query":"What are the ids, names, and descriptions for all documents?","pred":"SELECT Document_ID, Document_Name, Document_Description FROM Documents;","ground_truth":"SELECT document_id ,  document_name ,  document_description FROM Documents","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.739362683,"prompt_tokens":684,"response_tokens":13,"total_tokens":697},"sequence_num":300}
{"idx":663569721,"db_id":"cre_Doc_Template_Mgt","query":"What is the document name and template id for document with description with the letter 'w' in it?","pred":"SELECT Document_Name, Template_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%';","ground_truth":"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.804881,"prompt_tokens":692,"response_tokens":19,"total_tokens":711},"sequence_num":301}
{"idx":3795073762,"db_id":"cre_Doc_Template_Mgt","query":"Return the names and template ids for documents that contain the letter w in their description.","pred":"SELECT Document_Name, Template_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%';","ground_truth":"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.875025603,"prompt_tokens":688,"response_tokens":19,"total_tokens":707},"sequence_num":302}
{"idx":543351071,"db_id":"cre_Doc_Template_Mgt","query":"What is the document id, template id and description for document named \"Robbin CV\"?","pred":"SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description\nFROM Documents\nWHERE Document_Name = 'Robbin CV';","ground_truth":"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":2.022988196,"prompt_tokens":689,"response_tokens":26,"total_tokens":715},"sequence_num":303}
{"idx":3530456944,"db_id":"cre_Doc_Template_Mgt","query":"Return the document id, template id, and description for the document with the name Robbin CV.","pred":"SELECT Documents.Document_ID, Templates.Template_ID, Templates.Template_Type_Code\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Name = 'Robbin CV';","ground_truth":"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.479569502,"prompt_tokens":691,"response_tokens":39,"total_tokens":730},"sequence_num":304}
{"idx":3209321107,"db_id":"cre_Doc_Template_Mgt","query":"How many different templates do all document use?","pred":"SELECT COUNT(DISTINCT Template_ID) AS Total_Different_Templates FROM Documents;","ground_truth":"SELECT count(DISTINCT template_id) FROM Documents","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.785368372,"prompt_tokens":680,"response_tokens":18,"total_tokens":698},"sequence_num":305}
{"idx":3916573019,"db_id":"cre_Doc_Template_Mgt","query":"Count the number of different templates used for documents.","pred":"SELECT COUNT(DISTINCT Template_ID) AS Number_of_Templates FROM Documents;","ground_truth":"SELECT count(DISTINCT template_id) FROM Documents","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.737996205,"prompt_tokens":681,"response_tokens":17,"total_tokens":698},"sequence_num":306}
{"idx":1394968545,"db_id":"cre_Doc_Template_Mgt","query":"How many documents are using the template with type code 'PPT'?","pred":"SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT');","ground_truth":"SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.878843433,"prompt_tokens":686,"response_tokens":25,"total_tokens":711},"sequence_num":307}
{"idx":807721228,"db_id":"cre_Doc_Template_Mgt","query":"Count the number of documents that use the PPT template type.","pred":"SELECT COUNT(*) FROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'PPT';","ground_truth":"SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.250576047,"prompt_tokens":684,"response_tokens":50,"total_tokens":734},"sequence_num":308}
{"idx":2894582549,"db_id":"cre_Doc_Template_Mgt","query":"Show all template ids and number of documents using each template.","pred":"SELECT Template_ID, COUNT(*) AS Document_Count FROM Documents GROUP BY Template_ID;","ground_truth":"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.105423828,"prompt_tokens":683,"response_tokens":17,"total_tokens":700},"sequence_num":309}
{"idx":2873370060,"db_id":"cre_Doc_Template_Mgt","query":"What are all different template ids used for documents, and how many times were each of them used?","pred":"SELECT Template_ID, COUNT(*) AS Usage_Count FROM Documents GROUP BY Template_ID;","ground_truth":"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.3653829210000001,"prompt_tokens":691,"response_tokens":17,"total_tokens":708},"sequence_num":310}
{"idx":2313750316,"db_id":"cre_Doc_Template_Mgt","query":"What is the id and type code for the template used by the most documents?","pred":"SELECT Templates.Template_ID, Templates.Template_Type_Code\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID, Templates.Template_Type_Code\nORDER BY COUNT(DISTINCT Documents.Document_ID) DESC\nLIMIT 1;","ground_truth":"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.067618428,"prompt_tokens":687,"response_tokens":52,"total_tokens":739},"sequence_num":311}
{"idx":2778367970,"db_id":"cre_Doc_Template_Mgt","query":"Return the id and type code of the template that is used for the greatest number of documents.","pred":"SELECT Template_ID, Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_ID, Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":2.036875732,"prompt_tokens":690,"response_tokens":172,"total_tokens":862},"sequence_num":312}
{"idx":1731335981,"db_id":"cre_Doc_Template_Mgt","query":"Show ids for all templates that are used by more than one document.","pred":"SELECT Template_ID\nFROM Templates\nGROUP BY Template_ID\nHAVING COUNT(DISTINCT Template_ID) \u003e 1;","ground_truth":"SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  \u003e  1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.26657079,"prompt_tokens":685,"response_tokens":26,"total_tokens":711},"sequence_num":313}
{"idx":546617711,"db_id":"cre_Doc_Template_Mgt","query":"What are the template ids of any templates used in more than a single document?","pred":"SELECT Template_ID\nFROM Templates\nGROUP BY Template_ID\nHAVING COUNT(DISTINCT Template_ID) \u003e 1;","ground_truth":"SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  \u003e  1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.105940625,"prompt_tokens":687,"response_tokens":26,"total_tokens":713},"sequence_num":314}
{"idx":1590307897,"db_id":"cre_Doc_Template_Mgt","query":"Show ids for all templates not used by any document.","pred":"SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);","ground_truth":"SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.386116723,"prompt_tokens":682,"response_tokens":18,"total_tokens":700},"sequence_num":315}
{"idx":2023876381,"db_id":"cre_Doc_Template_Mgt","query":"What are the ids for templates that are not used in any documents?","pred":"SELECT Template_ID \nFROM Templates \nWHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);","ground_truth":"SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n","metadata":{"execution_time":0.762254408,"prompt_tokens":685,"response_tokens":20,"total_tokens":705},"sequence_num":316}
{"idx":1361672887,"db_id":"cre_Doc_Template_Mgt","query":"How many templates do we have?","pred":"SELECT COUNT(*) FROM Templates;","ground_truth":"SELECT count(*) FROM Templates","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.264193062,"prompt_tokens":678,"response_tokens":7,"total_tokens":685},"sequence_num":317}
{"idx":3517840892,"db_id":"cre_Doc_Template_Mgt","query":"Count the number of templates.","pred":"SELECT COUNT(Template_ID) FROM Templates;","ground_truth":"SELECT count(*) FROM Templates","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.477012648,"prompt_tokens":677,"response_tokens":10,"total_tokens":687},"sequence_num":318}
{"idx":2816717424,"db_id":"cre_Doc_Template_Mgt","query":"Show template ids, version numbers, and template type codes for all templates.","pred":"SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;","ground_truth":"SELECT template_id ,  version_number ,  template_type_code FROM Templates","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.405654626,"prompt_tokens":686,"response_tokens":14,"total_tokens":700},"sequence_num":319}
{"idx":2062541928,"db_id":"cre_Doc_Template_Mgt","query":"What are the ids, version numbers, and type codes for each template?","pred":"SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;","ground_truth":"SELECT template_id ,  version_number ,  template_type_code FROM Templates","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n","metadata":{"execution_time":2.579078517,"prompt_tokens":686,"response_tokens":14,"total_tokens":700},"sequence_num":320}
{"idx":844274940,"db_id":"cre_Doc_Template_Mgt","query":"Show all distinct template type codes for all templates.","pred":"SELECT DISTINCT Template_Type_Code FROM Templates;","ground_truth":"SELECT DISTINCT template_type_code FROM Templates","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.852298042,"prompt_tokens":681,"response_tokens":9,"total_tokens":690},"sequence_num":321}
{"idx":1345509090,"db_id":"cre_Doc_Template_Mgt","query":"What are the different template type codes?","pred":"SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;","ground_truth":"SELECT DISTINCT template_type_code FROM Templates","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.901493172,"prompt_tokens":679,"response_tokens":12,"total_tokens":691},"sequence_num":322}
{"idx":1895269863,"db_id":"cre_Doc_Template_Mgt","query":"What are the ids of templates with template type code PP or PPT?","pred":"SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';","ground_truth":"SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.055184547,"prompt_tokens":686,"response_tokens":23,"total_tokens":709},"sequence_num":323}
{"idx":3605848542,"db_id":"cre_Doc_Template_Mgt","query":"Return the ids of templates that have the code PP or PPT.","pred":"SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');","ground_truth":"SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.941990632,"prompt_tokens":685,"response_tokens":18,"total_tokens":703},"sequence_num":324}
{"idx":2352557294,"db_id":"cre_Doc_Template_Mgt","query":"How many templates have template type code CV?","pred":"SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';","ground_truth":"SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.761870417,"prompt_tokens":680,"response_tokens":14,"total_tokens":694},"sequence_num":325}
{"idx":1543365375,"db_id":"cre_Doc_Template_Mgt","query":"Count the number of templates of the type CV.","pred":"SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';","ground_truth":"SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.657393013,"prompt_tokens":681,"response_tokens":14,"total_tokens":695},"sequence_num":326}
{"idx":927248345,"db_id":"cre_Doc_Template_Mgt","query":"What is the version number and template type code for the template with version number later than 5?","pred":"SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number \u003e 5;","ground_truth":"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  \u003e  5","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.7128434829999999,"prompt_tokens":691,"response_tokens":17,"total_tokens":708},"sequence_num":327}
{"idx":2267795479,"db_id":"cre_Doc_Template_Mgt","query":"Return the version numbers and template type codes of templates with a version number greater than 5.","pred":"SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number \u003e 5;","ground_truth":"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  \u003e  5","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.776223189,"prompt_tokens":690,"response_tokens":17,"total_tokens":707},"sequence_num":328}
{"idx":3343203757,"db_id":"cre_Doc_Template_Mgt","query":"Show all template type codes and number of templates for each.","pred":"SELECT Template_Type_Code, COUNT(*) AS Number_of_Templates FROM Templates GROUP BY Template_Type_Code;","ground_truth":"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.774237357,"prompt_tokens":683,"response_tokens":21,"total_tokens":704},"sequence_num":329}
{"idx":466418156,"db_id":"cre_Doc_Template_Mgt","query":"What are the different template type codes, and how many templates correspond to each?","pred":"SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code;","ground_truth":"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.73469299,"prompt_tokens":687,"response_tokens":19,"total_tokens":706},"sequence_num":330}
{"idx":1611845876,"db_id":"cre_Doc_Template_Mgt","query":"Which template type code has most number of templates?","pred":"SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1;","ground_truth":"SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.580043974,"prompt_tokens":681,"response_tokens":25,"total_tokens":706},"sequence_num":331}
{"idx":3812989679,"db_id":"cre_Doc_Template_Mgt","query":"Return the type code of the template type that the most templates belong to.","pred":"SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1;","ground_truth":"SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.982161847,"prompt_tokens":686,"response_tokens":25,"total_tokens":711},"sequence_num":332}
{"idx":1678879298,"db_id":"cre_Doc_Template_Mgt","query":"Show all template type codes with less than three templates.","pred":"SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code IN (\n    SELECT Template_Type_Code \n    FROM Templates \n    GROUP BY Template_Type_Code \n    HAVING COUNT(*) \u003c 3\n);","ground_truth":"SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  \u003c  3","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n","metadata":{"execution_time":1.168776514,"prompt_tokens":682,"response_tokens":45,"total_tokens":727},"sequence_num":333}
{"idx":52025912,"db_id":"cre_Doc_Template_Mgt","query":"What are the codes of template types that have fewer than 3 templates?","pred":"SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code IN (\n    SELECT Template_Type_Code \n    FROM Templates \n    GROUP BY Template_Type_Code \n    HAVING COUNT(*) \u003c 3\n);","ground_truth":"SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  \u003c  3","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.91013563,"prompt_tokens":686,"response_tokens":45,"total_tokens":731},"sequence_num":334}
{"idx":449458125,"db_id":"cre_Doc_Template_Mgt","query":"What the smallest version number and its template type code?","pred":"SELECT MIN(Version_Number), Template_Type_Code FROM Templates;","ground_truth":"SELECT min(Version_Number) ,  template_type_code FROM Templates","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.659673911,"prompt_tokens":682,"response_tokens":13,"total_tokens":695},"sequence_num":335}
{"idx":3220220526,"db_id":"cre_Doc_Template_Mgt","query":"Return the lowest version number, along with its corresponding template type code.","pred":"SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code;","ground_truth":"SELECT min(Version_Number) ,  template_type_code FROM Templates","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.570666885,"prompt_tokens":685,"response_tokens":18,"total_tokens":703},"sequence_num":336}
{"idx":3890123978,"db_id":"cre_Doc_Template_Mgt","query":"What is the template type code of the template used by document with the name \"Data base\"?","pred":"SELECT Templates.Template_Type_Code \nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Data base';","ground_truth":"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.831150686,"prompt_tokens":690,"response_tokens":30,"total_tokens":720},"sequence_num":337}
{"idx":4238529434,"db_id":"cre_Doc_Template_Mgt","query":"Return the template type code of the template that is used by a document named Data base.","pred":"SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code = (\n    SELECT Template_Type_Code \n    FROM Templates \n    JOIN Documents ON Templates.Template_ID = Documents.Template_ID \n    WHERE Document_Name = 'Data base'\n);","ground_truth":"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n","metadata":{"execution_time":1.197783472,"prompt_tokens":689,"response_tokens":50,"total_tokens":739},"sequence_num":338}
{"idx":2795220089,"db_id":"cre_Doc_Template_Mgt","query":"Show all document names using templates with template type code BK.","pred":"SELECT Document_Name FROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'BK';","ground_truth":"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n","metadata":{"execution_time":0.801084733,"prompt_tokens":683,"response_tokens":27,"total_tokens":710},"sequence_num":339}
{"idx":1571640138,"db_id":"cre_Doc_Template_Mgt","query":"What are the names of documents that use templates with the code BK?","pred":"SELECT Document_Name \nFROM Documents \nWHERE Template_ID IN \n    (SELECT Template_ID \n     FROM Templates \n     WHERE Template_Type_Code = 'BK');","ground_truth":"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.055648785,"prompt_tokens":685,"response_tokens":32,"total_tokens":717},"sequence_num":340}
{"idx":1922545098,"db_id":"cre_Doc_Template_Mgt","query":"Show all template type codes and the number of documents using each type.","pred":"SELECT Template_Type_Code, COUNT(*) AS Document_Count\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Template_Type_Code;","ground_truth":"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.188022933,"prompt_tokens":685,"response_tokens":51,"total_tokens":736},"sequence_num":341}
{"idx":1596313150,"db_id":"cre_Doc_Template_Mgt","query":"What are the different template type codes, and how many documents use each type?","pred":"SELECT Template_Type_Code, COUNT(DISTINCT Document_ID) AS Document_Count\nFROM Ref_Template_Types\nJOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Template_Type_Code;","ground_truth":"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":2.625383428,"prompt_tokens":687,"response_tokens":56,"total_tokens":743},"sequence_num":342}
{"idx":601538357,"db_id":"cre_Doc_Template_Mgt","query":"Which template type code is used by most number of documents?","pred":"SELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1;","ground_truth":"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.788560557,"prompt_tokens":683,"response_tokens":25,"total_tokens":708},"sequence_num":343}
{"idx":3966758213,"db_id":"cre_Doc_Template_Mgt","query":"Return the code of the template type that is most commonly used in documents.","pred":"SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1;","ground_truth":"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n","metadata":{"execution_time":0.961928921,"prompt_tokens":686,"response_tokens":25,"total_tokens":711},"sequence_num":344}
{"idx":3906238990,"db_id":"cre_Doc_Template_Mgt","query":"Show all template type codes that are not used by any document.","pred":"SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates);","ground_truth":"SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.812076562,"prompt_tokens":684,"response_tokens":25,"total_tokens":709},"sequence_num":345}
{"idx":585393992,"db_id":"cre_Doc_Template_Mgt","query":"What are the codes of template types that are not used for any document?","pred":"SELECT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates);","ground_truth":"SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.004592276,"prompt_tokens":686,"response_tokens":27,"total_tokens":713},"sequence_num":346}
{"idx":1378940359,"db_id":"cre_Doc_Template_Mgt","query":"Show all template type codes and descriptions.","pred":"SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;","ground_truth":"SELECT template_type_code ,  template_type_description FROM Ref_template_types","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.056589148,"prompt_tokens":679,"response_tokens":15,"total_tokens":694},"sequence_num":347}
{"idx":644580500,"db_id":"cre_Doc_Template_Mgt","query":"What are the type codes and descriptions for all template types?","pred":"SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;","ground_truth":"SELECT template_type_code ,  template_type_description FROM Ref_template_types","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n","metadata":{"execution_time":1.055255827,"prompt_tokens":683,"response_tokens":15,"total_tokens":698},"sequence_num":348}
{"idx":52327648,"db_id":"cre_Doc_Template_Mgt","query":"What is the template type descriptions for template type code \"AD\".","pred":"SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';","ground_truth":"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.41823049,"prompt_tokens":684,"response_tokens":18,"total_tokens":702},"sequence_num":349}
{"idx":3245999447,"db_id":"cre_Doc_Template_Mgt","query":"Return the template type description of the template type with the code AD.","pred":"SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';","ground_truth":"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.558530525,"prompt_tokens":685,"response_tokens":18,"total_tokens":703},"sequence_num":350}
{"idx":1900754759,"db_id":"cre_Doc_Template_Mgt","query":"What is the template type code for template type description \"Book\".","pred":"SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';","ground_truth":"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n","metadata":{"execution_time":0.912126099,"prompt_tokens":684,"response_tokens":18,"total_tokens":702},"sequence_num":351}
{"idx":1981664491,"db_id":"cre_Doc_Template_Mgt","query":"Return the type code of the template type with the description \"Book\".","pred":"SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';","ground_truth":"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.088287231,"prompt_tokens":685,"response_tokens":18,"total_tokens":703},"sequence_num":352}
{"idx":2204760380,"db_id":"cre_Doc_Template_Mgt","query":"What are the distinct template type descriptions for the templates ever used by any document?","pred":"SELECT DISTINCT Ref_Template_Types.Template_Type_Description\nFROM Ref_Template_Types\nJOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID;","ground_truth":"SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.227333198,"prompt_tokens":687,"response_tokens":44,"total_tokens":731},"sequence_num":353}
{"idx":1964216477,"db_id":"cre_Doc_Template_Mgt","query":"Return the different descriptions for templates that have been used in a document.","pred":"SELECT DISTINCT RT.Template_Type_Description\nFROM Ref_Template_Types RT\nJOIN Templates T ON RT.Template_Type_Code = T.Template_Type_Code\nJOIN Documents D ON T.Template_ID = D.Template_ID;","ground_truth":"SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.969595068,"prompt_tokens":685,"response_tokens":41,"total_tokens":726},"sequence_num":354}
{"idx":550686006,"db_id":"cre_Doc_Template_Mgt","query":"What are the template ids with template type description \"Presentation\".","pred":"SELECT Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Template_Type_Description = 'Presentation';","ground_truth":"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.051354671,"prompt_tokens":683,"response_tokens":32,"total_tokens":715},"sequence_num":355}
{"idx":1597939144,"db_id":"cre_Doc_Template_Mgt","query":"Return the ids corresponding to templates with the description 'Presentation'.","pred":"SELECT Template_ID FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation');","ground_truth":"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.954604129,"prompt_tokens":683,"response_tokens":29,"total_tokens":712},"sequence_num":356}
{"idx":1096157591,"db_id":"cre_Doc_Template_Mgt","query":"How many paragraphs in total?","pred":"SELECT COUNT(*) FROM Paragraphs;","ground_truth":"SELECT count(*) FROM Paragraphs","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.658362384,"prompt_tokens":677,"response_tokens":8,"total_tokens":685},"sequence_num":357}
{"idx":570038018,"db_id":"cre_Doc_Template_Mgt","query":"Count the number of paragraphs.","pred":"SELECT COUNT(*) FROM Paragraphs;","ground_truth":"SELECT count(*) FROM Paragraphs","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.920377412,"prompt_tokens":677,"response_tokens":8,"total_tokens":685},"sequence_num":358}
{"idx":2656116602,"db_id":"cre_Doc_Template_Mgt","query":"How many paragraphs for the document with name 'Summer Show'?","pred":"SELECT COUNT(*) FROM Paragraphs\nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID\nWHERE Documents.Document_Name = 'Summer Show';","ground_truth":"SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.89482121,"prompt_tokens":684,"response_tokens":29,"total_tokens":713},"sequence_num":359}
{"idx":604065892,"db_id":"cre_Doc_Template_Mgt","query":"Count the number of paragraphs in the document named 'Summer Show'.","pred":"SELECT COUNT(*) \nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Summer Show';","ground_truth":"SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.878025258,"prompt_tokens":684,"response_tokens":31,"total_tokens":715},"sequence_num":360}
{"idx":1086879512,"db_id":"cre_Doc_Template_Mgt","query":"Show paragraph details for paragraph with text 'Korea ' .","pred":"SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea ';","ground_truth":"select other_details from paragraphs where paragraph_text like 'korea'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.707510477,"prompt_tokens":683,"response_tokens":14,"total_tokens":697},"sequence_num":361}
{"idx":880991737,"db_id":"cre_Doc_Template_Mgt","query":"What are the details for the paragraph that includes the text 'Korea ' ?","pred":"SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %';","ground_truth":"select other_details from paragraphs where paragraph_text like 'korea'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.966165528,"prompt_tokens":687,"response_tokens":15,"total_tokens":702},"sequence_num":362}
{"idx":1623834082,"db_id":"cre_Doc_Template_Mgt","query":"Show all paragraph ids and texts for the document with name 'Welcome to NY'.","pred":"SELECT Paragraph_ID, Paragraph_Text\nFROM Paragraphs\nWHERE Document_ID = (SELECT Document_ID\n                     FROM Documents\n                     WHERE Document_Name = 'Welcome to NY');","ground_truth":"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n","metadata":{"execution_time":1.480339457,"prompt_tokens":687,"response_tokens":35,"total_tokens":722},"sequence_num":363}
{"idx":4209184637,"db_id":"cre_Doc_Template_Mgt","query":"What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?","pred":"SELECT Paragraph_ID, Paragraph_Text \nFROM Paragraphs \nWHERE Document_ID = (SELECT Document_ID \n                     FROM Documents \n                     WHERE Document_Name = 'Welcome to NY');","ground_truth":"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n","metadata":{"execution_time":1.118617146,"prompt_tokens":689,"response_tokens":35,"total_tokens":724},"sequence_num":364}
{"idx":2732603329,"db_id":"cre_Doc_Template_Mgt","query":"Show all paragraph texts for the document \"Customer reviews\".","pred":"SELECT Paragraph_Text \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Document_Name = 'Customer reviews';","ground_truth":"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.104430509,"prompt_tokens":682,"response_tokens":29,"total_tokens":711},"sequence_num":365}
{"idx":219347419,"db_id":"cre_Doc_Template_Mgt","query":"What are the paragraph texts for the document with the name 'Customer reviews'?","pred":"SELECT Paragraph_Text \nFROM Paragraphs \nWHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews');","ground_truth":"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n","metadata":{"execution_time":2.2889679,"prompt_tokens":687,"response_tokens":27,"total_tokens":714},"sequence_num":366}
{"idx":811944611,"db_id":"cre_Doc_Template_Mgt","query":"Show all document ids and the number of paragraphs in each document. Order by document id.","pred":"SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY Documents.Document_ID;","ground_truth":"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n","metadata":{"execution_time":1.217639043,"prompt_tokens":689,"response_tokens":47,"total_tokens":736},"sequence_num":367}
{"idx":3291989515,"db_id":"cre_Doc_Template_Mgt","query":"Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.","pred":"SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS num_paragraphs\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY Documents.Document_ID;","ground_truth":"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n","metadata":{"execution_time":2.179276723,"prompt_tokens":690,"response_tokens":48,"total_tokens":738},"sequence_num":368}
{"idx":2693486730,"db_id":"cre_Doc_Template_Mgt","query":"Show all document ids, names and the number of paragraphs in each document.","pred":"SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Paragraph_Count\nFROM Documents D\nLEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY D.Document_ID, D.Document_Name;","ground_truth":"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.1972263,"prompt_tokens":686,"response_tokens":48,"total_tokens":734},"sequence_num":369}
{"idx":514021827,"db_id":"cre_Doc_Template_Mgt","query":"What are the ids and names of each document, as well as the number of paragraphs in each?","pred":"SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Paragraph_Count\nFROM Documents D\nLEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY D.Document_ID, D.Document_Name;","ground_truth":"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.934582491,"prompt_tokens":691,"response_tokens":48,"total_tokens":739},"sequence_num":370}
{"idx":1109277098,"db_id":"cre_Doc_Template_Mgt","query":"List all document ids with at least two paragraphs.","pred":"SELECT Document_ID\nFROM Documents\nGROUP BY Document_ID\nHAVING COUNT(DISTINCT Paragraph_ID) \u003e= 2;","ground_truth":"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  \u003e=  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n","metadata":{"execution_time":1.022422601,"prompt_tokens":681,"response_tokens":26,"total_tokens":707},"sequence_num":371}
{"idx":215790552,"db_id":"cre_Doc_Template_Mgt","query":"What are the ids of documents that have 2 or more paragraphs?","pred":"SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING COUNT(*) \u003e= 2;","ground_truth":"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  \u003e=  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.780651858,"prompt_tokens":685,"response_tokens":18,"total_tokens":703},"sequence_num":372}
{"idx":3872840397,"db_id":"cre_Doc_Template_Mgt","query":"What is the document id and name with greatest number of paragraphs?","pred":"SELECT Document_ID, Document_Name\nFROM Documents\nWHERE Document_ID = (\n    SELECT Document_ID\n    FROM Paragraphs\n    GROUP BY Document_ID\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);","ground_truth":"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n","metadata":{"execution_time":1.222264129,"prompt_tokens":684,"response_tokens":45,"total_tokens":729},"sequence_num":373}
{"idx":4154285175,"db_id":"cre_Doc_Template_Mgt","query":"Return the id and name of the document with the most paragraphs.","pred":"SELECT Document_ID, Document_Name FROM Documents WHERE Document_ID = (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) DESC LIMIT 1);","ground_truth":"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n","metadata":{"execution_time":0.948344421,"prompt_tokens":684,"response_tokens":33,"total_tokens":717},"sequence_num":374}
{"idx":3308101205,"db_id":"cre_Doc_Template_Mgt","query":"What is the document id with least number of paragraphs?","pred":"SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1;","ground_truth":"SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.715571071,"prompt_tokens":682,"response_tokens":20,"total_tokens":702},"sequence_num":375}
{"idx":150900984,"db_id":"cre_Doc_Template_Mgt","query":"Return the id of the document with the fewest paragraphs.","pred":"SELECT Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY COUNT(*) ASC\nLIMIT 1;","ground_truth":"SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.848527746,"prompt_tokens":683,"response_tokens":24,"total_tokens":707},"sequence_num":376}
{"idx":2112455698,"db_id":"cre_Doc_Template_Mgt","query":"What is the document id with 1 to 2 paragraphs?","pred":"SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2;","ground_truth":"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n  - Templates.Template_ID -\u003e Documents.Template_ID\n","metadata":{"execution_time":0.781638281,"prompt_tokens":684,"response_tokens":21,"total_tokens":705},"sequence_num":377}
{"idx":2376263995,"db_id":"cre_Doc_Template_Mgt","query":"Give the ids of documents that have between one and two paragraphs.","pred":"SELECT Document_ID\nFROM Documents\nWHERE Document_ID IN (\n    SELECT Document_ID\n    FROM Paragraphs\n    GROUP BY Document_ID\n    HAVING COUNT(*) BETWEEN 1 AND 2\n);","ground_truth":"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.939120641,"prompt_tokens":684,"response_tokens":42,"total_tokens":726},"sequence_num":378}
{"idx":212889720,"db_id":"cre_Doc_Template_Mgt","query":"Show the document id with paragraph text 'Brazil' and 'Ireland'.","pred":"SELECT Document_ID \nFROM Documents \nWHERE Document_ID IN (\n    SELECT Document_ID \n    FROM Paragraphs \n    WHERE Paragraph_Text IN ('Brazil', 'Ireland')\n);","ground_truth":"SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":0.90850101,"prompt_tokens":686,"response_tokens":36,"total_tokens":722},"sequence_num":379}
{"idx":596258425,"db_id":"cre_Doc_Template_Mgt","query":"What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?","pred":"SELECT Document_ID\nFROM Documents\nWHERE Document_ID IN (\n    SELECT Document_ID\n    FROM Paragraphs\n    WHERE Paragraph_Text IN ('Brazil', 'Ireland')\n);","ground_truth":"SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Template_Types\n列:\n  - Template_Type_Code: text (主键)\n  - Template_Type_Description: text\n\n表名: Templates\n列:\n  - Template_ID: number (主键)\n  - Version_Number: number\n  - Template_Type_Code: text (外键)\n  - Date_Effective_From: time\n  - Date_Effective_To: time\n  - Template_Details: text\n\n表名: Documents\n列:\n  - Document_ID: number (主键)\n  - Template_ID: number (外键)\n  - Document_Name: text\n  - Document_Description: text\n  - Other_Details: text\n\n表名: Paragraphs\n列:\n  - Paragraph_ID: number (主键)\n  - Document_ID: number (外键)\n  - Paragraph_Text: text\n  - Other_Details: text\n\n外键关系:\n  - Templates.Template_ID -\u003e Documents.Template_ID\n  - Ref_Template_Types.Template_Type_Code -\u003e Templates.Template_Type_Code\n  - Documents.Document_ID -\u003e Paragraphs.Document_ID\n","metadata":{"execution_time":1.198092436,"prompt_tokens":691,"response_tokens":36,"total_tokens":727},"sequence_num":380}
{"idx":1679513230,"db_id":"course_teach","query":"How many teachers are there?","pred":"SELECT COUNT(*) FROM teacher;","ground_truth":"SELECT count(*) FROM teacher","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.739779026,"prompt_tokens":594,"response_tokens":7,"total_tokens":601},"sequence_num":381}
{"idx":3532754340,"db_id":"course_teach","query":"What is the total count of teachers?","pred":"SELECT COUNT(*) FROM teacher;","ground_truth":"SELECT count(*) FROM teacher","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.708681379,"prompt_tokens":596,"response_tokens":7,"total_tokens":603},"sequence_num":382}
{"idx":4177605993,"db_id":"course_teach","query":"List the names of teachers in ascending order of age.","pred":"SELECT Name FROM teacher ORDER BY Age ASC;","ground_truth":"SELECT Name FROM teacher ORDER BY Age ASC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.913074067,"prompt_tokens":599,"response_tokens":10,"total_tokens":609},"sequence_num":383}
{"idx":97131841,"db_id":"course_teach","query":"What are the names of the teachers ordered by ascending age?","pred":"SELECT Name FROM teacher ORDER BY Age ASC;","ground_truth":"SELECT Name FROM teacher ORDER BY Age ASC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.64700279,"prompt_tokens":600,"response_tokens":10,"total_tokens":610},"sequence_num":384}
{"idx":3596574268,"db_id":"course_teach","query":"What are the age and hometown of teachers?","pred":"SELECT Age, Hometown FROM teacher;","ground_truth":"SELECT Age ,  Hometown FROM teacher","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":1.7072143290000001,"prompt_tokens":597,"response_tokens":9,"total_tokens":606},"sequence_num":385}
{"idx":3617248504,"db_id":"course_teach","query":"What is the age and hometown of every teacher?","pred":"SELECT Name, Age, Hometown FROM teacher;","ground_truth":"SELECT Age ,  Hometown FROM teacher","is_correct":false,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.851387271,"prompt_tokens":598,"response_tokens":11,"total_tokens":609},"sequence_num":386}
{"idx":2754467419,"db_id":"course_teach","query":"List the name of teachers whose hometown is not `` Little Lever Urban District '' .","pred":"SELECT Name FROM teacher WHERE Hometown \u003c\u003e 'Little Lever Urban District';","ground_truth":"select name from teacher where hometown != \"little lever urban district\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.874012069,"prompt_tokens":604,"response_tokens":15,"total_tokens":619},"sequence_num":387}
{"idx":1188625090,"db_id":"course_teach","query":"What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?","pred":"SELECT Name FROM teacher WHERE Hometown \u003c\u003e 'Little Lever Urban District';","ground_truth":"select name from teacher where hometown != \"little lever urban district\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.645322219,"prompt_tokens":606,"response_tokens":15,"total_tokens":621},"sequence_num":388}
{"idx":3710732081,"db_id":"course_teach","query":"Show the name of teachers aged either 32 or 33?","pred":"SELECT Name FROM teacher WHERE Age IN ('32', '33');","ground_truth":"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.853584731,"prompt_tokens":601,"response_tokens":14,"total_tokens":615},"sequence_num":389}
{"idx":268013720,"db_id":"course_teach","query":"What are the names of the teachers who are aged either 32 or 33?","pred":"SELECT Name FROM teacher WHERE Age IN ('32', '33');","ground_truth":"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.907025058,"prompt_tokens":605,"response_tokens":14,"total_tokens":619},"sequence_num":390}
{"idx":2279137492,"db_id":"course_teach","query":"What is the hometown of the youngest teacher?","pred":"SELECT Hometown\nFROM teacher\nWHERE Age = (SELECT MIN(Age) FROM teacher);","ground_truth":"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - course.Course_ID -\u003e course_arrange.Course_ID\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n","metadata":{"execution_time":0.913591968,"prompt_tokens":597,"response_tokens":20,"total_tokens":617},"sequence_num":391}
{"idx":1272267752,"db_id":"course_teach","query":"Where is the youngest teacher from?","pred":"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;","ground_truth":"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - course.Course_ID -\u003e course_arrange.Course_ID\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n","metadata":{"execution_time":0.883102632,"prompt_tokens":595,"response_tokens":14,"total_tokens":609},"sequence_num":392}
{"idx":153217475,"db_id":"course_teach","query":"Show different hometown of teachers and the number of teachers from each hometown.","pred":"SELECT Hometown, COUNT(Teacher_ID) AS Number_of_Teachers FROM teacher GROUP BY Hometown;","ground_truth":"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.752647992,"prompt_tokens":602,"response_tokens":23,"total_tokens":625},"sequence_num":393}
{"idx":3312965225,"db_id":"course_teach","query":"For each hometown, how many teachers are there?","pred":"SELECT Hometown, COUNT(Teacher_ID) AS Teacher_Count\nFROM teacher\nGROUP BY Hometown;","ground_truth":"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.884393921,"prompt_tokens":598,"response_tokens":22,"total_tokens":620},"sequence_num":394}
{"idx":1639791427,"db_id":"course_teach","query":"List the most common hometown of teachers.","pred":"SELECT Hometown, COUNT(*) AS count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1;","ground_truth":"SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.710099149,"prompt_tokens":596,"response_tokens":23,"total_tokens":619},"sequence_num":395}
{"idx":1172482062,"db_id":"course_teach","query":"What is the most commmon hometowns for teachers?","pred":"SELECT Hometown, COUNT(*) AS count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1;","ground_truth":"SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.71188137,"prompt_tokens":599,"response_tokens":23,"total_tokens":622},"sequence_num":396}
{"idx":2209545274,"db_id":"course_teach","query":"Show the hometowns shared by at least two teachers.","pred":"SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) \u003e= 2;","ground_truth":"SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  \u003e=  2","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.733875744,"prompt_tokens":599,"response_tokens":18,"total_tokens":617},"sequence_num":397}
{"idx":4291515996,"db_id":"course_teach","query":"What are the towns from which at least two teachers come from?","pred":"SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) \u003e= 2;","ground_truth":"SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  \u003e=  2","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":1.309133479,"prompt_tokens":601,"response_tokens":18,"total_tokens":619},"sequence_num":398}
{"idx":1176935458,"db_id":"course_teach","query":"Show names of teachers and the courses they are arranged to teach.","pred":"SELECT teacher.Name, course.Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID;","ground_truth":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.832664207,"prompt_tokens":601,"response_tokens":41,"total_tokens":642},"sequence_num":399}
{"idx":237531641,"db_id":"course_teach","query":"What is the name of each teacher and what course they teach?","pred":"SELECT Name, Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID;","ground_truth":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":1.6388196929999999,"prompt_tokens":601,"response_tokens":39,"total_tokens":640},"sequence_num":400}
{"idx":760949316,"db_id":"course_teach","query":"Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.","pred":"SELECT teacher.Name, course.Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID\nORDER BY teacher.Name ASC;","ground_truth":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":3.977495779,"prompt_tokens":610,"response_tokens":47,"total_tokens":657},"sequence_num":401}
{"idx":512062427,"db_id":"course_teach","query":"What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?","pred":"SELECT teacher.Name, course.Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID\nORDER BY teacher.Name ASC;","ground_truth":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":1.245122043,"prompt_tokens":611,"response_tokens":47,"total_tokens":658},"sequence_num":402}
{"idx":162668555,"db_id":"course_teach","query":"Show the name of the teacher for the math course.","pred":"SELECT Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';","ground_truth":"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":1.139638983,"prompt_tokens":599,"response_tokens":40,"total_tokens":639},"sequence_num":403}
{"idx":675989171,"db_id":"course_teach","query":"What are the names of the people who teach math courses?","pred":"SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Course_ID IN (SELECT Course_ID FROM course WHERE Course = 'Math'));","ground_truth":"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - course.Course_ID -\u003e course_arrange.Course_ID\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n","metadata":{"execution_time":0.900090591,"prompt_tokens":600,"response_tokens":33,"total_tokens":633},"sequence_num":404}
{"idx":1996295271,"db_id":"course_teach","query":"Show names of teachers and the number of courses they teach.","pred":"SELECT Name, COUNT(Course_ID) AS Number_of_courses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY Name;","ground_truth":"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.878859999,"prompt_tokens":600,"response_tokens":35,"total_tokens":635},"sequence_num":405}
{"idx":1038420384,"db_id":"course_teach","query":"What are the names of the teachers and how many courses do they teach?","pred":"SELECT Name, COUNT(Course_ID) AS Number_of_Courses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY Name;","ground_truth":"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.854446643,"prompt_tokens":603,"response_tokens":36,"total_tokens":639},"sequence_num":406}
{"idx":2353695938,"db_id":"course_teach","query":"Show names of teachers that teach at least two courses.","pred":"SELECT Name FROM teacher GROUP BY Name HAVING COUNT(*) \u003e= 2;","ground_truth":"SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  \u003e=  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.682202406,"prompt_tokens":599,"response_tokens":16,"total_tokens":615},"sequence_num":407}
{"idx":1985534741,"db_id":"course_teach","query":"What are the names of the teachers who teach at least two courses?","pred":"SELECT Name\nFROM teacher\nGROUP BY Teacher_ID\nHAVING COUNT(Teacher_ID) \u003e= 2;","ground_truth":"SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  \u003e=  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.735107168,"prompt_tokens":602,"response_tokens":23,"total_tokens":625},"sequence_num":408}
{"idx":2837924341,"db_id":"course_teach","query":"List the names of teachers who have not been arranged to teach courses.","pred":"SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);","ground_truth":"SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":0.726256602,"prompt_tokens":602,"response_tokens":19,"total_tokens":621},"sequence_num":409}
{"idx":3252881955,"db_id":"course_teach","query":"What are the names of the teachers whose courses have not been arranged?","pred":"SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);","ground_truth":"SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: course\n列:\n  - Course_ID: number (主键)\n  - Staring_Date: text\n  - Course: text\n\n表名: teacher\n列:\n  - Teacher_ID: number (主键)\n  - Name: text\n  - Age: text\n  - Hometown: text\n\n表名: course_arrange\n列:\n  - Course_ID: number (主键) (外键)\n  - Teacher_ID: number (外键)\n  - Grade: number\n\n外键关系:\n  - teacher.Teacher_ID -\u003e course_arrange.Teacher_ID\n  - course.Course_ID -\u003e course_arrange.Course_ID\n","metadata":{"execution_time":1.341870616,"prompt_tokens":602,"response_tokens":21,"total_tokens":623},"sequence_num":410}
{"idx":739190900,"db_id":"museum_visit","query":"How many visitors below age 30 are there?","pred":"SELECT COUNT(*) FROM visitor WHERE Age \u003c 30;","ground_truth":"SELECT count(*) FROM visitor WHERE age  \u003c  30","is_correct":true,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":0.834370685,"prompt_tokens":612,"response_tokens":12,"total_tokens":624},"sequence_num":411}
{"idx":756369756,"db_id":"museum_visit","query":"Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.","pred":"SELECT Name FROM visitor WHERE Level_of_membership \u003e 4 ORDER BY Level_of_membership DESC;","ground_truth":"SELECT name FROM visitor WHERE Level_of_membership  \u003e  4 ORDER BY Level_of_membership DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - museum.Museum_ID -\u003e visit.Museum_ID\n  - visitor.ID -\u003e visit.visitor_ID\n","metadata":{"execution_time":1.412260025,"prompt_tokens":629,"response_tokens":19,"total_tokens":648},"sequence_num":412}
{"idx":3865006194,"db_id":"museum_visit","query":"What is the average age of the visitors whose membership level is not higher than 4?","pred":"SELECT AVG(Age) FROM visitor WHERE Level_of_membership \u003c= 4;","ground_truth":"SELECT avg(age) FROM visitor WHERE Level_of_membership  \u003c=  4","is_correct":true,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":0.691720567,"prompt_tokens":620,"response_tokens":16,"total_tokens":636},"sequence_num":413}
{"idx":3126893432,"db_id":"museum_visit","query":"Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.","pred":"SELECT Name, Level_of_membership \nFROM visitor \nWHERE Level_of_membership \u003e 4 \nORDER BY Age DESC;","ground_truth":"SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  \u003e  4 ORDER BY age DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":0.931358378,"prompt_tokens":630,"response_tokens":24,"total_tokens":654},"sequence_num":414}
{"idx":3072218604,"db_id":"museum_visit","query":"Find the id and name of the museum that has the most staff members?","pred":"SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;","ground_truth":"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":1.034577584,"prompt_tokens":617,"response_tokens":19,"total_tokens":636},"sequence_num":415}
{"idx":2894937235,"db_id":"museum_visit","query":"Find the average number of staff working for the museums that were open before 2009.","pred":"SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year \u003c '2009';","ground_truth":"SELECT avg(num_of_staff) FROM museum WHERE open_year  \u003c  2009","is_correct":true,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":1.350999947,"prompt_tokens":620,"response_tokens":79,"total_tokens":699},"sequence_num":416}
{"idx":910765710,"db_id":"museum_visit","query":"What are the opening year and staff number of the museum named Plaza Museum?","pred":"SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';","ground_truth":"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":2.504540061,"prompt_tokens":617,"response_tokens":20,"total_tokens":637},"sequence_num":417}
{"idx":3255746618,"db_id":"museum_visit","query":"find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.","pred":"SELECT Name \nFROM museum \nWHERE Num_of_Staff \u003e (SELECT MIN(Num_of_Staff) \n                      FROM museum \n                      WHERE CAST(Open_Year AS INTEGER) \u003e 2010);","ground_truth":"SELECT name FROM museum WHERE num_of_staff  \u003e  (SELECT min(num_of_staff) FROM museum WHERE open_year  \u003e  2010)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":0.880207163,"prompt_tokens":625,"response_tokens":42,"total_tokens":667},"sequence_num":418}
{"idx":3167914196,"db_id":"museum_visit","query":"find the id, name and age for visitors who visited some museums more than once.","pred":"SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(visit.Museum_ID) \u003e 1;","ground_truth":"SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  \u003e  1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":0.9207723,"prompt_tokens":619,"response_tokens":45,"total_tokens":664},"sequence_num":419}
{"idx":1533642987,"db_id":"museum_visit","query":"What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?","pred":"SELECT visitor.ID, visitor.Name, visitor.Level_of_membership\nFROM visitor\nJOIN visit ON visitor.ID = visit.visitor_ID\nGROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership\nORDER BY SUM(visit.Total_spent) DESC\nLIMIT 1;","ground_truth":"SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":1.2928772099999999,"prompt_tokens":628,"response_tokens":55,"total_tokens":683},"sequence_num":420}
{"idx":2436028488,"db_id":"museum_visit","query":"What are the id and name of the museum visited most times?","pred":"SELECT Museum_ID, Name FROM museum WHERE Museum_ID = (SELECT Museum_ID FROM visit GROUP BY Museum_ID ORDER BY COUNT(*) DESC LIMIT 1);","ground_truth":"SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":1.055416336,"prompt_tokens":615,"response_tokens":31,"total_tokens":646},"sequence_num":421}
{"idx":77370176,"db_id":"museum_visit","query":"What is the name of the museum that had no visitor yet?","pred":"SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);","ground_truth":"SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":0.798303922,"prompt_tokens":615,"response_tokens":17,"total_tokens":632},"sequence_num":422}
{"idx":1841396089,"db_id":"museum_visit","query":"Find the name and age of the visitor who bought the most tickets at once.","pred":"SELECT v.Name, v.Age\nFROM visitor v\nJOIN visit vt ON v.ID = vt.visitor_ID\nORDER BY vt.Num_of_Ticket DESC\nLIMIT 1;","ground_truth":"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":0.854236602,"prompt_tokens":618,"response_tokens":37,"total_tokens":655},"sequence_num":423}
{"idx":39313824,"db_id":"museum_visit","query":"What are the average and maximum number of tickets bought in all visits?","pred":"SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit;","ground_truth":"SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit","is_correct":true,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":0.75058364,"prompt_tokens":616,"response_tokens":19,"total_tokens":635},"sequence_num":424}
{"idx":4211432140,"db_id":"museum_visit","query":"What is the total ticket expense of the visitors whose membership level is 1?","pred":"SELECT SUM(Total_spent) \nFROM visit \nJOIN visitor ON visit.visitor_ID = visitor.ID \nWHERE Level_of_membership = 1;","ground_truth":"SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":1.109602977,"prompt_tokens":618,"response_tokens":31,"total_tokens":649},"sequence_num":425}
{"idx":3806974687,"db_id":"museum_visit","query":"What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?","pred":"SELECT Name \nFROM visitor\nWHERE ID IN (\n    SELECT visitor_ID\n    FROM visit\n    WHERE Museum_ID IN (\n        SELECT Museum_ID\n        FROM museum\n        WHERE Open_Year \u003c '2009'\n        INTERSECT\n        SELECT Museum_ID\n        FROM museum\n        WHERE Open_Year \u003e '2011'\n    )\n);","ground_truth":"SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  \u003c  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  \u003e  2011","is_correct":false,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":1.235429436,"prompt_tokens":628,"response_tokens":72,"total_tokens":700},"sequence_num":426}
{"idx":4222387772,"db_id":"museum_visit","query":"Find the number of visitors who did not visit any museum opened after 2010.","pred":"SELECT COUNT(DISTINCT visitor_ID) \nFROM visitor \nWHERE visitor_ID NOT IN \n    (SELECT visitor_ID \n     FROM visit \n     JOIN museum ON visit.Museum_ID = museum.Museum_ID \n     WHERE Open_Year \u003e '2010');","ground_truth":"SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  \u003e  2010)","is_correct":false,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":0.97006382,"prompt_tokens":619,"response_tokens":53,"total_tokens":672},"sequence_num":427}
{"idx":3225692389,"db_id":"museum_visit","query":"How many museums were opened after 2013 or before 2008?","pred":"SELECT COUNT(*) FROM museum WHERE Open_Year \u003e '2013' OR Open_Year \u003c '2008';","ground_truth":"SELECT count(*) FROM museum WHERE open_year  \u003e  2013 OR open_year  \u003c  2008","is_correct":true,"db_schema":"数据库Schema信息:\n表名: museum\n列:\n  - Museum_ID: number (主键)\n  - Name: text\n  - Num_of_Staff: number\n  - Open_Year: text\n\n表名: visitor\n列:\n  - ID: number (主键)\n  - Name: text\n  - Level_of_membership: number\n  - Age: number\n\n表名: visit\n列:\n  - Museum_ID: number (主键) (外键)\n  - visitor_ID: text (外键)\n  - Num_of_Ticket: number\n  - Total_spent: number\n\n外键关系:\n  - visitor.ID -\u003e visit.visitor_ID\n  - museum.Museum_ID -\u003e visit.Museum_ID\n","metadata":{"execution_time":0.767895026,"prompt_tokens":617,"response_tokens":24,"total_tokens":641},"sequence_num":428}
{"idx":1847010300,"db_id":"wta_1","query":"Find the total number of players.","pred":"SELECT COUNT(DISTINCT player_id) FROM players;","ground_truth":"SELECT count(*) FROM players","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.915233871,"prompt_tokens":829,"response_tokens":12,"total_tokens":841},"sequence_num":429}
{"idx":965306018,"db_id":"wta_1","query":"How many players are there?","pred":"SELECT COUNT(*) FROM players;","ground_truth":"SELECT count(*) FROM players","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e rankings.player_id\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n","metadata":{"execution_time":0.809234169,"prompt_tokens":828,"response_tokens":7,"total_tokens":835},"sequence_num":430}
{"idx":264653979,"db_id":"wta_1","query":"Find the total number of matches.","pred":"SELECT COUNT(*) FROM matches;","ground_truth":"SELECT count(*) FROM matches","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.80462316,"prompt_tokens":829,"response_tokens":7,"total_tokens":836},"sequence_num":431}
{"idx":4264997553,"db_id":"wta_1","query":"Count the number of matches.","pred":"SELECT COUNT(*) FROM matches;","ground_truth":"SELECT count(*) FROM matches","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e rankings.player_id\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n","metadata":{"execution_time":0.603228706,"prompt_tokens":828,"response_tokens":7,"total_tokens":835},"sequence_num":432}
{"idx":2146258477,"db_id":"wta_1","query":"List the first name and birth date of all players from the country with code USA.","pred":"SELECT first_name, birth_date FROM players WHERE country_code = 'USA';","ground_truth":"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.066633079,"prompt_tokens":839,"response_tokens":16,"total_tokens":855},"sequence_num":433}
{"idx":3472243242,"db_id":"wta_1","query":"What are the first names and birth dates of players from the USA?","pred":"SELECT first_name, birth_date FROM players WHERE country_code = 'USA';","ground_truth":"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.856504189,"prompt_tokens":836,"response_tokens":16,"total_tokens":852},"sequence_num":434}
{"idx":1352197047,"db_id":"wta_1","query":"Find the average age of losers and winners of all matches.","pred":"SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;","ground_truth":"SELECT avg(loser_age) ,  avg(winner_age) FROM matches","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.746397124,"prompt_tokens":834,"response_tokens":25,"total_tokens":859},"sequence_num":435}
{"idx":3924774657,"db_id":"wta_1","query":"What are the average ages of losers and winners across matches?","pred":"SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;","ground_truth":"SELECT avg(loser_age) ,  avg(winner_age) FROM matches","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.710212236,"prompt_tokens":834,"response_tokens":25,"total_tokens":859},"sequence_num":436}
{"idx":565249503,"db_id":"wta_1","query":"Find the average rank of winners in all matches.","pred":"SELECT AVG(winner_rank) AS average_rank FROM matches;","ground_truth":"SELECT avg(winner_rank) FROM matches","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.690905008,"prompt_tokens":832,"response_tokens":13,"total_tokens":845},"sequence_num":437}
{"idx":3663914847,"db_id":"wta_1","query":"What is the average rank for winners in all matches?","pred":"SELECT AVG(winner_rank) AS average_rank FROM matches;","ground_truth":"SELECT avg(winner_rank) FROM matches","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.902999379,"prompt_tokens":833,"response_tokens":13,"total_tokens":846},"sequence_num":438}
{"idx":1446147086,"db_id":"wta_1","query":"Find the highest rank of losers in all matches.","pred":"SELECT MAX(loser_rank) AS highest_rank_of_losers FROM matches;","ground_truth":"SELECT min(loser_rank) FROM matches","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.911202643,"prompt_tokens":832,"response_tokens":17,"total_tokens":849},"sequence_num":439}
{"idx":2303984422,"db_id":"wta_1","query":"What is the best rank of losers across all matches?","pred":"SELECT MAX(loser_rank) AS best_rank_of_losers FROM matches;","ground_truth":"SELECT min(loser_rank) FROM matches","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.767924093,"prompt_tokens":833,"response_tokens":17,"total_tokens":850},"sequence_num":440}
{"idx":886497376,"db_id":"wta_1","query":"find the number of distinct country codes of all players.","pred":"SELECT COUNT(DISTINCT country_code) FROM players;","ground_truth":"SELECT count(DISTINCT country_code) FROM players","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":3.6933708039999997,"prompt_tokens":833,"response_tokens":12,"total_tokens":845},"sequence_num":441}
{"idx":3159124761,"db_id":"wta_1","query":"How many distinct countries do players come from?","pred":"SELECT COUNT(DISTINCT country_code) FROM players;","ground_truth":"SELECT count(DISTINCT country_code) FROM players","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.924856645,"prompt_tokens":831,"response_tokens":12,"total_tokens":843},"sequence_num":442}
{"idx":1838812036,"db_id":"wta_1","query":"Find the number of distinct name of losers.","pred":"SELECT COUNT(DISTINCT loser_name) AS distinct_name_of_losers FROM matches;","ground_truth":"SELECT count(DISTINCT loser_name) FROM matches","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.160925261,"prompt_tokens":831,"response_tokens":19,"total_tokens":850},"sequence_num":443}
{"idx":2705691158,"db_id":"wta_1","query":"How many different loser names are there?","pred":"SELECT COUNT(DISTINCT loser_name) AS num_different_loser_names FROM matches;","ground_truth":"SELECT count(DISTINCT loser_name) FROM matches","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.03425784,"prompt_tokens":830,"response_tokens":18,"total_tokens":848},"sequence_num":444}
{"idx":3392053413,"db_id":"wta_1","query":"Find the name of tourney that has more than 10 matches.","pred":"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) \u003e 10;","ground_truth":"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  \u003e  10","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.753966771,"prompt_tokens":836,"response_tokens":20,"total_tokens":856},"sequence_num":445}
{"idx":1617853798,"db_id":"wta_1","query":"What are the names of tournaments that have more than 10 matches?","pred":"SELECT tourney_name\nFROM matches\nGROUP BY tourney_name\nHAVING COUNT(*) \u003e 10;","ground_truth":"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  \u003e  10","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.007462226,"prompt_tokens":836,"response_tokens":23,"total_tokens":859},"sequence_num":446}
{"idx":2133169922,"db_id":"wta_1","query":"List the names of all winners who played in both 2013 and 2016.","pred":"SELECT DISTINCT p.first_name, p.last_name\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nWHERE m.year IN (2013, 2016)\nGROUP BY p.first_name, p.last_name\nHAVING COUNT(DISTINCT m.year) = 2;","ground_truth":"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.152982446,"prompt_tokens":840,"response_tokens":63,"total_tokens":903},"sequence_num":447}
{"idx":2936856207,"db_id":"wta_1","query":"What are the names of players who won in both 2013 and 2016?","pred":"SELECT DISTINCT p.first_name, p.last_name\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nWHERE m.year IN (2013, 2016)\nGROUP BY p.player_id\nHAVING COUNT(DISTINCT m.year) = 2;","ground_truth":"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.070583151,"prompt_tokens":840,"response_tokens":59,"total_tokens":899},"sequence_num":448}
{"idx":2210722602,"db_id":"wta_1","query":"List the number of all matches who played in years of 2013 or 2016.","pred":"SELECT COUNT(*) AS match_count FROM matches WHERE year IN (2013, 2016);","ground_truth":"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.9065229270000001,"prompt_tokens":841,"response_tokens":46,"total_tokens":887},"sequence_num":449}
{"idx":762542892,"db_id":"wta_1","query":"How many matches were played in 2013 or 2016?","pred":"SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);","ground_truth":"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.089873482,"prompt_tokens":836,"response_tokens":17,"total_tokens":853},"sequence_num":450}
{"idx":2427673152,"db_id":"wta_1","query":"What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?","pred":"SELECT DISTINCT p.country_code, p.first_name\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nWHERE m.tourney_name = 'WTA Championships'\nAND EXISTS (\n    SELECT 1\n    FROM matches m2\n    WHERE m2.winner_id = m.winner_id\n    AND m2.tourney_name = 'Australian Open'\n);","ground_truth":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.9345505589999998,"prompt_tokens":846,"response_tokens":79,"total_tokens":925},"sequence_num":451}
{"idx":3550550238,"db_id":"wta_1","query":"What are the first names and country codes for players who won both the WTA Championships and the Australian Open?","pred":"SELECT first_name, country_code FROM players\nWHERE player_id IN (\n    SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships'\n    INTERSECT\n    SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open'\n);","ground_truth":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e rankings.player_id\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n","metadata":{"execution_time":2.18063928,"prompt_tokens":844,"response_tokens":52,"total_tokens":896},"sequence_num":452}
{"idx":3926611831,"db_id":"wta_1","query":"Find the first name and country code of the oldest player.","pred":"SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;","ground_truth":"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.109280869,"prompt_tokens":834,"response_tokens":18,"total_tokens":852},"sequence_num":453}
{"idx":2063720205,"db_id":"wta_1","query":"What is the first name and country code of the oldest player?","pred":"SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;","ground_truth":"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e rankings.player_id\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n","metadata":{"execution_time":0.998776426,"prompt_tokens":835,"response_tokens":18,"total_tokens":853},"sequence_num":454}
{"idx":655894765,"db_id":"wta_1","query":"List the first and last name of all players in the order of birth date.","pred":"SELECT first_name, last_name FROM players ORDER BY birth_date;","ground_truth":"SELECT first_name ,  last_name FROM players ORDER BY birth_date","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.881890605,"prompt_tokens":838,"response_tokens":14,"total_tokens":852},"sequence_num":455}
{"idx":4119421910,"db_id":"wta_1","query":"What are the full names of all players, sorted by birth date?","pred":"SELECT first_name || ' ' || last_name AS full_name\nFROM players\nORDER BY birth_date;","ground_truth":"SELECT first_name ,  last_name FROM players ORDER BY birth_date","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.85308905,"prompt_tokens":836,"response_tokens":22,"total_tokens":858},"sequence_num":456}
{"idx":453627436,"db_id":"wta_1","query":"List the first and last name of all players who are left / L hand in the order of birth date.","pred":"SELECT first_name, last_name \nFROM players \nWHERE hand = 'L' \nORDER BY birth_date;","ground_truth":"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.015670855,"prompt_tokens":844,"response_tokens":23,"total_tokens":867},"sequence_num":457}
{"idx":3245338681,"db_id":"wta_1","query":"What are the full names of all left handed players, in order of birth date?","pred":"SELECT first_name || ' ' || last_name AS full_name\nFROM players\nWHERE hand = 'L'\nORDER BY birth_date;","ground_truth":"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.998877072,"prompt_tokens":839,"response_tokens":28,"total_tokens":867},"sequence_num":458}
{"idx":4081965564,"db_id":"wta_1","query":"Find the first name and country code of the player who did the most number of tours.","pred":"SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY SUM(tours) DESC LIMIT 1);","ground_truth":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.197408577,"prompt_tokens":840,"response_tokens":34,"total_tokens":874},"sequence_num":459}
{"idx":3447165031,"db_id":"wta_1","query":"What is the first name and country code of the player with the most tours?","pred":"SELECT first_name, country_code\nFROM players\nWHERE player_id = (SELECT player_id\n                   FROM rankings\n                   GROUP BY player_id\n                   ORDER BY SUM(tours) DESC\n                   LIMIT 1);","ground_truth":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.3393515169999999,"prompt_tokens":838,"response_tokens":44,"total_tokens":882},"sequence_num":460}
{"idx":563729005,"db_id":"wta_1","query":"Find the year that has the most number of matches.","pred":"SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.033220378,"prompt_tokens":833,"response_tokens":17,"total_tokens":850},"sequence_num":461}
{"idx":3012320553,"db_id":"wta_1","query":"Which year had the most matches?","pred":"SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e rankings.player_id\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n","metadata":{"execution_time":0.988886479,"prompt_tokens":829,"response_tokens":17,"total_tokens":846},"sequence_num":462}
{"idx":3864790796,"db_id":"wta_1","query":"Find the name and rank points of the winner who won the most times.","pred":"SELECT winner_name, winner_rank_points\nFROM matches\nJOIN players ON matches.winner_id = players.player_id\nGROUP BY winner_id\nORDER BY COUNT(*) DESC\nLIMIT 1;","ground_truth":"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.458008762,"prompt_tokens":837,"response_tokens":39,"total_tokens":876},"sequence_num":463}
{"idx":539170536,"db_id":"wta_1","query":"What is the name of the winner who has won the most matches, and how many rank points does this player have?","pred":"SELECT winner_name, MAX(wins) AS max_wins\nFROM\n(SELECT winner_name, COUNT(*) AS wins\nFROM matches\nGROUP BY winner_name\nORDER BY wins DESC\nLIMIT 1) AS subquery;","ground_truth":"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.7507747550000001,"prompt_tokens":846,"response_tokens":46,"total_tokens":892},"sequence_num":464}
{"idx":1905089097,"db_id":"wta_1","query":"Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.","pred":"SELECT winner_name \nFROM matches \nWHERE tourney_name = 'Australian Open' \nORDER BY winner_rank_points DESC \nLIMIT 1;","ground_truth":"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.082644795,"prompt_tokens":843,"response_tokens":29,"total_tokens":872},"sequence_num":465}
{"idx":3008450002,"db_id":"wta_1","query":"What is the name of the winner with the most rank points who participated in the Australian Open tournament?","pred":"SELECT winner_name \nFROM matches \nWHERE tourney_name = 'Australian Open' \nORDER BY winner_rank_points DESC \nLIMIT 1;","ground_truth":"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.811008213,"prompt_tokens":842,"response_tokens":29,"total_tokens":871},"sequence_num":466}
{"idx":2737317790,"db_id":"wta_1","query":"find the names of loser and winner who played in the match with greatest number of minutes.","pred":"SELECT winner_name, loser_name\nFROM matches\nORDER BY minutes DESC\nLIMIT 1;","ground_truth":"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.80194445,"prompt_tokens":840,"response_tokens":20,"total_tokens":860},"sequence_num":467}
{"idx":2032209263,"db_id":"wta_1","query":"What are the names of the winner and loser who played in the longest match?","pred":"SELECT winner_name, loser_name\nFROM matches\nORDER BY minutes DESC\nLIMIT 1;","ground_truth":"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.263825003,"prompt_tokens":838,"response_tokens":20,"total_tokens":858},"sequence_num":468}
{"idx":398935790,"db_id":"wta_1","query":"Find the average ranking for each player and their first name.","pred":"SELECT first_name, AVG(ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;","ground_truth":"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e rankings.player_id\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n","metadata":{"execution_time":0.946792938,"prompt_tokens":834,"response_tokens":30,"total_tokens":864},"sequence_num":469}
{"idx":3995907607,"db_id":"wta_1","query":"What are the first names of all players, and their average rankings?","pred":"SELECT first_name, AVG(ranking) AS average_rankings FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;","ground_truth":"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.796098745,"prompt_tokens":836,"response_tokens":30,"total_tokens":866},"sequence_num":470}
{"idx":196403720,"db_id":"wta_1","query":"Find the total ranking points for each player and their first name.","pred":"SELECT players.player_id, players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;","ground_truth":"SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.094998556,"prompt_tokens":835,"response_tokens":67,"total_tokens":902},"sequence_num":471}
{"idx":4170740846,"db_id":"wta_1","query":"What are the first names of all players, and their total ranking points?","pred":"SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;","ground_truth":"SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e rankings.player_id\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n","metadata":{"execution_time":1.083582178,"prompt_tokens":837,"response_tokens":32,"total_tokens":869},"sequence_num":472}
{"idx":811433614,"db_id":"wta_1","query":"find the number of players for each country.","pred":"SELECT country_code, COUNT(DISTINCT player_id) AS player_count FROM players GROUP BY country_code;","ground_truth":"SELECT count(*) ,  country_code FROM players GROUP BY country_code","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.238799472,"prompt_tokens":831,"response_tokens":22,"total_tokens":853},"sequence_num":473}
{"idx":2185249401,"db_id":"wta_1","query":"How many players are from each country?","pred":"SELECT country_code, COUNT(DISTINCT player_id) AS player_count FROM players GROUP BY country_code;","ground_truth":"SELECT count(*) ,  country_code FROM players GROUP BY country_code","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.973048963,"prompt_tokens":830,"response_tokens":22,"total_tokens":852},"sequence_num":474}
{"idx":320118310,"db_id":"wta_1","query":"find the code of the country where has the greatest number of players.","pred":"SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.740911191,"prompt_tokens":836,"response_tokens":19,"total_tokens":855},"sequence_num":475}
{"idx":3642306941,"db_id":"wta_1","query":"What is the code of the country with the most players?","pred":"SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.754862514,"prompt_tokens":834,"response_tokens":19,"total_tokens":853},"sequence_num":476}
{"idx":3258188101,"db_id":"wta_1","query":"Find the codes of countries that have more than 50 players.","pred":"SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) \u003e 50;","ground_truth":"SELECT country_code FROM players GROUP BY country_code HAVING count(*)  \u003e  50","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.921728855,"prompt_tokens":835,"response_tokens":18,"total_tokens":853},"sequence_num":477}
{"idx":3983460236,"db_id":"wta_1","query":"What are the codes of countries with more than 50 players?","pred":"SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) \u003e 50;","ground_truth":"SELECT country_code FROM players GROUP BY country_code HAVING count(*)  \u003e  50","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.777295755,"prompt_tokens":835,"response_tokens":18,"total_tokens":853},"sequence_num":478}
{"idx":1153706643,"db_id":"wta_1","query":"Find the total number of tours for each ranking date.","pred":"SELECT ranking_date, SUM(tours) AS total_tours\nFROM rankings\nGROUP BY ranking_date;","ground_truth":"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.00691579,"prompt_tokens":833,"response_tokens":22,"total_tokens":855},"sequence_num":479}
{"idx":440205740,"db_id":"wta_1","query":"How many total tours were there for each ranking date?","pred":"SELECT ranking_date, SUM(tours) AS total_tours\nFROM rankings\nGROUP BY ranking_date;","ground_truth":"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.952176891,"prompt_tokens":833,"response_tokens":22,"total_tokens":855},"sequence_num":480}
{"idx":586008799,"db_id":"wta_1","query":"Find the number of matches happened in each year.","pred":"SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year;","ground_truth":"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.885436097,"prompt_tokens":832,"response_tokens":15,"total_tokens":847},"sequence_num":481}
{"idx":1118418742,"db_id":"wta_1","query":"How many matches were played in each year?","pred":"SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year;","ground_truth":"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e rankings.player_id\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n","metadata":{"execution_time":0.966366227,"prompt_tokens":831,"response_tokens":15,"total_tokens":846},"sequence_num":482}
{"idx":3919750490,"db_id":"wta_1","query":"Find the name and rank of the 3 youngest winners across all matches.","pred":"SELECT winner_name, winner_rank\nFROM matches\nORDER BY winner_age\nLIMIT 3;","ground_truth":"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.204361955,"prompt_tokens":837,"response_tokens":20,"total_tokens":857},"sequence_num":483}
{"idx":2378520827,"db_id":"wta_1","query":"What are the names and ranks of the three youngest winners across all matches?","pred":"SELECT winner_name, winner_rank\nFROM matches\nORDER BY winner_age\nLIMIT 3;","ground_truth":"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e rankings.player_id\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n","metadata":{"execution_time":0.788325152,"prompt_tokens":837,"response_tokens":20,"total_tokens":857},"sequence_num":484}
{"idx":1302685457,"db_id":"wta_1","query":"How many different winners both participated in the WTA Championships and were left handed?","pred":"SELECT COUNT(DISTINCT m.winner_id)\nFROM matches m\nWHERE m.tourney_name = 'WTA Championships' AND m.winner_hand = 'L';","ground_truth":"SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":0.894842815,"prompt_tokens":838,"response_tokens":35,"total_tokens":873},"sequence_num":485}
{"idx":4293990039,"db_id":"wta_1","query":"Find the number of left handed winners who participated in the WTA Championships.","pred":"SELECT COUNT(*) FROM players WHERE hand = 'L' AND player_id IN ( SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' );","ground_truth":"SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.486216738,"prompt_tokens":837,"response_tokens":68,"total_tokens":905},"sequence_num":486}
{"idx":1295755568,"db_id":"wta_1","query":"Find the first name, country code and birth date of the winner who has the highest rank points in all matches.","pred":"SELECT first_name, country_code, birth_date\nFROM players\nWHERE player_id = (SELECT winner_id\n                   FROM matches\n                   ORDER BY winner_rank_points DESC\n                   LIMIT 1);","ground_truth":"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.7476755590000002,"prompt_tokens":845,"response_tokens":40,"total_tokens":885},"sequence_num":487}
{"idx":3388394142,"db_id":"wta_1","query":"What is the first name, country code, and birth date of the player with the most winner rank points across all matches?","pred":"SELECT first_name, country_code, birth_date\nFROM players\nWHERE player_id = (SELECT player_id FROM rankings ORDER BY ranking_points DESC LIMIT 1);","ground_truth":"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e rankings.player_id\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n","metadata":{"execution_time":1.26804897,"prompt_tokens":847,"response_tokens":33,"total_tokens":880},"sequence_num":488}
{"idx":2455181081,"db_id":"wta_1","query":"Find the number of players for each hand type.","pred":"SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;","ground_truth":"SELECT count(*) ,  hand FROM players GROUP BY hand","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n  - players.player_id -\u003e rankings.player_id\n","metadata":{"execution_time":1.203093107,"prompt_tokens":832,"response_tokens":15,"total_tokens":847},"sequence_num":489}
{"idx":633887769,"db_id":"wta_1","query":"How many players are there for each hand type?","pred":"SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;","ground_truth":"SELECT count(*) ,  hand FROM players GROUP BY hand","is_correct":false,"db_schema":"数据库Schema信息:\n表名: players\n列:\n  - player_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - hand: text\n  - birth_date: time\n  - country_code: text\n\n表名: matches\n列:\n  - best_of: number\n  - draw_size: number\n  - loser_age: number\n  - loser_entry: text\n  - loser_hand: text\n  - loser_ht: number\n  - loser_id: number (外键)\n  - loser_ioc: text\n  - loser_name: text\n  - loser_rank: number\n  - loser_rank_points: number\n  - loser_seed: number\n  - match_num: number\n  - minutes: number\n  - round: text\n  - score: text\n  - surface: text\n  - tourney_date: time\n  - tourney_id: text\n  - tourney_level: text\n  - tourney_name: text\n  - winner_age: number\n  - winner_entry: text\n  - winner_hand: text\n  - winner_ht: number\n  - winner_id: number (外键)\n  - winner_ioc: text\n  - winner_name: text\n  - winner_rank: number\n  - winner_rank_points: number\n  - winner_seed: number\n  - year: number\n\n表名: rankings\n列:\n  - ranking_date: time\n  - ranking: number\n  - player_id: number (外键)\n  - ranking_points: number\n  - tours: number\n\n外键关系:\n  - players.player_id -\u003e rankings.player_id\n  - players.player_id -\u003e matches.winner_id\n  - players.player_id -\u003e matches.loser_id\n","metadata":{"execution_time":0.939727616,"prompt_tokens":832,"response_tokens":15,"total_tokens":847},"sequence_num":490}
{"idx":3914546954,"db_id":"battle_death","query":"How many ships ended up being 'Captured'?","pred":"SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';","ground_truth":"SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - ship.id -\u003e death.caused_by_ship_id\n  - battle.id -\u003e ship.lost_in_battle\n","metadata":{"execution_time":0.701780078,"prompt_tokens":651,"response_tokens":15,"total_tokens":666},"sequence_num":491}
{"idx":1294386681,"db_id":"battle_death","query":"List the name and tonnage ordered by in descending alphaetical order for the names.","pred":"SELECT name, tonnage FROM ship ORDER BY name DESC;","ground_truth":"SELECT name ,  tonnage FROM ship ORDER BY name DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - ship.id -\u003e death.caused_by_ship_id\n  - battle.id -\u003e ship.lost_in_battle\n","metadata":{"execution_time":0.644677536,"prompt_tokens":657,"response_tokens":13,"total_tokens":670},"sequence_num":492}
{"idx":4166529429,"db_id":"battle_death","query":"List the name, date and result of each battle.","pred":"SELECT name, date, result FROM battle;","ground_truth":"SELECT name ,  date FROM battle","is_correct":false,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - ship.id -\u003e death.caused_by_ship_id\n  - battle.id -\u003e ship.lost_in_battle\n","metadata":{"execution_time":0.636190427,"prompt_tokens":651,"response_tokens":10,"total_tokens":661},"sequence_num":493}
{"idx":2835920129,"db_id":"battle_death","query":"What is maximum and minimum death toll caused each time?","pred":"SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;","ground_truth":"SELECT max(killed) ,  min(killed) FROM death","is_correct":true,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - ship.id -\u003e death.caused_by_ship_id\n  - battle.id -\u003e ship.lost_in_battle\n","metadata":{"execution_time":1.358987082,"prompt_tokens":651,"response_tokens":24,"total_tokens":675},"sequence_num":494}
{"idx":2704569272,"db_id":"battle_death","query":"What is the average number of injuries caused each time?","pred":"SELECT AVG(injured) FROM death;","ground_truth":"SELECT avg(injured) FROM death","is_correct":true,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - battle.id -\u003e ship.lost_in_battle\n  - ship.id -\u003e death.caused_by_ship_id\n","metadata":{"execution_time":1.28096492,"prompt_tokens":651,"response_tokens":9,"total_tokens":660},"sequence_num":495}
{"idx":1345274123,"db_id":"battle_death","query":"What are the death and injury situations caused by the ship with tonnage 't'?","pred":"SELECT * FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't');","ground_truth":"SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - ship.id -\u003e death.caused_by_ship_id\n  - battle.id -\u003e ship.lost_in_battle\n","metadata":{"execution_time":0.969933194,"prompt_tokens":658,"response_tokens":23,"total_tokens":681},"sequence_num":496}
{"idx":1366127434,"db_id":"battle_death","query":"What are the name and results of the battles when the bulgarian commander is not 'Boril'","pred":"SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';","ground_truth":"SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - ship.id -\u003e death.caused_by_ship_id\n  - battle.id -\u003e ship.lost_in_battle\n","metadata":{"execution_time":0.904687912,"prompt_tokens":662,"response_tokens":19,"total_tokens":681},"sequence_num":497}
{"idx":664603459,"db_id":"battle_death","query":"What are the different ids and names of the battles that lost any 'Brig' type shipes?","pred":"SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig');","ground_truth":"SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - ship.id -\u003e death.caused_by_ship_id\n  - battle.id -\u003e ship.lost_in_battle\n","metadata":{"execution_time":1.009106436,"prompt_tokens":661,"response_tokens":26,"total_tokens":687},"sequence_num":498}
{"idx":1089290567,"db_id":"battle_death","query":"What are the ids and names of the battles that led to more than 10 people killed in total.","pred":"SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship GROUP BY lost_in_battle HAVING SUM(killed) \u003e 10);","ground_truth":"SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  \u003e  10","is_correct":false,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - ship.id -\u003e death.caused_by_ship_id\n  - battle.id -\u003e ship.lost_in_battle\n","metadata":{"execution_time":1.519082358,"prompt_tokens":661,"response_tokens":34,"total_tokens":695},"sequence_num":499}
{"idx":1295306706,"db_id":"battle_death","query":"What is the ship id and name that caused most total injuries?","pred":"SELECT caused_by_ship_id, name\nFROM death\nJOIN ship ON death.caused_by_ship_id = ship.id\nGROUP BY caused_by_ship_id, name\nORDER BY SUM(injured) DESC\nLIMIT 1;","ground_truth":"SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - ship.id -\u003e death.caused_by_ship_id\n  - battle.id -\u003e ship.lost_in_battle\n","metadata":{"execution_time":1.14933561,"prompt_tokens":653,"response_tokens":46,"total_tokens":699},"sequence_num":500}
{"idx":1291562601,"db_id":"battle_death","query":"What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?","pred":"SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';","ground_truth":"SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - ship.id -\u003e death.caused_by_ship_id\n  - battle.id -\u003e ship.lost_in_battle\n","metadata":{"execution_time":1.067411553,"prompt_tokens":668,"response_tokens":29,"total_tokens":697},"sequence_num":501}
{"idx":403159943,"db_id":"battle_death","query":"How many different results are there for the battles?","pred":"SELECT COUNT(DISTINCT result) FROM battle;","ground_truth":"SELECT count(DISTINCT RESULT) FROM battle","is_correct":true,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - ship.id -\u003e death.caused_by_ship_id\n  - battle.id -\u003e ship.lost_in_battle\n","metadata":{"execution_time":1.375416972,"prompt_tokens":650,"response_tokens":11,"total_tokens":661},"sequence_num":502}
{"idx":627855680,"db_id":"battle_death","query":"How many battles did not lose any ship with tonnage '225'?","pred":"SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225');","ground_truth":"SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );","is_correct":true,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - ship.id -\u003e death.caused_by_ship_id\n  - battle.id -\u003e ship.lost_in_battle\n","metadata":{"execution_time":0.92169109,"prompt_tokens":655,"response_tokens":25,"total_tokens":680},"sequence_num":503}
{"idx":3138612071,"db_id":"battle_death","query":"List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'","pred":"SELECT name, date\nFROM battle\nWHERE id IN (SELECT lost_in_battle FROM ship WHERE name = 'Lettice' OR name = 'HMS Atalanta');","ground_truth":"SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - ship.id -\u003e death.caused_by_ship_id\n  - battle.id -\u003e ship.lost_in_battle\n","metadata":{"execution_time":1.114539545,"prompt_tokens":669,"response_tokens":38,"total_tokens":707},"sequence_num":504}
{"idx":1601688809,"db_id":"battle_death","query":"Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.","pred":"SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel');","ground_truth":"SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - battle.id -\u003e ship.lost_in_battle\n  - ship.id -\u003e death.caused_by_ship_id\n","metadata":{"execution_time":0.844886691,"prompt_tokens":662,"response_tokens":32,"total_tokens":694},"sequence_num":505}
{"idx":3802962648,"db_id":"battle_death","query":"What are the notes of the death events which has substring 'East'?","pred":"SELECT note FROM death WHERE note LIKE '%East%';","ground_truth":"SELECT note FROM death WHERE note LIKE '%East%'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: battle\n列:\n  - id: number (主键)\n  - name: text\n  - date: text\n  - bulgarian_commander: text\n  - latin_commander: text\n  - result: text\n\n表名: ship\n列:\n  - lost_in_battle: number (外键)\n  - id: number (主键)\n  - name: text\n  - tonnage: text\n  - ship_type: text\n  - location: text\n  - disposition_of_ship: text\n\n表名: death\n列:\n  - caused_by_ship_id: number (外键)\n  - id: number (主键)\n  - note: text\n  - killed: number\n  - injured: number\n\n外键关系:\n  - ship.id -\u003e death.caused_by_ship_id\n  - battle.id -\u003e ship.lost_in_battle\n","metadata":{"execution_time":0.660418717,"prompt_tokens":655,"response_tokens":12,"total_tokens":667},"sequence_num":506}
{"idx":3349081415,"db_id":"student_transcripts_tracking","query":"what are all the addresses including line 1 and line 2?","pred":"SELECT line_1, line_2 FROM Addresses;","ground_truth":"SELECT line_1 ,  line_2 FROM addresses","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n","metadata":{"execution_time":1.300787891,"prompt_tokens":1212,"response_tokens":40,"total_tokens":1252},"sequence_num":507}
{"idx":3155460914,"db_id":"student_transcripts_tracking","query":"What is the first and second line for all addresses?","pred":"SELECT line_1, line_2 FROM Addresses;","ground_truth":"SELECT line_1 ,  line_2 FROM addresses","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n","metadata":{"execution_time":0.961909435,"prompt_tokens":1209,"response_tokens":12,"total_tokens":1221},"sequence_num":508}
{"idx":1557957595,"db_id":"student_transcripts_tracking","query":"How many courses in total are listed?","pred":"SELECT COUNT(*) FROM Courses;","ground_truth":"SELECT count(*) FROM Courses","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n","metadata":{"execution_time":0.957213706,"prompt_tokens":1206,"response_tokens":7,"total_tokens":1213},"sequence_num":509}
{"idx":1911749955,"db_id":"student_transcripts_tracking","query":"How many courses are there?","pred":"SELECT COUNT(*) AS course_count FROM Courses;","ground_truth":"SELECT count(*) FROM Courses","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n","metadata":{"execution_time":1.335127947,"prompt_tokens":1204,"response_tokens":37,"total_tokens":1241},"sequence_num":510}
{"idx":243121227,"db_id":"student_transcripts_tracking","query":"How is the math course described?","pred":"SELECT course_description FROM Courses WHERE course_name = 'Math';","ground_truth":"SELECT course_description FROM Courses WHERE course_name  =  'math'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n","metadata":{"execution_time":0.970491381,"prompt_tokens":1205,"response_tokens":13,"total_tokens":1218},"sequence_num":511}
{"idx":132772555,"db_id":"student_transcripts_tracking","query":"What are the descriptions for all the math courses?","pred":"SELECT course_description FROM Courses WHERE course_name LIKE '%MATH%';","ground_truth":"SELECT course_description FROM Courses WHERE course_name  =  'math'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n","metadata":{"execution_time":1.541627232,"prompt_tokens":1208,"response_tokens":50,"total_tokens":1258},"sequence_num":512}
{"idx":2893536410,"db_id":"student_transcripts_tracking","query":"What is the zip code of the address in the city Port Chelsea?","pred":"SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';","ground_truth":"SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":1.680928181,"prompt_tokens":1212,"response_tokens":62,"total_tokens":1274},"sequence_num":513}
{"idx":4033518486,"db_id":"student_transcripts_tracking","query":"What is the zip code for Port Chelsea?","pred":"SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';","ground_truth":"SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n","metadata":{"execution_time":0.940913931,"prompt_tokens":1207,"response_tokens":14,"total_tokens":1221},"sequence_num":514}
{"idx":3109038020,"db_id":"student_transcripts_tracking","query":"Which department offers the most number of degrees? List department name and id.","pred":"SELECT department_name, department_id FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY department_name, department_id ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n","metadata":{"execution_time":2.877867839,"prompt_tokens":1213,"response_tokens":143,"total_tokens":1356},"sequence_num":515}
{"idx":817351517,"db_id":"student_transcripts_tracking","query":"What is the name and id of the department with the most number of degrees ?","pred":"SELECT department_id, department_name\nFROM Departments\nWHERE department_id = (\n    SELECT department_id\n    FROM Degree_Programs\n    GROUP BY department_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);","ground_truth":"select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n","metadata":{"execution_time":2.07199837,"prompt_tokens":1214,"response_tokens":46,"total_tokens":1260},"sequence_num":516}
{"idx":1495560008,"db_id":"student_transcripts_tracking","query":"How many departments offer any degree?","pred":"SELECT COUNT(*) AS department_count FROM Departments;","ground_truth":"SELECT count(DISTINCT department_id) FROM Degree_Programs","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":2.005991105,"prompt_tokens":1205,"response_tokens":48,"total_tokens":1253},"sequence_num":517}
{"idx":1004195670,"db_id":"student_transcripts_tracking","query":"How many different departments offer degrees?","pred":"SELECT COUNT(DISTINCT department_id) AS department_count FROM Departments;","ground_truth":"SELECT count(DISTINCT department_id) FROM Degree_Programs","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n","metadata":{"execution_time":7.46698547,"prompt_tokens":1205,"response_tokens":49,"total_tokens":1254},"sequence_num":518}
{"idx":57327297,"db_id":"student_transcripts_tracking","query":"How many different degree names are offered?","pred":"SELECT COUNT(DISTINCT degree_summary_name) AS different_degree_names FROM Degree_Programs;","ground_truth":"SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n","metadata":{"execution_time":1.151745245,"prompt_tokens":1206,"response_tokens":19,"total_tokens":1225},"sequence_num":519}
{"idx":779423236,"db_id":"student_transcripts_tracking","query":"How many different degrees are offered?","pred":"SELECT COUNT(DISTINCT degree_program_id) AS number_of_degrees_offered FROM Degree_Programs;","ground_truth":"SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n","metadata":{"execution_time":1.443978205,"prompt_tokens":1205,"response_tokens":77,"total_tokens":1282},"sequence_num":520}
{"idx":2820510235,"db_id":"student_transcripts_tracking","query":"How many degrees does the engineering department offer?","pred":"SELECT COUNT(*) AS degree_count FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');","ground_truth":"SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":1.4020848,"prompt_tokens":1207,"response_tokens":63,"total_tokens":1270},"sequence_num":521}
{"idx":1054217247,"db_id":"student_transcripts_tracking","query":"How many degrees does the engineering department have?","pred":"SELECT COUNT(*) FROM DEGREE_PROGRAMS WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE DEPARTMENT_NAME = 'Engineering');","ground_truth":"SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n","metadata":{"execution_time":1.8516419229999999,"prompt_tokens":1207,"response_tokens":83,"total_tokens":1290},"sequence_num":522}
{"idx":1725732904,"db_id":"student_transcripts_tracking","query":"What are the names and descriptions of all the sections?","pred":"SELECT section_name, section_description FROM Sections;","ground_truth":"SELECT section_name ,  section_description FROM Sections","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":1.576264955,"prompt_tokens":1209,"response_tokens":10,"total_tokens":1219},"sequence_num":523}
{"idx":3864361278,"db_id":"student_transcripts_tracking","query":"What are the names and descriptions for all the sections?","pred":"SELECT section_name, section_description FROM Sections;","ground_truth":"SELECT section_name ,  section_description FROM Sections","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n","metadata":{"execution_time":1.069044881,"prompt_tokens":1209,"response_tokens":10,"total_tokens":1219},"sequence_num":524}
{"idx":3370811007,"db_id":"student_transcripts_tracking","query":"What are the names and id of courses having at most 2 sections?","pred":"SELECT course_id, course_name\nFROM Courses\nWHERE course_id IN (\n    SELECT course_id\n    FROM Sections\n    GROUP BY course_id\n    HAVING COUNT(*) \u003c= 2\n);","ground_truth":"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  \u003c=  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n","metadata":{"execution_time":1.174233351,"prompt_tokens":1213,"response_tokens":41,"total_tokens":1254},"sequence_num":525}
{"idx":3111412427,"db_id":"student_transcripts_tracking","query":"What are the names and ids of every course with less than 2 sections?","pred":"SELECT course_id, course_name FROM Courses\nWHERE course_id NOT IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) \u003e= 2);","ground_truth":"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  \u003c=  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n","metadata":{"execution_time":1.146033511,"prompt_tokens":1214,"response_tokens":33,"total_tokens":1247},"sequence_num":526}
{"idx":1761631725,"db_id":"student_transcripts_tracking","query":"List the section_name in reversed lexicographical order.","pred":"SELECT section_name FROM Sections ORDER BY section_name DESC;","ground_truth":"SELECT section_name FROM Sections ORDER BY section_name DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n","metadata":{"execution_time":1.072907745,"prompt_tokens":1209,"response_tokens":12,"total_tokens":1221},"sequence_num":527}
{"idx":2169906380,"db_id":"student_transcripts_tracking","query":"What are the names of the sections in reverse alphabetical order?","pred":"SELECT section_name FROM Sections ORDER BY section_name DESC;","ground_truth":"SELECT section_name FROM Sections ORDER BY section_name DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n","metadata":{"execution_time":1.261235815,"prompt_tokens":1210,"response_tokens":12,"total_tokens":1222},"sequence_num":528}
{"idx":502580056,"db_id":"student_transcripts_tracking","query":"What is the semester which most student registered in? Show both the name and the id.","pred":"SELECT semester_id, semester_name FROM Student_Enrolment GROUP BY semester_id, semester_name ORDER BY COUNT(student_id) DESC LIMIT 1;","ground_truth":"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n","metadata":{"execution_time":1.815621164,"prompt_tokens":1216,"response_tokens":69,"total_tokens":1285},"sequence_num":529}
{"idx":2340775764,"db_id":"student_transcripts_tracking","query":"For each semester, what is the name and id of the one with the most students registered?","pred":"SELECT semester_id, semester_name\nFROM Student_Enrolment\nGROUP BY semester_id, semester_name\nORDER BY COUNT(student_id) DESC\nLIMIT 1;","ground_truth":"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n","metadata":{"execution_time":1.712412186,"prompt_tokens":1217,"response_tokens":35,"total_tokens":1252},"sequence_num":530}
{"idx":3373864428,"db_id":"student_transcripts_tracking","query":"What is the description of the department whose name has the substring the computer?","pred":"SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%' LIMIT 1;","ground_truth":"SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n","metadata":{"execution_time":1.988962938,"prompt_tokens":1213,"response_tokens":92,"total_tokens":1305},"sequence_num":531}
{"idx":3718525212,"db_id":"student_transcripts_tracking","query":"What is the department description for the one whose name has the word computer?","pred":"SELECT department_description FROM Departments WHERE department_name LIKE '%COMPUTER%';","ground_truth":"SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n","metadata":{"execution_time":1.403559625,"prompt_tokens":1213,"response_tokens":16,"total_tokens":1229},"sequence_num":532}
{"idx":2350512277,"db_id":"student_transcripts_tracking","query":"Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.","pred":"SELECT s.first_name, s.middle_name, s.last_name, s.student_id\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id\nHAVING COUNT(DISTINCT se.degree_program_id) = 2\nAND COUNT(DISTINCT se.semester_id) = 1;","ground_truth":"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n","metadata":{"execution_time":2.302149454,"prompt_tokens":1224,"response_tokens":73,"total_tokens":1297},"sequence_num":533}
{"idx":1876740563,"db_id":"student_transcripts_tracking","query":"What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?","pred":"SELECT student_id, first_name, middle_name, last_name FROM Students WHERE student_id IN ( SELECT se1.student_id FROM Student_Enrolment se1 WHERE se1.semester_id IN ( SELECT semester_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 ) );","ground_truth":"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n","metadata":{"execution_time":2.581612028,"prompt_tokens":1228,"response_tokens":180,"total_tokens":1408},"sequence_num":534}
{"idx":58411120,"db_id":"student_transcripts_tracking","query":"Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.","pred":"SELECT first_name, middle_name, last_name FROM Students\nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\nJOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nWHERE Degree_Programs.degree_summary_name = 'Bachelor';","ground_truth":"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n","metadata":{"execution_time":1.457798168,"prompt_tokens":1218,"response_tokens":64,"total_tokens":1282},"sequence_num":535}
{"idx":449447637,"db_id":"student_transcripts_tracking","query":"What are the first, middle, and last names for everybody enrolled in a Bachelors program?","pred":"SELECT first_name, middle_name, last_name\nFROM Students\nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\nJOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nWHERE Degree_Programs.degree_summary_name = 'Bachelors';","ground_truth":"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n","metadata":{"execution_time":1.630148203,"prompt_tokens":1218,"response_tokens":67,"total_tokens":1285},"sequence_num":536}
{"idx":1421271321,"db_id":"student_transcripts_tracking","query":"Find the kind of program which most number of students are enrolled in?","pred":"SELECT degree_summary_name FROM Degree_Programs WHERE degree_program_id = ( SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1 );","ground_truth":"SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n","metadata":{"execution_time":1.9849806829999999,"prompt_tokens":1212,"response_tokens":118,"total_tokens":1330},"sequence_num":537}
{"idx":3804921472,"db_id":"student_transcripts_tracking","query":"What is the degree summary name that has the most number of students enrolled?","pred":"SELECT degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;","ground_truth":"SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":2.777923163,"prompt_tokens":1213,"response_tokens":139,"total_tokens":1352},"sequence_num":538}
{"idx":906690244,"db_id":"student_transcripts_tracking","query":"Find the program which most number of students are enrolled in. List both the id and the summary.","pred":"SELECT degree_program_id, degree_summary_name\nFROM Degree_Programs\nWHERE degree_program_id = (\n    SELECT degree_program_id\n    FROM Student_Enrolment\n    GROUP BY degree_program_id\n    ORDER BY COUNT(student_id) DESC\n    LIMIT 1\n);","ground_truth":"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n","metadata":{"execution_time":1.506071427,"prompt_tokens":1218,"response_tokens":57,"total_tokens":1275},"sequence_num":539}
{"idx":850706962,"db_id":"student_transcripts_tracking","query":"What is the program id and the summary of the degree that has the most students enrolled?","pred":"SELECT degree_program_id, degree_summary_name\nFROM Degree_Programs\nWHERE degree_program_id = (\n    SELECT degree_program_id\n    FROM Student_Enrolment\n    GROUP BY degree_program_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);","ground_truth":"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n","metadata":{"execution_time":1.266148427,"prompt_tokens":1216,"response_tokens":55,"total_tokens":1271},"sequence_num":540}
{"idx":2109078268,"db_id":"student_transcripts_tracking","query":"Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.","pred":"SELECT student_id, first_name, middle_name, last_name, COUNT(*) AS num_of_enrollments\nFROM Student_Enrolment\nJOIN Students ON Student_Enrolment.student_id = Students.student_id\nGROUP BY student_id, first_name, middle_name, last_name\nORDER BY num_of_enrollments DESC\nLIMIT 1;","ground_truth":"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":1.389468804,"prompt_tokens":1232,"response_tokens":72,"total_tokens":1304},"sequence_num":541}
{"idx":4082473722,"db_id":"student_transcripts_tracking","query":"What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?","pred":"SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.student_enrolment_id) AS enrollment_count FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY enrollment_count DESC LIMIT 1;","ground_truth":"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n","metadata":{"execution_time":2.106902182,"prompt_tokens":1230,"response_tokens":165,"total_tokens":1395},"sequence_num":542}
{"idx":2370417042,"db_id":"student_transcripts_tracking","query":"Which semesters do not have any student enrolled? List the semester name.","pred":"SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);","ground_truth":"SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n","metadata":{"execution_time":1.097879653,"prompt_tokens":1213,"response_tokens":23,"total_tokens":1236},"sequence_num":543}
{"idx":3875870326,"db_id":"student_transcripts_tracking","query":"What is the name of the semester with no students enrolled?","pred":"SELECT semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.semester_id IS NULL;","ground_truth":"SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n","metadata":{"execution_time":1.81444269,"prompt_tokens":1210,"response_tokens":104,"total_tokens":1314},"sequence_num":544}
{"idx":716056242,"db_id":"student_transcripts_tracking","query":"What are all the course names of the courses which ever have students enrolled in?","pred":"SELECT DISTINCT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses);","ground_truth":"SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n","metadata":{"execution_time":1.421279233,"prompt_tokens":1214,"response_tokens":24,"total_tokens":1238},"sequence_num":545}
{"idx":710084577,"db_id":"student_transcripts_tracking","query":"What are the names of all courses that have some students enrolled?","pred":"SELECT course_name FROM Courses WHERE course_id IN (SELECT DISTINCT course_id FROM Student_Enrolment_Courses);","ground_truth":"SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":1.390005168,"prompt_tokens":1211,"response_tokens":60,"total_tokens":1271},"sequence_num":546}
{"idx":3019170085,"db_id":"student_transcripts_tracking","query":"What's the name of the course with most number of enrollments?","pred":"SELECT course_name \nFROM Courses \nWHERE course_id = (\n    SELECT course_id \n    FROM Student_Enrolment_Courses \n    GROUP BY course_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n);","ground_truth":"SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":1.082060488,"prompt_tokens":1212,"response_tokens":47,"total_tokens":1259},"sequence_num":547}
{"idx":2728102466,"db_id":"student_transcripts_tracking","query":"What is the name of the course with the most students enrolled?","pred":"SELECT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n","metadata":{"execution_time":1.398714195,"prompt_tokens":1211,"response_tokens":81,"total_tokens":1292},"sequence_num":548}
{"idx":2284368077,"db_id":"student_transcripts_tracking","query":"Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.","pred":"SELECT last_name FROM Students\nWHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina')\nAND student_id NOT IN (SELECT student_id FROM Student_Enrolment);","ground_truth":"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":1.297793626,"prompt_tokens":1223,"response_tokens":44,"total_tokens":1267},"sequence_num":549}
{"idx":3444118487,"db_id":"student_transcripts_tracking","query":"What are the last name of the students who live in North Carolina but have not registered in any degree programs?","pred":"SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment);","ground_truth":"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":2.025787465,"prompt_tokens":1220,"response_tokens":150,"total_tokens":1370},"sequence_num":550}
{"idx":3287860980,"db_id":"student_transcripts_tracking","query":"Show the date and id of the transcript with at least 2 course results.","pred":"SELECT transcript_id, transcript_date\nFROM Transcripts\nWHERE transcript_id IN (\n    SELECT transcript_id\n    FROM Transcript_Contents\n    GROUP BY transcript_id\n    HAVING COUNT(DISTINCT student_course_id) \u003e= 2\n);","ground_truth":"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  \u003e=  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n","metadata":{"execution_time":1.0913836749999999,"prompt_tokens":1214,"response_tokens":50,"total_tokens":1264},"sequence_num":551}
{"idx":3422706176,"db_id":"student_transcripts_tracking","query":"What is the date and id of the transcript with at least 2 courses listed?","pred":"SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(student_course_id) \u003e= 2);","ground_truth":"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  \u003e=  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":0.82780193,"prompt_tokens":1215,"response_tokens":37,"total_tokens":1252},"sequence_num":552}
{"idx":4087183270,"db_id":"student_transcripts_tracking","query":"What is the phone number of the man with the first name Timmothy and the last name Ward?","pred":"SELECT cell_mobile_number \nFROM Students \nWHERE first_name = 'Timmothy' AND last_name = 'Ward';","ground_truth":"SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":1.262711412,"prompt_tokens":1219,"response_tokens":26,"total_tokens":1245},"sequence_num":553}
{"idx":3774185209,"db_id":"student_transcripts_tracking","query":"What is the mobile phone number of the student named Timmothy Ward ?","pred":"SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';","ground_truth":"select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n","metadata":{"execution_time":1.076875181,"prompt_tokens":1213,"response_tokens":24,"total_tokens":1237},"sequence_num":554}
{"idx":821190302,"db_id":"student_transcripts_tracking","query":"Who is the first student to register? List the first name, middle name and last name.","pred":"SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;","ground_truth":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":0.798145472,"prompt_tokens":1217,"response_tokens":21,"total_tokens":1238},"sequence_num":555}
{"idx":3811634505,"db_id":"student_transcripts_tracking","query":"What is the first, middle, and last name of the first student to register?","pred":"SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;","ground_truth":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":1.799713084,"prompt_tokens":1215,"response_tokens":21,"total_tokens":1236},"sequence_num":556}
{"idx":4105442765,"db_id":"student_transcripts_tracking","query":"Who is the earliest graduate of the school? List the first name, middle name and last name.","pred":"SELECT first_name, middle_name, last_name\nFROM Students\nWHERE date_left IS NOT NULL\nORDER BY date_left\nLIMIT 1;","ground_truth":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n","metadata":{"execution_time":1.088509997,"prompt_tokens":1218,"response_tokens":30,"total_tokens":1248},"sequence_num":557}
{"idx":1318258872,"db_id":"student_transcripts_tracking","query":"What is the first, middle, and last name of the earliest school graduate?","pred":"SELECT first_name, middle_name, last_name\nFROM Students\nWHERE student_id = (\n    SELECT student_id\n    FROM Student_Enrolment\n    ORDER BY date_first_registered\n    LIMIT 1\n);","ground_truth":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n","metadata":{"execution_time":1.570874271,"prompt_tokens":1214,"response_tokens":45,"total_tokens":1259},"sequence_num":558}
{"idx":1170610403,"db_id":"student_transcripts_tracking","query":"Whose permanent address is different from his or her current address? List his or her first name.","pred":"SELECT first_name FROM Students WHERE permanent_address_id \u003c\u003e current_address_id;","ground_truth":"SELECT first_name FROM Students WHERE current_address_id != permanent_address_id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":1.4269102949999999,"prompt_tokens":1218,"response_tokens":80,"total_tokens":1298},"sequence_num":559}
{"idx":159478645,"db_id":"student_transcripts_tracking","query":"What is the first name of the student whose permanent address is different from his or her current one?","pred":"SELECT first_name FROM Students WHERE permanent_address_id \u003c\u003e current_address_id;","ground_truth":"SELECT first_name FROM Students WHERE current_address_id != permanent_address_id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n","metadata":{"execution_time":1.334995629,"prompt_tokens":1218,"response_tokens":15,"total_tokens":1233},"sequence_num":560}
{"idx":3854863046,"db_id":"student_transcripts_tracking","query":"Which address holds the most number of students currently? List the address id and all lines.","pred":"SELECT address_id, line_1, line_2, line_3\nFROM Addresses\nWHERE address_id = (SELECT current_address_id\n                    FROM Students\n                    GROUP BY current_address_id\n                    ORDER BY COUNT(*) DESC\n                    LIMIT 1);","ground_truth":"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n","metadata":{"execution_time":1.196499662,"prompt_tokens":1216,"response_tokens":53,"total_tokens":1269},"sequence_num":561}
{"idx":2956118514,"db_id":"student_transcripts_tracking","query":"What is the id, line 1, and line 2 of the address with the most students?","pred":"SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1);","ground_truth":"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n","metadata":{"execution_time":1.464545149,"prompt_tokens":1219,"response_tokens":39,"total_tokens":1258},"sequence_num":562}
{"idx":1367644779,"db_id":"student_transcripts_tracking","query":"On average, when were the transcripts printed?","pred":"SELECT AVG(transcript_date) AS average_transcript_print_date FROM Transcripts;","ground_truth":"SELECT avg(transcript_date) FROM Transcripts","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n","metadata":{"execution_time":1.267219021,"prompt_tokens":1207,"response_tokens":51,"total_tokens":1258},"sequence_num":563}
{"idx":878402672,"db_id":"student_transcripts_tracking","query":"What is the average transcript date?","pred":"SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;","ground_truth":"SELECT avg(transcript_date) FROM Transcripts","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":1.154414305,"prompt_tokens":1205,"response_tokens":49,"total_tokens":1254},"sequence_num":564}
{"idx":1245898834,"db_id":"student_transcripts_tracking","query":"When is the first transcript released? List the date and details.","pred":"SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1;","ground_truth":"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n","metadata":{"execution_time":1.093383373,"prompt_tokens":1211,"response_tokens":18,"total_tokens":1229},"sequence_num":565}
{"idx":1589256748,"db_id":"student_transcripts_tracking","query":"What is the earliest date of a transcript release, and what details can you tell me?","pred":"SELECT MIN(transcript_date), other_details FROM Transcripts;","ground_truth":"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n","metadata":{"execution_time":0.873891296,"prompt_tokens":1216,"response_tokens":13,"total_tokens":1229},"sequence_num":566}
{"idx":2411280319,"db_id":"student_transcripts_tracking","query":"How many transcripts are released?","pred":"SELECT COUNT(*) FROM Transcripts;","ground_truth":"SELECT count(*) FROM Transcripts","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n","metadata":{"execution_time":0.738529367,"prompt_tokens":1204,"response_tokens":8,"total_tokens":1212},"sequence_num":567}
{"idx":2347513471,"db_id":"student_transcripts_tracking","query":"How many transcripts are listed?","pred":"SELECT COUNT(*) FROM Transcripts;","ground_truth":"SELECT count(*) FROM Transcripts","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":0.66185961,"prompt_tokens":1204,"response_tokens":8,"total_tokens":1212},"sequence_num":568}
{"idx":986406066,"db_id":"student_transcripts_tracking","query":"What is the last transcript release date?","pred":"SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;","ground_truth":"SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n","metadata":{"execution_time":0.975471151,"prompt_tokens":1206,"response_tokens":52,"total_tokens":1258},"sequence_num":569}
{"idx":218029619,"db_id":"student_transcripts_tracking","query":"When was the last transcript released?","pred":"SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts;","ground_truth":"SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n","metadata":{"execution_time":1.298950361,"prompt_tokens":1205,"response_tokens":57,"total_tokens":1262},"sequence_num":570}
{"idx":1236541187,"db_id":"student_transcripts_tracking","query":"How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.","pred":"SELECT COUNT(student_course_id) AS max_enrollment_count, student_course_id\nFROM Transcript_Contents\nGROUP BY student_course_id\nORDER BY max_enrollment_count DESC\nLIMIT 1;","ground_truth":"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":1.214002707,"prompt_tokens":1220,"response_tokens":40,"total_tokens":1260},"sequence_num":571}
{"idx":4011914580,"db_id":"student_transcripts_tracking","query":"What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?","pred":"SELECT course_id, student_course_id FROM Student_Enrolment_Courses GROUP BY course_id, student_course_id ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n","metadata":{"execution_time":1.401706486,"prompt_tokens":1222,"response_tokens":86,"total_tokens":1308},"sequence_num":572}
{"idx":1027056773,"db_id":"student_transcripts_tracking","query":"Show the date of the transcript which shows the least number of results, also list the id.","pred":"SELECT transcript_id, transcript_date FROM Transcripts GROUP BY transcript_id, transcript_date ORDER BY COUNT(*) ASC LIMIT 1;","ground_truth":"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n","metadata":{"execution_time":1.235669435,"prompt_tokens":1217,"response_tokens":26,"total_tokens":1243},"sequence_num":573}
{"idx":968720857,"db_id":"student_transcripts_tracking","query":"What is the date and id of the transcript with the least number of results?","pred":"SELECT transcript_id, transcript_date FROM Transcripts ORDER BY (SELECT COUNT(*) FROM Transcript_Contents WHERE Transcript_Contents.transcript_id = Transcripts.transcript_id) ASC LIMIT 1;","ground_truth":"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n","metadata":{"execution_time":1.1295895,"prompt_tokens":1214,"response_tokens":39,"total_tokens":1253},"sequence_num":574}
{"idx":156608723,"db_id":"student_transcripts_tracking","query":"Find the semester when both Master students and Bachelor students got enrolled in.","pred":"SELECT semester_id \nFROM Student_Enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Master')) \nAND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Bachelor')))\nGROUP BY semester_id;","ground_truth":"SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n","metadata":{"execution_time":1.546242714,"prompt_tokens":1212,"response_tokens":94,"total_tokens":1306},"sequence_num":575}
{"idx":2453947653,"db_id":"student_transcripts_tracking","query":"What is the id of the semester that had both Masters and Bachelors students enrolled?","pred":"SELECT semester_id\nFROM Student_Enrolment\nWHERE degree_program_id IN (\n    SELECT degree_program_id\n    FROM Degree_Programs\n    GROUP BY degree_program_id\n    HAVING COUNT(DISTINCT degree_summary_name) \u003e 1\n);","ground_truth":"SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":4.029283039,"prompt_tokens":1216,"response_tokens":53,"total_tokens":1269},"sequence_num":576}
{"idx":836849500,"db_id":"student_transcripts_tracking","query":"How many different addresses do the students currently live?","pred":"SELECT COUNT(DISTINCT current_address_id) FROM Students;","ground_truth":"SELECT count(DISTINCT current_address_id) FROM Students","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n","metadata":{"execution_time":0.87570045,"prompt_tokens":1208,"response_tokens":13,"total_tokens":1221},"sequence_num":577}
{"idx":1883975112,"db_id":"student_transcripts_tracking","query":"What are the different addresses that have students living there?","pred":"SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\nFROM Addresses\nWHERE address_id IN (SELECT current_address_id FROM Students) OR address_id IN (SELECT permanent_address_id FROM Students);","ground_truth":"SELECT count(DISTINCT current_address_id) FROM Students","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":1.207213658,"prompt_tokens":1209,"response_tokens":59,"total_tokens":1268},"sequence_num":578}
{"idx":3898855548,"db_id":"student_transcripts_tracking","query":"List all the student details in reversed lexicographical order.","pred":"SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;","ground_truth":"SELECT other_student_details FROM Students ORDER BY other_student_details DESC","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n","metadata":{"execution_time":1.489937411,"prompt_tokens":1210,"response_tokens":81,"total_tokens":1291},"sequence_num":579}
{"idx":1566197054,"db_id":"student_transcripts_tracking","query":"What other details can you tell me about students in reverse alphabetical order?","pred":"SELECT student_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC;","ground_truth":"SELECT other_student_details FROM Students ORDER BY other_student_details DESC","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":2.211648918,"prompt_tokens":1212,"response_tokens":111,"total_tokens":1323},"sequence_num":580}
{"idx":2177962248,"db_id":"student_transcripts_tracking","query":"Describe the section h.","pred":"SELECT * FROM Sections WHERE section_name = 'H';","ground_truth":"SELECT section_description FROM Sections WHERE section_name  =  'h'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":0.985274762,"prompt_tokens":1203,"response_tokens":12,"total_tokens":1215},"sequence_num":581}
{"idx":2231965385,"db_id":"student_transcripts_tracking","query":"What is the description for the section named h?","pred":"SELECT section_description FROM Sections WHERE section_name = 'H';","ground_truth":"SELECT section_description FROM Sections WHERE section_name  =  'h'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n","metadata":{"execution_time":0.918864823,"prompt_tokens":1208,"response_tokens":13,"total_tokens":1221},"sequence_num":582}
{"idx":145479691,"db_id":"student_transcripts_tracking","query":"Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .","pred":"SELECT first_name FROM Students WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';","ground_truth":"select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n","metadata":{"execution_time":1.336090964,"prompt_tokens":1224,"response_tokens":56,"total_tokens":1280},"sequence_num":583}
{"idx":3526103967,"db_id":"student_transcripts_tracking","query":"What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?","pred":"SELECT first_name FROM Students WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';","ground_truth":"select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Addresses\n列:\n  - address_id: number (主键)\n  - line_1: text\n  - line_2: text\n  - line_3: text\n  - city: text\n  - zip_postcode: text\n  - state_province_county: text\n  - country: text\n  - other_address_details: text\n\n表名: Courses\n列:\n  - course_id: number (主键)\n  - course_name: text\n  - course_description: text\n  - other_details: text\n\n表名: Departments\n列:\n  - department_id: number (主键)\n  - department_name: text\n  - department_description: text\n  - other_details: text\n\n表名: Degree_Programs\n列:\n  - degree_program_id: number (主键)\n  - department_id: number (外键)\n  - degree_summary_name: text\n  - degree_summary_description: text\n  - other_details: text\n\n表名: Sections\n列:\n  - section_id: number (主键)\n  - course_id: number (外键)\n  - section_name: text\n  - section_description: text\n  - other_details: text\n\n表名: Semesters\n列:\n  - semester_id: number (主键)\n  - semester_name: text\n  - semester_description: text\n  - other_details: text\n\n表名: Students\n列:\n  - student_id: number (主键)\n  - current_address_id: number (外键)\n  - permanent_address_id: number (外键)\n  - first_name: text\n  - middle_name: text\n  - last_name: text\n  - cell_mobile_number: text\n  - email_address: text\n  - ssn: text\n  - date_first_registered: time\n  - date_left: time\n  - other_student_details: text\n\n表名: Student_Enrolment\n列:\n  - student_enrolment_id: number (主键)\n  - degree_program_id: number (外键)\n  - semester_id: number (外键)\n  - student_id: number (外键)\n  - other_details: text\n\n表名: Student_Enrolment_Courses\n列:\n  - student_course_id: number (主键)\n  - course_id: number (外键)\n  - student_enrolment_id: number (外键)\n\n表名: Transcripts\n列:\n  - transcript_id: number (主键)\n  - transcript_date: time\n  - other_details: text\n\n表名: Transcript_Contents\n列:\n  - student_course_id: number (外键)\n  - transcript_id: number (外键)\n\n外键关系:\n  - Addresses.address_id -\u003e Students.permanent_address_id\n  - Addresses.address_id -\u003e Students.current_address_id\n  - Student_Enrolment_Courses.student_course_id -\u003e Transcript_Contents.student_course_id\n  - Transcripts.transcript_id -\u003e Transcript_Contents.transcript_id\n  - Degree_Programs.degree_program_id -\u003e Student_Enrolment.degree_program_id\n  - Students.student_id -\u003e Student_Enrolment.student_id\n  - Student_Enrolment.student_enrolment_id -\u003e Student_Enrolment_Courses.student_enrolment_id\n  - Semesters.semester_id -\u003e Student_Enrolment.semester_id\n  - Departments.department_id -\u003e Degree_Programs.department_id\n  - Courses.course_id -\u003e Sections.course_id\n  - Courses.course_id -\u003e Student_Enrolment_Courses.course_id\n","metadata":{"execution_time":1.643641299,"prompt_tokens":1223,"response_tokens":111,"total_tokens":1334},"sequence_num":584}
{"idx":2926618750,"db_id":"tvshow","query":"List the title of all cartoons in alphabetical order.","pred":"SELECT Title FROM Cartoon ORDER BY Title ASC;","ground_truth":"SELECT Title FROM Cartoon ORDER BY title","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.982084215,"prompt_tokens":703,"response_tokens":10,"total_tokens":713},"sequence_num":585}
{"idx":588372611,"db_id":"tvshow","query":"What are the titles of the cartoons sorted alphabetically?","pred":"SELECT Title FROM Cartoon ORDER BY Title;","ground_truth":"SELECT Title FROM Cartoon ORDER BY title","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.71871887,"prompt_tokens":704,"response_tokens":9,"total_tokens":713},"sequence_num":586}
{"idx":4242258901,"db_id":"tvshow","query":"List all cartoon directed by \"Ben Jones\".","pred":"SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';","ground_truth":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.789274213,"prompt_tokens":702,"response_tokens":13,"total_tokens":715},"sequence_num":587}
{"idx":710797653,"db_id":"tvshow","query":"What are the names of all cartoons directed by Ben Jones?","pred":"SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';","ground_truth":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.268055505,"prompt_tokens":705,"response_tokens":13,"total_tokens":718},"sequence_num":588}
{"idx":3168870118,"db_id":"tvshow","query":"How many cartoons were written by \"Joseph Kuhr\"?","pred":"SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';","ground_truth":"SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.95596542,"prompt_tokens":704,"response_tokens":15,"total_tokens":719},"sequence_num":589}
{"idx":3805920672,"db_id":"tvshow","query":"What is the number of cartoones written by Joseph Kuhr?","pred":"SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';","ground_truth":"SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.871960879,"prompt_tokens":707,"response_tokens":15,"total_tokens":722},"sequence_num":590}
{"idx":2081822027,"db_id":"tvshow","query":"list all cartoon titles and their directors ordered by their air date","pred":"SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;","ground_truth":"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.744001912,"prompt_tokens":706,"response_tokens":14,"total_tokens":720},"sequence_num":591}
{"idx":274705331,"db_id":"tvshow","query":"What is the name and directors of all the cartoons that are ordered by air date?","pred":"SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;","ground_truth":"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.777493458,"prompt_tokens":710,"response_tokens":14,"total_tokens":724},"sequence_num":592}
{"idx":4174107917,"db_id":"tvshow","query":"List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".","pred":"SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';","ground_truth":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.805422215,"prompt_tokens":711,"response_tokens":22,"total_tokens":733},"sequence_num":593}
{"idx":3442783772,"db_id":"tvshow","query":"What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?","pred":"SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';","ground_truth":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.747637823,"prompt_tokens":709,"response_tokens":22,"total_tokens":731},"sequence_num":594}
{"idx":3176697095,"db_id":"tvshow","query":"Which country has the most of TV Channels? List the country and number of TV Channels it has.","pred":"SELECT Country, COUNT(*) AS Number_of_TV_Channels\nFROM TV_Channel\nGROUP BY Country\nORDER BY Number_of_TV_Channels DESC\nLIMIT 1;","ground_truth":"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.113806416,"prompt_tokens":713,"response_tokens":34,"total_tokens":747},"sequence_num":595}
{"idx":4016201703,"db_id":"tvshow","query":"What is the country with the most number of TV Channels and how many does it have?","pred":"SELECT Country, COUNT(*) AS Channel_Count\nFROM TV_Channel\nGROUP BY Country\nORDER BY Channel_Count DESC\nLIMIT 1;","ground_truth":"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.871269335,"prompt_tokens":711,"response_tokens":28,"total_tokens":739},"sequence_num":596}
{"idx":3566750780,"db_id":"tvshow","query":"List the number of different series names and contents in the TV Channel table.","pred":"SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;","ground_truth":"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.707654292,"prompt_tokens":708,"response_tokens":19,"total_tokens":727},"sequence_num":597}
{"idx":2870699400,"db_id":"tvshow","query":"How many different series and contents are listed in the TV Channel table?","pred":"SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;","ground_truth":"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.721524772,"prompt_tokens":707,"response_tokens":19,"total_tokens":726},"sequence_num":598}
{"idx":2548655197,"db_id":"tvshow","query":"What is the content of TV Channel with serial name \"Sky Radio\"?","pred":"SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';","ground_truth":"SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e Cartoon.Channel\n  - TV_Channel.id -\u003e TV_series.Channel\n","metadata":{"execution_time":0.653201286,"prompt_tokens":707,"response_tokens":14,"total_tokens":721},"sequence_num":599}
{"idx":2479013951,"db_id":"tvshow","query":"What is the content of the series Sky Radio?","pred":"SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';","ground_truth":"SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.689328829,"prompt_tokens":703,"response_tokens":14,"total_tokens":717},"sequence_num":600}
{"idx":519065595,"db_id":"tvshow","query":"What is the Package Option of TV Channel with serial name \"Sky Radio\"?","pred":"SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';","ground_truth":"SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.960333583,"prompt_tokens":708,"response_tokens":16,"total_tokens":724},"sequence_num":601}
{"idx":565063758,"db_id":"tvshow","query":"What are the Package Options of the TV Channels whose series names are Sky Radio?","pred":"SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';","ground_truth":"SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.930719463,"prompt_tokens":709,"response_tokens":16,"total_tokens":725},"sequence_num":602}
{"idx":1981431862,"db_id":"tvshow","query":"How many TV Channel using language English?","pred":"SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';","ground_truth":"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.687521034,"prompt_tokens":701,"response_tokens":13,"total_tokens":714},"sequence_num":603}
{"idx":2824668615,"db_id":"tvshow","query":"How many TV Channels use the English language?","pred":"SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';","ground_truth":"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.406152982,"prompt_tokens":702,"response_tokens":13,"total_tokens":715},"sequence_num":604}
{"idx":195167639,"db_id":"tvshow","query":"List the language used least number of TV Channel. List language and number of TV Channel.","pred":"SELECT Language, COUNT(*) AS Number_of_TV_Channel\nFROM TV_Channel\nGROUP BY Language\nORDER BY Number_of_TV_Channel\nLIMIT 1;","ground_truth":"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.901860177,"prompt_tokens":711,"response_tokens":31,"total_tokens":742},"sequence_num":605}
{"idx":2850891106,"db_id":"tvshow","query":"What are the languages used by the least number of TV Channels and how many channels use it?","pred":"SELECT Language, COUNT(*) AS Channel_Count\nFROM TV_Channel\nGROUP BY Language\nORDER BY Channel_Count\nLIMIT 1;","ground_truth":"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.017496572,"prompt_tokens":712,"response_tokens":27,"total_tokens":739},"sequence_num":606}
{"idx":1646633051,"db_id":"tvshow","query":"List each language and the number of TV Channels using it.","pred":"SELECT Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Language;","ground_truth":"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.922471423,"prompt_tokens":705,"response_tokens":16,"total_tokens":721},"sequence_num":607}
{"idx":1858526861,"db_id":"tvshow","query":"For each language, list the number of TV Channels that use it.","pred":"SELECT Language, COUNT(*) AS Number_of_TV_Channels\nFROM TV_Channel\nGROUP BY Language;","ground_truth":"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e Cartoon.Channel\n  - TV_Channel.id -\u003e TV_series.Channel\n","metadata":{"execution_time":1.029274492,"prompt_tokens":707,"response_tokens":21,"total_tokens":728},"sequence_num":608}
{"idx":598493766,"db_id":"tvshow","query":"What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.","pred":"SELECT TV_Channel.series_name\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Title = 'The Rise of the Blue Beetle!';","ground_truth":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.043623852,"prompt_tokens":719,"response_tokens":34,"total_tokens":753},"sequence_num":609}
{"idx":2493483597,"db_id":"tvshow","query":"What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?","pred":"SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle');","ground_truth":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.744415362,"prompt_tokens":714,"response_tokens":26,"total_tokens":740},"sequence_num":610}
{"idx":297320019,"db_id":"tvshow","query":"List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".","pred":"SELECT Title \nFROM Cartoon \nWHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');","ground_truth":"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.850360314,"prompt_tokens":712,"response_tokens":24,"total_tokens":736},"sequence_num":611}
{"idx":399421162,"db_id":"tvshow","query":"What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?","pred":"SELECT Title \nFROM Cartoon \nWHERE Channel IN (SELECT id \n                  FROM TV_Channel \n                  WHERE series_name = 'Sky Radio');","ground_truth":"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.427902912,"prompt_tokens":716,"response_tokens":28,"total_tokens":744},"sequence_num":612}
{"idx":1894794867,"db_id":"tvshow","query":"List the Episode of all TV series sorted by rating.","pred":"SELECT Episode FROM TV_series ORDER BY Rating;","ground_truth":"SELECT Episode FROM TV_series ORDER BY rating","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.9721004629999999,"prompt_tokens":704,"response_tokens":10,"total_tokens":714},"sequence_num":613}
{"idx":130251971,"db_id":"tvshow","query":"What are all of the episodes ordered by ratings?","pred":"SELECT * FROM TV_series ORDER BY Rating;","ground_truth":"SELECT Episode FROM TV_series ORDER BY rating","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.4777769410000001,"prompt_tokens":703,"response_tokens":10,"total_tokens":713},"sequence_num":614}
{"idx":260168386,"db_id":"tvshow","query":"List top 3 highest Rating  TV series. List the TV series's Episode and Rating.","pred":"SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;","ground_truth":"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e Cartoon.Channel\n  - TV_Channel.id -\u003e TV_series.Channel\n","metadata":{"execution_time":0.966138067,"prompt_tokens":712,"response_tokens":16,"total_tokens":728},"sequence_num":615}
{"idx":3477443729,"db_id":"tvshow","query":"What are 3 most highly rated episodes in the TV series table and what were those ratings?","pred":"SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;","ground_truth":"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.905465756,"prompt_tokens":712,"response_tokens":16,"total_tokens":728},"sequence_num":616}
{"idx":1020558434,"db_id":"tvshow","query":"What is minimum and maximum share of TV series?","pred":"SELECT MIN(Share), MAX(Share) FROM TV_series;","ground_truth":"SELECT max(SHARE) , min(SHARE) FROM TV_series;","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.743134649,"prompt_tokens":703,"response_tokens":14,"total_tokens":717},"sequence_num":617}
{"idx":1922169872,"db_id":"tvshow","query":"What is the maximum and minimum share for the TV series?","pred":"SELECT MAX(Share), MIN(Share) FROM TV_series;","ground_truth":"SELECT max(SHARE) , min(SHARE) FROM TV_series;","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.784876054,"prompt_tokens":705,"response_tokens":14,"total_tokens":719},"sequence_num":618}
{"idx":2405318942,"db_id":"tvshow","query":"What is the air date of TV series with Episode \"A Love of a Lifetime\"?","pred":"SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';","ground_truth":"SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.98186467,"prompt_tokens":710,"response_tokens":17,"total_tokens":727},"sequence_num":619}
{"idx":749773015,"db_id":"tvshow","query":"When did the episode \"A Love of a Lifetime\" air?","pred":"SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';","ground_truth":"SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.778568761,"prompt_tokens":706,"response_tokens":17,"total_tokens":723},"sequence_num":620}
{"idx":1581337516,"db_id":"tvshow","query":"What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?","pred":"SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';","ground_truth":"SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.967561625,"prompt_tokens":709,"response_tokens":18,"total_tokens":727},"sequence_num":621}
{"idx":2731165341,"db_id":"tvshow","query":"What is the weekly rank for the episode \"A Love of a Lifetime\"?","pred":"SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';","ground_truth":"SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.908769577,"prompt_tokens":708,"response_tokens":18,"total_tokens":726},"sequence_num":622}
{"idx":1254962489,"db_id":"tvshow","query":"What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.","pred":"SELECT TV_Channel.series_name \nFROM TV_Channel \nJOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE TV_series.Episode = 'A Love of a Lifetime';","ground_truth":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.854043534,"prompt_tokens":718,"response_tokens":37,"total_tokens":755},"sequence_num":623}
{"idx":2312797040,"db_id":"tvshow","query":"What is the name of the series that has the episode \"A Love of a Lifetime\"?","pred":"SELECT series_name FROM TV_series WHERE Episode = 'A Love of a Lifetime';","ground_truth":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.948477568,"prompt_tokens":711,"response_tokens":17,"total_tokens":728},"sequence_num":624}
{"idx":3436524716,"db_id":"tvshow","query":"List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".","pred":"SELECT Episode \nFROM TV_series \nWHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');","ground_truth":"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.006390255,"prompt_tokens":712,"response_tokens":25,"total_tokens":737},"sequence_num":625}
{"idx":2366925144,"db_id":"tvshow","query":"What is the episode for the TV series named \"Sky Radio\"?","pred":"SELECT Episode FROM TV_series WHERE series_name = 'Sky Radio';","ground_truth":"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.615928073,"prompt_tokens":706,"response_tokens":14,"total_tokens":720},"sequence_num":626}
{"idx":2819038002,"db_id":"tvshow","query":"Find the number of cartoons directed by each of the listed directors.","pred":"SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;","ground_truth":"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.032770397,"prompt_tokens":706,"response_tokens":20,"total_tokens":726},"sequence_num":627}
{"idx":1953624808,"db_id":"tvshow","query":"How many cartoons did each director create?","pred":"SELECT Directed_by, COUNT(*) AS cartoon_count FROM Cartoon GROUP BY Directed_by;","ground_truth":"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.968221462,"prompt_tokens":701,"response_tokens":17,"total_tokens":718},"sequence_num":628}
{"idx":3874175071,"db_id":"tvshow","query":"Find the production code and channel of the most recently aired cartoon .","pred":"SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;","ground_truth":"select production_code ,  channel from cartoon order by original_air_date desc limit 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.987554558,"prompt_tokens":706,"response_tokens":18,"total_tokens":724},"sequence_num":629}
{"idx":319888083,"db_id":"tvshow","query":"What is the produdction code and channel of the most recent cartoon ?","pred":"SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;","ground_truth":"select production_code ,  channel from cartoon order by original_air_date desc limit 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e Cartoon.Channel\n  - TV_Channel.id -\u003e TV_series.Channel\n","metadata":{"execution_time":0.831738354,"prompt_tokens":708,"response_tokens":18,"total_tokens":726},"sequence_num":630}
{"idx":4179994528,"db_id":"tvshow","query":"Find the package choice and series name of the TV channel that has high definition TV.","pred":"SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes';","ground_truth":"SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.790269985,"prompt_tokens":710,"response_tokens":20,"total_tokens":730},"sequence_num":631}
{"idx":1780431276,"db_id":"tvshow","query":"What are the package options and the name of the series for the TV Channel that supports high definition TV?","pred":"SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes';","ground_truth":"SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.3045785460000001,"prompt_tokens":714,"response_tokens":20,"total_tokens":734},"sequence_num":632}
{"idx":3976273850,"db_id":"tvshow","query":"which countries' tv channels are playing some cartoon written by Todd Casey?","pred":"SELECT DISTINCT Country \nFROM TV_Channel \nWHERE id IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey');","ground_truth":"SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e Cartoon.Channel\n  - TV_Channel.id -\u003e TV_series.Channel\n","metadata":{"execution_time":1.429398527,"prompt_tokens":707,"response_tokens":25,"total_tokens":732},"sequence_num":633}
{"idx":2858252786,"db_id":"tvshow","query":"What are the countries that have cartoons on TV that were written by Todd Casey?","pred":"SELECT DISTINCT Country FROM TV_Channel\nWHERE id IN (SELECT id FROM Cartoon WHERE Written_by = 'Todd Casey');","ground_truth":"SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.18525778,"prompt_tokens":709,"response_tokens":24,"total_tokens":733},"sequence_num":634}
{"idx":3147283277,"db_id":"tvshow","query":"which countries' tv channels are not playing any cartoon written by Todd Casey?","pred":"SELECT DISTINCT Country \nFROM TV_Channel \nWHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey');","ground_truth":"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.749360803,"prompt_tokens":708,"response_tokens":26,"total_tokens":734},"sequence_num":635}
{"idx":1975273402,"db_id":"tvshow","query":"What are the countries that are not playing cartoons written by Todd Casey?","pred":"SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey');","ground_truth":"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.743137269,"prompt_tokens":707,"response_tokens":24,"total_tokens":731},"sequence_num":636}
{"idx":468353654,"db_id":"tvshow","query":"Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?","pred":"SELECT series_name, Country \nFROM TV_Channel \nWHERE id IN (\n    SELECT Channel \n    FROM Cartoon \n    WHERE Directed_by IN ('Ben Jones', 'Michael Chang')\n);","ground_truth":"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.054263407,"prompt_tokens":716,"response_tokens":37,"total_tokens":753},"sequence_num":637}
{"idx":1688466716,"db_id":"tvshow","query":"What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?","pred":"SELECT series_name, Country \nFROM TV_Channel \nWHERE id IN (\n    SELECT Channel \n    FROM Cartoon \n    WHERE Directed_by = 'Ben Jones'\n    INTERSECT\n    SELECT Channel \n    FROM Cartoon \n    WHERE Directed_by = 'Michael Chang'\n);","ground_truth":"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":2.040776549,"prompt_tokens":719,"response_tokens":55,"total_tokens":774},"sequence_num":638}
{"idx":4021383010,"db_id":"tvshow","query":"find the pixel aspect ratio and nation of the tv channels that do not use English.","pred":"SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language \u003c\u003e 'English';","ground_truth":"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.928730472,"prompt_tokens":710,"response_tokens":17,"total_tokens":727},"sequence_num":639}
{"idx":532979580,"db_id":"tvshow","query":"What is the pixel aspect ratio and country of origin for all TV channels that do not use English?","pred":"SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language \u003c\u003e 'English';","ground_truth":"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.906893721,"prompt_tokens":713,"response_tokens":17,"total_tokens":730},"sequence_num":640}
{"idx":3356146334,"db_id":"tvshow","query":"find id of the tv channels that from the countries where have more than two tv channels.","pred":"SELECT id \nFROM TV_Channel \nGROUP BY Country \nHAVING COUNT(id) \u003e 2;","ground_truth":"SELECT id FROM tv_channel GROUP BY country HAVING count(*)  \u003e  2","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e Cartoon.Channel\n  - TV_Channel.id -\u003e TV_series.Channel\n","metadata":{"execution_time":0.75236421,"prompt_tokens":711,"response_tokens":21,"total_tokens":732},"sequence_num":641}
{"idx":2170233480,"db_id":"tvshow","query":"What are the ids of all tv channels that have more than 2 TV channels?","pred":"SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) \u003e 2;","ground_truth":"SELECT id FROM tv_channel GROUP BY country HAVING count(*)  \u003e  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.779460558,"prompt_tokens":710,"response_tokens":17,"total_tokens":727},"sequence_num":642}
{"idx":2444950741,"db_id":"tvshow","query":"find the id of tv channels that do not play any cartoon directed by Ben Jones.","pred":"SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');","ground_truth":"SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.731632387,"prompt_tokens":710,"response_tokens":23,"total_tokens":733},"sequence_num":643}
{"idx":2659477260,"db_id":"tvshow","query":"What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?","pred":"SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');","ground_truth":"SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.768795297,"prompt_tokens":712,"response_tokens":23,"total_tokens":735},"sequence_num":644}
{"idx":3160503033,"db_id":"tvshow","query":"find the package option of the tv channel that do not have any cartoon directed by Ben Jones.","pred":"SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');","ground_truth":"SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')","is_correct":true,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":1.015668044,"prompt_tokens":712,"response_tokens":25,"total_tokens":737},"sequence_num":645}
{"idx":473875315,"db_id":"tvshow","query":"What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?","pred":"SELECT DISTINCT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');","ground_truth":"SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')","is_correct":false,"db_schema":"数据库Schema信息:\n表名: TV_Channel\n列:\n  - id: text (主键)\n  - series_name: text\n  - Country: text\n  - Language: text\n  - Content: text\n  - Pixel_aspect_ratio_PAR: text\n  - Hight_definition_TV: text\n  - Pay_per_view_PPV: text\n  - Package_Option: text\n\n表名: TV_series\n列:\n  - id: number (主键)\n  - Episode: text\n  - Air_Date: text\n  - Rating: text\n  - Share: number\n  - 18_49_Rating_Share: text\n  - Viewers_m: text\n  - Weekly_Rank: number\n  - Channel: text (外键)\n\n表名: Cartoon\n列:\n  - id: number (主键)\n  - Title: text\n  - Directed_by: text\n  - Written_by: text\n  - Original_air_date: text\n  - Production_code: number\n  - Channel: text (外键)\n\n外键关系:\n  - TV_Channel.id -\u003e TV_series.Channel\n  - TV_Channel.id -\u003e Cartoon.Channel\n","metadata":{"execution_time":0.777434369,"prompt_tokens":713,"response_tokens":26,"total_tokens":739},"sequence_num":646}
{"idx":443037242,"db_id":"poker_player","query":"How many poker players are there?","pred":"SELECT COUNT(*) FROM poker_player;","ground_truth":"SELECT count(*) FROM poker_player","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.667783574,"prompt_tokens":580,"response_tokens":8,"total_tokens":588},"sequence_num":647}
{"idx":959625768,"db_id":"poker_player","query":"Count the number of poker players.","pred":"SELECT COUNT(*) FROM poker_player;","ground_truth":"SELECT count(*) FROM poker_player","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":1.398128866,"prompt_tokens":580,"response_tokens":8,"total_tokens":588},"sequence_num":648}
{"idx":3692131666,"db_id":"poker_player","query":"List the earnings of poker players in descending order.","pred":"SELECT Earnings FROM poker_player ORDER BY Earnings DESC;","ground_truth":"SELECT Earnings FROM poker_player ORDER BY Earnings DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.91925893,"prompt_tokens":583,"response_tokens":13,"total_tokens":596},"sequence_num":649}
{"idx":3942377419,"db_id":"poker_player","query":"What are the earnings of poker players, ordered descending by value?","pred":"SELECT Earnings FROM poker_player ORDER BY Earnings DESC;","ground_truth":"SELECT Earnings FROM poker_player ORDER BY Earnings DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.654163397,"prompt_tokens":586,"response_tokens":13,"total_tokens":599},"sequence_num":650}
{"idx":96275097,"db_id":"poker_player","query":"List the final tables made and the best finishes of poker players.","pred":"SELECT Final_Table_Made, Best_Finish FROM poker_player;","ground_truth":"SELECT Final_Table_Made ,  Best_Finish FROM poker_player","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.693307907,"prompt_tokens":586,"response_tokens":14,"total_tokens":600},"sequence_num":651}
{"idx":3161352244,"db_id":"poker_player","query":"What are the final tables made and best finishes for all poker players?","pred":"SELECT Final_Table_Made, Best_Finish FROM poker_player;","ground_truth":"SELECT Final_Table_Made ,  Best_Finish FROM poker_player","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":3.506057791,"prompt_tokens":587,"response_tokens":14,"total_tokens":601},"sequence_num":652}
{"idx":49243173,"db_id":"poker_player","query":"What is the average earnings of poker players?","pred":"SELECT AVG(Earnings) FROM poker_player;","ground_truth":"SELECT avg(Earnings) FROM poker_player","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.704857155,"prompt_tokens":582,"response_tokens":10,"total_tokens":592},"sequence_num":653}
{"idx":2370197851,"db_id":"poker_player","query":"Return the average earnings across all poker players.","pred":"SELECT AVG(Earnings) FROM poker_player;","ground_truth":"SELECT avg(Earnings) FROM poker_player","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.671294834,"prompt_tokens":582,"response_tokens":10,"total_tokens":592},"sequence_num":654}
{"idx":1822220617,"db_id":"poker_player","query":"What is the money rank of the poker player with the highest earnings?","pred":"SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);","ground_truth":"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":1.374151187,"prompt_tokens":587,"response_tokens":22,"total_tokens":609},"sequence_num":655}
{"idx":88463736,"db_id":"poker_player","query":"Return the money rank of the player with the greatest earnings.","pred":"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;","ground_truth":"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.942823907,"prompt_tokens":585,"response_tokens":17,"total_tokens":602},"sequence_num":656}
{"idx":1943058155,"db_id":"poker_player","query":"What is the maximum number of final tables made among poker players with earnings less than 200000?","pred":"SELECT MAX(Final_Table_Made) \nFROM poker_player \nWHERE Earnings \u003c 200000;","ground_truth":"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  \u003c  200000","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":1.09067908,"prompt_tokens":593,"response_tokens":22,"total_tokens":615},"sequence_num":657}
{"idx":2494531793,"db_id":"poker_player","query":"Return the maximum final tables made across all poker players who have earnings below 200000.","pred":"SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings \u003c 200000;","ground_truth":"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  \u003c  200000","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.800237081,"prompt_tokens":591,"response_tokens":20,"total_tokens":611},"sequence_num":658}
{"idx":1641876897,"db_id":"poker_player","query":"What are the names of poker players?","pred":"SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;","ground_truth":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.932216084,"prompt_tokens":581,"response_tokens":20,"total_tokens":601},"sequence_num":659}
{"idx":2300773366,"db_id":"poker_player","query":"Return the names of all the poker players.","pred":"SELECT Name FROM people;","ground_truth":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID","is_correct":false,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":1.021261844,"prompt_tokens":582,"response_tokens":6,"total_tokens":588},"sequence_num":660}
{"idx":2169781955,"db_id":"poker_player","query":"What are the names of poker players whose earnings is higher than 300000?","pred":"SELECT Name FROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID\nWHERE Earnings \u003e 300000;","ground_truth":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  \u003e  300000","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":1.3057750289999999,"prompt_tokens":589,"response_tokens":29,"total_tokens":618},"sequence_num":661}
{"idx":3444840594,"db_id":"poker_player","query":"Give the names of poker players who have earnings above 300000.","pred":"SELECT Name \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nWHERE Earnings \u003e 300000;","ground_truth":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  \u003e  300000","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.813135329,"prompt_tokens":587,"response_tokens":30,"total_tokens":617},"sequence_num":662}
{"idx":2233792812,"db_id":"poker_player","query":"List the names of poker players ordered by the final tables made in ascending order.","pred":"SELECT people.Name\nFROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID\nORDER BY poker_player.Final_Table_Made ASC;","ground_truth":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.96795725,"prompt_tokens":589,"response_tokens":34,"total_tokens":623},"sequence_num":663}
{"idx":2352996982,"db_id":"poker_player","query":"What are the names of poker players, ordered ascending by the number of final tables they have made?","pred":"SELECT Name \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nORDER BY Final_Table_Made ASC;","ground_truth":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.882572758,"prompt_tokens":593,"response_tokens":30,"total_tokens":623},"sequence_num":664}
{"idx":390581884,"db_id":"poker_player","query":"What is the birth date of the poker player with the lowest earnings?","pred":"SELECT Birth_Date FROM people WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1);","ground_truth":"SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.785031944,"prompt_tokens":587,"response_tokens":26,"total_tokens":613},"sequence_num":665}
{"idx":4132447099,"db_id":"poker_player","query":"Return the birth date of the poker player with the lowest earnings.","pred":"SELECT Birth_Date FROM people WHERE People_ID = ( SELECT People_ID FROM poker_player ORDER BY Earnings LIMIT 1 );","ground_truth":"SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":3.033129275,"prompt_tokens":586,"response_tokens":75,"total_tokens":661},"sequence_num":666}
{"idx":384814800,"db_id":"poker_player","query":"What is the money rank of the tallest poker player?","pred":"SELECT Money_Rank\nFROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID\nORDER BY Height DESC\nLIMIT 1;","ground_truth":"SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.826053199,"prompt_tokens":584,"response_tokens":33,"total_tokens":617},"sequence_num":667}
{"idx":2972729537,"db_id":"poker_player","query":"Return the money rank of the poker player with the greatest height.","pred":"SELECT Money_Rank \nFROM poker_player \nWHERE People_ID = (SELECT People_ID \n                   FROM people \n                   ORDER BY Height DESC \n                   LIMIT 1);","ground_truth":"SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.851951327,"prompt_tokens":586,"response_tokens":34,"total_tokens":620},"sequence_num":668}
{"idx":2561836640,"db_id":"poker_player","query":"What is the average earnings of poker players with height higher than 200?","pred":"SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height \u003e 200;","ground_truth":"SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  \u003e  200","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.80386579,"prompt_tokens":588,"response_tokens":28,"total_tokens":616},"sequence_num":669}
{"idx":2285569545,"db_id":"poker_player","query":"Give average earnings of poker players who are taller than 200.","pred":"SELECT AVG(Earnings) AS Average_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height \u003e 200;","ground_truth":"SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  \u003e  200","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":2.402039613,"prompt_tokens":586,"response_tokens":58,"total_tokens":644},"sequence_num":670}
{"idx":1997001518,"db_id":"poker_player","query":"What are the names of poker players in descending order of earnings?","pred":"SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings DESC;","ground_truth":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.757496606,"prompt_tokens":586,"response_tokens":25,"total_tokens":611},"sequence_num":671}
{"idx":984704261,"db_id":"poker_player","query":"Return the names of poker players sorted by their earnings descending.","pred":"SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings DESC;","ground_truth":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.939412392,"prompt_tokens":585,"response_tokens":25,"total_tokens":610},"sequence_num":672}
{"idx":3018654239,"db_id":"poker_player","query":"What are different nationalities of people and the corresponding number of people from each nation?","pred":"SELECT Nationality, COUNT(*) AS People_Count FROM people GROUP BY Nationality;","ground_truth":"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.771344209,"prompt_tokens":590,"response_tokens":17,"total_tokens":607},"sequence_num":673}
{"idx":1133018068,"db_id":"poker_player","query":"How many people are there of each nationality?","pred":"SELECT Nationality, COUNT(*) AS People_Count FROM people GROUP BY Nationality;","ground_truth":"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":1.237601597,"prompt_tokens":582,"response_tokens":59,"total_tokens":641},"sequence_num":674}
{"idx":3401299615,"db_id":"poker_player","query":"What is the most common nationality of people?","pred":"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.792882422,"prompt_tokens":582,"response_tokens":19,"total_tokens":601},"sequence_num":675}
{"idx":1395586819,"db_id":"poker_player","query":"Give the nationality that is most common across all people.","pred":"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":1.422873157,"prompt_tokens":584,"response_tokens":19,"total_tokens":603},"sequence_num":676}
{"idx":2330752993,"db_id":"poker_player","query":"What are the nationalities that are shared by at least two people?","pred":"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) \u003e= 2;","ground_truth":"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  \u003e=  2","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.997018554,"prompt_tokens":587,"response_tokens":18,"total_tokens":605},"sequence_num":677}
{"idx":2270567945,"db_id":"poker_player","query":"Return the nationalities for which there are two or more people.","pred":"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) \u003e= 2;","ground_truth":"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  \u003e=  2","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":1.29426507,"prompt_tokens":586,"response_tokens":18,"total_tokens":604},"sequence_num":678}
{"idx":1689143476,"db_id":"poker_player","query":"List the names and birth dates of people in ascending alphabetical order of name.","pred":"SELECT Name, Birth_Date FROM people ORDER BY Name ASC;","ground_truth":"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":1.443749783,"prompt_tokens":588,"response_tokens":13,"total_tokens":601},"sequence_num":679}
{"idx":1337852231,"db_id":"poker_player","query":"What are the names and birth dates of people, ordered by their names in alphabetical order?","pred":"SELECT Name, Birth_Date FROM people ORDER BY Name;","ground_truth":"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.977720706,"prompt_tokens":591,"response_tokens":12,"total_tokens":603},"sequence_num":680}
{"idx":2534148938,"db_id":"poker_player","query":"Show names of people whose nationality is not \"Russia\".","pred":"SELECT Name \nFROM people \nWHERE Nationality \u003c\u003e 'Russia';","ground_truth":"SELECT Name FROM people WHERE Nationality != \"Russia\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":2.338087366,"prompt_tokens":584,"response_tokens":14,"total_tokens":598},"sequence_num":681}
{"idx":1206050797,"db_id":"poker_player","query":"What are the names of people who are not from Russia?","pred":"SELECT Name \nFROM people \nWHERE Nationality \u003c\u003e 'Russia';","ground_truth":"SELECT Name FROM people WHERE Nationality != \"Russia\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.797057532,"prompt_tokens":585,"response_tokens":14,"total_tokens":599},"sequence_num":682}
{"idx":2024965879,"db_id":"poker_player","query":"List the names of people that are not poker players.","pred":"SELECT Name \nFROM people \nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);","ground_truth":"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.732361027,"prompt_tokens":584,"response_tokens":20,"total_tokens":604},"sequence_num":683}
{"idx":1170339478,"db_id":"poker_player","query":"What are the names of people who do not play poker?","pred":"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);","ground_truth":"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.766043498,"prompt_tokens":585,"response_tokens":18,"total_tokens":603},"sequence_num":684}
{"idx":2844230323,"db_id":"poker_player","query":"How many distinct nationalities are there?","pred":"SELECT COUNT(DISTINCT Nationality) FROM people;","ground_truth":"SELECT count(DISTINCT Nationality) FROM people","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":0.90947963,"prompt_tokens":581,"response_tokens":12,"total_tokens":593},"sequence_num":685}
{"idx":1995909568,"db_id":"poker_player","query":"Count the number of different nationalities.","pred":"SELECT COUNT(DISTINCT Nationality) AS Number_of_Nationalities FROM people;","ground_truth":"SELECT count(DISTINCT Nationality) FROM people","is_correct":true,"db_schema":"数据库Schema信息:\n表名: poker_player\n列:\n  - Poker_Player_ID: number (主键)\n  - People_ID: number (外键)\n  - Final_Table_Made: number\n  - Best_Finish: number\n  - Money_Rank: number\n  - Earnings: number\n\n表名: people\n列:\n  - People_ID: number (主键)\n  - Nationality: text\n  - Name: text\n  - Birth_Date: text\n  - Height: number\n\n外键关系:\n  - poker_player.People_ID -\u003e people.People_ID\n","metadata":{"execution_time":1.177407463,"prompt_tokens":581,"response_tokens":18,"total_tokens":599},"sequence_num":686}
{"idx":48530420,"db_id":"voter_1","query":"How many states are there?","pred":"SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;","ground_truth":"SELECT count(*) FROM area_code_state","is_correct":false,"db_schema":"数据库Schema信息:\n表名: AREA_CODE_STATE\n列:\n  - area_code: number (主键)\n  - state: text\n\n表名: CONTESTANTS\n列:\n  - contestant_number: number (主键)\n  - contestant_name: text\n\n表名: VOTES\n列:\n  - vote_id: number (主键)\n  - phone_number: number\n  - state: text (外键)\n  - contestant_number: number (外键)\n  - created: time\n\n外键关系:\n  - AREA_CODE_STATE.state -\u003e VOTES.state\n  - CONTESTANTS.contestant_number -\u003e VOTES.contestant_number\n","metadata":{"execution_time":0.905387266,"prompt_tokens":591,"response_tokens":13,"total_tokens":604},"sequence_num":687}
{"idx":2772573657,"db_id":"voter_1","query":"List the contestant numbers and names, ordered by contestant name descending.","pred":"SELECT contestant_number, contestant_name\nFROM CONTESTANTS\nORDER BY contestant_name DESC;","ground_truth":"SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: AREA_CODE_STATE\n列:\n  - area_code: number (主键)\n  - state: text\n\n表名: CONTESTANTS\n列:\n  - contestant_number: number (主键)\n  - contestant_name: text\n\n表名: VOTES\n列:\n  - vote_id: number (主键)\n  - phone_number: number\n  - state: text (外键)\n  - contestant_number: number (外键)\n  - created: time\n\n外键关系:\n  - CONTESTANTS.contestant_number -\u003e VOTES.contestant_number\n  - AREA_CODE_STATE.state -\u003e VOTES.state\n","metadata":{"execution_time":1.082763671,"prompt_tokens":598,"response_tokens":19,"total_tokens":617},"sequence_num":688}
{"idx":595595847,"db_id":"voter_1","query":"List the vote ids, phone numbers and states of all votes.","pred":"SELECT vote_id, phone_number, state FROM VOTES;","ground_truth":"SELECT vote_id ,  phone_number ,  state FROM votes","is_correct":true,"db_schema":"数据库Schema信息:\n表名: AREA_CODE_STATE\n列:\n  - area_code: number (主键)\n  - state: text\n\n表名: CONTESTANTS\n列:\n  - contestant_number: number (主键)\n  - contestant_name: text\n\n表名: VOTES\n列:\n  - vote_id: number (主键)\n  - phone_number: number\n  - state: text (外键)\n  - contestant_number: number (外键)\n  - created: time\n\n外键关系:\n  - CONTESTANTS.contestant_number -\u003e VOTES.contestant_number\n  - AREA_CODE_STATE.state -\u003e VOTES.state\n","metadata":{"execution_time":0.850169089,"prompt_tokens":598,"response_tokens":13,"total_tokens":611},"sequence_num":689}
{"idx":3465082799,"db_id":"voter_1","query":"What are the maximum and minimum values of area codes?","pred":"SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;","ground_truth":"SELECT max(area_code) ,  min(area_code) FROM area_code_state","is_correct":true,"db_schema":"数据库Schema信息:\n表名: AREA_CODE_STATE\n列:\n  - area_code: number (主键)\n  - state: text\n\n表名: CONTESTANTS\n列:\n  - contestant_number: number (主键)\n  - contestant_name: text\n\n表名: VOTES\n列:\n  - vote_id: number (主键)\n  - phone_number: number\n  - state: text (外键)\n  - contestant_number: number (外键)\n  - created: time\n\n外键关系:\n  - CONTESTANTS.contestant_number -\u003e VOTES.contestant_number\n  - AREA_CODE_STATE.state -\u003e VOTES.state\n","metadata":{"execution_time":1.642761867,"prompt_tokens":596,"response_tokens":15,"total_tokens":611},"sequence_num":690}
{"idx":1721563087,"db_id":"voter_1","query":"What is last date created of votes from the state 'CA'?","pred":"SELECT MAX(created) FROM VOTES WHERE state = 'CA';","ground_truth":"SELECT max(created) FROM votes WHERE state  =  'CA'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: AREA_CODE_STATE\n列:\n  - area_code: number (主键)\n  - state: text\n\n表名: CONTESTANTS\n列:\n  - contestant_number: number (主键)\n  - contestant_name: text\n\n表名: VOTES\n列:\n  - vote_id: number (主键)\n  - phone_number: number\n  - state: text (外键)\n  - contestant_number: number (外键)\n  - created: time\n\n外键关系:\n  - CONTESTANTS.contestant_number -\u003e VOTES.contestant_number\n  - AREA_CODE_STATE.state -\u003e VOTES.state\n","metadata":{"execution_time":0.976269996,"prompt_tokens":599,"response_tokens":14,"total_tokens":613},"sequence_num":691}
{"idx":2547225586,"db_id":"voter_1","query":"What are the names of the contestants whose names are not 'Jessie Alloway'","pred":"SELECT contestant_name FROM CONTESTANTS WHERE contestant_name \u003c\u003e 'Jessie Alloway';","ground_truth":"SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: AREA_CODE_STATE\n列:\n  - area_code: number (主键)\n  - state: text\n\n表名: CONTESTANTS\n列:\n  - contestant_number: number (主键)\n  - contestant_name: text\n\n表名: VOTES\n列:\n  - vote_id: number (主键)\n  - phone_number: number\n  - state: text (外键)\n  - contestant_number: number (外键)\n  - created: time\n\n外键关系:\n  - CONTESTANTS.contestant_number -\u003e VOTES.contestant_number\n  - AREA_CODE_STATE.state -\u003e VOTES.state\n","metadata":{"execution_time":0.908543087,"prompt_tokens":602,"response_tokens":18,"total_tokens":620},"sequence_num":692}
{"idx":551473141,"db_id":"voter_1","query":"What are the distinct states and create time of all votes?","pred":"SELECT DISTINCT state, created FROM VOTES;","ground_truth":"SELECT DISTINCT state ,  created FROM votes","is_correct":true,"db_schema":"数据库Schema信息:\n表名: AREA_CODE_STATE\n列:\n  - area_code: number (主键)\n  - state: text\n\n表名: CONTESTANTS\n列:\n  - contestant_number: number (主键)\n  - contestant_name: text\n\n表名: VOTES\n列:\n  - vote_id: number (主键)\n  - phone_number: number\n  - state: text (外键)\n  - contestant_number: number (外键)\n  - created: time\n\n外键关系:\n  - CONTESTANTS.contestant_number -\u003e VOTES.contestant_number\n  - AREA_CODE_STATE.state -\u003e VOTES.state\n","metadata":{"execution_time":0.638721583,"prompt_tokens":597,"response_tokens":10,"total_tokens":607},"sequence_num":693}
{"idx":3374456140,"db_id":"voter_1","query":"What are the contestant numbers and names of the contestants who had at least two votes?","pred":"SELECT contestant_number, contestant_name\nFROM CONTESTANTS\nWHERE contestant_number IN (\n    SELECT contestant_number\n    FROM VOTES\n    GROUP BY contestant_number\n    HAVING COUNT(*) \u003e= 2\n);","ground_truth":"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  \u003e=  2","is_correct":true,"db_schema":"数据库Schema信息:\n表名: AREA_CODE_STATE\n列:\n  - area_code: number (主键)\n  - state: text\n\n表名: CONTESTANTS\n列:\n  - contestant_number: number (主键)\n  - contestant_name: text\n\n表名: VOTES\n列:\n  - vote_id: number (主键)\n  - phone_number: number\n  - state: text (外键)\n  - contestant_number: number (外键)\n  - created: time\n\n外键关系:\n  - CONTESTANTS.contestant_number -\u003e VOTES.contestant_number\n  - AREA_CODE_STATE.state -\u003e VOTES.state\n","metadata":{"execution_time":1.393448721,"prompt_tokens":602,"response_tokens":44,"total_tokens":646},"sequence_num":694}
{"idx":3656967152,"db_id":"voter_1","query":"Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?","pred":"SELECT contestant_number, contestant_name\nFROM contestants\nWHERE contestant_number = (\n    SELECT contestant_number\n    FROM votes\n    GROUP BY contestant_number\n    ORDER BY COUNT(*) ASC\n    LIMIT 1\n);","ground_truth":"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: AREA_CODE_STATE\n列:\n  - area_code: number (主键)\n  - state: text\n\n表名: CONTESTANTS\n列:\n  - contestant_number: number (主键)\n  - contestant_name: text\n\n表名: VOTES\n列:\n  - vote_id: number (主键)\n  - phone_number: number\n  - state: text (外键)\n  - contestant_number: number (外键)\n  - created: time\n\n外键关系:\n  - CONTESTANTS.contestant_number -\u003e VOTES.contestant_number\n  - AREA_CODE_STATE.state -\u003e VOTES.state\n","metadata":{"execution_time":1.143499084,"prompt_tokens":608,"response_tokens":44,"total_tokens":652},"sequence_num":695}
{"idx":1736168038,"db_id":"voter_1","query":"What are the number of votes from state 'NY' or 'CA'?","pred":"SELECT COUNT(*) AS number_of_votes FROM VOTES WHERE state = 'NY' OR state = 'CA';","ground_truth":"SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: AREA_CODE_STATE\n列:\n  - area_code: number (主键)\n  - state: text\n\n表名: CONTESTANTS\n列:\n  - contestant_number: number (主键)\n  - contestant_name: text\n\n表名: VOTES\n列:\n  - vote_id: number (主键)\n  - phone_number: number\n  - state: text (外键)\n  - contestant_number: number (外键)\n  - created: time\n\n外键关系:\n  - CONTESTANTS.contestant_number -\u003e VOTES.contestant_number\n  - AREA_CODE_STATE.state -\u003e VOTES.state\n","metadata":{"execution_time":1.032782115,"prompt_tokens":601,"response_tokens":23,"total_tokens":624},"sequence_num":696}
{"idx":3427540622,"db_id":"voter_1","query":"How many contestants did not get voted?","pred":"SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES);","ground_truth":"SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )","is_correct":true,"db_schema":"数据库Schema信息:\n表名: AREA_CODE_STATE\n列:\n  - area_code: number (主键)\n  - state: text\n\n表名: CONTESTANTS\n列:\n  - contestant_number: number (主键)\n  - contestant_name: text\n\n表名: VOTES\n列:\n  - vote_id: number (主键)\n  - phone_number: number\n  - state: text (外键)\n  - contestant_number: number (外键)\n  - created: time\n\n外键关系:\n  - CONTESTANTS.contestant_number -\u003e VOTES.contestant_number\n  - AREA_CODE_STATE.state -\u003e VOTES.state\n","metadata":{"execution_time":0.805107263,"prompt_tokens":593,"response_tokens":21,"total_tokens":614},"sequence_num":697}
{"idx":2713638753,"db_id":"voter_1","query":"What is the area code in which the most voters voted?","pred":"SELECT area_code \nFROM AREA_CODE_STATE \nJOIN VOTES ON AREA_CODE_STATE.state = VOTES.state \nGROUP BY area_code \nORDER BY COUNT(*) DESC \nLIMIT 1;","ground_truth":"SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: AREA_CODE_STATE\n列:\n  - area_code: number (主键)\n  - state: text\n\n表名: CONTESTANTS\n列:\n  - contestant_number: number (主键)\n  - contestant_name: text\n\n表名: VOTES\n列:\n  - vote_id: number (主键)\n  - phone_number: number\n  - state: text (外键)\n  - contestant_number: number (外键)\n  - created: time\n\n外键关系:\n  - CONTESTANTS.contestant_number -\u003e VOTES.contestant_number\n  - AREA_CODE_STATE.state -\u003e VOTES.state\n","metadata":{"execution_time":1.738319697,"prompt_tokens":597,"response_tokens":38,"total_tokens":635},"sequence_num":698}
{"idx":1072045374,"db_id":"voter_1","query":"What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?","pred":"SELECT created, state, phone_number FROM VOTES\nJOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number\nWHERE contestant_name = 'Tabatha Gehling';","ground_truth":"SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: AREA_CODE_STATE\n列:\n  - area_code: number (主键)\n  - state: text\n\n表名: CONTESTANTS\n列:\n  - contestant_number: number (主键)\n  - contestant_name: text\n\n表名: VOTES\n列:\n  - vote_id: number (主键)\n  - phone_number: number\n  - state: text (外键)\n  - contestant_number: number (外键)\n  - created: time\n\n外键关系:\n  - CONTESTANTS.contestant_number -\u003e VOTES.contestant_number\n  - AREA_CODE_STATE.state -\u003e VOTES.state\n","metadata":{"execution_time":2.1434082070000002,"prompt_tokens":612,"response_tokens":42,"total_tokens":654},"sequence_num":699}
{"idx":4145426987,"db_id":"voter_1","query":"List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.","pred":"SELECT area_code\nFROM AREA_CODE_STATE\nWHERE state IN (\n    SELECT state\n    FROM VOTES\n    JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number\n    WHERE contestant_name = 'Tabatha Gehling'\n)\nAND area_code IN (\n    SELECT area_code\n    FROM AREA_CODE_STATE\n    WHERE state IN (\n        SELECT state\n        FROM VOTES\n        JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number\n        WHERE contestant_name = 'Kelly Clauss'\n    )\n);","ground_truth":"SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: AREA_CODE_STATE\n列:\n  - area_code: number (主键)\n  - state: text\n\n表名: CONTESTANTS\n列:\n  - contestant_number: number (主键)\n  - contestant_name: text\n\n表名: VOTES\n列:\n  - vote_id: number (主键)\n  - phone_number: number\n  - state: text (外键)\n  - contestant_number: number (外键)\n  - created: time\n\n外键关系:\n  - CONTESTANTS.contestant_number -\u003e VOTES.contestant_number\n  - AREA_CODE_STATE.state -\u003e VOTES.state\n","metadata":{"execution_time":2.263082973,"prompt_tokens":611,"response_tokens":120,"total_tokens":731},"sequence_num":700}
{"idx":3994062774,"db_id":"voter_1","query":"Return the names of the contestants whose names contain the substring 'Al' .","pred":"SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';","ground_truth":"select contestant_name from contestants where contestant_name like \"%al%\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: AREA_CODE_STATE\n列:\n  - area_code: number (主键)\n  - state: text\n\n表名: CONTESTANTS\n列:\n  - contestant_number: number (主键)\n  - contestant_name: text\n\n表名: VOTES\n列:\n  - vote_id: number (主键)\n  - phone_number: number\n  - state: text (外键)\n  - contestant_number: number (外键)\n  - created: time\n\n外键关系:\n  - CONTESTANTS.contestant_number -\u003e VOTES.contestant_number\n  - AREA_CODE_STATE.state -\u003e VOTES.state\n","metadata":{"execution_time":0.909475713,"prompt_tokens":600,"response_tokens":16,"total_tokens":616},"sequence_num":701}
{"idx":3172912442,"db_id":"world_1","query":"What are the names of all the countries that became independent after 1950?","pred":"SELECT Name FROM country WHERE IndepYear \u003e 1950;","ground_truth":"SELECT Name FROM country WHERE IndepYear  \u003e  1950","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.696553371,"prompt_tokens":709,"response_tokens":14,"total_tokens":723},"sequence_num":702}
{"idx":3046786358,"db_id":"world_1","query":"Give the names of the nations that were founded after 1950.","pred":"SELECT Name FROM country WHERE IndepYear \u003e 1950;","ground_truth":"SELECT Name FROM country WHERE IndepYear  \u003e  1950","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.97530373,"prompt_tokens":707,"response_tokens":14,"total_tokens":721},"sequence_num":703}
{"idx":4292711553,"db_id":"world_1","query":"How many countries have a republic as their form of government?","pred":"SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';","ground_truth":"SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.954776121,"prompt_tokens":705,"response_tokens":13,"total_tokens":718},"sequence_num":704}
{"idx":3041347166,"db_id":"world_1","query":"How many countries have governments that are republics?","pred":"SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';","ground_truth":"SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.854611089,"prompt_tokens":703,"response_tokens":13,"total_tokens":716},"sequence_num":705}
{"idx":1424822269,"db_id":"world_1","query":"What is the total surface area of the countries in the Caribbean region?","pred":"SELECT SUM(SurfaceArea) \nFROM country \nWHERE Region = 'Caribbean';","ground_truth":"SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.040964274,"prompt_tokens":707,"response_tokens":18,"total_tokens":725},"sequence_num":706}
{"idx":3094865720,"db_id":"world_1","query":"How much surface area do the countires in the Carribean cover together?","pred":"SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean';","ground_truth":"SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.963089213,"prompt_tokens":709,"response_tokens":16,"total_tokens":725},"sequence_num":707}
{"idx":1062819870,"db_id":"world_1","query":"Which continent is Anguilla in?","pred":"SELECT Continent FROM country WHERE Name = 'Anguilla';","ground_truth":"SELECT Continent FROM country WHERE Name  =  \"Anguilla\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.731400892,"prompt_tokens":701,"response_tokens":13,"total_tokens":714},"sequence_num":708}
{"idx":183246424,"db_id":"world_1","query":"What is the continent name which Anguilla belongs to?","pred":"SELECT Continent FROM country WHERE Code = 'AIA';","ground_truth":"SELECT Continent FROM country WHERE Name  =  \"Anguilla\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.418089305,"prompt_tokens":705,"response_tokens":12,"total_tokens":717},"sequence_num":709}
{"idx":626352876,"db_id":"world_1","query":"Which region is the city Kabul located in?","pred":"SELECT Region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Kabul');","ground_truth":"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":3.0134605,"prompt_tokens":702,"response_tokens":22,"total_tokens":724},"sequence_num":710}
{"idx":2273016397,"db_id":"world_1","query":"What region is Kabul in?","pred":"SELECT Region FROM city WHERE Name = 'Kabul';","ground_truth":"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":1.3233133320000001,"prompt_tokens":699,"response_tokens":13,"total_tokens":712},"sequence_num":711}
{"idx":983474569,"db_id":"world_1","query":"Which language is the most popular in Aruba?","pred":"SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = 'ABW');","ground_truth":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.973188457,"prompt_tokens":703,"response_tokens":34,"total_tokens":737},"sequence_num":712}
{"idx":2406459197,"db_id":"world_1","query":"What language is predominantly spoken in Aruba?","pred":"SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T';","ground_truth":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.998595176,"prompt_tokens":702,"response_tokens":21,"total_tokens":723},"sequence_num":713}
{"idx":2044337141,"db_id":"world_1","query":"What are the population and life expectancies in Brazil?","pred":"SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';","ground_truth":"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":0.762427602,"prompt_tokens":704,"response_tokens":15,"total_tokens":719},"sequence_num":714}
{"idx":26903263,"db_id":"world_1","query":"Give me Brazil’s population and life expectancies.","pred":"SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';","ground_truth":"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":1.7070918050000001,"prompt_tokens":703,"response_tokens":15,"total_tokens":718},"sequence_num":715}
{"idx":921844907,"db_id":"world_1","query":"What are the region and population of Angola?","pred":"SELECT Region, Population FROM country WHERE Name = 'Angola';","ground_truth":"SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.692705341,"prompt_tokens":702,"response_tokens":14,"total_tokens":716},"sequence_num":716}
{"idx":771186878,"db_id":"world_1","query":"What region does Angola belong to and what is its population?","pred":"SELECT Region, Population FROM country WHERE Name = 'Angola';","ground_truth":"SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.738684504,"prompt_tokens":705,"response_tokens":14,"total_tokens":719},"sequence_num":717}
{"idx":1273383548,"db_id":"world_1","query":"What is the average expected life expectancy for countries in the region of Central Africa?","pred":"SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';","ground_truth":"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.21849728,"prompt_tokens":709,"response_tokens":17,"total_tokens":726},"sequence_num":718}
{"idx":632256692,"db_id":"world_1","query":"How long is the people’s average life expectancy in Central Africa?","pred":"SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Central Africa';","ground_truth":"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":2.429827609,"prompt_tokens":706,"response_tokens":17,"total_tokens":723},"sequence_num":719}
{"idx":1111420959,"db_id":"world_1","query":"What is the name of country that has the shortest life expectancy in Asia?","pred":"SELECT Name \nFROM country \nWHERE Continent = 'Asia' \nORDER BY LifeExpectancy \nLIMIT 1;","ground_truth":"SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.917666502,"prompt_tokens":708,"response_tokens":24,"total_tokens":732},"sequence_num":720}
{"idx":3723460611,"db_id":"world_1","query":"Give the name of the country in Asia with the lowest life expectancy.","pred":"SELECT Name\nFROM country\nWHERE Continent = 'Asia'\nORDER BY LifeExpectancy\nLIMIT 1;","ground_truth":"SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.707312306,"prompt_tokens":707,"response_tokens":23,"total_tokens":730},"sequence_num":721}
{"idx":804518706,"db_id":"world_1","query":"What is the total population and maximum GNP in Asia?","pred":"SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP\nFROM country\nWHERE Continent = 'Asia';","ground_truth":"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.6713825789999999,"prompt_tokens":705,"response_tokens":29,"total_tokens":734},"sequence_num":722}
{"idx":340315543,"db_id":"world_1","query":"How many people live in Asia, and what is the largest GNP among them?","pred":"SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS LargestGNP\nFROM country\nWHERE Continent = 'Asia';","ground_truth":"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.837248061,"prompt_tokens":710,"response_tokens":29,"total_tokens":739},"sequence_num":723}
{"idx":1534520540,"db_id":"world_1","query":"What is the average life expectancy in African countries that are republics?","pred":"SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';","ground_truth":"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.758983589,"prompt_tokens":707,"response_tokens":23,"total_tokens":730},"sequence_num":724}
{"idx":1663742832,"db_id":"world_1","query":"Give the average life expectancy for countries in Africa which are republics?","pred":"SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';","ground_truth":"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":0.783560785,"prompt_tokens":707,"response_tokens":23,"total_tokens":730},"sequence_num":725}
{"idx":1112654924,"db_id":"world_1","query":"What is the total surface area of the continents Asia and Europe?","pred":"SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');","ground_truth":"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.553041991,"prompt_tokens":706,"response_tokens":18,"total_tokens":724},"sequence_num":726}
{"idx":2979491193,"db_id":"world_1","query":"Give the total surface area covered by countries in Asia or Europe.","pred":"SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');","ground_truth":"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":0.930509326,"prompt_tokens":706,"response_tokens":18,"total_tokens":724},"sequence_num":727}
{"idx":1552156124,"db_id":"world_1","query":"How many people live in Gelderland district?","pred":"SELECT SUM(Population) FROM city WHERE District = 'Gelderland';","ground_truth":"SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.800444352,"prompt_tokens":702,"response_tokens":17,"total_tokens":719},"sequence_num":728}
{"idx":4084828240,"db_id":"world_1","query":"What is the total population of Gelderland district?","pred":"SELECT SUM(Population) FROM city WHERE District = 'Gelderland';","ground_truth":"SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.943290736,"prompt_tokens":703,"response_tokens":17,"total_tokens":720},"sequence_num":729}
{"idx":1022055863,"db_id":"world_1","query":"What is the average GNP and total population in all nations whose government is US territory?","pred":"SELECT AVG(GNP), SUM(Population) \nFROM country \nWHERE GovernmentForm = 'US territory';","ground_truth":"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.030858722,"prompt_tokens":711,"response_tokens":23,"total_tokens":734},"sequence_num":730}
{"idx":1241882614,"db_id":"world_1","query":"Give the mean GNP and total population of nations which are considered US territory.","pred":"SELECT AVG(GNP), SUM(Population) \nFROM country \nWHERE Continent = 'North America' AND GovernmentForm LIKE '%US territory%';","ground_truth":"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":2.8216210889999997,"prompt_tokens":709,"response_tokens":31,"total_tokens":740},"sequence_num":731}
{"idx":2063002206,"db_id":"world_1","query":"How many unique languages are spoken in the world?","pred":"SELECT COUNT(DISTINCT Language) FROM countrylanguage;","ground_truth":"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":0.677129176,"prompt_tokens":703,"response_tokens":12,"total_tokens":715},"sequence_num":732}
{"idx":3435685284,"db_id":"world_1","query":"What is the number of distinct languages used around the world?","pred":"SELECT COUNT(DISTINCT Language) AS NumberOfLanguages FROM countrylanguage;","ground_truth":"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.386720539,"prompt_tokens":705,"response_tokens":15,"total_tokens":720},"sequence_num":733}
{"idx":940041394,"db_id":"world_1","query":"How many type of governments are in Africa?","pred":"SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';","ground_truth":"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.983686945,"prompt_tokens":702,"response_tokens":17,"total_tokens":719},"sequence_num":734}
{"idx":21167974,"db_id":"world_1","query":"How many different forms of governments are there in Africa?","pred":"SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';","ground_truth":"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.08671986,"prompt_tokens":704,"response_tokens":17,"total_tokens":721},"sequence_num":735}
{"idx":3223008358,"db_id":"world_1","query":"What is the total number of languages used in Aruba?","pred":"SELECT COUNT(Language) AS TotalLanguages FROM countrylanguage WHERE CountryCode = 'ABW';","ground_truth":"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.349462897,"prompt_tokens":705,"response_tokens":75,"total_tokens":780},"sequence_num":736}
{"idx":3757696421,"db_id":"world_1","query":"How many languages are spoken in Aruba?","pred":"SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW';","ground_truth":"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.689019135,"prompt_tokens":702,"response_tokens":16,"total_tokens":718},"sequence_num":737}
{"idx":3864588403,"db_id":"world_1","query":"How many official languages does Afghanistan have?","pred":"SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';","ground_truth":"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":1.797480175,"prompt_tokens":701,"response_tokens":22,"total_tokens":723},"sequence_num":738}
{"idx":3796825475,"db_id":"world_1","query":"How many official languages are spoken in Afghanistan?","pred":"SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';","ground_truth":"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.892884896,"prompt_tokens":702,"response_tokens":22,"total_tokens":724},"sequence_num":739}
{"idx":7366764,"db_id":"world_1","query":"What is name of the country that speaks the largest number of languages?","pred":"SELECT Name \nFROM country \nWHERE Code = (\n    SELECT CountryCode \n    FROM countrylanguage \n    GROUP BY CountryCode \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n);","ground_truth":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.968359478,"prompt_tokens":707,"response_tokens":40,"total_tokens":747},"sequence_num":740}
{"idx":105460035,"db_id":"world_1","query":"Give the name of the nation that uses the greatest amount of languages.","pred":"SELECT Name \nFROM country \nWHERE Code = (SELECT CountryCode \n              FROM countrylanguage \n              GROUP BY CountryCode \n              ORDER BY COUNT(*) DESC \n              LIMIT 1);","ground_truth":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":0.879570537,"prompt_tokens":707,"response_tokens":38,"total_tokens":745},"sequence_num":741}
{"idx":613126359,"db_id":"world_1","query":"Which continent has the most diverse languages?","pred":"SELECT Continent FROM countrylanguage\nGROUP BY Continent\nORDER BY COUNT(DISTINCT Language) DESC\nLIMIT 1;","ground_truth":"SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.820208543,"prompt_tokens":701,"response_tokens":25,"total_tokens":726},"sequence_num":742}
{"idx":403702648,"db_id":"world_1","query":"Which continent speaks the most languages?","pred":"SELECT Continent, COUNT(DISTINCT Language) AS LanguageCount\nFROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nGROUP BY Continent\nORDER BY LanguageCount DESC\nLIMIT 1;","ground_truth":"SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.990722738,"prompt_tokens":700,"response_tokens":43,"total_tokens":743},"sequence_num":743}
{"idx":1929264474,"db_id":"world_1","query":"How many countries speak both English and Dutch?","pred":"SELECT COUNT(DISTINCT cl.CountryCode)\nFROM countrylanguage cl\nWHERE cl.Language IN ('English', 'Dutch')\nGROUP BY cl.CountryCode\nHAVING COUNT(DISTINCT cl.Language) = 2;","ground_truth":"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.994766293,"prompt_tokens":702,"response_tokens":45,"total_tokens":747},"sequence_num":744}
{"idx":662676029,"db_id":"world_1","query":"What is the number of nations that use English and Dutch?","pred":"SELECT COUNT(DISTINCT cl.CountryCode) \nFROM countrylanguage cl\nWHERE cl.Language IN ('English', 'Dutch');","ground_truth":"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.085751061,"prompt_tokens":705,"response_tokens":27,"total_tokens":732},"sequence_num":745}
{"idx":1812474495,"db_id":"world_1","query":"What are the names of nations speak both English and French?","pred":"SELECT Name \nFROM country \nWHERE Code IN (\n    SELECT CountryCode \n    FROM countrylanguage \n    WHERE Language IN ('English', 'French') \n    GROUP BY CountryCode \n    HAVING COUNT(DISTINCT Language) = 2\n);","ground_truth":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.022096576,"prompt_tokens":705,"response_tokens":52,"total_tokens":757},"sequence_num":746}
{"idx":2050755782,"db_id":"world_1","query":"Give the names of nations that speak both English and French.","pred":"SELECT Name \nFROM country \nWHERE Code IN (\n    SELECT CountryCode \n    FROM countrylanguage \n    WHERE Language IN ('English', 'French') \n    GROUP BY CountryCode \n    HAVING COUNT(DISTINCT Language) = 2\n);","ground_truth":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":2.03059712,"prompt_tokens":705,"response_tokens":52,"total_tokens":757},"sequence_num":747}
{"idx":3474445506,"db_id":"world_1","query":"What are the names of nations where both English and French are official languages?","pred":"SELECT Name \nFROM country \nWHERE Code IN (\n    SELECT CountryCode \n    FROM countrylanguage \n    WHERE Language = 'English' AND IsOfficial = 'T'\n    INTERSECT\n    SELECT CountryCode \n    FROM countrylanguage \n    WHERE Language = 'French' AND IsOfficial = 'T'\n);","ground_truth":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":1.302053984,"prompt_tokens":708,"response_tokens":65,"total_tokens":773},"sequence_num":748}
{"idx":4125793250,"db_id":"world_1","query":"Give the names of countries with English and French as official languages.","pred":"SELECT Name \nFROM country \nWHERE Code IN (\n    SELECT CountryCode \n    FROM countrylanguage \n    WHERE Language IN ('English', 'French') \n    AND IsOfficial = 'T'\n);","ground_truth":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.053586989,"prompt_tokens":706,"response_tokens":41,"total_tokens":747},"sequence_num":749}
{"idx":650160161,"db_id":"world_1","query":"What is the number of distinct continents where Chinese is spoken?","pred":"SELECT COUNT(DISTINCT Continent) FROM countrylanguage WHERE Language = 'Chinese';","ground_truth":"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.836468376,"prompt_tokens":705,"response_tokens":17,"total_tokens":722},"sequence_num":750}
{"idx":960988806,"db_id":"world_1","query":"How many continents speak Chinese?","pred":"SELECT COUNT(DISTINCT Continent) FROM countrylanguage WHERE Language = 'Chinese';","ground_truth":"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.594957441,"prompt_tokens":699,"response_tokens":17,"total_tokens":716},"sequence_num":751}
{"idx":258574036,"db_id":"world_1","query":"What are the regions that use English or Dutch?","pred":"SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch'));","ground_truth":"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":2.250221234,"prompt_tokens":703,"response_tokens":26,"total_tokens":729},"sequence_num":752}
{"idx":4170323628,"db_id":"world_1","query":"Which regions speak Dutch or English?","pred":"SELECT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('Dutch', 'English'));","ground_truth":"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":2.056927102,"prompt_tokens":700,"response_tokens":25,"total_tokens":725},"sequence_num":753}
{"idx":3006232919,"db_id":"world_1","query":"What are the countries where either English or Dutch is the official language ?","pred":"SELECT DISTINCT Name\nFROM country\nWHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language IN ('English', 'Dutch'));","ground_truth":"select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.844615166,"prompt_tokens":707,"response_tokens":35,"total_tokens":742},"sequence_num":754}
{"idx":31427924,"db_id":"world_1","query":"Which countries have either English or Dutch as an official language?","pred":"SELECT DISTINCT Name \nFROM country \nWHERE Code IN \n    (SELECT CountryCode \n     FROM countrylanguage \n     WHERE IsOfficial = 'T' AND Language IN ('English', 'Dutch'));","ground_truth":"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":1.02509983,"prompt_tokens":705,"response_tokens":41,"total_tokens":746},"sequence_num":755}
{"idx":983747817,"db_id":"world_1","query":"Which language is the most popular on the Asian continent?","pred":"SELECT Language \nFROM countrylanguage \nWHERE CountryCode IN (SELECT Code \n                      FROM country \n                      WHERE Continent = 'Asia') \nORDER BY Percentage DESC \nLIMIT 1;","ground_truth":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.545859031,"prompt_tokens":704,"response_tokens":37,"total_tokens":741},"sequence_num":756}
{"idx":2293615456,"db_id":"world_1","query":"What is the language that is used by the largest number of Asian nations?","pred":"SELECT Language \nFROM countrylanguage \nWHERE CountryCode IN \n    (SELECT Code \n     FROM country \n     WHERE Continent = 'Asia') \nGROUP BY Language \nORDER BY COUNT(*) DESC \nLIMIT 1;","ground_truth":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":2.102875374,"prompt_tokens":708,"response_tokens":44,"total_tokens":752},"sequence_num":757}
{"idx":2515694761,"db_id":"world_1","query":"Which languages are spoken by only one country in republic governments?","pred":"SELECT Language\nFROM countrylanguage\nWHERE IsOfficial = 'T' \nAND Language IN (\n    SELECT Language\n    FROM countrylanguage\n    GROUP BY Language\n    HAVING COUNT(DISTINCT CountryCode) = 1\n)\nAND CountryCode IN (\n    SELECT Code\n    FROM country\n    WHERE GovernmentForm LIKE '%Republic%'\n);","ground_truth":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.2600967330000001,"prompt_tokens":705,"response_tokens":71,"total_tokens":776},"sequence_num":758}
{"idx":655371715,"db_id":"world_1","query":"What languages are only used by a single country with a republic government?","pred":"SELECT Language \nFROM countrylanguage \nWHERE IsOfficial = 'T' \nAND Language NOT IN (\n    SELECT Language \n    FROM countrylanguage cl \n    JOIN country c ON cl.CountryCode = c.Code \n    WHERE GovernmentForm = 'Republic' \n    GROUP BY Language \n    HAVING COUNT(DISTINCT cl.CountryCode) \u003e 1\n);","ground_truth":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.144556502,"prompt_tokens":707,"response_tokens":73,"total_tokens":780},"sequence_num":759}
{"idx":885192180,"db_id":"world_1","query":"Find the city with the largest population that uses English.","pred":"SELECT Name\nFROM city\nWHERE CountryCode IN (SELECT CountryCode\n                      FROM countrylanguage\n                      WHERE Language = 'English' AND IsOfficial = 'T'\n                     )\nORDER BY Population DESC\nLIMIT 1;","ground_truth":"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.499783081,"prompt_tokens":704,"response_tokens":46,"total_tokens":750},"sequence_num":760}
{"idx":4233464451,"db_id":"world_1","query":"What is the most populace city that speaks English?","pred":"SELECT city.Name\nFROM city\nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode\nWHERE countrylanguage.Language = 'English'\nORDER BY city.Population DESC\nLIMIT 1;","ground_truth":"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.150160857,"prompt_tokens":703,"response_tokens":40,"total_tokens":743},"sequence_num":761}
{"idx":4152084467,"db_id":"world_1","query":"Find the name, population and expected life length of asian country with the largest area?","pred":"SELECT Name, Population, LifeExpectancy \nFROM country \nWHERE Continent = 'Asia' \nORDER BY SurfaceArea DESC \nLIMIT 1;","ground_truth":"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.034173293,"prompt_tokens":710,"response_tokens":30,"total_tokens":740},"sequence_num":762}
{"idx":3006118595,"db_id":"world_1","query":"What are the name, population, and life expectancy of the largest Asian country by land?","pred":"SELECT Name, Population, LifeExpectancy\nFROM country\nWHERE Continent = 'Asia'\nORDER BY SurfaceArea DESC\nLIMIT 1;","ground_truth":"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.855255968,"prompt_tokens":711,"response_tokens":29,"total_tokens":740},"sequence_num":763}
{"idx":3534979992,"db_id":"world_1","query":"What is average life expectancy in the countries where English is not the official language?","pred":"SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'English');","ground_truth":"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.876208358,"prompt_tokens":709,"response_tokens":34,"total_tokens":743},"sequence_num":764}
{"idx":1831198631,"db_id":"world_1","query":"Give the mean life expectancy of countries in which English is not the official language.","pred":"SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'English');","ground_truth":"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.836054159,"prompt_tokens":709,"response_tokens":34,"total_tokens":743},"sequence_num":765}
{"idx":3142514556,"db_id":"world_1","query":"What is the total number of people living in the nations that do not use English?","pred":"SELECT SUM(Population) \nFROM country \nWHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');","ground_truth":"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.787339797,"prompt_tokens":710,"response_tokens":28,"total_tokens":738},"sequence_num":766}
{"idx":2247220943,"db_id":"world_1","query":"How many people live in countries that do not speak English?","pred":"SELECT SUM(Population) \nFROM country \nWHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');","ground_truth":"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.7912184180000001,"prompt_tokens":705,"response_tokens":28,"total_tokens":733},"sequence_num":767}
{"idx":529638938,"db_id":"world_1","query":"What is the official language spoken in the country whose head of state is Beatrix?","pred":"SELECT Language \nFROM countrylanguage \nWHERE CountryCode = (\n    SELECT Code \n    FROM country \n    WHERE HeadOfState = 'Beatrix'\n) AND IsOfficial = 'T'\n;","ground_truth":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.904729648,"prompt_tokens":710,"response_tokens":40,"total_tokens":750},"sequence_num":768}
{"idx":1817640715,"db_id":"world_1","query":"What is the official language used in the country the name of whose head of state is Beatrix.","pred":"SELECT Language \nFROM countrylanguage \nWHERE CountryCode = (\n    SELECT Code \n    FROM country \n    WHERE HeadOfState = 'Beatrix'\n) AND IsOfficial = 'T';","ground_truth":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.915224225,"prompt_tokens":713,"response_tokens":39,"total_tokens":752},"sequence_num":769}
{"idx":1973326221,"db_id":"world_1","query":"What is the total number of unique official languages spoken in the countries that are founded before 1930?","pred":"SELECT COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear \u003c 1930) \nAND IsOfficial = 'T';","ground_truth":"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  \u003c  1930 AND T2.IsOfficial  =  \"T\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.179853845,"prompt_tokens":714,"response_tokens":39,"total_tokens":753},"sequence_num":770}
{"idx":479950463,"db_id":"world_1","query":"For the countries founded before 1930, what is the total number of distinct official languages?","pred":"SELECT COUNT(DISTINCT Language) AS TotalDistinctLanguages\nFROM countrylanguage\nWHERE CountryCode IN (\n    SELECT Code\n    FROM country\n    WHERE IndepYear \u003c 1930\n) AND IsOfficial = 'T';","ground_truth":"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  \u003c  1930 AND T2.IsOfficial  =  \"T\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.370870922,"prompt_tokens":712,"response_tokens":48,"total_tokens":760},"sequence_num":771}
{"idx":599527697,"db_id":"world_1","query":"What are the countries that have greater surface area than any country in Europe?","pred":"SELECT Name \nFROM country \nWHERE SurfaceArea \u003e (SELECT MAX(SurfaceArea) \n                     FROM country \n                     WHERE Continent = 'Europe');","ground_truth":"SELECT Name FROM country WHERE SurfaceArea  \u003e  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.038048972,"prompt_tokens":708,"response_tokens":30,"total_tokens":738},"sequence_num":772}
{"idx":4195111445,"db_id":"world_1","query":"Which countries have greater area than that of any country in Europe?","pred":"","ground_truth":"SELECT Name FROM country WHERE SurfaceArea  \u003e  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"error":"向LLM发送请求失败: API请求失败，状态码: 504，响应: {\"error\":{\"code\":503,\"message\":\"Service Unavailable.\",\"param\":null,\"type\":\"cf_service_unavailable\"}}"},"sequence_num":773}
{"idx":45104378,"db_id":"world_1","query":"What are the African countries that have a  population less than any country in Asia?","pred":"SELECT Name \nFROM country \nWHERE Continent = 'Africa' \nAND Population \u003c (SELECT MIN(Population) \n                  FROM country \n                  WHERE Continent = 'Asia');","ground_truth":"SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  \u003c  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.056098767,"prompt_tokens":710,"response_tokens":36,"total_tokens":746},"sequence_num":774}
{"idx":2605851846,"db_id":"world_1","query":"Which African countries have a smaller population than that of any country in Asia?","pred":"SELECT Name \nFROM country \nWHERE Continent = 'Africa' \nAND Population \u003c (SELECT MIN(Population) \n                  FROM country \n                  WHERE Continent = 'Asia');","ground_truth":"SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  \u003c  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":3.940541491,"prompt_tokens":708,"response_tokens":36,"total_tokens":744},"sequence_num":775}
{"idx":3993919160,"db_id":"world_1","query":"Which Asian countries have a population that is larger than any country in Africa?","pred":"SELECT Name \nFROM country \nWHERE Continent = 'Asia' \nAND Population \u003e (SELECT MAX(Population) \n                 FROM country \n                 WHERE Continent = 'Africa');","ground_truth":"SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  \u003e  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.798007186,"prompt_tokens":708,"response_tokens":36,"total_tokens":744},"sequence_num":776}
{"idx":2463370678,"db_id":"world_1","query":"What are the Asian countries which have a population larger than that of any country in Africa?","pred":"SELECT Name \nFROM country \nWHERE Continent = 'Asia' \nAND Population \u003e (SELECT MAX(Population) \n                  FROM country \n                  WHERE Continent = 'Africa');","ground_truth":"SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  \u003e  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.047636065,"prompt_tokens":711,"response_tokens":36,"total_tokens":747},"sequence_num":777}
{"idx":3282631854,"db_id":"world_1","query":"What are the country codes for countries that do not speak English?","pred":"SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');","ground_truth":"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.52190335,"prompt_tokens":706,"response_tokens":22,"total_tokens":728},"sequence_num":778}
{"idx":3165695461,"db_id":"world_1","query":"Return the country codes for countries that do not speak English.","pred":"SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');","ground_truth":"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.016028115,"prompt_tokens":705,"response_tokens":22,"total_tokens":727},"sequence_num":779}
{"idx":1954771832,"db_id":"world_1","query":"What are the country codes of countries where people use languages other than English?","pred":"SELECT DISTINCT cl.CountryCode\nFROM countrylanguage cl\nWHERE cl.Language \u003c\u003e 'English';","ground_truth":"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.300287336,"prompt_tokens":708,"response_tokens":19,"total_tokens":727},"sequence_num":780}
{"idx":3235057715,"db_id":"world_1","query":"Give the country codes for countries in which people speak langauges that are not English.","pred":"SELECT DISTINCT cl.CountryCode\nFROM countrylanguage cl\nWHERE cl.Language \u003c\u003e 'English';","ground_truth":"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.090001809,"prompt_tokens":711,"response_tokens":19,"total_tokens":730},"sequence_num":781}
{"idx":175296115,"db_id":"world_1","query":"What are the codes of the countries that do not speak English and whose government forms are not Republic?","pred":"SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm \u003c\u003e 'Republic';","ground_truth":"SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.999367699,"prompt_tokens":713,"response_tokens":29,"total_tokens":742},"sequence_num":782}
{"idx":1933444196,"db_id":"world_1","query":"Return the codes of countries that do not speak English and do not have Republics for governments.","pred":"SELECT Code \nFROM country \nWHERE Code NOT IN (\n    SELECT CountryCode \n    FROM countrylanguage \n    WHERE Language = 'English' AND IsOfficial = 'T'\n) \nAND GovernmentForm \u003c\u003e 'Republic';","ground_truth":"SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.14032812,"prompt_tokens":712,"response_tokens":45,"total_tokens":757},"sequence_num":783}
{"idx":1816863151,"db_id":"world_1","query":"Which cities are in European countries where English is not the official language?","pred":"SELECT city.Name \nFROM city \nJOIN country ON city.CountryCode = country.Code \nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nWHERE country.Continent = 'Europe' \nAND countrylanguage.Language \u003c\u003e 'English' \nAND countrylanguage.IsOfficial \u003c\u003e 'T'\n;","ground_truth":"SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.027190475,"prompt_tokens":707,"response_tokens":59,"total_tokens":766},"sequence_num":784}
{"idx":175504880,"db_id":"world_1","query":"What are the names of cities in Europe for which English is not the official language?","pred":"SELECT Name \nFROM city \nWHERE CountryCode IN (SELECT Code \n                      FROM country \n                      WHERE Continent = 'Europe') \nAND Name NOT IN (SELECT city.Name \n                 FROM city \n                 JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \n                 WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T');","ground_truth":"SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.3787955219999999,"prompt_tokens":710,"response_tokens":72,"total_tokens":782},"sequence_num":785}
{"idx":3682179849,"db_id":"world_1","query":"Which unique cities are in Asian countries where Chinese is the official language ?","pred":"SELECT DISTINCT c.Name \nFROM city c \nJOIN countrylanguage cl ON c.CountryCode = cl.CountryCode \nWHERE cl.Language = 'Chinese' AND cl.IsOfficial = 'T'\nAND c.CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia');","ground_truth":"select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.972050269,"prompt_tokens":707,"response_tokens":54,"total_tokens":761},"sequence_num":786}
{"idx":3486916614,"db_id":"world_1","query":"Return the different names of cities that are in Asia and for which Chinese is the official language.","pred":"SELECT DISTINCT city.Name \nFROM city \nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nJOIN country ON city.CountryCode = country.Code \nWHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';","ground_truth":"SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.310255417,"prompt_tokens":712,"response_tokens":57,"total_tokens":769},"sequence_num":787}
{"idx":768419130,"db_id":"world_1","query":"What are the name, independence year, and surface area of the country with the smallest population?","pred":"SELECT Name, IndepYear, SurfaceArea \nFROM country \nORDER BY Population \nLIMIT 1;","ground_truth":"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.765186486,"prompt_tokens":712,"response_tokens":22,"total_tokens":734},"sequence_num":788}
{"idx":3234107929,"db_id":"world_1","query":"Give the name, year of independence, and surface area of the country that has the lowest population.","pred":"SELECT Name, IndepYear, SurfaceArea \nFROM country \nWHERE Population = (SELECT MIN(Population) FROM country);","ground_truth":"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.79943441,"prompt_tokens":713,"response_tokens":27,"total_tokens":740},"sequence_num":789}
{"idx":1754097004,"db_id":"world_1","query":"What are the population, name and leader of the country with the largest area?","pred":"SELECT Population, Name, HeadOfState\nFROM country\nORDER BY SurfaceArea DESC\nLIMIT 1;","ground_truth":"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.790574094,"prompt_tokens":709,"response_tokens":23,"total_tokens":732},"sequence_num":790}
{"idx":4042109000,"db_id":"world_1","query":"Give the name, population, and head of state for the country that has the largest area.","pred":"SELECT Name, Population, HeadOfState\nFROM country\nWHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);","ground_truth":"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":1.430611938,"prompt_tokens":712,"response_tokens":27,"total_tokens":739},"sequence_num":791}
{"idx":759537836,"db_id":"world_1","query":"Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.","pred":"SELECT Name, COUNT(Language) AS NumOfLanguages\nFROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nGROUP BY Name\nHAVING COUNT(Language) \u003e= 3;","ground_truth":"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  \u003e  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":0.879007267,"prompt_tokens":714,"response_tokens":40,"total_tokens":754},"sequence_num":792}
{"idx":3306013879,"db_id":"world_1","query":"What are the names of countries that speak more than 2 languages, as well as how many languages they speak?","pred":"SELECT Name, COUNT(Language) AS LanguageCount\nFROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nGROUP BY Name\nHAVING COUNT(Language) \u003e 2;","ground_truth":"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  \u003e  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":1.520148341,"prompt_tokens":716,"response_tokens":39,"total_tokens":755},"sequence_num":793}
{"idx":1464511985,"db_id":"world_1","query":"Find the number of cities in each district whose population is greater than the average population of cities?","pred":"SELECT District, COUNT(*) AS Num_Cities\nFROM city\nWHERE Population \u003e (SELECT AVG(Population) FROM city)\nGROUP BY District;","ground_truth":"SELECT count(*) ,  District FROM city WHERE Population  \u003e  (SELECT avg(Population) FROM city) GROUP BY District","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.858931606,"prompt_tokens":712,"response_tokens":31,"total_tokens":743},"sequence_num":794}
{"idx":1872930537,"db_id":"world_1","query":"How many cities in each district have a population that is above the average population across all cities?","pred":"SELECT District, COUNT(*) \nFROM city \nWHERE Population \u003e (SELECT AVG(Population) FROM city) \nGROUP BY District;","ground_truth":"SELECT count(*) ,  District FROM city WHERE Population  \u003e  (SELECT avg(Population) FROM city) GROUP BY District","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.071256585,"prompt_tokens":712,"response_tokens":28,"total_tokens":740},"sequence_num":795}
{"idx":4157249399,"db_id":"world_1","query":"Find the government form name and total population for each government form whose average life expectancy is longer than 72.","pred":"SELECT GovernmentForm, SUM(Population) AS TotalPopulation\nFROM country\nGROUP BY GovernmentForm\nHAVING AVG(LifeExpectancy) \u003e 72;","ground_truth":"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  \u003e  72","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":0.896941303,"prompt_tokens":715,"response_tokens":34,"total_tokens":749},"sequence_num":796}
{"idx":3054086300,"db_id":"world_1","query":"What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?","pred":"SELECT GovernmentForm, SUM(Population) \nFROM country \nWHERE LifeExpectancy \u003e 72 \nGROUP BY GovernmentForm;","ground_truth":"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  \u003e  72","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.215584314,"prompt_tokens":721,"response_tokens":27,"total_tokens":748},"sequence_num":797}
{"idx":3225313886,"db_id":"world_1","query":"Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?","pred":"SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy, SUM(Population) AS TotalPopulation\nFROM country\nGROUP BY Continent\nHAVING AVG(LifeExpectancy) \u003c 72;","ground_truth":"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  \u003c  72","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.2509845529999999,"prompt_tokens":715,"response_tokens":44,"total_tokens":759},"sequence_num":798}
{"idx":2564029242,"db_id":"world_1","query":"What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?","pred":"SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AverageLifeExpectancy\nFROM country\nGROUP BY Continent\nHAVING AVG(LifeExpectancy) \u003c 72;","ground_truth":"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  \u003c  72","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.104730137,"prompt_tokens":724,"response_tokens":44,"total_tokens":768},"sequence_num":799}
{"idx":1512190632,"db_id":"world_1","query":"What are the names and areas of countries with the top 5 largest area?","pred":"SELECT Name, SurfaceArea\nFROM country\nORDER BY SurfaceArea DESC\nLIMIT 5;","ground_truth":"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.787664198,"prompt_tokens":709,"response_tokens":20,"total_tokens":729},"sequence_num":800}
{"idx":3089404490,"db_id":"world_1","query":"Return the names and surface areas of the 5 largest countries.","pred":"SELECT Name, SurfaceArea\nFROM country\nORDER BY SurfaceArea DESC\nLIMIT 5;","ground_truth":"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.696150581,"prompt_tokens":706,"response_tokens":20,"total_tokens":726},"sequence_num":801}
{"idx":2728483512,"db_id":"world_1","query":"What are names of countries with the top 3 largest population?","pred":"SELECT Name\nFROM country\nORDER BY Population DESC\nLIMIT 3;","ground_truth":"SELECT Name FROM country ORDER BY Population DESC LIMIT 3","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.757388183,"prompt_tokens":706,"response_tokens":16,"total_tokens":722},"sequence_num":802}
{"idx":4288032313,"db_id":"world_1","query":"Return the names of the 3 most populated countries.","pred":"SELECT Name \nFROM country \nORDER BY Population DESC \nLIMIT 3;","ground_truth":"SELECT Name FROM country ORDER BY Population DESC LIMIT 3","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.780645537,"prompt_tokens":704,"response_tokens":16,"total_tokens":720},"sequence_num":803}
{"idx":3847646756,"db_id":"world_1","query":"What are the names of the nations with the 3 lowest populations?","pred":"SELECT Name\nFROM country\nORDER BY Population\nLIMIT 3;","ground_truth":"SELECT Name FROM country ORDER BY Population ASC LIMIT 3","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.671936386,"prompt_tokens":707,"response_tokens":15,"total_tokens":722},"sequence_num":804}
{"idx":1696957094,"db_id":"world_1","query":"Return the names of the 3 countries with the fewest people.","pred":"SELECT Name\nFROM country\nORDER BY Population\nLIMIT 3;","ground_truth":"SELECT Name FROM country ORDER BY Population ASC LIMIT 3","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.662776057,"prompt_tokens":707,"response_tokens":15,"total_tokens":722},"sequence_num":805}
{"idx":1146488429,"db_id":"world_1","query":"how many countries are in Asia?","pred":"SELECT COUNT(*) FROM country WHERE Continent = 'Asia';","ground_truth":"SELECT count(*) FROM country WHERE continent  =  \"Asia\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":0.717165296,"prompt_tokens":700,"response_tokens":12,"total_tokens":712},"sequence_num":806}
{"idx":1006370013,"db_id":"world_1","query":"Count the number of countries in Asia.","pred":"SELECT COUNT(*) FROM country WHERE Continent = 'Asia';","ground_truth":"SELECT count(*) FROM country WHERE continent  =  \"Asia\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.680398708,"prompt_tokens":701,"response_tokens":12,"total_tokens":713},"sequence_num":807}
{"idx":3861690458,"db_id":"world_1","query":"What are the names of the countries that are in the continent of Europe and have a population of 80000?","pred":"SELECT Name \nFROM country \nWHERE Continent = 'Europe' AND Population = 80000;","ground_truth":"SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":0.805585889,"prompt_tokens":716,"response_tokens":20,"total_tokens":736},"sequence_num":808}
{"idx":4020759191,"db_id":"world_1","query":"Give the names of countries that are in Europe and have a population equal to 80000.","pred":"SELECT Name \nFROM country \nWHERE Continent = 'Europe' AND Population = 80000;","ground_truth":"SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.703305687,"prompt_tokens":712,"response_tokens":20,"total_tokens":732},"sequence_num":809}
{"idx":1623175848,"db_id":"world_1","query":"What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?","pred":"SELECT SUM(Population) AS total_population, AVG(SurfaceArea) AS average_area\nFROM country\nWHERE Continent = 'North America' AND SurfaceArea \u003e 3000;","ground_truth":"select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  \u003e  3000","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.868820894,"prompt_tokens":718,"response_tokens":38,"total_tokens":756},"sequence_num":810}
{"idx":3593041035,"db_id":"world_1","query":"Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .","pred":"SELECT SUM(country.Population) AS total_population, AVG(country.SurfaceArea) AS average_surface_area\nFROM country\nWHERE country.Continent = 'North America' AND country.SurfaceArea \u003e 3000;","ground_truth":"select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  \u003e  3000","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.97716535,"prompt_tokens":718,"response_tokens":42,"total_tokens":760},"sequence_num":811}
{"idx":1117156549,"db_id":"world_1","query":"What are the cities whose population is between 160000 and 900000?","pred":"SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;","ground_truth":"SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.756209984,"prompt_tokens":709,"response_tokens":16,"total_tokens":725},"sequence_num":812}
{"idx":1319787915,"db_id":"world_1","query":"Return the names of cities that have a population between 160000 and 900000 .","pred":"SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;","ground_truth":"select name from city where population between 160000 and 900000","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.86520722,"prompt_tokens":711,"response_tokens":16,"total_tokens":727},"sequence_num":813}
{"idx":3511315138,"db_id":"world_1","query":"Which language is spoken by the largest number of countries?","pred":"SELECT Language\nFROM countrylanguage\nGROUP BY Language\nORDER BY COUNT(DISTINCT CountryCode) DESC\nLIMIT 1;","ground_truth":"SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.370167553,"prompt_tokens":704,"response_tokens":27,"total_tokens":731},"sequence_num":814}
{"idx":3837112398,"db_id":"world_1","query":"Give the language that is spoken in the most countries.","pred":"SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;","ground_truth":"SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - country.Code -\u003e countrylanguage.CountryCode\n  - city.CountryCode -\u003e country.Code\n","metadata":{"execution_time":0.742104385,"prompt_tokens":704,"response_tokens":23,"total_tokens":727},"sequence_num":815}
{"idx":1727201172,"db_id":"world_1","query":"What is the language spoken by the largest percentage of people in each country?","pred":"SELECT CountryCode, Language\nFROM (\n    SELECT cl.CountryCode, cl.Language, cl.Percentage,\n           ROW_NUMBER() OVER (PARTITION BY cl.CountryCode ORDER BY cl.Percentage DESC) AS rn\n    FROM countrylanguage cl\n) ranked\nWHERE rn = 1;","ground_truth":"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.121659333,"prompt_tokens":708,"response_tokens":59,"total_tokens":767},"sequence_num":816}
{"idx":559008513,"db_id":"world_1","query":"What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?","pred":"SELECT cl.CountryCode, cl.Language\nFROM countrylanguage cl\nJOIN (\n    SELECT CountryCode, MAX(Percentage) AS MaxPercentage\n    FROM countrylanguage\n    GROUP BY CountryCode\n) AS sub ON cl.CountryCode = sub.CountryCode AND cl.Percentage = sub.MaxPercentage;","ground_truth":"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":2.575798025,"prompt_tokens":718,"response_tokens":60,"total_tokens":778},"sequence_num":817}
{"idx":3589915543,"db_id":"world_1","query":"What is the total number of countries where Spanish is spoken by the largest percentage of people?","pred":"SELECT COUNT(*) \nFROM (SELECT CountryCode, MAX(Percentage) AS MaxPercentage\n      FROM countrylanguage\n      WHERE Language = 'Spanish'\n      GROUP BY CountryCode) AS MaxPercentageTable;","ground_truth":"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.178675833,"prompt_tokens":711,"response_tokens":42,"total_tokens":753},"sequence_num":818}
{"idx":1974962547,"db_id":"world_1","query":"Count the number of countries for which Spanish is the predominantly spoken language.","pred":"SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';","ground_truth":"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.305005712,"prompt_tokens":707,"response_tokens":20,"total_tokens":727},"sequence_num":819}
{"idx":291787672,"db_id":"world_1","query":"What are the codes of countries where Spanish is spoken by the largest percentage of people?","pred":"SELECT CountryCode \nFROM countrylanguage \nWHERE Language = 'Spanish' \nORDER BY Percentage DESC \nLIMIT 1;","ground_truth":"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":0.993918161,"prompt_tokens":710,"response_tokens":25,"total_tokens":735},"sequence_num":820}
{"idx":3238529269,"db_id":"world_1","query":"Return the codes of countries for which Spanish is the predominantly spoken language.","pred":"SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage \u003e 50;","ground_truth":"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode","is_correct":false,"db_schema":"数据库Schema信息:\n表名: city\n列:\n  - ID: number (主键)\n  - Name: text\n  - CountryCode: text (外键)\n  - District: text\n  - Population: number\n\n表名: sqlite_sequence\n列:\n  - name: text\n  - seq: text\n\n表名: country\n列:\n  - Code: text (主键)\n  - Name: text\n  - Continent: text\n  - Region: text\n  - SurfaceArea: number\n  - IndepYear: number\n  - Population: number\n  - LifeExpectancy: number\n  - GNP: number\n  - GNPOld: number\n  - LocalName: text\n  - GovernmentForm: text\n  - HeadOfState: text\n  - Capital: number\n  - Code2: text\n\n表名: countrylanguage\n列:\n  - CountryCode: text (主键) (外键)\n  - Language: text\n  - IsOfficial: text\n  - Percentage: number\n\n外键关系:\n  - city.CountryCode -\u003e country.Code\n  - country.Code -\u003e countrylanguage.CountryCode\n","metadata":{"execution_time":1.00790417,"prompt_tokens":707,"response_tokens":26,"total_tokens":733},"sequence_num":821}
{"idx":3291118967,"db_id":"orchestra","query":"How many conductors are there?","pred":"SELECT COUNT(*) FROM Conductor;","ground_truth":"SELECT count(*) FROM conductor","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.651289709,"prompt_tokens":709,"response_tokens":8,"total_tokens":717},"sequence_num":822}
{"idx":1017451331,"db_id":"orchestra","query":"Count the number of conductors.","pred":"SELECT COUNT(*) FROM conductor;","ground_truth":"SELECT count(*) FROM conductor","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":1.528241693,"prompt_tokens":709,"response_tokens":7,"total_tokens":716},"sequence_num":823}
{"idx":3404862154,"db_id":"orchestra","query":"List the names of conductors in ascending order of age.","pred":"SELECT Name\nFROM conductor\nORDER BY Age ASC;","ground_truth":"SELECT Name FROM conductor ORDER BY Age ASC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.857154629,"prompt_tokens":714,"response_tokens":12,"total_tokens":726},"sequence_num":824}
{"idx":1341737423,"db_id":"orchestra","query":"What are the names of conductors, ordered by age?","pred":"SELECT Name FROM conductor ORDER BY Age;","ground_truth":"SELECT Name FROM conductor ORDER BY Age ASC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - performance.Performance_ID -\u003e show.Performance_ID\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n","metadata":{"execution_time":0.68292637,"prompt_tokens":714,"response_tokens":9,"total_tokens":723},"sequence_num":825}
{"idx":1245068922,"db_id":"orchestra","query":"What are the names of conductors whose nationalities are not \"USA\"?","pred":"SELECT Name FROM conductor WHERE Nationality \u003c\u003e 'USA';","ground_truth":"SELECT Name FROM conductor WHERE Nationality != 'USA'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":1.663207278,"prompt_tokens":717,"response_tokens":12,"total_tokens":729},"sequence_num":826}
{"idx":1203501562,"db_id":"orchestra","query":"Return the names of conductors that do not have the nationality \"USA\".","pred":"SELECT Name FROM Conductor WHERE Nationality \u003c\u003e 'USA';","ground_truth":"SELECT Name FROM conductor WHERE Nationality != 'USA'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.9923683,"prompt_tokens":717,"response_tokens":13,"total_tokens":730},"sequence_num":827}
{"idx":4275934250,"db_id":"orchestra","query":"What are the record companies of orchestras in descending order of years in which they were founded?","pred":"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;","ground_truth":"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.971672507,"prompt_tokens":721,"response_tokens":15,"total_tokens":736},"sequence_num":828}
{"idx":3807200182,"db_id":"orchestra","query":"Return the record companies of orchestras, sorted descending by the years in which they were founded.","pred":"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;","ground_truth":"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.70837478,"prompt_tokens":721,"response_tokens":15,"total_tokens":736},"sequence_num":829}
{"idx":2041102196,"db_id":"orchestra","query":"What is the average attendance of shows?","pred":"SELECT AVG(Attendance) FROM show;","ground_truth":"SELECT avg(Attendance) FROM SHOW","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.636794558,"prompt_tokens":710,"response_tokens":9,"total_tokens":719},"sequence_num":830}
{"idx":681358454,"db_id":"orchestra","query":"Return the average attendance across all shows.","pred":"SELECT AVG(Attendance) FROM show;","ground_truth":"SELECT avg(Attendance) FROM SHOW","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.918644543,"prompt_tokens":710,"response_tokens":9,"total_tokens":719},"sequence_num":831}
{"idx":1375612105,"db_id":"orchestra","query":"What are the maximum and minimum share of performances whose type is not \"Live final\".","pred":"SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final';","ground_truth":"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.980428864,"prompt_tokens":719,"response_tokens":19,"total_tokens":738},"sequence_num":832}
{"idx":3873620673,"db_id":"orchestra","query":"Return the maximum and minimum shares for performances that do not have the type \"Live final\".","pred":"SELECT MAX(Share), MIN(Share) FROM performance WHERE Type \u003c\u003e 'Live final';","ground_truth":"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.979720963,"prompt_tokens":720,"response_tokens":19,"total_tokens":739},"sequence_num":833}
{"idx":2694063687,"db_id":"orchestra","query":"How many different nationalities do conductors have?","pred":"SELECT COUNT(DISTINCT Nationality) AS Number_of_Nationalities FROM Conductor;","ground_truth":"SELECT count(DISTINCT Nationality) FROM conductor","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":1.128559485,"prompt_tokens":712,"response_tokens":19,"total_tokens":731},"sequence_num":834}
{"idx":4072974437,"db_id":"orchestra","query":"Count the number of different nationalities of conductors.","pred":"SELECT COUNT(DISTINCT Nationality) AS Number_of_Different_Nationalities FROM conductor;","ground_truth":"SELECT count(DISTINCT Nationality) FROM conductor","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.906955798,"prompt_tokens":713,"response_tokens":20,"total_tokens":733},"sequence_num":835}
{"idx":1123748976,"db_id":"orchestra","query":"List names of conductors in descending order of years of work.","pred":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC;","ground_truth":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.811206578,"prompt_tokens":715,"response_tokens":12,"total_tokens":727},"sequence_num":836}
{"idx":2211875751,"db_id":"orchestra","query":"What are the names of conductors, sorted descending by the number of years they have worked?","pred":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC;","ground_truth":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - performance.Performance_ID -\u003e show.Performance_ID\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n","metadata":{"execution_time":3.902458457,"prompt_tokens":721,"response_tokens":12,"total_tokens":733},"sequence_num":837}
{"idx":2098914258,"db_id":"orchestra","query":"List the name of the conductor with the most years of work.","pred":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;","ground_truth":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.74286695,"prompt_tokens":715,"response_tokens":15,"total_tokens":730},"sequence_num":838}
{"idx":1385683741,"db_id":"orchestra","query":"What is the name of the conductor who has worked the greatest number of years?","pred":"SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC \nLIMIT 1;","ground_truth":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - performance.Performance_ID -\u003e show.Performance_ID\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n","metadata":{"execution_time":1.028573189,"prompt_tokens":718,"response_tokens":18,"total_tokens":736},"sequence_num":839}
{"idx":1821931525,"db_id":"orchestra","query":"Show the names of conductors and the orchestras they have conducted.","pred":"SELECT conductor.Name, orchestra.Orchestra\nFROM conductor\nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;","ground_truth":"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":1.84636994,"prompt_tokens":716,"response_tokens":25,"total_tokens":741},"sequence_num":840}
{"idx":2159827448,"db_id":"orchestra","query":"What are the names of conductors as well as the corresonding orchestras that they have conducted?","pred":"SELECT conductor.Name, orchestra.Orchestra\nFROM conductor\nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;","ground_truth":"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.982576526,"prompt_tokens":723,"response_tokens":25,"total_tokens":748},"sequence_num":841}
{"idx":3788893302,"db_id":"orchestra","query":"Show the names of conductors that have conducted more than one orchestras.","pred":"SELECT Name\nFROM conductor\nGROUP BY Name\nHAVING COUNT(DISTINCT Orchestra_ID) \u003e 1;","ground_truth":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  \u003e  1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.949250637,"prompt_tokens":717,"response_tokens":24,"total_tokens":741},"sequence_num":842}
{"idx":1368180807,"db_id":"orchestra","query":"What are the names of conductors who have conducted at more than one orchestra?","pred":"SELECT Name\nFROM conductor\nGROUP BY Name\nHAVING COUNT(DISTINCT Orchestra_ID) \u003e 1;","ground_truth":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  \u003e  1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n","metadata":{"execution_time":0.760124515,"prompt_tokens":718,"response_tokens":24,"total_tokens":742},"sequence_num":843}
{"idx":3730784419,"db_id":"orchestra","query":"Show the name of the conductor that has conducted the most number of orchestras.","pred":"SELECT Name\nFROM conductor\nWHERE Conductor_ID = (\n    SELECT Conductor_ID\n    FROM orchestra\n    GROUP BY Conductor_ID\n    ORDER BY COUNT(Orchestra_ID) DESC\n    LIMIT 1\n);","ground_truth":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":1.033795815,"prompt_tokens":718,"response_tokens":47,"total_tokens":765},"sequence_num":844}
{"idx":635417026,"db_id":"orchestra","query":"What is the name of the conductor who has conducted the most orchestras?","pred":"SELECT Name FROM conductor GROUP BY Name ORDER BY COUNT(DISTINCT Orchestra_ID) DESC LIMIT 1;","ground_truth":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.759810317,"prompt_tokens":717,"response_tokens":22,"total_tokens":739},"sequence_num":845}
{"idx":1654881122,"db_id":"orchestra","query":"Please show the name of the conductor that has conducted orchestras founded after 2008.","pred":"SELECT Name \nFROM conductor \nWHERE Conductor_ID IN (\n    SELECT Conductor_ID \n    FROM orchestra \n    WHERE Year_of_Founded \u003e 2008\n);","ground_truth":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  \u003e  2008","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":1.864184647,"prompt_tokens":720,"response_tokens":35,"total_tokens":755},"sequence_num":846}
{"idx":1966913980,"db_id":"orchestra","query":"What are the names of conductors who have conducted orchestras founded after the year 2008?","pred":"SELECT Name \nFROM conductor \nWHERE Conductor_ID IN (SELECT Conductor_ID \n                       FROM orchestra \n                       WHERE Year_of_Founded \u003e 2008);","ground_truth":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  \u003e  2008","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":2.049596316,"prompt_tokens":722,"response_tokens":33,"total_tokens":755},"sequence_num":847}
{"idx":3769541101,"db_id":"orchestra","query":"Please show the different record companies and the corresponding number of orchestras.","pred":"SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;","ground_truth":"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.818960656,"prompt_tokens":716,"response_tokens":28,"total_tokens":744},"sequence_num":848}
{"idx":784443062,"db_id":"orchestra","query":"How many orchestras does each record company manage?","pred":"SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Number_of_Orchestras_managed FROM orchestra GROUP BY Record_Company;","ground_truth":"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n","metadata":{"execution_time":0.987181517,"prompt_tokens":712,"response_tokens":29,"total_tokens":741},"sequence_num":849}
{"idx":164337070,"db_id":"orchestra","query":"Please show the record formats of orchestras in ascending order of count.","pred":"SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;","ground_truth":"SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n","metadata":{"execution_time":1.325981161,"prompt_tokens":716,"response_tokens":18,"total_tokens":734},"sequence_num":850}
{"idx":1479794160,"db_id":"orchestra","query":"What are the major record formats of orchestras, sorted by their frequency?","pred":"SELECT Major_Record_Format, COUNT(*) AS Frequency\nFROM orchestra\nGROUP BY Major_Record_Format\nORDER BY Frequency DESC;","ground_truth":"SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC","is_correct":false,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":2.498071225,"prompt_tokens":717,"response_tokens":25,"total_tokens":742},"sequence_num":851}
{"idx":2425208548,"db_id":"orchestra","query":"List the record company shared by the most number of orchestras.","pred":"SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n","metadata":{"execution_time":0.982421147,"prompt_tokens":715,"response_tokens":21,"total_tokens":736},"sequence_num":852}
{"idx":590035537,"db_id":"orchestra","query":"What is the record company used by the greatest number of orchestras?","pred":"SELECT Record_Company\nFROM orchestra\nGROUP BY Record_Company\nORDER BY COUNT(Orchestra_ID) DESC\nLIMIT 1;","ground_truth":"SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - performance.Performance_ID -\u003e show.Performance_ID\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n","metadata":{"execution_time":0.988454168,"prompt_tokens":716,"response_tokens":29,"total_tokens":745},"sequence_num":853}
{"idx":243138769,"db_id":"orchestra","query":"List the names of orchestras that have no performance.","pred":"SELECT Orchestra\nFROM orchestra\nWHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);","ground_truth":"SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.80452215,"prompt_tokens":713,"response_tokens":19,"total_tokens":732},"sequence_num":854}
{"idx":1184432585,"db_id":"orchestra","query":"What are the orchestras that do not have any performances?","pred":"SELECT Orchestra\nFROM orchestra\nWHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);","ground_truth":"SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":0.9688262,"prompt_tokens":714,"response_tokens":19,"total_tokens":733},"sequence_num":855}
{"idx":1684692070,"db_id":"orchestra","query":"Show the record companies shared by orchestras founded before 2003 and after 2003.","pred":"SELECT DISTINCT Record_Company\nFROM orchestra\nWHERE Year_of_Founded \u003c 2003\nUNION\nSELECT DISTINCT Record_Company\nFROM orchestra\nWHERE Year_of_Founded \u003e 2003;","ground_truth":"SELECT Record_Company FROM orchestra WHERE Year_of_Founded  \u003c  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  \u003e  2003","is_correct":false,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":1.092551485,"prompt_tokens":721,"response_tokens":42,"total_tokens":763},"sequence_num":856}
{"idx":2831344486,"db_id":"orchestra","query":"What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?","pred":"SELECT DISTINCT Record_Company \nFROM orchestra \nWHERE Year_of_Founded \u003c 2003 \nINTERSECT \nSELECT DISTINCT Record_Company \nFROM orchestra \nWHERE Year_of_Founded \u003e 2003;","ground_truth":"SELECT Record_Company FROM orchestra WHERE Year_of_Founded  \u003c  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  \u003e  2003","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n","metadata":{"execution_time":1.510408826,"prompt_tokens":727,"response_tokens":43,"total_tokens":770},"sequence_num":857}
{"idx":3143061253,"db_id":"orchestra","query":"Find the number of orchestras whose record format is \"CD\" or \"DVD\".","pred":"SELECT COUNT(DISTINCT Orchestra) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');","ground_truth":"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n","metadata":{"execution_time":0.931112359,"prompt_tokens":719,"response_tokens":21,"total_tokens":740},"sequence_num":858}
{"idx":829356918,"db_id":"orchestra","query":"Count the number of orchestras that have CD or DVD as their record format.","pred":"SELECT COUNT(DISTINCT Orchestra) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');","ground_truth":"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n","metadata":{"execution_time":0.923101785,"prompt_tokens":718,"response_tokens":21,"total_tokens":739},"sequence_num":859}
{"idx":2324152996,"db_id":"orchestra","query":"Show the years in which orchestras that have given more than one performance are founded.","pred":"SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING COUNT(Orchestra_ID) \u003e 1;","ground_truth":"SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  \u003e  1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n  - performance.Performance_ID -\u003e show.Performance_ID\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n","metadata":{"execution_time":0.816312164,"prompt_tokens":719,"response_tokens":26,"total_tokens":745},"sequence_num":860}
{"idx":122494489,"db_id":"orchestra","query":"What are years of founding for orchestras that have had more than a single performance?","pred":"SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) \u003e 1);","ground_truth":"SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  \u003e  1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: conductor\n列:\n  - Conductor_ID: number (主键)\n  - Name: text\n  - Age: number\n  - Nationality: text\n  - Year_of_Work: number\n\n表名: orchestra\n列:\n  - Orchestra_ID: number (主键)\n  - Orchestra: text\n  - Conductor_ID: number (外键)\n  - Record_Company: text\n  - Year_of_Founded: number\n  - Major_Record_Format: text\n\n表名: performance\n列:\n  - Performance_ID: number (主键)\n  - Orchestra_ID: number (外键)\n  - Type: text\n  - Date: text\n  - Official_ratings_(millions): number\n  - Weekly_rank: text\n  - Share: text\n\n表名: show\n列:\n  - Show_ID: number\n  - Performance_ID: number (外键)\n  - If_first_show: others\n  - Result: text\n  - Attendance: number\n\n外键关系:\n  - performance.Performance_ID -\u003e show.Performance_ID\n  - orchestra.Orchestra_ID -\u003e performance.Orchestra_ID\n  - conductor.Conductor_ID -\u003e orchestra.Conductor_ID\n","metadata":{"execution_time":1.627135468,"prompt_tokens":719,"response_tokens":30,"total_tokens":749},"sequence_num":861}
{"idx":3392890780,"db_id":"network_1","query":"How many high schoolers are there?","pred":"SELECT COUNT(*) FROM Highschooler;","ground_truth":"SELECT count(*) FROM Highschooler","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.644070906,"prompt_tokens":601,"response_tokens":9,"total_tokens":610},"sequence_num":862}
{"idx":1493760430,"db_id":"network_1","query":"Count the number of high schoolers.","pred":"SELECT COUNT(*) FROM Highschooler;","ground_truth":"SELECT count(*) FROM Highschooler","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.740763008,"prompt_tokens":601,"response_tokens":9,"total_tokens":610},"sequence_num":863}
{"idx":2312655568,"db_id":"network_1","query":"Show the names and grades of each high schooler.","pred":"SELECT name, grade FROM Highschooler;","ground_truth":"SELECT name ,  grade FROM Highschooler","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.649900707,"prompt_tokens":604,"response_tokens":10,"total_tokens":614},"sequence_num":864}
{"idx":1892141634,"db_id":"network_1","query":"What are the names and grades for each high schooler?","pred":"SELECT name, grade FROM Highschooler;","ground_truth":"SELECT name ,  grade FROM Highschooler","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":1.110246097,"prompt_tokens":605,"response_tokens":10,"total_tokens":615},"sequence_num":865}
{"idx":1667581519,"db_id":"network_1","query":"Show all the grades of the high schoolers.","pred":"SELECT DISTINCT grade FROM Highschooler;","ground_truth":"SELECT grade FROM Highschooler","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.931770839,"prompt_tokens":603,"response_tokens":9,"total_tokens":612},"sequence_num":866}
{"idx":1328753922,"db_id":"network_1","query":"What is the grade of each high schooler?","pred":"SELECT ID, grade FROM Highschooler;","ground_truth":"SELECT grade FROM Highschooler","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":1.11375791,"prompt_tokens":603,"response_tokens":10,"total_tokens":613},"sequence_num":867}
{"idx":928695084,"db_id":"network_1","query":"What grade is Kyle in?","pred":"SELECT grade FROM Highschooler WHERE name = 'Kyle';","ground_truth":"SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n","metadata":{"execution_time":0.938621206,"prompt_tokens":599,"response_tokens":13,"total_tokens":612},"sequence_num":868}
{"idx":4129513707,"db_id":"network_1","query":"Return the grade for the high schooler named Kyle.","pred":"SELECT grade FROM Highschooler WHERE name = 'Kyle';","ground_truth":"SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":1.341005926,"prompt_tokens":604,"response_tokens":13,"total_tokens":617},"sequence_num":869}
{"idx":4256944383,"db_id":"network_1","query":"Show the names of all high schoolers in grade 10.","pred":"SELECT name FROM Highschooler WHERE grade = 10;","ground_truth":"SELECT name FROM Highschooler WHERE grade  =  10","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":1.079545833,"prompt_tokens":606,"response_tokens":13,"total_tokens":619},"sequence_num":870}
{"idx":1404806645,"db_id":"network_1","query":"What are the names of all high schoolers in grade 10?","pred":"SELECT name FROM Highschooler WHERE grade = 10;","ground_truth":"SELECT name FROM Highschooler WHERE grade  =  10","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.944123503,"prompt_tokens":607,"response_tokens":13,"total_tokens":620},"sequence_num":871}
{"idx":3994801844,"db_id":"network_1","query":"Show the ID of the high schooler named Kyle.","pred":"SELECT ID FROM Highschooler WHERE name = 'Kyle';","ground_truth":"SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.924800592,"prompt_tokens":604,"response_tokens":13,"total_tokens":617},"sequence_num":872}
{"idx":125703083,"db_id":"network_1","query":"What is Kyle's id?","pred":"SELECT ID FROM Highschooler WHERE name = 'Kyle';","ground_truth":"SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":1.4894794089999999,"prompt_tokens":599,"response_tokens":13,"total_tokens":612},"sequence_num":873}
{"idx":328049841,"db_id":"network_1","query":"How many high schoolers are there in grade 9 or 10?","pred":"SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);","ground_truth":"SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":1.7386706790000002,"prompt_tokens":608,"response_tokens":17,"total_tokens":625},"sequence_num":874}
{"idx":2284754114,"db_id":"network_1","query":"Count the number of high schoolers in grades 9 or 10.","pred":"SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);","ground_truth":"SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n","metadata":{"execution_time":0.9423327,"prompt_tokens":608,"response_tokens":17,"total_tokens":625},"sequence_num":875}
{"idx":3037095517,"db_id":"network_1","query":"Show the number of high schoolers for each grade.","pred":"SELECT grade, COUNT(*) AS num_highschoolers FROM Highschooler GROUP BY grade;","ground_truth":"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.81701391,"prompt_tokens":604,"response_tokens":19,"total_tokens":623},"sequence_num":876}
{"idx":278304781,"db_id":"network_1","query":"How many high schoolers are in each grade?","pred":"SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade;","ground_truth":"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.735450922,"prompt_tokens":603,"response_tokens":16,"total_tokens":619},"sequence_num":877}
{"idx":3451139913,"db_id":"network_1","query":"Which grade has the most high schoolers?","pred":"SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.755789877,"prompt_tokens":602,"response_tokens":19,"total_tokens":621},"sequence_num":878}
{"idx":1616077665,"db_id":"network_1","query":"Return the grade that has the greatest number of high schoolers.","pred":"SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.804873561,"prompt_tokens":606,"response_tokens":19,"total_tokens":625},"sequence_num":879}
{"idx":3317249067,"db_id":"network_1","query":"Show me all grades that have at least 4 students.","pred":"SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) \u003e= 4;","ground_truth":"SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  \u003e=  4","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.964636574,"prompt_tokens":605,"response_tokens":19,"total_tokens":624},"sequence_num":880}
{"idx":4104522784,"db_id":"network_1","query":"Which grades have 4 or more high schoolers?","pred":"SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) \u003e= 4;","ground_truth":"SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  \u003e=  4","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":1.915263957,"prompt_tokens":604,"response_tokens":18,"total_tokens":622},"sequence_num":881}
{"idx":1588588613,"db_id":"network_1","query":"Show the student IDs and numbers of friends corresponding to each.","pred":"SELECT student_id, COUNT(friend_id) AS num_of_friends FROM Friend GROUP BY student_id;","ground_truth":"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.937963933,"prompt_tokens":605,"response_tokens":21,"total_tokens":626},"sequence_num":882}
{"idx":2255165784,"db_id":"network_1","query":"How many friends does each student have?","pred":"SELECT student_id, COUNT(friend_id) AS num_friends\nFROM Friend\nGROUP BY student_id;","ground_truth":"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.810397519,"prompt_tokens":601,"response_tokens":22,"total_tokens":623},"sequence_num":883}
{"idx":733810568,"db_id":"network_1","query":"Show the names of high school students and their corresponding number of friends.","pred":"SELECT H.name, COUNT(F.friend_id) AS num_friends\nFROM Highschooler H\nLEFT JOIN Friend F ON H.ID = F.student_id\nGROUP BY H.name;","ground_truth":"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":1.503309079,"prompt_tokens":607,"response_tokens":37,"total_tokens":644},"sequence_num":884}
{"idx":3423102325,"db_id":"network_1","query":"What are the names of the high schoolers and how many friends does each have?","pred":"SELECT name, COUNT(friend_id) AS num_of_friends\nFROM Highschooler\nJOIN Friend ON Highschooler.ID = Friend.student_id\nGROUP BY Highschooler.ID;","ground_truth":"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":1.804667679,"prompt_tokens":610,"response_tokens":38,"total_tokens":648},"sequence_num":885}
{"idx":2106795301,"db_id":"network_1","query":"What is the name of the high schooler who has the greatest number of friends?","pred":"SELECT name\nFROM Highschooler\nWHERE ID = (SELECT student_id\n            FROM Friend\n            GROUP BY student_id\n            ORDER BY COUNT(friend_id) DESC\n            LIMIT 1);","ground_truth":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.863355901,"prompt_tokens":610,"response_tokens":42,"total_tokens":652},"sequence_num":886}
{"idx":2984619400,"db_id":"network_1","query":"Return the name of the high school student with the most friends.","pred":"SELECT name \nFROM Highschooler \nWHERE ID = (SELECT student_id \n            FROM Friend \n            GROUP BY student_id \n            ORDER BY COUNT(friend_id) DESC \n            LIMIT 1);","ground_truth":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":1.194480599,"prompt_tokens":606,"response_tokens":42,"total_tokens":648},"sequence_num":887}
{"idx":3595309031,"db_id":"network_1","query":"Show the names of high schoolers who have at least 3 friends.","pred":"SELECT name FROM Highschooler GROUP BY name HAVING COUNT(*) \u003e= 3;","ground_truth":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  \u003e=  3","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.796674006,"prompt_tokens":608,"response_tokens":18,"total_tokens":626},"sequence_num":888}
{"idx":1502144995,"db_id":"network_1","query":"What are the names of high schoolers who have 3 or more friends?","pred":"SELECT name\nFROM Highschooler\nWHERE ID IN (SELECT student_id\n             FROM Friend\n             GROUP BY student_id\n             HAVING COUNT(friend_id) \u003e= 3);","ground_truth":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  \u003e=  3","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.941987843,"prompt_tokens":609,"response_tokens":39,"total_tokens":648},"sequence_num":889}
{"idx":3280194341,"db_id":"network_1","query":"Show the names of all of the high schooler Kyle's friends.","pred":"SELECT H2.name\nFROM Highschooler H1, Highschooler H2, Friend F\nWHERE H1.name = 'Kyle' AND H1.ID = F.student_id AND H2.ID = F.friend_id;","ground_truth":"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.950351221,"prompt_tokens":607,"response_tokens":47,"total_tokens":654},"sequence_num":890}
{"idx":1780805267,"db_id":"network_1","query":"Return the names of friends of the high school student Kyle.","pred":"SELECT H2.name\nFROM Highschooler H1, Highschooler H2, Friend F\nWHERE H1.name = 'Kyle' AND H1.ID = F.student_id AND H2.ID = F.friend_id;","ground_truth":"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":1.162814096,"prompt_tokens":605,"response_tokens":47,"total_tokens":652},"sequence_num":891}
{"idx":1462376261,"db_id":"network_1","query":"How many friends does the high school student Kyle have?","pred":"SELECT COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');","ground_truth":"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.807203889,"prompt_tokens":604,"response_tokens":25,"total_tokens":629},"sequence_num":892}
{"idx":2556878710,"db_id":"network_1","query":"Count the number of friends Kyle has.","pred":"SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');","ground_truth":"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.7444371,"prompt_tokens":601,"response_tokens":23,"total_tokens":624},"sequence_num":893}
{"idx":2730131862,"db_id":"network_1","query":"Show ids of all students who do not have any friends.","pred":"SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);","ground_truth":"SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.686681881,"prompt_tokens":605,"response_tokens":18,"total_tokens":623},"sequence_num":894}
{"idx":3438313848,"db_id":"network_1","query":"What are the ids of high school students who do not have friends?","pred":"SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);","ground_truth":"SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":3.387733709,"prompt_tokens":607,"response_tokens":18,"total_tokens":625},"sequence_num":895}
{"idx":1587018072,"db_id":"network_1","query":"Show names of all high school students who do not have any friends.","pred":"SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);","ground_truth":"SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.95586139,"prompt_tokens":607,"response_tokens":18,"total_tokens":625},"sequence_num":896}
{"idx":1839543687,"db_id":"network_1","query":"What are the names of students who have no friends?","pred":"SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);","ground_truth":"SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":1.298413482,"prompt_tokens":604,"response_tokens":18,"total_tokens":622},"sequence_num":897}
{"idx":439702359,"db_id":"network_1","query":"Show the ids of high schoolers who have friends and are also liked by someone else.","pred":"SELECT DISTINCT student_id\nFROM Friend\nWHERE student_id IN (SELECT student_id FROM Likes);","ground_truth":"SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":1.771982218,"prompt_tokens":611,"response_tokens":20,"total_tokens":631},"sequence_num":898}
{"idx":86407217,"db_id":"network_1","query":"What are the ids of students who both have friends and are liked?","pred":"SELECT DISTINCT student_id\nFROM Friend\nWHERE student_id IN (SELECT student_id FROM Likes)\nAND student_id IN (SELECT friend_id FROM Friend);","ground_truth":"SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n","metadata":{"execution_time":0.787646584,"prompt_tokens":607,"response_tokens":31,"total_tokens":638},"sequence_num":899}
{"idx":3867288000,"db_id":"network_1","query":"Show name of all students who have some friends and also are liked by someone else.","pred":"SELECT DISTINCT H.name\nFROM Highschooler H\nJOIN Friend F ON H.ID = F.student_id\nJOIN Likes L ON H.ID = L.student_id\nWHERE H.ID IN (SELECT friend_id FROM Friend)\nAND H.ID IN (SELECT liked_id FROM Likes);","ground_truth":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n","metadata":{"execution_time":1.012721842,"prompt_tokens":610,"response_tokens":56,"total_tokens":666},"sequence_num":900}
{"idx":3288554501,"db_id":"network_1","query":"What are the names of high schoolers who both have friends and are liked?","pred":"SELECT DISTINCT H.name\nFROM Highschooler H\nJOIN Friend F ON H.ID = F.student_id\nJOIN Likes L ON H.ID = L.student_id\nWHERE H.ID IN (SELECT student_id FROM Friend)\nAND H.ID IN (SELECT student_id FROM Likes);","ground_truth":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.984874023,"prompt_tokens":609,"response_tokens":56,"total_tokens":665},"sequence_num":901}
{"idx":2843604950,"db_id":"network_1","query":"Count the number of likes for each student id.","pred":"SELECT student_id, COUNT(liked_id) AS number_of_likes FROM Likes GROUP BY student_id;","ground_truth":"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":2.339284036,"prompt_tokens":603,"response_tokens":21,"total_tokens":624},"sequence_num":902}
{"idx":3848683439,"db_id":"network_1","query":"How many likes correspond to each student id?","pred":"SELECT student_id, COUNT(liked_id) AS like_count FROM Likes GROUP BY student_id;","ground_truth":"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.74892963,"prompt_tokens":602,"response_tokens":20,"total_tokens":622},"sequence_num":903}
{"idx":1411845621,"db_id":"network_1","query":"Show the names of high schoolers who have likes, and numbers of likes for each.","pred":"SELECT H.name, COUNT(L.liked_id) AS num_likes\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.name;","ground_truth":"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.877902767,"prompt_tokens":611,"response_tokens":37,"total_tokens":648},"sequence_num":904}
{"idx":2466336741,"db_id":"network_1","query":"What are the names of high schoolers who have likes, and how many likes does each have?","pred":"SELECT H.name, COUNT(L.student_id) AS num_likes\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.name;","ground_truth":"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.872922096,"prompt_tokens":613,"response_tokens":36,"total_tokens":649},"sequence_num":905}
{"idx":2565712542,"db_id":"network_1","query":"What is the name of the high schooler who has the greatest number of likes?","pred":"SELECT name\nFROM Highschooler\nWHERE ID = (SELECT student_id\n            FROM Likes\n            GROUP BY student_id\n            ORDER BY COUNT(liked_id) DESC\n            LIMIT 1);","ground_truth":"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.862182207,"prompt_tokens":610,"response_tokens":42,"total_tokens":652},"sequence_num":906}
{"idx":3730007954,"db_id":"network_1","query":"Give the name of the student with the most likes.","pred":"SELECT name FROM Highschooler WHERE ID = (SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1);","ground_truth":"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.920067812,"prompt_tokens":604,"response_tokens":29,"total_tokens":633},"sequence_num":907}
{"idx":696104669,"db_id":"network_1","query":"Show the names of students who have at least 2 likes.","pred":"SELECT name FROM Highschooler\nWHERE ID IN (SELECT student_id FROM Likes\n             GROUP BY student_id\n             HAVING COUNT(liked_id) \u003e= 2);","ground_truth":"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  \u003e=  2","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":1.124227911,"prompt_tokens":606,"response_tokens":36,"total_tokens":642},"sequence_num":908}
{"idx":1040037921,"db_id":"network_1","query":"What are the names of students who have 2 or more likes?","pred":"SELECT name FROM Highschooler GROUP BY name HAVING COUNT(*) \u003e= 2;","ground_truth":"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  \u003e=  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n","metadata":{"execution_time":0.726614193,"prompt_tokens":607,"response_tokens":18,"total_tokens":625},"sequence_num":909}
{"idx":1643442404,"db_id":"network_1","query":"Show the names of students who have a grade higher than 5 and have at least 2 friends.","pred":"SELECT name \nFROM Highschooler \nWHERE grade \u003e 5 \nAND ID IN (SELECT student_id \n           FROM Friend \n           GROUP BY student_id \n           HAVING COUNT(friend_id) \u003e= 2);","ground_truth":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  \u003e  5 GROUP BY T1.student_id HAVING count(*)  \u003e=  2","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":1.332921585,"prompt_tokens":614,"response_tokens":45,"total_tokens":659},"sequence_num":910}
{"idx":86505761,"db_id":"network_1","query":"What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?","pred":"SELECT name \nFROM Highschooler \nWHERE grade \u003e 5 \nAND ID IN (SELECT student_id \n           FROM Friend \n           GROUP BY student_id \n           HAVING COUNT(friend_id) \u003e= 2);","ground_truth":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  \u003e  5 GROUP BY T1.student_id HAVING count(*)  \u003e=  2","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.948785238,"prompt_tokens":617,"response_tokens":45,"total_tokens":662},"sequence_num":911}
{"idx":2256185578,"db_id":"network_1","query":"How many likes does Kyle have?","pred":"SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');","ground_truth":"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.881095641,"prompt_tokens":600,"response_tokens":23,"total_tokens":623},"sequence_num":912}
{"idx":920028216,"db_id":"network_1","query":"Return the number of likes that the high schooler named Kyle has.","pred":"SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');","ground_truth":"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.733695177,"prompt_tokens":607,"response_tokens":23,"total_tokens":630},"sequence_num":913}
{"idx":872168375,"db_id":"network_1","query":"Find the average grade of all students who have some friends.","pred":"SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend);","ground_truth":"SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.876849045,"prompt_tokens":605,"response_tokens":21,"total_tokens":626},"sequence_num":914}
{"idx":3945663474,"db_id":"network_1","query":"What is the average grade of students who have friends?","pred":"SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend);","ground_truth":"SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.914451075,"prompt_tokens":604,"response_tokens":20,"total_tokens":624},"sequence_num":915}
{"idx":309838008,"db_id":"network_1","query":"Find the minimum grade of students who have no friends.","pred":"SELECT MIN(grade) \nFROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend);","ground_truth":"SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n","metadata":{"execution_time":0.932299068,"prompt_tokens":604,"response_tokens":23,"total_tokens":627},"sequence_num":916}
{"idx":4153454729,"db_id":"network_1","query":"What is the lowest grade of students who do not have any friends?","pred":"SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);","ground_truth":"SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Highschooler\n列:\n  - ID: number (主键)\n  - name: text\n  - grade: number\n\n表名: Friend\n列:\n  - student_id: number (主键) (外键)\n  - friend_id: number (外键)\n\n表名: Likes\n列:\n  - student_id: number (主键) (外键)\n  - liked_id: number (外键)\n\n外键关系:\n  - Highschooler.ID -\u003e Likes.student_id\n  - Highschooler.ID -\u003e Likes.liked_id\n  - Highschooler.ID -\u003e Friend.friend_id\n  - Highschooler.ID -\u003e Friend.student_id\n","metadata":{"execution_time":0.73087075,"prompt_tokens":607,"response_tokens":21,"total_tokens":628},"sequence_num":917}
{"idx":1730750092,"db_id":"dog_kennels","query":"Which states have both owners and professionals living there?","pred":"SELECT DISTINCT state \nFROM Owners \nWHERE state IN (SELECT state FROM Professionals);","ground_truth":"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n","metadata":{"execution_time":0.899775919,"prompt_tokens":1000,"response_tokens":17,"total_tokens":1017},"sequence_num":918}
{"idx":448831992,"db_id":"dog_kennels","query":"Find the states where both owners and professionals live.","pred":"SELECT DISTINCT state \nFROM Owners \nWHERE state IN (SELECT state FROM Professionals);","ground_truth":"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n","metadata":{"execution_time":1.023524802,"prompt_tokens":1000,"response_tokens":17,"total_tokens":1017},"sequence_num":919}
{"idx":340802177,"db_id":"dog_kennels","query":"What is the average age of the dogs who have gone through any treatments?","pred":"SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);","ground_truth":"SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n","metadata":{"execution_time":1.690335994,"prompt_tokens":1005,"response_tokens":19,"total_tokens":1024},"sequence_num":920}
{"idx":1048553870,"db_id":"dog_kennels","query":"Find the average age of the dogs who went through treatments.","pred":"SELECT AVG(age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;","ground_truth":"SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":0.722128447,"prompt_tokens":1002,"response_tokens":22,"total_tokens":1024},"sequence_num":921}
{"idx":2709069463,"db_id":"dog_kennels","query":"Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.","pred":"SELECT professional_id, last_name, cell_number\nFROM Professionals\nWHERE state = 'Indiana'\nOR professional_id IN (\n    SELECT professional_id\n    FROM Treatments\n    GROUP BY professional_id\n    HAVING COUNT(*) \u003e 2\n);","ground_truth":"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  \u003e  2","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n","metadata":{"execution_time":1.595554924,"prompt_tokens":1021,"response_tokens":51,"total_tokens":1072},"sequence_num":922}
{"idx":2519362,"db_id":"dog_kennels","query":"Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.","pred":"SELECT professional_id, last_name, cell_number \nFROM Professionals \nWHERE state = 'Indiana' OR professional_id IN \n    (SELECT professional_id \n     FROM Treatments \n     GROUP BY professional_id \n     HAVING COUNT(*) \u003e 2);","ground_truth":"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  \u003e  2","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.185935506,"prompt_tokens":1017,"response_tokens":51,"total_tokens":1068},"sequence_num":923}
{"idx":2714374354,"db_id":"dog_kennels","query":"Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .","pred":"SELECT name \nFROM Dogs \nWHERE dog_id NOT IN (\n    SELECT dog_id \n    FROM Treatments \n    WHERE cost_of_treatment \u003e 1000\n);","ground_truth":"select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  \u003e  1000 )","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n","metadata":{"execution_time":1.13784401,"prompt_tokens":1010,"response_tokens":35,"total_tokens":1045},"sequence_num":924}
{"idx":3369519059,"db_id":"dog_kennels","query":"What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?","pred":"SELECT name \nFROM Dogs \nWHERE dog_id IN (\n    SELECT dog_id \n    FROM Treatments \n    GROUP BY dog_id \n    HAVING SUM(cost_of_treatment) \u003c= 1000\n);","ground_truth":"select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  \u003e  1000 )","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n","metadata":{"execution_time":1.164338175,"prompt_tokens":1012,"response_tokens":43,"total_tokens":1055},"sequence_num":925}
{"idx":2647627629,"db_id":"dog_kennels","query":"Which first names are used for professionals or owners but are not used as dog names?","pred":"SELECT first_name FROM Owners\nUNION\nSELECT first_name FROM Professionals\nEXCEPT\nSELECT name FROM Dogs;","ground_truth":"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":0.874500154,"prompt_tokens":1007,"response_tokens":24,"total_tokens":1031},"sequence_num":926}
{"idx":3089440972,"db_id":"dog_kennels","query":"Find the first names that are used for professionals or owners but are not used as dog names.","pred":"SELECT first_name \nFROM (\n    SELECT first_name FROM Owners\n    UNION\n    SELECT first_name FROM Professionals\n) AS Names\nWHERE first_name NOT IN (SELECT name FROM Dogs);","ground_truth":"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n","metadata":{"execution_time":0.862604628,"prompt_tokens":1009,"response_tokens":39,"total_tokens":1048},"sequence_num":927}
{"idx":2332503634,"db_id":"dog_kennels","query":"Which professional did not operate any treatment on dogs? List the professional's id, role and email.","pred":"SELECT professional_id, role_code, email_address\nFROM Professionals\nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments);","ground_truth":"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n","metadata":{"execution_time":1.04065975,"prompt_tokens":1010,"response_tokens":27,"total_tokens":1037},"sequence_num":928}
{"idx":2150881624,"db_id":"dog_kennels","query":"Give me the id, role and email of the professionals who did not perform any treatment on dogs.","pred":"SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);","ground_truth":"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n","metadata":{"execution_time":1.049312639,"prompt_tokens":1010,"response_tokens":25,"total_tokens":1035},"sequence_num":929}
{"idx":3777249640,"db_id":"dog_kennels","query":"Which owner owns the most dogs? List the owner id, first name and last name.","pred":"SELECT owner_id, first_name, last_name\nFROM Owners\nWHERE owner_id = (SELECT owner_id\n                  FROM Dogs\n                  GROUP BY owner_id\n                  ORDER BY COUNT(*) DESC\n                  LIMIT 1);","ground_truth":"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n","metadata":{"execution_time":1.155575811,"prompt_tokens":1008,"response_tokens":45,"total_tokens":1053},"sequence_num":930}
{"idx":610445389,"db_id":"dog_kennels","query":"Return the owner id, first name and last name of the owner who has the most dogs.","pred":"SELECT owner_id, first_name, last_name\nFROM Owners\nWHERE owner_id = (SELECT owner_id\n                  FROM Dogs\n                  GROUP BY owner_id\n                  ORDER BY COUNT(*) DESC\n                  LIMIT 1);","ground_truth":"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.720279409,"prompt_tokens":1009,"response_tokens":45,"total_tokens":1054},"sequence_num":931}
{"idx":3990953609,"db_id":"dog_kennels","query":"Which professionals have done at least two treatments? List the professional's id, role, and first name.","pred":"SELECT professional_id, role_code, first_name FROM Professionals \nWHERE professional_id IN (SELECT professional_id FROM Treatments \nGROUP BY professional_id HAVING COUNT(*) \u003e= 2);","ground_truth":"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  \u003e=  2","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.698980114,"prompt_tokens":1011,"response_tokens":37,"total_tokens":1048},"sequence_num":932}
{"idx":2621799169,"db_id":"dog_kennels","query":"What are the id, role, and first name of the professionals who have performed two or more treatments?","pred":"SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) \u003e= 2 );","ground_truth":"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  \u003e=  2","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":2.146008249,"prompt_tokens":1011,"response_tokens":164,"total_tokens":1175},"sequence_num":933}
{"idx":693380337,"db_id":"dog_kennels","query":"What is the name of the breed with the most dogs?","pred":"SELECT breed_code, COUNT(*) AS dog_count FROM Dogs GROUP BY breed_code ORDER BY dog_count DESC LIMIT 1;","ground_truth":"SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n","metadata":{"execution_time":3.291363825,"prompt_tokens":1002,"response_tokens":177,"total_tokens":1179},"sequence_num":934}
{"idx":820264432,"db_id":"dog_kennels","query":"Which breed do the most dogs have? Give me the breed name.","pred":"SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);","ground_truth":"SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n","metadata":{"execution_time":1.063205235,"prompt_tokens":1004,"response_tokens":30,"total_tokens":1034},"sequence_num":935}
{"idx":1854103419,"db_id":"dog_kennels","query":"Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.","pred":"SELECT owner_id, last_name\nFROM Owners\nWHERE owner_id = (SELECT owner_id\n                  FROM Dogs\n                  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\n                  GROUP BY owner_id\n                  ORDER BY COUNT(*) DESC\n                  LIMIT 1);","ground_truth":"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.483322738,"prompt_tokens":1012,"response_tokens":58,"total_tokens":1070},"sequence_num":936}
{"idx":982688084,"db_id":"dog_kennels","query":"Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.","pred":"SELECT owner_id, last_name\nFROM Owners\nWHERE owner_id = (\n    SELECT owner_id\n    FROM Dogs\n    JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\n    JOIN Owners ON Dogs.owner_id = Owners.owner_id\n    GROUP BY owner_id\n    ORDER BY SUM(cost_of_treatment) DESC\n    LIMIT 1\n);","ground_truth":"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n","metadata":{"execution_time":1.446334027,"prompt_tokens":1013,"response_tokens":76,"total_tokens":1089},"sequence_num":937}
{"idx":2040007355,"db_id":"dog_kennels","query":"What is the description of the treatment type that costs the least money in total?","pred":"SELECT treatment_type_description \nFROM Treatment_Types \nWHERE treatment_type_code = (\n    SELECT treatment_type_code \n    FROM Treatments \n    GROUP BY treatment_type_code \n    ORDER BY SUM(cost_of_treatment) \n    LIMIT 1\n);","ground_truth":"SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.993985237,"prompt_tokens":1006,"response_tokens":51,"total_tokens":1057},"sequence_num":938}
{"idx":2463092897,"db_id":"dog_kennels","query":"Give me the description of the treatment type whose total cost is the lowest.","pred":"SELECT treatment_type_description \nFROM Treatment_Types \nWHERE treatment_type_code = (\n    SELECT treatment_type_code \n    FROM Treatments \n    GROUP BY treatment_type_code \n    ORDER BY SUM(cost_of_treatment) \n    LIMIT 1\n);","ground_truth":"SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n","metadata":{"execution_time":1.17380033,"prompt_tokens":1005,"response_tokens":51,"total_tokens":1056},"sequence_num":939}
{"idx":3327165646,"db_id":"dog_kennels","query":"Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.","pred":"SELECT owner_id, zip_code\nFROM Owners\nWHERE owner_id = (\n    SELECT owner_id\n    FROM Dogs\n    JOIN Owners ON Dogs.owner_id = Owners.owner_id\n    JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\n    JOIN Charges ON Treatments.cost_of_treatment = Charges.charge_id\n    GROUP BY owner_id\n    ORDER BY SUM(charge_amount) DESC\n    LIMIT 1\n);","ground_truth":"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n","metadata":{"execution_time":2.108327102,"prompt_tokens":1013,"response_tokens":91,"total_tokens":1104},"sequence_num":940}
{"idx":2161160472,"db_id":"dog_kennels","query":"Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.","pred":"SELECT owner_id, zip_code\nFROM Owners\nWHERE owner_id = (\n    SELECT owner_id\n    FROM Dogs\n    JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\n    GROUP BY owner_id\n    ORDER BY SUM(cost_of_treatment) DESC\n    LIMIT 1\n);","ground_truth":"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n","metadata":{"execution_time":1.3493315479999999,"prompt_tokens":1013,"response_tokens":64,"total_tokens":1077},"sequence_num":941}
{"idx":2005839206,"db_id":"dog_kennels","query":"Which professionals have done at least two types of treatments? List the professional id and cell phone.","pred":"SELECT professional_id, cell_number FROM Professionals \nWHERE professional_id IN \n    (SELECT professional_id FROM Treatments \n     GROUP BY professional_id \n     HAVING COUNT(DISTINCT treatment_type_code) \u003e= 2);","ground_truth":"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  \u003e=  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.833841167,"prompt_tokens":1009,"response_tokens":45,"total_tokens":1054},"sequence_num":942}
{"idx":3795027248,"db_id":"dog_kennels","query":"Find the id and cell phone of the professionals who operate two or more types of treatments.","pred":"SELECT professional_id, cell_number FROM Professionals GROUP BY professional_id HAVING COUNT(DISTINCT role_code) \u003e= 2;","ground_truth":"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  \u003e=  2","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n","metadata":{"execution_time":1.290891775,"prompt_tokens":1008,"response_tokens":26,"total_tokens":1034},"sequence_num":943}
{"idx":3871958777,"db_id":"dog_kennels","query":"What are the first name and last name of the professionals who have done treatment with cost below average?","pred":"SELECT first_name, last_name \nFROM Professionals \nWHERE professional_id IN (\n    SELECT professional_id \n    FROM Treatments \n    WHERE cost_of_treatment \u003c (SELECT AVG(cost_of_treatment) FROM Treatments)\n);","ground_truth":"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  \u003c  ( SELECT avg(cost_of_treatment) FROM Treatments )","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n","metadata":{"execution_time":1.007427564,"prompt_tokens":1010,"response_tokens":46,"total_tokens":1056},"sequence_num":944}
{"idx":3510920869,"db_id":"dog_kennels","query":"Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.","pred":"SELECT first_name, last_name\nFROM Professionals\nWHERE professional_id IN (\n    SELECT professional_id\n    FROM Treatments\n    WHERE cost_of_treatment \u003c (\n        SELECT AVG(cost_of_treatment)\n        FROM Treatments\n    )\n);","ground_truth":"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  \u003c  ( SELECT avg(cost_of_treatment) FROM Treatments )","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n","metadata":{"execution_time":1.003372898,"prompt_tokens":1012,"response_tokens":50,"total_tokens":1062},"sequence_num":945}
{"idx":232989566,"db_id":"dog_kennels","query":"List the date of each treatment, together with the first name of the professional who operated it.","pred":"SELECT Treatments.date_of_treatment, Professionals.first_name\nFROM Treatments\nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id;","ground_truth":"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n","metadata":{"execution_time":0.880119941,"prompt_tokens":1009,"response_tokens":31,"total_tokens":1040},"sequence_num":946}
{"idx":4119307058,"db_id":"dog_kennels","query":"What are the date and the operating professional's first name of each treatment?","pred":"SELECT date_of_treatment, first_name\nFROM Treatments\nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id;","ground_truth":"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n","metadata":{"execution_time":0.969280696,"prompt_tokens":1005,"response_tokens":28,"total_tokens":1033},"sequence_num":947}
{"idx":1479454048,"db_id":"dog_kennels","query":"List the cost of each treatment and the corresponding treatment type description.","pred":"SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;","ground_truth":"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n","metadata":{"execution_time":1.319366433,"prompt_tokens":1003,"response_tokens":33,"total_tokens":1036},"sequence_num":948}
{"idx":2539834607,"db_id":"dog_kennels","query":"What are the cost and treatment type description of each treatment?","pred":"SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description\nFROM Treatments\nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;","ground_truth":"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n","metadata":{"execution_time":2.0861762,"prompt_tokens":1002,"response_tokens":41,"total_tokens":1043},"sequence_num":949}
{"idx":4033295093,"db_id":"dog_kennels","query":"List each owner's first name, last name, and the size of his for her dog.","pred":"SELECT first_name, last_name, size_code\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Sizes ON Dogs.size_code = Sizes.size_code;","ground_truth":"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n","metadata":{"execution_time":2.128589693,"prompt_tokens":1009,"response_tokens":36,"total_tokens":1045},"sequence_num":950}
{"idx":3087956674,"db_id":"dog_kennels","query":"What are each owner's first name, last name, and the size of their dog?","pred":"SELECT first_name, last_name, size_code\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Sizes ON Dogs.size_code = Sizes.size_code;","ground_truth":"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n","metadata":{"execution_time":1.065760149,"prompt_tokens":1008,"response_tokens":36,"total_tokens":1044},"sequence_num":951}
{"idx":4003866152,"db_id":"dog_kennels","query":"List pairs of the owner's first name and the dogs's name.","pred":"SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;","ground_truth":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":0.90180044,"prompt_tokens":1004,"response_tokens":21,"total_tokens":1025},"sequence_num":952}
{"idx":3921731016,"db_id":"dog_kennels","query":"What are each owner's first name and their dogs's name?","pred":"SELECT Owners.first_name, Dogs.name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id;","ground_truth":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n","metadata":{"execution_time":0.981904151,"prompt_tokens":1003,"response_tokens":23,"total_tokens":1026},"sequence_num":953}
{"idx":1385461252,"db_id":"dog_kennels","query":"List the names of the dogs of the rarest breed and the treatment dates of them.","pred":"SELECT D.name, T.date_of_treatment\nFROM Dogs D\nJOIN Breeds B ON D.breed_code = B.breed_code\nJOIN Treatments T ON D.dog_id = T.dog_id\nGROUP BY D.name, T.date_of_treatment\nORDER BY COUNT(*) ASC\nLIMIT 1;","ground_truth":"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.119424903,"prompt_tokens":1008,"response_tokens":66,"total_tokens":1074},"sequence_num":954}
{"idx":2615606354,"db_id":"dog_kennels","query":"Which dogs are of the rarest breed? Show their names and treatment dates.","pred":"SELECT Dogs.name, Treatments.date_of_treatment\nFROM Dogs\nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nGROUP BY Dogs.name\nORDER BY COUNT(DISTINCT Dogs.breed_code) ASC\nLIMIT 1;","ground_truth":"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n","metadata":{"execution_time":1.108589612,"prompt_tokens":1006,"response_tokens":67,"total_tokens":1073},"sequence_num":955}
{"idx":1264874767,"db_id":"dog_kennels","query":"Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.","pred":"SELECT O.first_name, D.name\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nWHERE O.state = 'Virginia';","ground_truth":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.029892522,"prompt_tokens":1013,"response_tokens":32,"total_tokens":1045},"sequence_num":956}
{"idx":2405035811,"db_id":"dog_kennels","query":"Find the first names of owners living in Virginia and the names of dogs they own.","pred":"SELECT O.first_name, D.name\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nWHERE O.state = 'Virginia';","ground_truth":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n","metadata":{"execution_time":0.890724743,"prompt_tokens":1007,"response_tokens":32,"total_tokens":1039},"sequence_num":957}
{"idx":248949299,"db_id":"dog_kennels","query":"What are the arriving date and the departing date of the dogs who have gone through a treatment?","pred":"SELECT date_arrived, date_departed\nFROM Dogs\nWHERE dog_id IN (SELECT dog_id FROM Treatments);","ground_truth":"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n","metadata":{"execution_time":1.110510742,"prompt_tokens":1009,"response_tokens":25,"total_tokens":1034},"sequence_num":958}
{"idx":3089630019,"db_id":"dog_kennels","query":"Find the arriving date and the departing date of the dogs that received a treatment.","pred":"SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);","ground_truth":"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n","metadata":{"execution_time":2.05228286,"prompt_tokens":1006,"response_tokens":23,"total_tokens":1029},"sequence_num":959}
{"idx":1450416997,"db_id":"dog_kennels","query":"List the last name of the owner owning the youngest dog.","pred":"SELECT last_name\nFROM Owners\nWHERE owner_id = (\n    SELECT owner_id\n    FROM Dogs\n    WHERE date_of_birth = (\n        SELECT MIN(date_of_birth)\n        FROM Dogs\n    )\n);","ground_truth":"SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.362597841,"prompt_tokens":1002,"response_tokens":43,"total_tokens":1045},"sequence_num":960}
{"idx":2559635514,"db_id":"dog_kennels","query":"Who owns the youngest dog? Give me his or her last name.","pred":"SELECT last_name\nFROM Owners\nWHERE owner_id = (\n    SELECT owner_id\n    FROM Dogs\n    WHERE date_of_birth = (\n        SELECT MIN(date_of_birth)\n        FROM Dogs\n    )\n);","ground_truth":"SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.585100782,"prompt_tokens":1004,"response_tokens":43,"total_tokens":1047},"sequence_num":961}
{"idx":2253777673,"db_id":"dog_kennels","query":"List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.","pred":"SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';","ground_truth":"SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":0.743686754,"prompt_tokens":1009,"response_tokens":20,"total_tokens":1029},"sequence_num":962}
{"idx":2168452880,"db_id":"dog_kennels","query":"What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?","pred":"SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';","ground_truth":"SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.020797016,"prompt_tokens":1010,"response_tokens":20,"total_tokens":1030},"sequence_num":963}
{"idx":2671546279,"db_id":"dog_kennels","query":"What are the arriving date and the departing date of all the dogs?","pred":"SELECT date_arrived, date_departed FROM Dogs;","ground_truth":"SELECT date_arrived ,  date_departed FROM Dogs","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":0.920815075,"prompt_tokens":1004,"response_tokens":12,"total_tokens":1016},"sequence_num":964}
{"idx":422666313,"db_id":"dog_kennels","query":"List the arrival date and the departure date for all the dogs.","pred":"SELECT date_arrived, date_departed FROM Dogs;","ground_truth":"SELECT date_arrived ,  date_departed FROM Dogs","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n","metadata":{"execution_time":0.86754597,"prompt_tokens":1003,"response_tokens":12,"total_tokens":1015},"sequence_num":965}
{"idx":2470424012,"db_id":"dog_kennels","query":"How many dogs went through any treatments?","pred":"SELECT COUNT(DISTINCT dog_id) FROM Treatments;","ground_truth":"SELECT count(DISTINCT dog_id) FROM Treatments","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n","metadata":{"execution_time":0.836618027,"prompt_tokens":998,"response_tokens":13,"total_tokens":1011},"sequence_num":966}
{"idx":64301583,"db_id":"dog_kennels","query":"Count the number of dogs that went through a treatment.","pred":"SELECT COUNT(DISTINCT dog_id) AS number_of_dogs FROM Treatments;","ground_truth":"SELECT count(DISTINCT dog_id) FROM Treatments","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n","metadata":{"execution_time":1.532084301,"prompt_tokens":1001,"response_tokens":18,"total_tokens":1019},"sequence_num":967}
{"idx":99978877,"db_id":"dog_kennels","query":"How many professionals have performed any treatment to dogs?","pred":"SELECT COUNT(DISTINCT professional_id) FROM Treatments;","ground_truth":"SELECT count(DISTINCT professional_id) FROM Treatments","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":0.978449112,"prompt_tokens":1000,"response_tokens":13,"total_tokens":1013},"sequence_num":968}
{"idx":155402067,"db_id":"dog_kennels","query":"Find the number of professionals who have ever treated dogs.","pred":"SELECT COUNT(DISTINCT professional_id) FROM Treatments;","ground_truth":"SELECT count(DISTINCT professional_id) FROM Treatments","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n","metadata":{"execution_time":1.145476459,"prompt_tokens":1001,"response_tokens":13,"total_tokens":1014},"sequence_num":969}
{"idx":709023725,"db_id":"dog_kennels","query":"Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.","pred":"SELECT role_code, street, city, state\nFROM Professionals\nWHERE city LIKE '%West%';","ground_truth":"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n","metadata":{"execution_time":0.909140082,"prompt_tokens":1014,"response_tokens":21,"total_tokens":1035},"sequence_num":970}
{"idx":1828039184,"db_id":"dog_kennels","query":"Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.","pred":"SELECT role, street, city, state\nFROM Professionals\nWHERE city LIKE '%West%';","ground_truth":"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":0.749848181,"prompt_tokens":1013,"response_tokens":20,"total_tokens":1033},"sequence_num":971}
{"idx":3296240812,"db_id":"dog_kennels","query":"Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.","pred":"SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';","ground_truth":"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n","metadata":{"execution_time":0.777949541,"prompt_tokens":1014,"response_tokens":19,"total_tokens":1033},"sequence_num":972}
{"idx":1091609876,"db_id":"dog_kennels","query":"Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.","pred":"SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';","ground_truth":"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n","metadata":{"execution_time":0.795118762,"prompt_tokens":1014,"response_tokens":19,"total_tokens":1033},"sequence_num":973}
{"idx":2534950015,"db_id":"dog_kennels","query":"How many dogs have an age below the average?","pred":"SELECT COUNT(*) FROM Dogs WHERE age \u003c (SELECT AVG(CAST(age AS DECIMAL)) FROM Dogs);","ground_truth":"SELECT count(*) FROM Dogs WHERE age  \u003c  ( SELECT avg(age) FROM Dogs )","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":0.9852398,"prompt_tokens":1000,"response_tokens":22,"total_tokens":1022},"sequence_num":974}
{"idx":2002092678,"db_id":"dog_kennels","query":"Count the number of dogs of an age below the average.","pred":"SELECT COUNT(*) FROM Dogs WHERE age \u003c (SELECT AVG(CAST(age AS INTEGER)) FROM Dogs);","ground_truth":"SELECT count(*) FROM Dogs WHERE age  \u003c  ( SELECT avg(age) FROM Dogs )","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n","metadata":{"execution_time":0.943929318,"prompt_tokens":1002,"response_tokens":21,"total_tokens":1023},"sequence_num":975}
{"idx":927571684,"db_id":"dog_kennels","query":"How much does the most recent treatment cost?","pred":"SELECT cost_of_treatment\nFROM Treatments\nORDER BY date_of_treatment DESC\nLIMIT 1;","ground_truth":"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n","metadata":{"execution_time":1.086112773,"prompt_tokens":999,"response_tokens":23,"total_tokens":1022},"sequence_num":976}
{"idx":2783835637,"db_id":"dog_kennels","query":"Show me the cost of the most recently performed treatment.","pred":"SELECT cost_of_treatment \nFROM Treatments \nORDER BY date_of_treatment DESC \nLIMIT 1;","ground_truth":"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.019034678,"prompt_tokens":1001,"response_tokens":23,"total_tokens":1024},"sequence_num":977}
{"idx":3224609557,"db_id":"dog_kennels","query":"How many dogs have not gone through any treatment?","pred":"SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);","ground_truth":"SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n","metadata":{"execution_time":1.030495978,"prompt_tokens":1000,"response_tokens":19,"total_tokens":1019},"sequence_num":978}
{"idx":863614147,"db_id":"dog_kennels","query":"Tell me the number of dogs that have not received any treatment .","pred":"SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);","ground_truth":"select count(*) from dogs where dog_id not in ( select dog_id from treatments )","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n","metadata":{"execution_time":1.143998987,"prompt_tokens":1003,"response_tokens":19,"total_tokens":1022},"sequence_num":979}
{"idx":783381458,"db_id":"dog_kennels","query":"How many owners temporarily do not have any dogs?","pred":"SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL);","ground_truth":"SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.202526812,"prompt_tokens":1000,"response_tokens":24,"total_tokens":1024},"sequence_num":980}
{"idx":562704891,"db_id":"dog_kennels","query":"Find the number of owners who do not own any dogs at this moment.","pred":"SELECT COUNT(*) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL);","ground_truth":"SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n","metadata":{"execution_time":0.994477702,"prompt_tokens":1005,"response_tokens":26,"total_tokens":1031},"sequence_num":981}
{"idx":3979465415,"db_id":"dog_kennels","query":"How many professionals did not operate any treatment on dogs?","pred":"SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);","ground_truth":"SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.550656512,"prompt_tokens":1001,"response_tokens":25,"total_tokens":1026},"sequence_num":982}
{"idx":3406869162,"db_id":"dog_kennels","query":"Find the number of professionals who have not treated any dogs.","pred":"SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);","ground_truth":"SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.760021601,"prompt_tokens":1002,"response_tokens":25,"total_tokens":1027},"sequence_num":983}
{"idx":3889672269,"db_id":"dog_kennels","query":"List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.","pred":"SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';","ground_truth":"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":0.876100195,"prompt_tokens":1019,"response_tokens":17,"total_tokens":1036},"sequence_num":984}
{"idx":3090742535,"db_id":"dog_kennels","query":"What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.","pred":"SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';","ground_truth":"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":0.931164508,"prompt_tokens":1024,"response_tokens":17,"total_tokens":1041},"sequence_num":985}
{"idx":4209348713,"db_id":"dog_kennels","query":"What is the average age of all the dogs?","pred":"SELECT AVG(age) FROM Dogs;","ground_truth":"SELECT avg(age) FROM Dogs","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n","metadata":{"execution_time":0.79054682,"prompt_tokens":1000,"response_tokens":8,"total_tokens":1008},"sequence_num":986}
{"idx":2573649479,"db_id":"dog_kennels","query":"Compute the average age of all the dogs.","pred":"SELECT AVG(age) AS average_age FROM Dogs;","ground_truth":"SELECT avg(age) FROM Dogs","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":0.987487029,"prompt_tokens":999,"response_tokens":49,"total_tokens":1048},"sequence_num":987}
{"idx":1995821537,"db_id":"dog_kennels","query":"What is the age of the oldest dog?","pred":"SELECT MAX(age) AS oldest_dog_age FROM Dogs;","ground_truth":"SELECT max(age) FROM Dogs","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":0.720709735,"prompt_tokens":999,"response_tokens":13,"total_tokens":1012},"sequence_num":988}
{"idx":4071422159,"db_id":"dog_kennels","query":"Tell me the age of the oldest dog.","pred":"SELECT MAX(age) AS oldest_dog_age FROM Dogs;","ground_truth":"SELECT max(age) FROM Dogs","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.609151433,"prompt_tokens":999,"response_tokens":13,"total_tokens":1012},"sequence_num":989}
{"idx":3612441049,"db_id":"dog_kennels","query":"How much does each charge type costs? List both charge type and amount.","pred":"SELECT charge_type, charge_amount FROM Charges;","ground_truth":"SELECT charge_type ,  charge_amount FROM Charges","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":0.97432276,"prompt_tokens":1005,"response_tokens":10,"total_tokens":1015},"sequence_num":990}
{"idx":4278309811,"db_id":"dog_kennels","query":"List each charge type and its amount.","pred":"SELECT charge_type, charge_amount FROM Charges;","ground_truth":"SELECT charge_type ,  charge_amount FROM Charges","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":0.872163892,"prompt_tokens":998,"response_tokens":10,"total_tokens":1008},"sequence_num":991}
{"idx":2747526183,"db_id":"dog_kennels","query":"How much does the most expensive charge type costs?","pred":"SELECT MAX(charge_amount) AS max_charge_amount FROM Charges;","ground_truth":"SELECT max(charge_amount) FROM Charges","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n","metadata":{"execution_time":1.101620435,"prompt_tokens":1000,"response_tokens":14,"total_tokens":1014},"sequence_num":992}
{"idx":2051890563,"db_id":"dog_kennels","query":"What is the charge amount of the most expensive charge type?","pred":"SELECT MAX(charge_amount) AS most_expensive_charge_amount FROM Charges;","ground_truth":"SELECT max(charge_amount) FROM Charges","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n","metadata":{"execution_time":0.954835627,"prompt_tokens":1002,"response_tokens":16,"total_tokens":1018},"sequence_num":993}
{"idx":3266143733,"db_id":"dog_kennels","query":"List the email, cell phone and home phone of all the professionals.","pred":"SELECT email_address, cell_number, home_phone FROM Professionals;","ground_truth":"SELECT email_address ,  cell_number ,  home_phone FROM professionals","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n","metadata":{"execution_time":0.974123237,"prompt_tokens":1004,"response_tokens":13,"total_tokens":1017},"sequence_num":994}
{"idx":3952463748,"db_id":"dog_kennels","query":"What are the email, cell phone and home phone of each professional?","pred":"SELECT email_address, cell_number, home_phone FROM Professionals;","ground_truth":"SELECT email_address ,  cell_number ,  home_phone FROM professionals","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.49570234,"prompt_tokens":1004,"response_tokens":13,"total_tokens":1017},"sequence_num":995}
{"idx":1400972661,"db_id":"dog_kennels","query":"What are all the possible breed type and size type combinations?","pred":"SELECT breed_code, size_code FROM Breeds, Sizes;","ground_truth":"SELECT DISTINCT breed_code ,  size_code FROM dogs","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n","metadata":{"execution_time":1.471382963,"prompt_tokens":1002,"response_tokens":13,"total_tokens":1015},"sequence_num":996}
{"idx":3302263029,"db_id":"dog_kennels","query":"Find the distinct breed type and size type combinations for dogs.","pred":"SELECT DISTINCT breed_code, size_code FROM Dogs;","ground_truth":"SELECT DISTINCT breed_code ,  size_code FROM dogs","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n","metadata":{"execution_time":1.041794988,"prompt_tokens":1002,"response_tokens":11,"total_tokens":1013},"sequence_num":997}
{"idx":3229622698,"db_id":"dog_kennels","query":"List the first name of all the professionals along with the description of the treatment they have done.","pred":"SELECT Professionals.first_name, Treatments.treatment_type_description\nFROM Professionals\nJOIN Treatments ON Professionals.professional_id = Treatments.professional_id;","ground_truth":"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n","metadata":{"execution_time":1.4102492309999999,"prompt_tokens":1009,"response_tokens":31,"total_tokens":1040},"sequence_num":998}
{"idx":2586141752,"db_id":"dog_kennels","query":"What are each professional's first name and description of the treatment they have performed?","pred":"SELECT P.first_name, TT.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;","ground_truth":"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Breeds\n列:\n  - breed_code: text (主键)\n  - breed_name: text\n\n表名: Charges\n列:\n  - charge_id: number (主键)\n  - charge_type: text\n  - charge_amount: number\n\n表名: Sizes\n列:\n  - size_code: text (主键)\n  - size_description: text\n\n表名: Treatment_Types\n列:\n  - treatment_type_code: text (主键)\n  - treatment_type_description: text\n\n表名: Owners\n列:\n  - owner_id: number (主键)\n  - first_name: text\n  - last_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Dogs\n列:\n  - dog_id: number (主键)\n  - owner_id: number (外键)\n  - abandoned_yn: text\n  - breed_code: text (外键)\n  - size_code: text (外键)\n  - name: text\n  - age: text\n  - date_of_birth: time\n  - gender: text\n  - weight: text\n  - date_arrived: time\n  - date_adopted: time\n  - date_departed: time\n\n表名: Professionals\n列:\n  - professional_id: number (主键)\n  - role_code: text\n  - first_name: text\n  - street: text\n  - city: text\n  - state: text\n  - zip_code: text\n  - last_name: text\n  - email_address: text\n  - home_phone: text\n  - cell_number: text\n\n表名: Treatments\n列:\n  - treatment_id: number (主键)\n  - dog_id: number (外键)\n  - professional_id: number (外键)\n  - treatment_type_code: text (外键)\n  - date_of_treatment: time\n  - cost_of_treatment: number\n\n外键关系:\n  - Breeds.breed_code -\u003e Dogs.breed_code\n  - Professionals.professional_id -\u003e Treatments.professional_id\n  - Treatment_Types.treatment_type_code -\u003e Treatments.treatment_type_code\n  - Dogs.dog_id -\u003e Treatments.dog_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Owners.owner_id -\u003e Dogs.owner_id\n  - Sizes.size_code -\u003e Dogs.size_code\n","metadata":{"execution_time":2.065644795,"prompt_tokens":1006,"response_tokens":155,"total_tokens":1161},"sequence_num":999}
{"idx":425545059,"db_id":"singer","query":"How many singers are there?","pred":"SELECT COUNT(*) FROM singer;","ground_truth":"SELECT count(*) FROM singer","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.825989995,"prompt_tokens":567,"response_tokens":7,"total_tokens":574},"sequence_num":1000}
{"idx":742085401,"db_id":"singer","query":"What is the count of singers?","pred":"SELECT COUNT(*) FROM singer;","ground_truth":"SELECT count(*) FROM singer","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":1.143139166,"prompt_tokens":568,"response_tokens":7,"total_tokens":575},"sequence_num":1001}
{"idx":3316808423,"db_id":"singer","query":"List the name of singers in ascending order of net worth.","pred":"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;","ground_truth":"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.691121761,"prompt_tokens":573,"response_tokens":14,"total_tokens":587},"sequence_num":1002}
{"idx":4135013457,"db_id":"singer","query":"What are the names of singers ordered by ascending net worth?","pred":"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;","ground_truth":"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.668313795,"prompt_tokens":573,"response_tokens":14,"total_tokens":587},"sequence_num":1003}
{"idx":1502563459,"db_id":"singer","query":"What are the birth year and citizenship of singers?","pred":"SELECT Birth_Year, Citizenship FROM singer;","ground_truth":"SELECT Birth_Year ,  Citizenship FROM singer","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.839787986,"prompt_tokens":571,"response_tokens":10,"total_tokens":581},"sequence_num":1004}
{"idx":3666686556,"db_id":"singer","query":"What are the birth years and citizenships of the singers?","pred":"SELECT Birth_Year, Citizenship FROM singer;","ground_truth":"SELECT Birth_Year ,  Citizenship FROM singer","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.774565167,"prompt_tokens":573,"response_tokens":10,"total_tokens":583},"sequence_num":1005}
{"idx":1303891202,"db_id":"singer","query":"List the name of singers whose citizenship is not \"France\".","pred":"SELECT Name FROM singer WHERE Citizenship \u003c\u003e 'France';","ground_truth":"SELECT Name FROM singer WHERE Citizenship != \"France\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.647219026,"prompt_tokens":573,"response_tokens":11,"total_tokens":584},"sequence_num":1006}
{"idx":965995065,"db_id":"singer","query":"What are the names of the singers who are not French citizens?","pred":"SELECT Name FROM singer WHERE Citizenship \u003c\u003e 'France';","ground_truth":"SELECT Name FROM singer WHERE Citizenship != \"France\"","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.633021072,"prompt_tokens":574,"response_tokens":11,"total_tokens":585},"sequence_num":1007}
{"idx":3880376643,"db_id":"singer","query":"Show the name of singers whose birth year is either 1948 or 1949?","pred":"SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);","ground_truth":"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":1.705637794,"prompt_tokens":579,"response_tokens":18,"total_tokens":597},"sequence_num":1008}
{"idx":846942053,"db_id":"singer","query":"What are the names of the singers whose birth years are either 1948 or 1949?","pred":"SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);","ground_truth":"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":1.7588146980000001,"prompt_tokens":581,"response_tokens":18,"total_tokens":599},"sequence_num":1009}
{"idx":115258631,"db_id":"singer","query":"What is the name of the singer with the largest net worth?","pred":"SELECT Name \nFROM singer \nORDER BY Net_Worth_Millions DESC \nLIMIT 1;","ground_truth":"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.863837984,"prompt_tokens":574,"response_tokens":20,"total_tokens":594},"sequence_num":1010}
{"idx":2865808705,"db_id":"singer","query":"What is the name of the singer who is worth the most?","pred":"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;","ground_truth":"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.753410839,"prompt_tokens":574,"response_tokens":17,"total_tokens":591},"sequence_num":1011}
{"idx":2134331741,"db_id":"singer","query":"Show different citizenship of singers and the number of singers of each citizenship.","pred":"SELECT Citizenship, COUNT(DISTINCT Singer_ID) AS Num_Singers\nFROM singer\nGROUP BY Citizenship;","ground_truth":"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.846415691,"prompt_tokens":575,"response_tokens":23,"total_tokens":598},"sequence_num":1012}
{"idx":283504740,"db_id":"singer","query":"For each citizenship, how many singers are from that country?","pred":"SELECT Citizenship, COUNT(DISTINCT Singer_ID) AS Singer_Count FROM singer GROUP BY Citizenship;","ground_truth":"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.756294198,"prompt_tokens":573,"response_tokens":20,"total_tokens":593},"sequence_num":1013}
{"idx":261196882,"db_id":"singer","query":"Please show the most common citizenship of singers.","pred":"SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":3.332045658,"prompt_tokens":570,"response_tokens":17,"total_tokens":587},"sequence_num":1014}
{"idx":1116412958,"db_id":"singer","query":"What is the most common singer citizenship ?","pred":"SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;","ground_truth":"select citizenship from singer group by citizenship order by count(*) desc limit 1","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":1.409380936,"prompt_tokens":569,"response_tokens":106,"total_tokens":675},"sequence_num":1015}
{"idx":2797063808,"db_id":"singer","query":"Show different citizenships and the maximum net worth of singers of each citizenship.","pred":"SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth\nFROM singer\nGROUP BY Citizenship;","ground_truth":"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.825289255,"prompt_tokens":576,"response_tokens":26,"total_tokens":602},"sequence_num":1016}
{"idx":2960486667,"db_id":"singer","query":"For each citizenship, what is the maximum net worth?","pred":"SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth\nFROM singer\nGROUP BY Citizenship;","ground_truth":"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.738539751,"prompt_tokens":572,"response_tokens":26,"total_tokens":598},"sequence_num":1017}
{"idx":3282834452,"db_id":"singer","query":"Show titles of songs and names of singers.","pred":"SELECT song.Title, singer.Name\nFROM song\nJOIN singer ON song.Singer_ID = singer.Singer_ID;","ground_truth":"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.864415168,"prompt_tokens":570,"response_tokens":24,"total_tokens":594},"sequence_num":1018}
{"idx":4170137023,"db_id":"singer","query":"What are the song titles and singer names?","pred":"SELECT Title, Name\nFROM song\nJOIN singer ON song.Singer_ID = singer.Singer_ID;","ground_truth":"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.926538353,"prompt_tokens":570,"response_tokens":22,"total_tokens":592},"sequence_num":1019}
{"idx":462283563,"db_id":"singer","query":"Show distinct names of singers that have songs with sales more than 300000.","pred":"SELECT DISTINCT s.Name \nFROM singer s \nJOIN song so ON s.Singer_ID = so.Singer_ID \nWHERE so.Sales \u003e 300000;","ground_truth":"SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  \u003e  300000","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":1.342591332,"prompt_tokens":577,"response_tokens":33,"total_tokens":610},"sequence_num":1020}
{"idx":527479218,"db_id":"singer","query":"what are the different names of the singers that have sales more than 300000?","pred":"SELECT DISTINCT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales \u003e 300000;","ground_truth":"SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  \u003e  300000","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.908134047,"prompt_tokens":578,"response_tokens":41,"total_tokens":619},"sequence_num":1021}
{"idx":873887078,"db_id":"singer","query":"Show the names of singers that have more than one song.","pred":"SELECT Name FROM singer GROUP BY Name HAVING COUNT(Singer_ID) \u003e 1;","ground_truth":"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  \u003e  1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.777310599,"prompt_tokens":573,"response_tokens":19,"total_tokens":592},"sequence_num":1022}
{"idx":119401470,"db_id":"singer","query":"What are the names of the singers that have more than one songs?","pred":"SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) \u003e 1);","ground_truth":"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  \u003e  1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":1.161521599,"prompt_tokens":575,"response_tokens":27,"total_tokens":602},"sequence_num":1023}
{"idx":58624785,"db_id":"singer","query":"Show the names of singers and the total sales of their songs.","pred":"SELECT singer.Name, SUM(song.Sales) AS Total_Sales\nFROM singer\nJOIN song ON singer.Singer_ID = song.Singer_ID\nGROUP BY singer.Name;","ground_truth":"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.883167597,"prompt_tokens":574,"response_tokens":36,"total_tokens":610},"sequence_num":1024}
{"idx":617149616,"db_id":"singer","query":"For each singer name, what is the total sales for their songs?","pred":"SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name;","ground_truth":"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":2.301311081,"prompt_tokens":575,"response_tokens":68,"total_tokens":643},"sequence_num":1025}
{"idx":3648613062,"db_id":"singer","query":"List the name of singers that do not have any song.","pred":"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);","ground_truth":"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.891261996,"prompt_tokens":573,"response_tokens":17,"total_tokens":590},"sequence_num":1026}
{"idx":2342478373,"db_id":"singer","query":"What is the sname of every sing that does not have any song?","pred":"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);","ground_truth":"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.773405471,"prompt_tokens":576,"response_tokens":17,"total_tokens":593},"sequence_num":1027}
{"idx":953560212,"db_id":"singer","query":"Show the citizenship shared by singers with birth year before 1945 and after 1955.","pred":"SELECT DISTINCT s1.Citizenship\nFROM singer s1\nJOIN singer s2 ON s1.Citizenship = s2.Citizenship\nWHERE s1.Birth_Year \u003c 1945 AND s2.Birth_Year \u003e 1955;","ground_truth":"SELECT Citizenship FROM singer WHERE Birth_Year  \u003c  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  \u003e  1955","is_correct":true,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":1.066626892,"prompt_tokens":580,"response_tokens":57,"total_tokens":637},"sequence_num":1028}
{"idx":1805530919,"db_id":"singer","query":"What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?","pred":"SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year \u003c 1945 AND Birth_Year \u003e 1955;","ground_truth":"SELECT Citizenship FROM singer WHERE Birth_Year  \u003c  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  \u003e  1955","is_correct":false,"db_schema":"数据库Schema信息:\n表名: singer\n列:\n  - Singer_ID: number (主键)\n  - Name: text\n  - Birth_Year: number\n  - Net_Worth_Millions: number\n  - Citizenship: text\n\n表名: song\n列:\n  - Song_ID: number (主键)\n  - Title: text\n  - Singer_ID: number (外键)\n  - Sales: number\n  - Highest_Position: number\n\n外键关系:\n  - singer.Singer_ID -\u003e song.Singer_ID\n","metadata":{"execution_time":0.768240598,"prompt_tokens":585,"response_tokens":23,"total_tokens":608},"sequence_num":1029}
{"idx":1755734270,"db_id":"real_estate_properties","query":"How many available features are there in total?","pred":"SELECT COUNT(*) FROM Other_Available_Features;","ground_truth":"SELECT count(*) FROM Other_Available_Features","is_correct":true,"db_schema":"数据库Schema信息:\n表名: Ref_Feature_Types\n列:\n  - feature_type_code: text (主键)\n  - feature_type_name: text\n\n表名: Ref_Property_Types\n列:\n  - property_type_code: text (主键)\n  - property_type_description: text\n\n表名: Other_Available_Features\n列:\n  - feature_id: number (主键)\n  - feature_type_code: text (外键)\n  - feature_name: text\n  - feature_description: text\n\n表名: Properties\n列:\n  - property_id: number (主键)\n  - property_type_code: text (外键)\n  - date_on_market: time\n  - date_sold: time\n  - property_name: text\n  - property_address: text\n  - room_count: number\n  - vendor_requested_price: number\n  - buyer_offered_price: number\n  - agreed_selling_price: number\n  - apt_feature_1: text\n  - apt_feature_2: text\n  - apt_feature_3: text\n  - fld_feature_1: text\n  - fld_feature_2: text\n  - fld_feature_3: text\n  - hse_feature_1: text\n  - hse_feature_2: text\n  - hse_feature_3: text\n  - oth_feature_1: text\n  - oth_feature_2: text\n  - oth_feature_3: text\n  - shp_feature_1: text\n  - shp_feature_2: text\n  - shp_feature_3: text\n  - other_property_details: text\n\n表名: Other_Property_Features\n列:\n  - property_id: number (外键)\n  - feature_id: number (外键)\n  - property_feature_description: text\n\n外键关系:\n  - Other_Available_Features.feature_id -\u003e Other_Property_Features.feature_id\n  - Ref_Feature_Types.feature_type_code -\u003e Other_Available_Features.feature_type_code\n  - Properties.property_id -\u003e Other_Property_Features.property_id\n  - Ref_Property_Types.property_type_code -\u003e Properties.property_type_code\n","metadata":{"execution_time":0.746534321,"prompt_tokens":918,"response_tokens":12,"total_tokens":930},"sequence_num":1030}
{"idx":2100633099,"db_id":"real_estate_properties","query":"What is the feature type name of feature AirCon?","pred":"SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = 'AirCon';","ground_truth":"SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Feature_Types\n列:\n  - feature_type_code: text (主键)\n  - feature_type_name: text\n\n表名: Ref_Property_Types\n列:\n  - property_type_code: text (主键)\n  - property_type_description: text\n\n表名: Other_Available_Features\n列:\n  - feature_id: number (主键)\n  - feature_type_code: text (外键)\n  - feature_name: text\n  - feature_description: text\n\n表名: Properties\n列:\n  - property_id: number (主键)\n  - property_type_code: text (外键)\n  - date_on_market: time\n  - date_sold: time\n  - property_name: text\n  - property_address: text\n  - room_count: number\n  - vendor_requested_price: number\n  - buyer_offered_price: number\n  - agreed_selling_price: number\n  - apt_feature_1: text\n  - apt_feature_2: text\n  - apt_feature_3: text\n  - fld_feature_1: text\n  - fld_feature_2: text\n  - fld_feature_3: text\n  - hse_feature_1: text\n  - hse_feature_2: text\n  - hse_feature_3: text\n  - oth_feature_1: text\n  - oth_feature_2: text\n  - oth_feature_3: text\n  - shp_feature_1: text\n  - shp_feature_2: text\n  - shp_feature_3: text\n  - other_property_details: text\n\n表名: Other_Property_Features\n列:\n  - property_id: number (外键)\n  - feature_id: number (外键)\n  - property_feature_description: text\n\n外键关系:\n  - Other_Available_Features.feature_id -\u003e Other_Property_Features.feature_id\n  - Ref_Feature_Types.feature_type_code -\u003e Other_Available_Features.feature_type_code\n  - Properties.property_id -\u003e Other_Property_Features.property_id\n  - Ref_Property_Types.property_type_code -\u003e Properties.property_type_code\n","metadata":{"execution_time":0.928693474,"prompt_tokens":920,"response_tokens":20,"total_tokens":940},"sequence_num":1031}
{"idx":610104859,"db_id":"real_estate_properties","query":"Show the property type descriptions of properties belonging to that code.","pred":"SELECT Ref_Property_Types.property_type_description\nFROM Ref_Property_Types\nWHERE Ref_Property_Types.property_type_code = 'that code';","ground_truth":"SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Feature_Types\n列:\n  - feature_type_code: text (主键)\n  - feature_type_name: text\n\n表名: Ref_Property_Types\n列:\n  - property_type_code: text (主键)\n  - property_type_description: text\n\n表名: Other_Available_Features\n列:\n  - feature_id: number (主键)\n  - feature_type_code: text (外键)\n  - feature_name: text\n  - feature_description: text\n\n表名: Properties\n列:\n  - property_id: number (主键)\n  - property_type_code: text (外键)\n  - date_on_market: time\n  - date_sold: time\n  - property_name: text\n  - property_address: text\n  - room_count: number\n  - vendor_requested_price: number\n  - buyer_offered_price: number\n  - agreed_selling_price: number\n  - apt_feature_1: text\n  - apt_feature_2: text\n  - apt_feature_3: text\n  - fld_feature_1: text\n  - fld_feature_2: text\n  - fld_feature_3: text\n  - hse_feature_1: text\n  - hse_feature_2: text\n  - hse_feature_3: text\n  - oth_feature_1: text\n  - oth_feature_2: text\n  - oth_feature_3: text\n  - shp_feature_1: text\n  - shp_feature_2: text\n  - shp_feature_3: text\n  - other_property_details: text\n\n表名: Other_Property_Features\n列:\n  - property_id: number (外键)\n  - feature_id: number (外键)\n  - property_feature_description: text\n\n外键关系:\n  - Other_Available_Features.feature_id -\u003e Other_Property_Features.feature_id\n  - Ref_Feature_Types.feature_type_code -\u003e Other_Available_Features.feature_type_code\n  - Properties.property_id -\u003e Other_Property_Features.property_id\n  - Ref_Property_Types.property_type_code -\u003e Properties.property_type_code\n","metadata":{"execution_time":0.830318433,"prompt_tokens":921,"response_tokens":29,"total_tokens":950},"sequence_num":1032}
{"idx":1542488066,"db_id":"real_estate_properties","query":"What are the names of properties that are either houses or apartments with more than 1 room?","pred":"SELECT property_name \nFROM Properties \nWHERE (apt_feature_1 IS NOT NULL OR apt_feature_2 IS NOT NULL OR apt_feature_3 IS NOT NULL \nOR hse_feature_1 IS NOT NULL OR hse_feature_2 IS NOT NULL OR hse_feature_3 IS NOT NULL) \nAND room_count \u003e 1;","ground_truth":"SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  \u003e  1","is_correct":false,"db_schema":"数据库Schema信息:\n表名: Ref_Feature_Types\n列:\n  - feature_type_code: text (主键)\n  - feature_type_name: text\n\n表名: Ref_Property_Types\n列:\n  - property_type_code: text (主键)\n  - property_type_description: text\n\n表名: Other_Available_Features\n列:\n  - feature_id: number (主键)\n  - feature_type_code: text (外键)\n  - feature_name: text\n  - feature_description: text\n\n表名: Properties\n列:\n  - property_id: number (主键)\n  - property_type_code: text (外键)\n  - date_on_market: time\n  - date_sold: time\n  - property_name: text\n  - property_address: text\n  - room_count: number\n  - vendor_requested_price: number\n  - buyer_offered_price: number\n  - agreed_selling_price: number\n  - apt_feature_1: text\n  - apt_feature_2: text\n  - apt_feature_3: text\n  - fld_feature_1: text\n  - fld_feature_2: text\n  - fld_feature_3: text\n  - hse_feature_1: text\n  - hse_feature_2: text\n  - hse_feature_3: text\n  - oth_feature_1: text\n  - oth_feature_2: text\n  - oth_feature_3: text\n  - shp_feature_1: text\n  - shp_feature_2: text\n  - shp_feature_3: text\n  - other_property_details: text\n\n表名: Other_Property_Features\n列:\n  - property_id: number (外键)\n  - feature_id: number (外键)\n  - property_feature_description: text\n\n外键关系:\n  - Other_Available_Features.feature_id -\u003e Other_Property_Features.feature_id\n  - Ref_Feature_Types.feature_type_code -\u003e Other_Available_Features.feature_type_code\n  - Properties.property_id -\u003e Other_Property_Features.property_id\n  - Ref_Property_Types.property_type_code -\u003e Properties.property_type_code\n","metadata":{"execution_time":1.214703527,"prompt_tokens":928,"response_tokens":70,"total_tokens":998},"sequence_num":1033}
