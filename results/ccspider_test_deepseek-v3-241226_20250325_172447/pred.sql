SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '客户服务部' AND a.date = '2024-10-13' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) > 15 * 3600;
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-10-11' AND a.check_in > '09:00';
SELECT COUNT(*) FROM attendance_records WHERE employee_id = 'H03961' AND strftime('%Y', date) = '2024' AND check_in > '09:00';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-24' AND a.check_in < '08:30' AND p.rating = 'A+';
SELECT e.name, d.name, a.check_in, a.check_out FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-10-05';
SELECT e.name, d.name, a.check_in, a.check_out FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-21' ORDER BY d.name;
SELECT (SELECT COUNT(*) FROM probation_employees WHERE status = '离职' AND julianday(end_date) - julianday(start_date) < 90) * 1.0 / (SELECT COUNT(*) FROM probation_employees);
SELECT e.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08' AND a.check_in > '09:00' AND d.name = '客户服务部';
SELECT e.name, e.hire_date FROM employees e INNER JOIN probation_employees p ON e.employee_id = p.employee_id;
SELECT d.name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-22' AND a.check_in > '09:00' AND e.remaining_annual_leave < 5;
SELECT pe.rating FROM employees e JOIN attendance_records ar ON e.employee_id = ar.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE YEAR(e.hire_date) = 2023 AND ar.date = '2024-10-05';
SELECT e.employee_id, p.rating FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE YEAR(e.hire_date) = 2023 AND a.date = '2024-09-26';
SELECT COUNT(*) FROM attendance_records WHERE employee_id = 'H05598' AND strftime('%Y', date) = '2024' AND check_out < '18:00';
SELECT d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-28' AND a.check_in > '09:00';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id WHERE a.date = '2024-10-12' AND a.check_in > '09:00' AND e.department_id = (SELECT department_id FROM departments WHERE name = '运营部');
SELECT d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-11' AND a.check_in > '09:00';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-21' AND a.check_in > '09:00' AND d.name = '销售部';
SELECT d.name FROM performance_evaluations p JOIN employees e ON p.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE p.evaluation_date = '2023-12-11' AND p.rating = 'C';
SELECT e.employee_id, d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND a.check_in > '09:00';
SELECT a.employee_id FROM awards a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2023 AND a.award_name = '创新奖' AND p.rating = 'A+';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '客户服务部' AND a.date = '2024-10-09' AND a.check_in > '08:30:00';
SELECT COUNT(DISTINCT p.employee_id) FROM probation_employees p JOIN awards a ON p.employee_id = a.employee_id WHERE YEAR(p.start_date) = 2023 AND YEAR(p.end_date) = 2023 AND a.year = 2023 AND a.award_name = '优秀员工奖';
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE YEAR(e.hire_date) = 2021 AND a.year = 2022;
SELECT employee_id FROM attendance_records GROUP BY employee_id, date HAVING COUNT(*) > 1;
SELECT DISTINCT d.name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-24' AND a.check_in > '09:30' AND e.remaining_annual_leave < 10;
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-09-19' AND a.check_in > '09:00';
SELECT d.name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-26' AND a.check_in > '09:00' AND p.rating = 'C';
SELECT e.employee_id FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE YEAR(e.hire_date) = 2021 AND a.year = 2021 AND p.rating = 'B';
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-10-03' AND a.check_in > '09:00';
SELECT a.employee_id FROM awards a JOIN probation_employees p ON a.employee_id = p.employee_id WHERE a.year = 2020 AND a.award_name = '优秀员工' AND p.status = '试用期内';
SELECT e.employee_id FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE YEAR(e.hire_date) = 2023 AND a.year = 2023 AND p.rating = 'A+';
SELECT e.name, d.name, a.check_in, a.check_out FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id JOIN probation_employees p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-19' AND p.status = '试用期内';
SELECT employee_id, 20 - remaining_annual_leave AS annual_leave_used FROM employees;
SELECT DISTINCT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2022 AND a.award_name = '技术突破奖' AND (strftime('%s', ar.check_out) - strftime('%s', ar.check_in)) > 36000;
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-20' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) > 28800 AND d.name = '质量控制部';
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-09-25' AND a.check_in < '09:00';
SELECT e.name FROM employees e JOIN (SELECT a.employee_id, AVG(STRFTIME('%s', a.check_out) - STRFTIME('%s', a.check_in)) AS avg_work_time FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE p.rating = 'A+' GROUP BY a.employee_id ORDER BY avg_work_time DESC LIMIT 1) t ON e.employee_id = t.employee_id;
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '销售部' AND a.date = '2024-10-04' AND a.check_in > '09:00';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-18' AND a.check_in > '09:00' AND p.rating = 'D';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-25' AND a.check_in > '08:30:00' AND p.rating = 'B+';
SELECT employee_id, interview_count FROM interviews WHERE YEAR(interview_date) = 2024 ORDER BY interview_count;
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-10-10' AND a.check_in > '08:30:00' AND p.rating = 'A+';
SELECT DISTINCT d.name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-27' AND a.check_in > '09:00' AND e.remaining_annual_leave < 10;
SELECT e.name, p.evaluation_date FROM employees e JOIN performance_evaluations p ON e.employee_id = p.employee_id;
SELECT e.name, d.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-07' AND a.check_in > '09:00' AND a.check_out < '17:00';
SELECT e.name, d.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05';
SELECT d.name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN (SELECT employee_id, AVG(interview_count) AS avg_interviews FROM interviews GROUP BY employee_id) i ON e.employee_id = i.employee_id GROUP BY d.name ORDER BY AVG(i.avg_interviews) DESC LIMIT 1;
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-27' AND p.rating = 'A+';
SELECT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2024 AND a.award_name = '最佳团队奖' AND ar.date = '2024-10-09' AND ar.check_in > '09:00';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-14' AND a.check_in > '09:00' AND d.name = '质量控制部';
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-24' AND a.check_out > '13:00' AND p.rating = 'B+';
SELECT e.name, d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08' AND a.check_in > '09:00';
SELECT e.name, d.name, a.award_name FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN awards a ON e.employee_id = a.employee_id WHERE a.year = 2022;
SELECT DISTINCT a.employee_id FROM attendance_records a INNER JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-10-12' AND a.check_in > '09:00' AND p.rating = 'D';
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-10-13' AND a.check_in < '09:30';
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.department_id = (SELECT department_id FROM departments WHERE name = '客户服务部') AND a.date = '2024-09-22';
SELECT employee_id FROM awards WHERE year = 2023 AND award_name = '质量改进奖' INTERSECT SELECT employee_id FROM performance_evaluations WHERE rating = 'A+';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-05' AND a.check_in > '08:30' AND d.manager_id = 'H05487';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '行政部' AND a.date = '2024-10-02' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) > 32400;
SELECT d.name, e.name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-03-31' AND pe.rating = 'D';
SELECT name, car_plate FROM employees WHERE employee_type = '正式';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '质量控制部' AND a.date = '2024-09-19' AND a.check_in > '09:00';
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.year = 2022 AND a.award_name = '客户满意度奖' AND ar.date = '2024-10-12' AND ar.check_in > '09:00:00';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-11' AND a.check_in > '09:00' AND d.manager_id = 'H00842';
SELECT e.name, d.name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.year = 2023 AND a.award_name = '领导力奖';
SELECT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2023 AND a.award_name = '领导力奖' AND ar.date = '2024-10-09' AND ar.check_in > '09:00';
SELECT d.manager_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-02' AND a.check_in BETWEEN '09:00' AND '10:00' AND e.employee_type = '实习生';
SELECT department_id FROM employees GROUP BY department_id ORDER BY AVG(DATEDIFF(CURRENT_DATE, birth_date)) DESC LIMIT 1;
SELECT DISTINCT a.employee_id FROM attendance_records a INNER JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-16' AND p.rating = 'C';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '研发部' AND a.date = '2024-10-08' AND a.check_in > '09:00';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '财务部' AND a.date = '2024-09-20' AND a.check_in > '09:00';
SELECT e.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id WHERE a.date = '2024-10-05' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) > 28800 AND e.department_id = 'HR';
SELECT DISTINCT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-10-14' AND p.rating = 'A+';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '行政部' AND a.date = '2024-09-27' AND a.check_in > '09:00';
SELECT d.name, COUNT(e.employee_id) FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.name;
SELECT e.name FROM employees e JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE p.rating = 'A+' ORDER BY e.hire_date DESC LIMIT 1;
SELECT employee_id FROM (SELECT e.employee_id, ABS((strftime('%s', a.check_out) - strftime('%s', a.check_in)) - AVG(strftime('%s', a.check_out) - strftime('%s', a.check_in)) OVER (PARTITION BY e.department_id)) AS diff FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id) ORDER BY diff DESC LIMIT 1;
SELECT e.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id WHERE e.department_id = '研发部' AND a.date = '2024-10-05' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) / 3600 > 10;
SELECT e.name, d.name, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-12';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '销售部' AND a.date = '2024-10-11' AND a.check_in > '09:00';
SELECT e.name, d.name, a.check_in, aw.award_name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN awards aw ON a.employee_id = aw.employee_id WHERE a.date = '2024-09-26' AND a.check_in > '09:00' AND aw.year = 2024 AND aw.award_name IS NOT NULL;
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-10-05' AND a.check_in > '09:00' AND p.rating = 'A+';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id WHERE a.date = '2024-10-07' AND a.check_in > '09:00' AND e.department_id = '人力资源部';
SELECT e.name, d.name, a.check_in FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-10-11' AND e.employee_type = '实习生' AND a.check_in < '09:00';
SELECT a.employee_id FROM awards a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2023 AND a.award_name = '优秀员工奖' AND p.rating = 'A+';
SELECT d.name, COUNT(DISTINCT e.employee_id) FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR) AND pe.rating = '高' GROUP BY d.name;
SELECT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2024 AND a.award_name = '新人奖' AND ar.date = '2024-10-08';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-10-02' AND a.check_in > '09:00' AND p.rating = 'A+';
SELECT e.name, d.name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.year = 2024 AND a.award_name = '新人奖';
SELECT AVG(JULIANDAY(MIN(CASE WHEN position LIKE '%经理%' OR position LIKE '%主管%' THEN hire_date END)) - JULIANDAY(hire_date)) FROM employees;
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '研发部' AND a.date = '2024-10-06' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) > 36000;
SELECT a.employee_id FROM awards a INNER JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2023 AND a.award_name = '技术突破奖' AND p.rating = 'A+';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-17' AND a.check_in > '09:00:00' AND p.rating = 'D';
SELECT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2024 AND a.award_name = '项目管理奖' AND ar.date = '2024-10-03';
SELECT a.employee_id FROM awards a JOIN employees e ON a.employee_id = e.employee_id WHERE a.year = 2023 AND a.award_name = '领导力奖' AND e.hire_date > '2017-01-01';
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-09-16' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) > 28800;
SELECT a.employee_id FROM awards a INNER JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2023 AND a.award_name = '领导力奖' AND p.evaluation_date = '2023-06-04' AND p.rating = 'D';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-12' AND a.check_in > '09:00' AND d.name = '客户服务部';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-21' AND a.check_in > '09:00' AND p.rating = 'B';
SELECT d.name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN attendance_records ar ON e.employee_id = ar.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-24' AND ar.check_in > '09:00' AND pe.rating = 'C';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '行政部' AND a.date = '2024-10-05' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) > 32400;
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '财务部' AND a.date = '2024-10-06' AND a.check_in > '09:00';
SELECT d.manager_id FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE YEAR(pe.evaluation_date) = 2023 AND pe.rating = 'A+';
SELECT a.employee_id FROM attendance_records a INNER JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-28' AND a.check_in > '09:00:00' AND p.rating = 'A';
SELECT check_in, check_out FROM attendance_records WHERE date = '2024-10-01' AND employee_id IN (SELECT employee_id FROM awards WHERE year = 2023 AND award_name = '销售冠军');
SELECT e.name FROM employees e JOIN (SELECT p.employee_id, MIN(DATEDIFF(p.evaluation_date, e.hire_date)) AS min_duration FROM performance_evaluations p JOIN employees e ON p.employee_id = e.employee_id WHERE p.rating = 'A+' GROUP BY p.employee_id) AS first_a_plus ON e.employee_id = first_a_plus.employee_id JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_id ORDER BY first_a_plus.min_duration LIMIT 1;
SELECT e.name, d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND a.check_in > '09:00';
SELECT a.employee_id FROM awards a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2024 AND a.award_name = '优秀员工' AND p.rating = 'A+';
SELECT e.name, d.name, p.rating FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE p.evaluation_date = '2023-10-29';
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-09-17' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) > 32400;
SELECT employees.name, departments.name FROM performance_evaluations JOIN employees ON performance_evaluations.employee_id = employees.employee_id JOIN departments ON employees.department_id = departments.department_id WHERE performance_evaluations.evaluation_date = '2022-06-16' AND performance_evaluations.rating = 'C';
SELECT a.employee_id FROM awards a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2022 AND a.award_name = '优秀员工' AND p.evaluation_date = '2022-10-30' AND p.rating = 'A+';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-15' AND a.check_in > '09:00' AND p.rating = 'B';
SELECT e.name, e.position FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部';
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-23' AND a.check_in > '09:00' AND p.rating = 'D';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE d.name = '客户服务部' AND p.rating = 'D' AND p.evaluation_date = '2024-10-14';
SELECT employee_id FROM awards WHERE year = 2023 AND award_name = '领导力奖' AND employee_id IN (SELECT employee_id FROM employees WHERE hire_date >= '2019-01-01');
SELECT d.name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-20' AND a.check_in > '09:00' AND p.rating = 'A+';
SELECT employee_id FROM performance_evaluations WHERE rating = '一般';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-20' AND a.check_in BETWEEN '08:00' AND '09:00' AND p.rating = 'B';
SELECT e.employee_id, e.name FROM employees e JOIN (SELECT employee_id, MAX(evaluation_date) AS last_eval_date FROM performance_evaluations GROUP BY employee_id) pe ON e.employee_id = pe.employee_id JOIN performance_evaluations p ON pe.employee_id = p.employee_id AND pe.last_eval_date = p.evaluation_date WHERE p.evaluation_date < '2024-01-01' AND p.rating = 'B';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-19' AND a.check_in > '09:00' AND p.rating = 'B+';
SELECT d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) > 43200;
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-09-29' AND a.check_in < '09:00';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-10-11' AND a.check_in > '09:00' AND p.rating = 'A';
SELECT date, check_in, check_out FROM attendance_records WHERE employee_id = 'H03961';
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '厦门大学' AND a.date = '2024-09-23' AND a.check_in > '09:00:00';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-19' AND a.check_in > '09:00' AND p.rating = 'D';
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-10-11' AND a.check_in > '08:30';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-10-10' AND a.check_in > '09:00' AND p.rating = 'D';
SELECT e.employee_id FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE YEAR(e.hire_date) = 2024 AND a.award_name = '新人奖' AND a.year = 2024 AND p.rating = 'A';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-26' AND a.check_in BETWEEN '08:00' AND '09:00' AND p.rating = 'B+';
SELECT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2023 AND a.award_name = '创新奖' AND ar.date = '2024-09-25';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-24' AND a.check_in > '09:00' AND p.rating = 'D';
SELECT d.name, AVG(e.remaining_annual_leave) FROM departments d JOIN employees e ON d.department_id = e.department_id WHERE d.manager_id = 'H03372' GROUP BY d.name;
SELECT e.employee_id FROM employees e JOIN attendance_records ar ON e.employee_id = ar.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-12' AND pe.rating = 'A+';
SELECT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2023 AND a.award_name = '质量改进奖' AND ar.date = '2024-10-03' AND ar.check_in > '09:00';
SELECT e.name FROM employees e JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE e.department_id = '财务部' AND p.rating = 'A+' AND p.evaluation_date = '2024-09-15';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '质量控制部' AND a.date = '2024-09-21' AND a.check_in > '09:00';
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-09-25' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) > 28800;
SELECT rating FROM performance_evaluations WHERE employee_id IN (SELECT employee_id FROM awards WHERE year = 2022 AND award_name = '技术突破奖') AND evaluation_date > '2022-07-13';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '财务部' AND a.date = '2024-10-11' AND a.check_in > '09:00';
SELECT e.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '研发部' AND a.date = '2024-10-12' AND a.check_in > '09:00';
SELECT d.name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE p.evaluation_date = '2023-08-06' AND p.rating = 'C';
SELECT d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-01' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) > 43200;
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-10-09' AND a.check_in > '09:00' AND p.rating = 'A+';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-24' AND a.check_in > '09:00' AND d.name = '人力资源部';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '销售部' AND a.date = '2024-10-02' AND a.check_in > '09:00:00';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-10-11' AND a.check_out > '21:00' AND p.rating = 'B+';
SELECT e.name, d.name, e.hire_date FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE p.rating = 'B' AND p.evaluation_date BETWEEN '2022-01-01' AND '2022-12-31' ORDER BY e.hire_date;
SELECT e.name, d.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-22' AND d.name = '客户服务部';
SELECT DISTINCT d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-20' AND a.check_in > '09:00' AND p.rating = 'B';
SELECT e.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id WHERE a.date = '2024-10-02' ORDER BY a.check_in ASC LIMIT 1;
SELECT DISTINCT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE YEAR(e.hire_date) = 2023 AND a.date = '2024-10-10' AND p.rating = 'B+';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '财务部' AND a.date = '2024-10-04' AND a.check_in > '09:00';
SELECT employee_id FROM employees WHERE employee_id IN (SELECT employee_id FROM attendance_records WHERE date = '2024-09-17') AND employee_id IN (SELECT employee_id FROM performance_evaluations WHERE rating = 'A+');
SELECT d.name FROM probation_employees p JOIN employees e ON p.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id GROUP BY p.employee_id ORDER BY COUNT(*) DESC LIMIT 3;
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '财务部' AND a.date = '2024-10-04' AND a.check_in > '09:00';
SELECT e.name, d.name FROM awards a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.year = 2023 AND a.award_name = '优秀员工';
SELECT COUNT(DISTINCT a.employee_id) FROM awards a JOIN probation_employees p ON a.employee_id = p.employee_id WHERE a.year = 2023 AND a.award_name = '客户满意度奖' AND p.start_date <= '2023-12-31' AND p.end_date >= '2023-01-01';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-24' AND a.check_in > '09:00:00' AND p.rating = 'C';
SELECT e.name, a.award_name FROM employees e JOIN awards a ON e.employee_id = a.employee_id;
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '法务部' AND a.date = '2024-10-13' AND a.check_in < '08:30';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-17' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) > 32400 AND d.name = '质量控制部';
SELECT e.name, d.name, a.check_in, a.check_out FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-26' AND e.remaining_annual_leave > 10;
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '财务部' AND a.date = '2024-10-09' AND a.check_in > '09:00:00';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '客户服务部' AND a.date = '2024-10-10' AND a.check_in > '09:00';
SELECT NULL;
SELECT e.name, d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-25' AND a.check_in > '09:00';
SELECT e.name FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE d.name = '客户服务部' AND p.rating = 'A+' AND p.evaluation_date = '2024-09-28';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '法务部' AND a.date = '2024-10-07' AND a.check_in > '09:00';
SELECT e.name, d.name, a.check_in, a.check_out FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-10-14';
SELECT DISTINCT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2021 AND a.award_name = '优秀员工' AND ar.date > '2021-01-01';
SELECT AVG(e.remaining_annual_leave) FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.year = 2024 AND a.award_name = '领导力奖' AND e.hire_date > '2017-12-31';
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE e.university IN ('普通大学', '常见大学') AND e.major IN ('普通专业', '常见专业') AND a.award_name LIKE '%关键决策%' OR a.award_name LIKE '%创新突破%';
SELECT d.name FROM performance_evaluations p JOIN employees e ON p.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE p.evaluation_date = '2023-12-07' AND p.rating = 'B';
SELECT e.name, d.name, a.award_name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE YEAR(e.hire_date) = 2023 AND a.year = 2023;
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '销售部' AND a.date = '2024-09-25' AND a.check_in > '09:00';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '质量控制部' AND a.date = '2024-09-20' AND a.check_in > '09:00';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-29' AND d.name = '客户服务部' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) > 36000;
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-10-04' AND a.check_in > '08:30' AND p.rating = 'A+';
SELECT employee_id, COUNT(*) AS late_days FROM attendance_records WHERE check_in > '09:00' GROUP BY employee_id;
SELECT DISTINCT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-15' AND p.rating = 'A+';
SELECT DISTINCT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2021 AND a.award_name = '最佳团队奖' AND ar.date = '2024-09-19';
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-21';
SELECT employees.employee_id FROM employees JOIN departments ON employees.department_id = departments.department_id JOIN attendance_records ON employees.employee_id = attendance_records.employee_id WHERE departments.name = '财务部' AND attendance_records.date = '2024-09-23' AND attendance_records.check_in < '09:30';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id WHERE a.date = '2024-10-09' AND a.check_in > '09:00' AND e.employee_type = '实习生';
SELECT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2023 AND a.award_name = '项目管理奖' AND ar.date = '2024-09-23';
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE YEAR(e.hire_date) = 2022 AND a.year = 2023 AND p.rating = 'A+';
SELECT e.name, d.name, a.check_in, a.check_out FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '人力资源部' AND a.date = '2024-10-13';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '行政部' AND a.date = '2024-09-18' AND a.check_in > '09:00';
SELECT NULL;
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '销售部' AND a.date = '2024-09-20' AND a.check_in > '08:00:00';
SELECT employee_id, department_id FROM employees WHERE (department_id, birth_date) IN (SELECT department_id, MIN(birth_date) FROM employees GROUP BY department_id);
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '人力资源部' AND a.date = '2024-09-30' AND a.check_in > '09:00';
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-18' AND a.check_in > '09:00' AND d.name = '研发部';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-28' AND a.check_in > '09:30' AND p.rating = 'A+';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-17' AND a.check_in > '09:00' AND p.rating = 'B';
SELECT DISTINCT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-22' AND p.rating = 'D';
SELECT DISTINCT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-10-03' AND p.rating = 'A+';
SELECT e.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-07' AND a.check_in > '09:00' AND d.name = '客户服务部';
SELECT a.employee_id, a.date, a.check_in, a.check_out, p.rating FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id;
SELECT a.employee_id FROM attendance_records a JOIN awards b ON a.employee_id = b.employee_id WHERE a.date = '2024-10-05' AND a.check_in > '09:00' AND b.year = 2021;
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-25' AND a.check_in > '08:30:00' AND d.name = '质量控制部';
SELECT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year >= YEAR(CURDATE()) - 3 GROUP BY a.employee_id, QUARTER(a.date) HAVING COUNT(a.id) = (SELECT MAX(award_count) FROM (SELECT COUNT(id) AS award_count FROM awards WHERE year >= YEAR(CURDATE()) - 3 GROUP BY employee_id, QUARTER(date)) AS subquery) AND COUNT(ar.id) = (SELECT MAX(attendance_count) FROM (SELECT COUNT(id) AS attendance_count FROM attendance_records WHERE date >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR) GROUP BY employee_id, QUARTER(date)) AS subquery);
SELECT DISTINCT a.employee_id FROM awards a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2023 AND p.rating = 'A+';
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.year = 2022 AND a.award_name = '质量改进奖' AND ar.date = '2024-10-04' AND ar.check_in > '09:00:00';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '客户服务部' AND a.date = '2024-10-03' AND a.check_in > '09:00';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id WHERE a.date = '2024-10-02' AND a.check_in > '09:00' AND e.department_id = '人力资源部';
SELECT a.employee_id FROM awards a INNER JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2023 AND a.award_name = '优秀员工' AND p.rating = 'A+';
SELECT d.name FROM performance_evaluations p JOIN employees e ON p.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE p.evaluation_date = '2023-05-31' AND p.rating = 'A+';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-10-02' AND a.check_in > '09:00' AND p.rating = 'A+';
SELECT check_in, check_out FROM attendance_records WHERE employee_id IN (SELECT employee_id FROM awards WHERE year = 2021 AND award_name = '销售冠军') AND date = '2024-09-18';
SELECT e.name, d.name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-05-27' AND pe.rating = 'A+';
SELECT d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-16' AND a.check_in > '09:00:00';
SELECT e.name, d.name FROM employees e JOIN departments d ON e.department_id = d.department_id;
SELECT name FROM employees WHERE hire_date = (SELECT MIN(hire_date) FROM employees) ORDER BY position LIMIT 1;
SELECT e.employee_id FROM employees e JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE e.department_id = 'D00007' AND p.rating = 'A' AND strftime('%Y', p.evaluation_date) = '2024';
SELECT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2022 AND a.award_name = '创新奖' AND ar.date = '2024-10-12' AND ar.check_in > '09:00';
SELECT d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-23' AND a.check_in > '09:00';
SELECT COUNT(DISTINCT awards.employee_id) FROM awards INNER JOIN performance_evaluations ON awards.employee_id = performance_evaluations.employee_id WHERE awards.year = 2023 AND awards.award_name = '质量改进奖' AND performance_evaluations.rating = 'A+';
SELECT d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-23' AND a.check_in > '08:00' AND a.check_out < '18:00';
SELECT d.name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN interviews i ON e.employee_id = i.employee_id JOIN awards a ON e.employee_id = a.employee_id WHERE i.interview_date = '2023-10-09' AND a.year = 2023 AND a.award_name = '优秀员工奖';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-10-12' AND a.check_in < '09:00' AND p.rating = 'B+';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-20' AND a.check_in > '09:00:00' AND p.rating = 'A+';
SELECT a.employee_id FROM awards a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2021 AND a.award_name = '质量改进奖' AND p.rating = 'B+';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-29' AND a.check_in > '08:30:00' AND d.name = '客户服务部';
SELECT d.manager_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-16' AND a.check_in > '08:30:00';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id WHERE a.date = '2024-10-01' AND a.check_in > '09:00' AND e.position = '顾问';
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-23' AND a.check_in > '09:00';
SELECT e.name, a.year FROM awards a JOIN employees e ON a.employee_id = e.employee_id WHERE a.award_name = '技术创新奖' AND a.year >= YEAR(CURDATE()) - 5;
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '财务部' AND a.date = '2024-10-06' AND a.check_in > '09:00';
SELECT e.employee_id, d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-04' AND a.check_in > '09:00';
SELECT e.name, d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-04';
SELECT a.employee_id, a.award_name, p.rating, p.evaluation_date FROM awards a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2023 AND YEAR(p.evaluation_date) = 2023;
SELECT e.name, d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-10' AND a.check_in > '09:30';
SELECT e.name, d.name, a.check_in, a.check_out FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE a.date = '2024-09-19';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-03' AND a.check_in > '09:00' AND d.name = '行政部';
SELECT department_id FROM employees GROUP BY department_id ORDER BY AVG(remaining_annual_leave) DESC LIMIT 1;
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-27' AND a.check_in < '10:00' AND p.rating = 'A+';
SELECT interview_date, interview_count FROM interviews WHERE YEAR(interview_date) = 2024;
SELECT e.name, d.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-20' AND a.check_in > '09:00:00';
SELECT e.name FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE d.name = '研发部' AND p.rating = 'B+' AND p.evaluation_date = '2024-09-29';
SELECT a.check_in, a.check_out FROM attendance_records a JOIN awards b ON a.employee_id = b.employee_id WHERE b.year = 2022 AND b.award_name = '销售冠军' AND a.date = '2024-10-10';
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id WHERE a.award_name = '客户满意度奖' AND a.year = 2023 AND e.hire_date > '2020-06-19';
SELECT e.name FROM employees e JOIN attendance_records ar ON e.employee_id = ar.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-09-22' AND ar.check_in > '09:00' AND pe.rating = 'A+';
SELECT d.name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE p.evaluation_date = '2022-06-20' AND p.rating = 'C';
SELECT a.employee_id FROM awards a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2024 AND a.award_name = '客户满意度奖' AND p.rating = 'C';
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.year = 2023 AND a.award_name = '项目管理奖' GROUP BY e.name HAVING AVG(STRFTIME('%s', ar.check_out) - STRFTIME('%s', ar.check_in)) / 3600 > 10;
SELECT d.name FROM performance_evaluations pe JOIN employees e ON pe.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE pe.evaluation_date = '2023-03-09' AND pe.rating = 'D';
SELECT department_id, AVG(rating) AS avg_rating FROM performance_evaluations WHERE employee_id IN (SELECT employee_id FROM employees WHERE position = '专家' OR employee_type = '专家') GROUP BY department_id;
SELECT e.name, d.name, a.check_in, a.check_out FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-10-08';
SELECT a.employee_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-26' AND a.check_in > '09:00' AND d.name = '人力资源部';
SELECT a.employee_id FROM attendance_records a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.date = '2024-09-28' AND a.check_in > '09:00' AND p.rating = 'A+';
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-20' AND d.name = '研发部' AND a.check_in > '09:00:00';
SELECT d.name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN attendance_records a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-10-13' AND a.check_in > '09:00' AND p.rating = 'A+';
SELECT a.employee_id FROM awards a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2023 AND a.award_name = '销售冠军' AND p.rating IN ('A', 'B');
SELECT e.name FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '财务部' AND a.date = '2024-09-17' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) > 32400;
SELECT e.employee_id, d.manager_id FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE a.date = '2024-09-18' AND a.check_in > '09:00';
SELECT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2023 AND a.award_name = '技术突破奖' AND ar.date = '2024-09-23' AND ar.check_in > '09:00';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '运营部' AND a.date = '2024-09-26';
SELECT a.employee_id FROM awards a JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2020 AND a.award_name = '优秀员工' AND YEAR(p.evaluation_date) = 2023 AND p.rating = 'C';
SELECT e.name FROM employees e JOIN attendance_records ar ON e.employee_id = ar.employee_id JOIN performance_evaluations pe ON e.employee_id = pe.employee_id WHERE ar.date = '2024-10-03' AND ar.check_in > '09:00:00' AND pe.rating = 'C';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '法务部' AND a.date = '2024-10-12' AND a.check_in > '09:00';
SELECT department_id FROM (SELECT YEAR(interview_date) AS year, department_id, COUNT(DISTINCT CASE WHEN e.employee_id IS NOT NULL THEN i.employee_id END) * 1.0 / COUNT(DISTINCT i.employee_id) AS pass_rate FROM interviews i LEFT JOIN employees e ON i.employee_id = e.employee_id WHERE YEAR(interview_date) >= YEAR(CURDATE()) - 5 GROUP BY YEAR(interview_date), department_id ORDER BY pass_rate DESC LIMIT 1) AS subquery;
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-10-12';
SELECT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2023 AND a.award_name = '领导力奖' AND ar.date = '2024-10-01' AND ar.check_in > '09:00';
SELECT e.name FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN attendance_records ar ON e.employee_id = ar.employee_id WHERE a.year = 2023 AND a.award_name = '销售冠军' AND ar.date = '2024-09-22' AND ar.check_in > '09:00:00';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '人力资源部' AND a.date = '2024-10-10' AND a.check_in > '09:00';
SELECT d.name FROM performance_evaluations p JOIN employees e ON p.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE p.evaluation_date = '2023-04-20' AND p.rating = 'D';
SELECT COUNT(DISTINCT a.employee_id) * 1.0 / (SELECT COUNT(DISTINCT employee_id) FROM employees) FROM awards a INNER JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year >= YEAR(CURDATE()) - 1 AND p.evaluation_date >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR);
SELECT e.employee_id FROM employees e JOIN awards a ON e.employee_id = a.employee_id JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE YEAR(e.hire_date) = 2023 AND a.year = 2023 AND a.award_name = '优秀员工奖' AND p.rating = 'A+';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '客户服务部' AND a.date = '2024-09-21' AND a.check_in > '09:00:00';
SELECT employee_id, SUM(STRFTIME('%s', check_out) - STRFTIME('%s', check_in)) AS total_working_time FROM attendance_records GROUP BY employee_id;
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '客户服务部' AND a.date = '2024-09-15' AND a.check_in > '09:00';
SELECT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2021 AND a.award_name = '创新奖' AND ar.date = '2024-10-05' AND ar.check_in > '09:00';
SELECT a.employee_id FROM awards a INNER JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2024 AND p.rating = 'C';
SELECT a.employee_id FROM awards a INNER JOIN performance_evaluations p ON a.employee_id = p.employee_id WHERE a.year = 2024 AND a.award_name = '领导力奖' AND p.rating = 'C';
SELECT e.employee_id FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.name = '质量控制部' AND a.date = '2024-09-19' AND a.check_in > '09:00';
SELECT DISTINCT a.employee_id FROM awards a JOIN attendance_records ar ON a.employee_id = ar.employee_id WHERE a.year = 2024 AND a.award_name = '项目管理奖' AND ar.date = '2024-09-23';
SELECT e.name, d.name, p.rating FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id LEFT JOIN performance_evaluations p ON e.employee_id = p.employee_id WHERE a.date = '2024-09-20';
SELECT e.name, m.name FROM attendance_records a JOIN employees e ON a.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id JOIN employees m ON d.manager_id = m.employee_id WHERE a.date = '2024-09-26' AND a.check_in > '09:30:00';
SELECT e.name FROM employees e JOIN attendance_records a ON e.employee_id = a.employee_id WHERE e.university = '清华大学' AND a.date = '2024-10-03' AND a.check_in > '09:00';
SELECT e.employee_id FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN attendance_records a ON e.employee_id = a.employee_id WHERE d.name = '研发部' AND a.date = '2024-10-01' AND (strftime('%s', a.check_out) - strftime('%s', a.check_in)) > 36000;
SELECT rating FROM performance_evaluations WHERE employee_id IN (SELECT employee_id FROM awards WHERE year = 2023 AND award_name = '优秀员工') AND strftime('%Y', evaluation_date) = '2023';
SELECT d.cust_no, d.acct_bal, l.loan_balance, l.loan_type FROM deposit_account_info d JOIN loan_detail_info l ON d.cust_no = l.cust_id WHERE d.data_dt = '2024-07-19' AND d.acct_bal > 100000 AND l.loan_balance > 500000;
SELECT cust_no FROM financial_products WHERE currency = '美元' AND wealth_bal > 5000000 AND data_dt = '2024-07-02';
SELECT rs_type_name, rs_type_id FROM five_level_classification WHERE rs_type = '不良' AND data_dt = '2024-07-22';
SELECT c.customer_name, o.occupation_name, lr.description FROM customer c JOIN occupation o ON c.occupation_id = o.id JOIN loan_repayment lr ON c.id = lr.loan_application_id ORDER BY lr.repayment_amount DESC;
SELECT customer_name, id_number, phone_number, email, address FROM customer WHERE occupation_id = (SELECT id FROM occupation WHERE occupation_name = '护士') ORDER BY customer_name;
SELECT COUNT(DISTINCT c.id) FROM customer c INNER JOIN deposit_account_info d ON c.id = d.cust_no INNER JOIN loan_application l ON c.id = l.customer_id WHERE c.province = '沈阳' AND d.data_dt = '2024-07-19' AND l.apply_date = '2024-07-19';
SELECT c.curr_code, c.curr_full_name, b.bank_name, b.bank_level FROM currency c JOIN bank_orgnization b ON c.curr_code = b.bank_id WHERE c.data_dt = '2023-06-30' AND b.data_dt = '2023-06-30';
SELECT deposit_id, deposit_name FROM deposit_type WHERE data_dt = '2024-07-22';
SELECT d.card_no, d.open_date, c.customer_name, c.address FROM debit_card_information d JOIN customer c ON d.cust_no = c.id_number WHERE d.open_date = '2024-07-15' AND d.current_bal > 2000;
SELECT customer_id, credit_score FROM loan_credit WHERE credit_date = '2003-06-22' AND credit_score > 0.75;
SELECT c.customer_name, c.gender, SUM(lr.repayment_amount) FROM customer c JOIN loan_application la ON c.id = la.customer_id JOIN loan_repayment lr ON la.id = lr.loan_application_id GROUP BY c.gender, c.customer_name;
SELECT c.* FROM customer c JOIN loan_application la ON c.id = la.customer_id ORDER BY la.loan_amount DESC LIMIT 1;
SELECT COUNT(DISTINCT fp.cust_no) FROM financial_products fp JOIN debit_card_information dci ON fp.cust_no = dci.cust_no WHERE fp.wealth_bal > 1000000 AND dci.card_state = '正常';
SELECT cust_name FROM deposit_account_info WHERE org_nm = '沈阳余淮支行' AND data_dt = '2024-07-19' AND act_mon_avg_bal > 50000;
SELECT customer.customer_name, loan_application.loan_amount FROM loan_application JOIN customer ON loan_application.customer_id = customer.id WHERE loan_application.loan_amount > 30000 AND loan_application.status = 'PENDING';
SELECT acct_type_code, COUNT(*) FROM deposit_account_info WHERE cust_no IN (SELECT customer_id FROM loan_application ORDER BY loan_amount DESC LIMIT 20) GROUP BY acct_type_code;
SELECT curr_code, curr_full_name FROM currency WHERE curr_class = '外币' ORDER BY curr_code ASC;
SELECT customer_id, loan_amount FROM loan_application ORDER BY loan_amount DESC;
SELECT cust_type, wealth_t_m_avg_bal_a FROM financial_products WHERE data_dt = '2024-07' GROUP BY cust_type;
SELECT * FROM loan_detail_info WHERE loandate_s > '2024-04-01';
SELECT c.id FROM customer c JOIN loan_application l ON c.id = l.customer_id WHERE l.loan_amount > (SELECT AVG(loan_amount) * 1.5 FROM loan_application la JOIN customer cu ON la.customer_id = cu.id WHERE CASE WHEN DATE_PART('year', AGE(cu.birth_date)) BETWEEN 0 AND 20 THEN '0-20' WHEN DATE_PART('year', AGE(cu.birth_date)) BETWEEN 21 AND 40 THEN '21-40' WHEN DATE_PART('year', AGE(cu.birth_date)) BETWEEN 41 AND 60 THEN '41-60' ELSE '61+' END = CASE WHEN DATE_PART('year', AGE(c.birth_date)) BETWEEN 0 AND 20 THEN '0-20' WHEN DATE_PART('year', AGE(c.birth_date)) BETWEEN 21 AND 40 THEN '21-40' WHEN DATE_PART('year', AGE(c.birth_date)) BETWEEN 41 AND 60 THEN '41-60' ELSE '61+' END);
SELECT birth_date, gender FROM customer;
SELECT cust_id FROM loan_detail_info WHERE loan_balance > 500000 AND dw_date = '2024-07-19' AND loan_orgno = '沈阳分行';
SELECT ldi.*, c.curr_full_name, flc.rs_type_name FROM loan_detail_info ldi JOIN currency c ON ldi.currency_type = c.curr_code JOIN five_level_classification flc ON ldi.judgelevel = flc.rs_type_id WHERE ldi.loan_balance > 1000000;
SELECT cust_id, curr_full_name FROM loan_detail_info JOIN currency ON loan_detail_info.currency_type = currency.curr_code WHERE loan_balance > 1000000 ORDER BY loan_balance DESC;
SELECT customer_id FROM user_behavior WHERE behavior_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY customer_id ORDER BY COUNT(DISTINCT behavior_type) DESC LIMIT 5;
SELECT SUM(stm_overdu), COUNT(*) FROM credit_card_data WHERE corporation = 'Corp3' AND dw_date = '2024-07-03';
SELECT * FROM loan_detail_info WHERE cust_id = '1004';
SELECT c.*, t.* FROM customer c LEFT JOIN transfer t ON c.id = t.source_customer_id;
SELECT * FROM user_behavior INNER JOIN loan_repayment ON user_behavior.customer_id = loan_repayment.customer_id;
SELECT dai.cust_name, dai.acct_bal, dt.deposit_type_name FROM deposit_account_info dai JOIN deposit_type dt ON dai.acct_type_code = dt.deposit_type_id WHERE dai.data_dt = '2024-07-21' AND dai.acct_bal > 50000;
SELECT la.customer_id, (SUM(la.loan_amount) / SUM(SUM(la.loan_amount)) OVER (PARTITION BY c.province)) * 100 AS loan_percentage FROM loan_application la JOIN customer c ON la.customer_id = c.id GROUP BY la.customer_id, c.province;
SELECT province, occupation_name FROM (SELECT c.province, o.occupation_name, COUNT(CASE WHEN la.status = '通过' THEN 1 END) * 1.0 / COUNT(*) AS pass_rate, RANK() OVER (PARTITION BY c.province ORDER BY COUNT(CASE WHEN la.status = '通过' THEN 1 END) * 1.0 / COUNT(*) DESC) AS rank FROM customer c JOIN loan_application la ON c.id = la.customer_id JOIN occupation o ON c.occupation_id = o.id GROUP BY c.province, o.occupation_name) WHERE rank = 1;
SELECT org_nm, SUM(top10_balances) / SUM(total_balance) AS ratio FROM (SELECT org_nm, SUM(acct_bal) AS top10_balances, (SELECT SUM(acct_bal) FROM deposit_account_info d2 WHERE d2.org_no = d1.org_no) AS total_balance FROM (SELECT org_nm, org_no, acct_bal, ROW_NUMBER() OVER (PARTITION BY org_no ORDER BY acct_bal DESC) AS rn FROM deposit_account_info) d1 WHERE rn <= 10 GROUP BY org_nm, org_no) GROUP BY org_nm;
SELECT cust_nm, tel_no FROM debit_card_information WHERE cust_nm LIKE '%Lee%';
SELECT ub.customer_id, ub.behavior_type, ub.behavior_date, ub.description, lr.repayment_amount, lr.repayment_date, lr.description FROM user_behavior ub LEFT JOIN loan_repayment lr ON ub.customer_id = lr.customer_id;
SELECT DISTINCT lc.customer_id FROM loan_credit lc JOIN loan_repayment lr ON lc.customer_id = lr.loan_application_id WHERE lc.credit_score > 0.75 AND lr.repayment_date = '2021-11-10';
SELECT * FROM loan_repayment WHERE repayment_amount > 900;
SELECT cust_no, cust_nm, card_no, residential_address FROM debit_card_information WHERE data_dt = '2024-07-09' AND card_state = '正常' AND residential_address = '987 Willow Street';
SELECT cust_id, loan_amount, loan_balance FROM loan_detail_info;
SELECT lt.loan_type_code, COUNT(DISTINCT dci.cust_no) AS user_count FROM loan_application la JOIN debit_card_information dci ON la.customer_id = dci.cust_no JOIN loan_type lt ON la.loan_type_id = lt.id GROUP BY lt.loan_type_code;
SELECT loan_type_id, COUNT(DISTINCT customer_id) FROM loan_application GROUP BY loan_type_id;
SELECT credit_score, description FROM loan_credit WHERE credit_date = '2011-04-13';
SELECT SUM(wealth_bal), SUM(wealth_bal_f) FROM financial_products WHERE bank_nm = '沈阳余淮支行' AND data_dt = '2024-07-14' AND cast_type = '对公';
SELECT customer_id, credit_score FROM loan_credit WHERE credit_date = '2003-06-22' AND credit_score > 0.75;
SELECT source_customer_id, target_customer_id FROM transfer;
SELECT loan_type_name FROM loan_type WHERE loan_type_code = 'MORTGAGE';
SELECT cust_nm, card_no FROM debit_card_information WHERE data_dt = '2024-07-05' AND card_state = '正常';
SELECT bank_nm, cast_type, COUNT(*) FROM financial_products GROUP BY bank_nm, cast_type;
SELECT deposit_name, deposit_type_id FROM deposit_type ORDER BY deposit_name;
SELECT status, loan_amount FROM loan_application;
SELECT c.* FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id WHERE lc.credit_score = 0.77;
SELECT lt.description, lr.* FROM loan_type lt JOIN loan_application la ON lt.id = la.loan_type_id JOIN loan_repayment lr ON la.id = lr.loan_application_id;
SELECT rs_type_id, rs_type_name FROM five_level_classification;
SELECT card_no, closing_date FROM debit_card_information WHERE closing_date > '2024-07-05';
SELECT card_type, card_state FROM debit_card_information WHERE card_type IS NOT NULL;
SELECT cust_id, SUM(loan_balance) FROM loan_detail_info WHERE dw_date = '2024-07-19' AND loan_balance > 100000 GROUP BY cust_id;
SELECT CORR(d.acct_bal, l.loan_balance) AS correlation_coefficient FROM deposit_account_info d JOIN loan_detail_info l ON d.org_no = l.loan_orgno;
SELECT DATE_TRUNC('month', t.transfer_date) AS month, SUM(t.transfer_amount) AS total_transfer, SUM(l.loan_amount) AS total_loan FROM transfer t FULL OUTER JOIN loan_application l ON DATE_TRUNC('month', t.transfer_date) = DATE_TRUNC('month', l.apply_date) GROUP BY month ORDER BY month;
SELECT customer_name, phone_number FROM customer WHERE province = '上海市';
SELECT credit_score, credit_date FROM loan_credit WHERE customer_id = 533302;
SELECT * FROM transfer ORDER BY transfer_amount DESC;
SELECT customer_id, COUNT(DISTINCT behavior_type) FROM user_behavior GROUP BY customer_id;
SELECT COUNT(DISTINCT d.cust_no) FROM deposit_account_info d JOIN credit_card_data c ON d.cust_no = c.custr_nbr JOIN bank_orgnization b ON d.bank_no = b.bank_id WHERE b.bank_name = '沈阳分行' AND d.data_dt = '2024-07-22' AND c.dw_date = '2024-07-22' AND d.acct_bal > 100000 AND c.stm_overdu > 5000;
SELECT card_no, cust_nm FROM debit_card_information WHERE org_nm = '北京分行';
SELECT COUNT(DISTINCT customer_id) FROM (SELECT customer_id, DATE_TRUNC('month', apply_date) AS month, LEAD(DATE_TRUNC('month', apply_date), 2) OVER (PARTITION BY customer_id ORDER BY DATE_TRUNC('month', apply_date)) AS month_plus_2 FROM loan_application) t WHERE month_plus_2 = month + INTERVAL '2 months';
SELECT cust_no, bank_nm FROM financial_products ORDER BY cust_no;
SELECT occupation_code, occupation_name FROM occupation ORDER BY occupation_name;
SELECT COUNT(DISTINCT fp.cust_no) FROM financial_products fp JOIN debit_card_information dci ON fp.cust_no = dci.cust_no WHERE fp.wealth_bal > dci.current_bal * 10;
SELECT loan_orgno, loan_balance FROM loan_detail_info WHERE loan_amount > 70000;
SELECT lt.loan_type_name, ub.behavior_type FROM loan_type lt JOIN loan_application la ON lt.id = la.loan_type_id JOIN user_behavior ub ON la.customer_id = ub.customer_id;
SELECT bank_level, COUNT(*) FROM bank_orgnization GROUP BY bank_level;
SELECT current_bal, fixed_bal FROM debit_card_information WHERE data_dt = '2024-07-15' AND bank_nm = '北京东单支行' AND cust_nm = 'Olivia Lee';
SELECT c.customer_name, lc.description FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id WHERE lc.credit_score > 0.85 AND lc.credit_date = '2017-10-31' ORDER BY lc.credit_score DESC;
SELECT loan_amount FROM loan_application la JOIN loan_type lt ON la.loan_type_id = lt.id WHERE lt.loan_type_name = '汽车贷款';
SELECT loan_type_id, AVG(repayment_amount) AS avg_repayment_amount, COUNT(*) AS repayment_count FROM loan_repayment JOIN loan_application ON loan_repayment.loan_application_id = loan_application.id GROUP BY loan_type_id;
SELECT acc_name1, bank, category, day_opened FROM credit_card_data WHERE corporation = 'Corp3' ORDER BY day_opened DESC;
SELECT customer_name, address FROM customer;
SELECT l.loan_orgno, SUM(l.loan_amount) / SUM(d.current_bal) AS ratio FROM loan_detail_info l JOIN debit_card_information d ON l.loan_orgno = d.bank_no WHERE SUBSTR(l.dw_date, 1, 4) = '2023' AND SUBSTR(d.data_dt, 1, 4) = '2023' GROUP BY l.loan_orgno;
SELECT * FROM loan_repayment ORDER BY ABS(repayment_amount - (SELECT AVG(repayment_amount) FROM loan_repayment)) LIMIT 1;
SELECT DISTINCT lc.customer_id FROM loan_credit lc JOIN user_behavior ub ON lc.customer_id = ub.customer_id WHERE lc.credit_score > 0.8 AND ub.behavior_type = 'financial_product_purchase' AND strftime('%Y-%m', ub.behavior_date) = '2024-07';
SELECT DATE_TRUNC('month', apply_date) AS month, SUM(CASE WHEN status = 'APPROVED' THEN 1 ELSE 0 END)::float / COUNT(*) AS approval_rate FROM loan_application GROUP BY DATE_TRUNC('month', apply_date);
SELECT b.bank_name, COUNT(DISTINCT c.id) AS new_customer_count, AVG(l.loan_amount) AS avg_loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id JOIN bank_orgnization b ON l.bank_id = b.bank_id WHERE c.birth_date BETWEEN '2024-01-01' AND '2024-03-31' GROUP BY b.bank_name;
SELECT b.bank_parent, AVG(l.loan_term) AS avg_loan_term, AVG(l.loan_amount) AS avg_loan_amount FROM loan_application l JOIN customer c ON l.customer_id = c.id JOIN bank_orgnization b ON c.province = b.bank_name GROUP BY b.bank_parent;
SELECT credit_score, credit_date FROM loan_credit;
SELECT cust_id, loan_balance FROM loan_detail_info WHERE loandate_e < '2026-01-01';
SELECT id, apply_date FROM loan_application;
SELECT customer_id, loan_amount FROM loan_application WHERE loan_type_id = 1 AND status = 'APPROVED' ORDER BY loan_amount DESC;
SELECT bo.bank_name, doi.org_nm FROM deposit_account_info doi JOIN bank_orgnization bo ON doi.org_no = bo.bank_id GROUP BY doi.org_no, bo.bank_name ORDER BY SUM(doi.acct_bal) DESC LIMIT 5;
SELECT * FROM loan_repayment WHERE description = '严琳';
SELECT rs_type_name, COUNT(*) FROM five_level_classification GROUP BY rs_type_name;
SELECT rs_type_name, COUNT(*) FROM five_level_classification GROUP BY rs_type_name;
SELECT b.bank_name, f.cust_no, f.wealth_bal FROM bank_orgnization b JOIN financial_products f ON b.bank_id = f.bank_no;
SELECT loan_type_name, description FROM loan_type ORDER BY loan_type_code;
SELECT bank_name, bank_parent FROM bank_orgnization WHERE bank_level = '2';
SELECT province, customer_name, loan_amount FROM (SELECT c.province, c.customer_name, la.loan_amount, ROW_NUMBER() OVER (PARTITION BY c.province ORDER BY la.loan_amount DESC) AS rn FROM customer c JOIN loan_application la ON c.id = la.customer_id) sub WHERE rn <= 3;
SELECT * FROM transfer WHERE source_customer_id = 376252;
SELECT c.customer_name, c.gender, o.occupation_name FROM customer c JOIN occupation o ON c.occupation_id = o.id;
SELECT COUNT(DISTINCT cust_no) AS customer_count, SUM(wealth_bal_f) AS total_non_guaranteed_balance FROM financial_products WHERE bank_nm = '沈阳余淮支行' AND data_dt LIKE '2024-07%';
SELECT customer_id FROM loan_credit WHERE credit_score > 0.8;
SELECT c1.customer_name AS source_customer, c2.customer_name AS target_customer, t.transfer_amount FROM transfer t JOIN customer c1 ON t.source_customer_id = c1.id JOIN customer c2 ON t.target_customer_id = c2.id WHERE t.transfer_amount > 5000;
SELECT DISTINCT customer_id FROM loan_application WHERE YEAR(apply_date) = 2019 AND status = 'APPROVED';
SELECT card_type, COUNT(DISTINCT d.cust_no) AS customer_count, AVG(f.wealth_bal) AS avg_wealth_balance FROM debit_card_information d LEFT JOIN financial_products f ON d.cust_no = f.cust_no GROUP BY card_type;
SELECT c.customer_name, l.loan_amount FROM loan_application l JOIN customer c ON l.customer_id = c.id ORDER BY l.apply_date ASC;
SELECT SUM(acct_bal), SUM(act_year_avg_bal) FROM deposit_account_info WHERE data_dt = '2024-07-19' AND cust_type = '对私';
SELECT c.id, o.occupation_name FROM loan_repayment lr JOIN customer c ON lr.loan_application_id = c.id JOIN occupation o ON c.occupation_id = o.id WHERE lr.repayment_amount < 500;
SELECT cust_name, acct_bal FROM deposit_account_info WHERE data_dt = '2023-07-19';
SELECT la.* FROM loan_application la JOIN (SELECT cust_no FROM deposit_account_info ORDER BY acct_bal DESC LIMIT 1) dai ON la.customer_id = dai.cust_no ORDER BY la.apply_date DESC LIMIT 1;
SELECT occupation_id, COUNT(*) FROM customer GROUP BY occupation_id;
SELECT c.customer_name, t.transfer_amount FROM transfer t JOIN customer c ON t.source_customer_id = c.id WHERE t.transfer_date = '2016-06-11' AND t.transfer_amount > 5000 ORDER BY t.transfer_amount DESC;
SELECT cust_id, loan_balance, loan_type, curr_full_name FROM loan_detail_info ldi JOIN currency c ON ldi.currency_type = c.curr_code WHERE loandate_s > '2024-07-01' AND loan_balance > 1000000 ORDER BY loan_balance DESC;
SELECT * FROM user_behavior WHERE behavior_date = '2018-06-26';
SELECT * FROM loan_repayment WHERE DAYOFWEEK(repayment_date) IN (1, 7);
SELECT COUNT(DISTINCT da.cust_no) AS customer_count FROM deposit_account_info da JOIN loan_application la ON da.cust_no = la.customer_id GROUP BY da.acct_type_code, la.loan_type_id ORDER BY customer_count DESC;
SELECT c.customer_name, lr.repayment_amount FROM loan_repayment lr JOIN customer c ON lr.customer_id = c.id WHERE lr.repayment_date = '2021-11-10' AND lr.repayment_amount > 20 ORDER BY lr.repayment_amount DESC;
SELECT loan_type.loan_type_name, AVG(loan_credit.credit_score) FROM loan_type JOIN loan_application ON loan_type.id = loan_application.loan_type_id JOIN loan_credit ON loan_application.customer_id = loan_credit.customer_id GROUP BY loan_type.loan_type_name;
SELECT loan_type_name, loan_type_code FROM loan_type WHERE loan_type_code IS NOT NULL;
SELECT status, COUNT(*) FROM loan_application GROUP BY status;
SELECT customer_id, description FROM loan_credit;
SELECT cust_nm, cust_id, tel_no, card_no, current_bal FROM debit_card_information WHERE open_date = '2024-07-15' AND org_nm = '北京东单支行';
SELECT cust_type, SUM(loan_amount) FROM loan_detail_info GROUP BY cust_type ORDER BY cust_type;
SELECT cust_id, iou_no FROM loan_detail_info ORDER BY loan_balance / loan_amount DESC LIMIT 10;
SELECT customer_id, SUM(loan_amount) FROM loan_application WHERE YEAR(apply_date) = 2019 AND loan_type_id = 1 AND status = 'REJECTED' GROUP BY customer_id;
SELECT * FROM bank_orgnization;
SELECT ldi.*, c.curr_full_name, flc.rs_type_name FROM loan_detail_info ldi JOIN currency c ON ldi.currency_type = c.curr_code JOIN five_level_classification flc ON ldi.judgelevel = flc.rs_type_id WHERE ldi.dw_date = '2024-07-22' AND ldi.blc_capital > 10000;
SELECT card_state, open_date FROM debit_card_information WHERE card_state = '正常';
SELECT c.customer_name, t.transfer_amount, t.transfer_date FROM transfer t JOIN customer c ON t.source_customer_id = c.id WHERE t.transfer_date = '2023-06-30' ORDER BY t.transfer_amount DESC;
SELECT bank_level, bank_name FROM bank_orgnization WHERE data_dt = '2023-06-30';
SELECT cust_no, SUM(wealth_bal) AS total_wealth_bal FROM financial_products WHERE data_dt = '2024-07-02' AND cast_type = '非保本理财产品' GROUP BY cust_no ORDER BY total_wealth_bal DESC;
SELECT SUM(loan_amount) FROM loan_application WHERE YEAR(apply_date) = 2019 AND status = 'REJECTED';
SELECT org_nm, SUM(acct_bal) FROM deposit_account_info WHERE data_dt = '2024-07-21' AND bank_nm = '杭州分行' AND cust_type = '对公' GROUP BY org_nm;
SELECT customer_id, SUM(repayment_amount) AS 还款总额, COUNT(behavior_type) AS 行为次数, AVG(repayment_amount) AS 平均还款金额 FROM loan_repayment JOIN user_behavior ON loan_repayment.customer_id = user_behavior.customer_id GROUP BY customer_id;
SELECT bank_name, bank_level, data_dt FROM bank_orgnization;
SELECT d.cust_name, d.acct_bal, o.occupation_name FROM deposit_account_info d JOIN customer c ON d.cust_no = c.id JOIN occupation o ON c.occupation_id = o.id LEFT JOIN loan_application l ON c.id = l.customer_id WHERE l.id IS NULL AND d.acct_bal >= (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY acct_bal) FROM deposit_account_info);
SELECT loan_orgno, COUNT(CASE WHEN la.status = '已批准' THEN 1 END) * 1.0 / COUNT(*) AS success_rate FROM loan_detail_info ldi JOIN loan_application la ON ldi.reportid = la.id GROUP BY loan_orgno;
SELECT acct_bal FROM deposit_account_info WHERE data_dt LIKE '2023-07%';
SELECT bank_nm FROM deposit_account_info WHERE data_dt = '2023-06-30' AND acct_bal > 100000 AND cur_type = '美元';
SELECT dai.cust_name, dai.acct_type_code, dai.acct_bal, c.curr_full_name FROM deposit_account_info dai JOIN currency c ON dai.cur_type = c.curr_code WHERE dai.data_dt = '2024-07-19' AND dai.acct_bal > 100000;
SELECT cust_nm, card_no FROM debit_card_information WHERE card_state = '正常' AND open_date > '2024-07-01' ORDER BY open_date DESC;
SELECT deposit_name, deposit_type_id FROM deposit_type ORDER BY deposit_name;
SELECT source_customer_id, (SELECT transfer_amount FROM transfer WHERE source_customer_id = t.source_customer_id GROUP BY transfer_amount ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_amount FROM transfer t GROUP BY source_customer_id ORDER BY COUNT(*) DESC LIMIT 10;
SELECT COUNT(DISTINCT c.id) AS customer_count, SUM(ldi.loan_balance) AS total_loan_balance FROM customer c JOIN credit_card_data ccd ON c.id = ccd.custr_nbr JOIN loan_detail_info ldi ON c.id = ldi.cust_id WHERE c.province = '上海市' AND ccd.acct_sts = '正常';
SELECT ldi.*, flc.rs_type_name, lt.loan_type_name FROM loan_detail_info ldi JOIN five_level_classification flc ON ldi.judgelevel = flc.rs_type_id JOIN loan_type lt ON ldi.loan_type = lt.loan_type_code WHERE ldi.loan_balance > 15000 AND ldi.dw_date = '2024-07-22';
SELECT COUNT(DISTINCT a.cust_id) FROM loan_detail_info a JOIN loan_detail_info b ON a.cust_id = b.cust_id WHERE a.loan_type = '房贷' AND b.loan_type = '车贷' AND a.loan_amount > b.loan_amount;
SELECT c.customer_name, SUM(d.current_bal) AS total_balance FROM customer c JOIN debit_card_information d ON c.id = d.cust_no WHERE d.bank_nm = '杭州上城区支行' AND d.data_dt = '2024-07-19' GROUP BY c.customer_name ORDER BY total_balance DESC;
SELECT vouch_type, AVG(loan_amount) AS avg_loan_amount, percentile_cont(0.5) WITHIN GROUP (ORDER BY loan_amount) AS median_loan_amount, percentile_cont(0.75) WITHIN GROUP (ORDER BY loan_amount) - percentile_cont(0.25) WITHIN GROUP (ORDER BY loan_amount) AS iqr_loan_amount FROM loan_detail_info GROUP BY vouch_type;
SELECT SUM(t.transfer_amount) FROM transfer t JOIN loan_credit lc ON t.source_customer_id = lc.customer_id WHERE t.transfer_date = '2020-11-03' AND lc.credit_score > 0.8;
SELECT COUNT(DISTINCT la.customer_id) FROM loan_application la JOIN customer c ON la.customer_id = c.id JOIN occupation o ON c.occupation_id = o.id WHERE la.loan_amount > 50000 AND o.occupation_name = '护士';
SELECT la.id, la.customer_id, la.loan_type_id, la.loan_amount, la.loan_term, la.apply_date, la.status, c.customer_name, c.id_number, c.phone_number, c.email, c.address, c.birth_date, c.gender, c.occupation_id, c.province FROM loan_application la JOIN customer c ON la.customer_id = c.id WHERE la.apply_date >= '2024-07-01' AND la.apply_date < '2024-08-01';
SELECT TO_CHAR(apply_date, 'YYYY-MM') AS month, COUNT(CASE WHEN status = '通过' THEN 1 END) * 1.0 / COUNT(*) AS pass_rate FROM loan_application GROUP BY TO_CHAR(apply_date, 'YYYY-MM');
SELECT bank_nm, SUM(wealth_bal) FROM financial_products WHERE data_dt = '2024-07-02' AND cust_type = '对公' GROUP BY bank_nm;
SELECT customer.customer_name, loan_application.status FROM customer JOIN loan_application ON customer.id = loan_application.customer_id;
SELECT loan_type_id, COUNT(DISTINCT customer_id), SUM(loan_amount) FROM loan_application GROUP BY loan_type_id;
SELECT CASE WHEN DATE_PART('year', AGE(c.birth_date)) BETWEEN 0 AND 20 THEN '0-20' WHEN DATE_PART('year', AGE(c.birth_date)) BETWEEN 21 AND 40 THEN '21-40' WHEN DATE_PART('year', AGE(c.birth_date)) BETWEEN 41 AND 60 THEN '41-60' ELSE '61+' END AS age_group, COUNT(*) FILTER (WHERE la.status = '通过') * 1.0 / COUNT(*) AS pass_rate FROM loan_application la JOIN customer c ON la.customer_id = c.id GROUP BY age_group;
SELECT repayment_amount, repayment_date FROM loan_repayment WHERE loan_application_id = 323803;
SELECT customer_id, credit_score FROM loan_credit WHERE credit_date = '2023-06-30' AND customer_id IN (SELECT bank_id FROM bank_orgnization WHERE bank_name = '杭州上城区支行') ORDER BY credit_score DESC LIMIT 1;
SELECT * FROM loan_repayment WHERE repayment_date < '2020-02-25';
SELECT * FROM transfer WHERE source_customer_id = (SELECT id FROM customer WHERE customer_name = '关飞') OR target_customer_id = (SELECT id FROM customer WHERE customer_name = '关飞');
SELECT c.customer_name, c.id_number, l.status FROM customer c JOIN loan_application l ON c.id = l.customer_id;
SELECT * FROM user_behavior WHERE behavior_type LIKE '%ILL%';
SELECT transfer_amount, description FROM transfer ORDER BY transfer_amount ASC;
SELECT * FROM user_behavior WHERE description IS NOT NULL;
SELECT d.current_bal FROM debit_card_information d JOIN customer c ON d.cust_no = c.id JOIN bank_orgnization b ON d.bank_no = b.bank_id WHERE c.customer_name = 'James Taylor' AND b.bank_name = '杭州上城区支行' AND d.data_dt = '2024-07-09';
SELECT loan_type_name FROM loan_type WHERE description LIKE '%Loan%';
SELECT c.curr_num, cu.curr_full_name, COUNT(*) AS account_count FROM credit_card_data c JOIN currency cu ON c.curr_num = cu.curr_code GROUP BY c.curr_num, cu.curr_full_name;
SELECT AVG(wealth_sta_m_avg_bal_a) FROM financial_products;
SELECT loan_type_name, description FROM loan_type WHERE id IN (SELECT loan_type_id FROM loan_application WHERE status = 'APPROVED');
SELECT c.customer_name, EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM c.birth_date) AS age, l.loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id WHERE EXTRACT(YEAR FROM l.apply_date) = 2023 ORDER BY age DESC LIMIT 5;
SELECT COUNT(DISTINCT c.id) FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id JOIN bank_orgnization bo ON c.province = '杭州' AND c.address LIKE '%上城区%' WHERE lc.credit_score > 0.75 AND lc.credit_date = '2023-06-30';
SELECT rs_type_name, COUNT(*) FROM five_level_classification WHERE data_dt = '2024-07-22' GROUP BY rs_type_name;
SELECT rs_type_name, COUNT(*) FROM five_level_classification, user_behavior GROUP BY rs_type_name;
SELECT * FROM transfer ORDER BY transfer_date;
SELECT card_type, card_type_nm, card_state FROM debit_card_information WHERE cust_nm = 'James Taylor' AND org_nm = '杭州上城区支行' AND data_dt LIKE '2024-07%';
SELECT SUM(wealth_bal) FROM financial_products WHERE data_dt = '2024-07-02' AND currency = 'USD';
SELECT ub.customer_id, COUNT(*) AS behavior_count, lc.credit_score FROM user_behavior ub LEFT JOIN (SELECT customer_id, credit_score FROM loan_credit WHERE (customer_id, credit_date) IN (SELECT customer_id, MAX(credit_date) FROM loan_credit GROUP BY customer_id)) lc ON ub.customer_id = lc.customer_id GROUP BY ub.customer_id, lc.credit_score ORDER BY ub.customer_id;
SELECT c1.customer_name AS source_customer_name, c2.customer_name AS target_customer_name, t.transfer_amount FROM transfer t JOIN customer c1 ON t.source_customer_id = c1.id JOIN customer c2 ON t.target_customer_id = c2.id WHERE t.transfer_date = '2023-06-30' AND t.transfer_amount > 1000;
SELECT * FROM customer WHERE customer_name = '饶丽';
SELECT cust_nm FROM debit_card_information WHERE card_state = '正常' AND data_dt = '2024-07-14';
SELECT ldi.cust_id, flc.rs_type_name, c.curr_full_name, ldi.loan_balance FROM loan_detail_info ldi JOIN five_level_classification flc ON ldi.judgelevel = flc.rs_type_id JOIN currency c ON ldi.currency_type = c.curr_code WHERE ldi.loan_balance > 500000 AND ldi.dw_date = '2024-07-19' ORDER BY ldi.loan_balance DESC;
SELECT COUNT(*) FROM deposit_account_info WHERE data_dt = '2024-07-19' AND bank_nm = '沈阳分行' AND acct_bal > 100000 AND gender_code = '男性';
SELECT * FROM loan_type WHERE loan_type_name = '汽车贷款';
SELECT c.customer_name, l.loan_amount FROM customer c JOIN loan_application l ON c.id = l.customer_id WHERE l.loan_amount > 10000;
SELECT cust_no FROM (SELECT cust_no, (COALESCE(SUM(acct_bal), 0) / 3 + COALESCE(AVG(credit_score), 0) / 3 + COALESCE(SUM(repayment_amount), 0) / 3) AS composite_score FROM deposit_account_info LEFT JOIN loan_credit ON deposit_account_info.cust_no = loan_credit.customer_id LEFT JOIN loan_repayment ON deposit_account_info.cust_no = loan_repayment.loan_application_id GROUP BY cust_no) AS scores ORDER BY composite_score DESC LIMIT 20;
SELECT occupation_code, description FROM occupation WHERE occupation_name = '护士';
SELECT ub.behavior_type, ub.behavior_date, ub.description, lc.credit_score FROM user_behavior ub JOIN loan_credit lc ON ub.customer_id = lc.customer_id WHERE ub.behavior_date >= '2021-08-01' AND ub.behavior_date < '2021-09-01';
SELECT loan_type_name, loan_status_name FROM loan_type, loan_status;
SELECT b.bank_name, SUM(f.wealth_bal) FROM financial_products f JOIN bank_orgnization b ON f.org_no = b.bank_id WHERE f.data_dt = '2024-07-02' AND f.cast_type = '对公' GROUP BY b.bank_name;
SELECT customer_id FROM loan_application WHERE loan_type_id = 1 AND status = 'REJECTED' AND YEAR(apply_date) = 2019;
SELECT cust_no, wealth_bal FROM financial_products WHERE data_dt = '2024-07-19' AND wealth_bal > 100000 ORDER BY wealth_bal DESC;
SELECT customer_name, email FROM customer;
SELECT customer_id, DATE_PART('year', apply_date) AS year, DATE_PART('quarter', apply_date) AS quarter, COUNT(CASE WHEN status = '成功' THEN 1 END) * 1.0 / COUNT(*) AS success_rate FROM loan_application GROUP BY customer_id, DATE_PART('year', apply_date), DATE_PART('quarter', apply_date);
SELECT cust_name, acct_bal FROM deposit_account_info WHERE cur_type = '美元' AND data_dt = '2024-07-19' ORDER BY acct_bal DESC;
SELECT customer_name, id_number, phone_number, email FROM customer WHERE birth_date > '1980-01-01';
SELECT o.occupation_name FROM loan_application la JOIN customer c ON la.customer_id = c.id JOIN occupation o ON c.occupation_id = o.id ORDER BY la.loan_amount DESC LIMIT 5;
SELECT cust_type, loan_balance FROM loan_detail_info;
SELECT SUM(current_bal) AS total_current_bal, SUM(fixed_bal) AS total_fixed_bal FROM debit_card_information WHERE data_dt = '2023-06-30' AND bank_nm = '杭州上城区支行';
SELECT ub.behavior_type, ls.loan_status_code FROM user_behavior ub JOIN loan_status ls ON ub.customer_id = ls.id WHERE ub.behavior_date = '特定日期';
SELECT * FROM customer WHERE id_number = 'c839d762-6392-4005-8386-ed4e2c50997a';
SELECT credit_score, description FROM loan_credit WHERE credit_date = '2003-06-22';
SELECT cust_no FROM deposit_account_info WHERE data_dt = '2024-07-21' AND org_nm = '杭州分行' AND acct_bal > 50000;
SELECT l.cust_id, l.loan_balance, d.acct_bal FROM loan_detail_info l JOIN deposit_account_info d ON l.cust_id = d.cust_no WHERE l.loan_balance > 10000;
SELECT rs_type_name, COUNT(cust_id) AS user_count, SUM(loan_balance) AS total_loan_balance FROM five_level_classification JOIN loan_detail_info ON rs_type_id = judgelevel GROUP BY rs_type_name;
SELECT deposit_name FROM deposit_type WHERE data_dt = '2024-07-22';
SELECT * FROM transfer WHERE transfer_amount > 500;
SELECT c.customer_name, c.id_number, lc.credit_score FROM customer c JOIN loan_credit lc ON c.id = lc.customer_id WHERE c.province = '河北省' AND lc.credit_score > 0.8 ORDER BY lc.credit_score DESC;
SELECT CASE WHEN DATE_PART('year', AGE(NOW(), c.birth_date)) BETWEEN 20 AND 30 THEN '20-30岁' WHEN DATE_PART('year', AGE(NOW(), c.birth_date)) BETWEEN 31 AND 40 THEN '31-40岁' WHEN DATE_PART('year', AGE(NOW(), c.birth_date)) BETWEEN 41 AND 50 THEN '41-50岁' ELSE '51岁以上' END AS age_group, la.loan_type_id, COUNT(*) FILTER (WHERE la.status = 'approved') * 1.0 / COUNT(*) AS success_rate FROM customer c JOIN loan_application la ON c.id = la.customer_id GROUP BY age_group, la.loan_type_id;
SELECT ls.loan_status_name, o.occupation_name FROM customer c JOIN occupation o ON c.occupation_id = o.id JOIN loan_application la ON c.id = la.customer_id JOIN loan_status ls ON la.status = ls.loan_status_code WHERE o.occupation_code = 'NURSE' AND ls.loan_status_name = 'APPROVED';
SELECT occupation_id, COUNT(DISTINCT customer.id) AS customer_count, AVG(loan_application.loan_amount) AS avg_loan_amount FROM customer JOIN loan_application ON customer.id = loan_application.customer_id GROUP BY occupation_id HAVING COUNT(DISTINCT customer.id) > 100;
SELECT cust_no FROM financial_products WHERE data_dt = '2024-07-14' AND org_nm = '沈阳余淮支行' AND cast_type = '非保本' AND currency = '新加坡元';
SELECT id_number, phone_number FROM customer;
SELECT cust_nm, open_date FROM debit_card_information WHERE open_date >= '2024-07-05';
SELECT COUNT(DISTINCT ub.customer_id) FROM (SELECT cust_no FROM financial_products WHERE PERCENT_RANK() OVER (ORDER BY wealth_bal DESC) >= 0.9) AS top_customers JOIN user_behavior ub ON top_customers.cust_no = ub.customer_id WHERE ub.behavior_type = '登录' AND ub.behavior_date >= DATEADD(DAY, -30, GETDATE());
SELECT lc.customer_id, lc.credit_score FROM loan_credit lc JOIN user_behavior ub ON lc.customer_id = ub.customer_id WHERE lc.credit_date = '2023-12-10';
SELECT bank_id, bank_name FROM bank_orgnization;
SELECT lr.*, la.* FROM loan_repayment lr JOIN loan_application la ON lr.loan_application_id = la.id WHERE lr.repayment_date = '2024-01-20';
SELECT c.curr_code, c.curr_full_name, COUNT(t.id) AS transfer_count FROM currency c LEFT JOIN transfer t ON c.curr_code = t.currency AND t.transfer_date < '2023-06-30' WHERE c.data_dt = '2023-06-30' GROUP BY c.curr_code, c.curr_full_name;
SELECT repayment_amount FROM loan_repayment WHERE loan_application_id = 742969 AND repayment_date = '2021-11-10';
SELECT dt.deposit_type_name, AVG(ldi.loan_amount) AS avg_loan_amount, STDDEV(ldi.loan_amount) AS stddev_loan_amount FROM loan_detail_info ldi JOIN deposit_account_info dai ON ldi.cust_id = dai.cust_no JOIN deposit_type dt ON dai.acct_type_code = dt.deposit_type_id GROUP BY dt.deposit_type_name;
SELECT c.customer_name, o.occupation_name, lr.repayment_date FROM customer c JOIN occupation o ON c.occupation_id = o.id JOIN loan_application la ON c.id = la.customer_id JOIN loan_repayment lr ON la.id = lr.loan_application_id;
SELECT loan_type_id, AVG(loan_amount) AS avg_loan_amount, AVG(acct_bal) AS avg_deposit_balance FROM loan_application, deposit_account_info GROUP BY loan_type_id;
SELECT COUNT(DISTINCT la.customer_id) FROM loan_application la JOIN user_behavior ub ON la.customer_id = ub.customer_id WHERE la.apply_date = '2019-01-10' AND la.status = 'REJECTED' AND ub.behavior_date = '2017-10-24' AND ub.behavior_type = 'LOGIN';
SELECT c.customer_name, la.loan_amount FROM loan_application la JOIN loan_credit lc ON la.customer_id = lc.customer_id JOIN customer c ON la.customer_id = c.id WHERE YEAR(la.apply_date) = 2019 AND lc.credit_score > 0.8 ORDER BY la.loan_amount DESC;
SELECT * FROM loan_detail_info WHERE loan_balance > 500000 ORDER BY loan_balance DESC;
SELECT customer_id, credit_score FROM loan_credit WHERE credit_date = '2003-06-22' AND credit_score > 0.75;
SELECT customer_name, birth_date FROM customer WHERE birth_date > '1990-01-01';
SELECT customer_id FROM loan_credit WHERE credit_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY customer_id ORDER BY MAX(credit_score) - MIN(credit_score) DESC LIMIT 5;
SELECT behavior_type, COUNT(*) FROM user_behavior GROUP BY behavior_type;
SELECT deposit_type.deposit_name, COUNT(DISTINCT CASE WHEN deposit_account_info.data_dt >= DATEADD(YEAR, -1, GETDATE()) THEN deposit_account_info.cust_no END) * 1.0 / COUNT(DISTINCT deposit_account_info.cust_no) AS retention_rate FROM deposit_account_info JOIN deposit_type ON deposit_account_info.acct_type_code = deposit_type.deposit_type_id GROUP BY deposit_type.deposit_name;
SELECT SUM(t.transfer_amount) FROM transfer t JOIN customer c ON t.source_customer_id = c.id JOIN bank_orgnization b ON c.province = '沈阳' WHERE t.transfer_date = '2024-07-19';
SELECT s.manager_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-06' GROUP BY ss.store_id, s.manager_name ORDER BY SUM(ss.profit) DESC LIMIT 1;
SELECT profit, sales_quantity FROM salesstatistics;
SELECT * FROM salesorders WHERE order_date = '2023-05-08';
SELECT employee_id FROM salesorders WHERE order_date = '2023-05-05' AND store_id = '数码广场店' AND total_amount > 7000;
SELECT * FROM salesstatistics ORDER BY profit DESC LIMIT 1;
SELECT stores.store_name, employees.name, salesstatistics.sales_amount, products.product_name FROM salesstatistics JOIN stores ON salesstatistics.store_id = stores.store_id JOIN employees ON salesstatistics.employee_id = employees.employee_id JOIN products ON salesstatistics.product_id = products.product_id WHERE salesstatistics.date >= '2023-05-01' AND salesstatistics.date <= '2023-05-31' AND salesstatistics.sales_amount > 10000 AND products.supplier_name = '苹果官方旗舰店';
SELECT p.product_name, p.supplier_name FROM products p JOIN salesorders s ON p.product_id = s.product_id JOIN stores st ON s.store_id = st.store_id WHERE st.store_name = '电子城旗舰店';
SELECT e.store_id, e.position FROM employees e JOIN salesorders s ON e.employee_id = s.employee_id JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPad Air' AND s.order_date = '2023-05-09';
SELECT s.manager_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-05' GROUP BY ss.store_id, s.manager_name HAVING SUM(ss.sales_amount) > 10000;
SELECT e.name, s.total_amount FROM employees e JOIN salesorders s ON e.employee_id = s.employee_id WHERE s.order_date = '2023-05-07' AND s.total_amount > 10000;
SELECT s.store_name FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE p.product_name = '索尼WH-1000XM4耳机' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name HAVING SUM(ss.profit) > 5000;
SELECT DISTINCT e.name FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Nintendo Switch' AND so.total_amount > 5000 AND so.order_date >= '2023-05-01' AND so.order_date <= '2023-05-31';
SELECT p.product_name, s.profit FROM products p JOIN salesstatistics s ON p.product_id = s.product_id WHERE s.sales_amount = (SELECT MAX(sales_amount) FROM salesstatistics);
SELECT p.product_name, s.total_amount FROM salesorders s JOIN orderdetails o ON s.order_id = o.order_id JOIN products p ON o.product_id = p.product_id;
SELECT e.name, s.store_name FROM employees e JOIN stores s ON e.store_id = s.store_id;
SELECT s.manager_name, SUM(so.total_amount) FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-08' GROUP BY s.manager_name;
SELECT s.order_id, e.name FROM salesorders s JOIN employees e ON s.employee_id = e.employee_id WHERE s.total_amount > 7000;
SELECT s.store_name, e.name, ss.sales_amount, p.product_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.sales_amount > 10000 AND p.supplier_name = '苹果官方旗舰店' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31';
SELECT s.store_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-06' AND ss.product_id = (SELECT product_id FROM products WHERE product_name = 'iPhone 13') AND ss.profit > 4000;
SELECT * FROM salesorders WHERE order_id = 'b8b62bfe-a35d-4ff5-9bc9-654b5f67fed2';
SELECT employee_id, SUM(total_amount) FROM salesorders GROUP BY employee_id;
SELECT product_name, sale_price, purchase_price FROM products;
SELECT s.manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE strftime('%Y-%m', so.order_date) = '2023-05' GROUP BY so.employee_id HAVING SUM(so.total_amount) > 10000;
SELECT e.employee_id, s.store_id FROM employees e JOIN stores s ON e.name = s.manager_name;
SELECT store_id, profit FROM salesstatistics WHERE date = '2023-05-07' AND product_id = (SELECT product_id FROM products WHERE product_name = 'Apple Watch Series 7');
SELECT DISTINCT s.manager_name FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-05' AND so.total_amount > 10000 AND p.sale_price > 5000;
SELECT o.order_id, p.product_name, o.quantity FROM orderdetails o JOIN products p ON o.product_id = p.product_id;
SELECT * FROM salesorders WHERE store_id = '0887d06a-27a8-46b4-98d6-514702e698da';
SELECT DISTINCT s.employee_id FROM salesstatistics s JOIN orderdetails o ON s.employee_id = o.employee_id WHERE strftime('%Y-%m', s.date) = '2023-05' AND s.sales_quantity > (SELECT SUM(quantity) FROM orderdetails WHERE employee_id = s.employee_id AND strftime('%Y-%m', order_date) = '2023-05');
SELECT s.store_id, SUM(so.total_amount) FROM salesorders so JOIN salesstatistics ss ON so.store_id = ss.store_id AND so.employee_id = ss.employee_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'iPad Air' AND so.order_date = '2023-05-01' GROUP BY s.store_id;
SELECT od.product_id, od.quantity, so.order_date FROM orderdetails od JOIN salesorders so ON od.order_id = so.order_id;
SELECT s.manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE strftime('%Y-%m', so.order_date) = '2023-05' GROUP BY so.store_id ORDER BY SUM(so.total_amount) DESC LIMIT 1;
SELECT e.employee_id, e.name FROM employees e JOIN salesstatistics s ON e.employee_id = s.employee_id JOIN stores st ON s.store_id = st.store_id JOIN products p ON s.product_id = p.product_id WHERE st.store_name = '数码广场店' AND p.product_name = 'iPhone 13' AND s.date = '2023-05-03' AND s.sales_quantity > 1;
SELECT s.manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-07' GROUP BY so.store_id ORDER BY SUM(so.total_amount) DESC LIMIT 1;
SELECT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4耳机' AND so.order_date = '2023-05-01' GROUP BY s.store_name HAVING SUM(so.total_amount) > 8000;
SELECT purchase_price, sale_price FROM products WHERE product_id = '某一商品的ID';
SELECT unit_price, quantity FROM orderdetails;
SELECT e.name, s.store_name FROM employees e JOIN salesstatistics ss ON e.employee_id = ss.employee_id JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND ss.date = '2023-05-06';
SELECT store_id, SUM(sales_amount) AS total_sales_amount FROM salesstatistics GROUP BY store_id ORDER BY SUM(sales_quantity) DESC LIMIT 1;
SELECT DISTINCT s.employee_id, p.category_name FROM salesorders s JOIN orderdetails o ON s.order_id = o.order_id JOIN products p ON o.product_id = p.product_id WHERE s.order_date >= '2023-05-01' AND s.order_date <= '2023-05-31' AND s.total_amount > 10000;
SELECT e.employee_id, e.store_id, SUM(s.total_amount) AS total_order_amount FROM employees e JOIN salesorders s ON e.employee_id = s.employee_id GROUP BY e.employee_id, e.store_id;
SELECT s.store_name, SUM(so.total_amount) AS total_sales, s.manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date >= '2023-05-01' AND so.order_date <= '2023-05-31' GROUP BY s.store_name, s.manager_name;
SELECT * FROM orderdetails WHERE product_id IN (SELECT product_id FROM salesstatistics WHERE date >= '2023-05-01' AND date < '2023-06-01' AND sales_quantity > 5);
SELECT product_id, quantity, unit_price FROM orderdetails JOIN products ON orderdetails.product_id = products.product_id;
SELECT s.manager_name, ss.profit FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE p.product_name = '佳能EOS R6' AND ss.date = '2023-05-01';
SELECT store_name, address, phone FROM stores;
SELECT p.product_name FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.total_amount < 5000;
SELECT store_id, SUM(profit) AS total_profit FROM salesstatistics WHERE date >= '2023-05-01' AND date <= '2023-05-31' GROUP BY store_id, employee_id ORDER BY SUM(sales_quantity) DESC LIMIT 1;
SELECT store_id, SUM(profit) FROM salesstatistics WHERE product_id = (SELECT product_id FROM products WHERE product_name = '小米电视4A') AND date >= '2023-05-01' AND date < '2023-06-01' GROUP BY store_id;
SELECT e.name, SUM(s.profit) FROM employees e JOIN salesstatistics s ON e.employee_id = s.employee_id JOIN stores st ON s.store_id = st.store_id JOIN products p ON s.product_id = p.product_id WHERE st.store_name = '智慧街店' AND p.product_name = '小米电视4A' AND s.date = '2023-05-06' GROUP BY e.name;
SELECT store_name, phone FROM stores;
SELECT manager_name FROM salesstatistics JOIN stores ON salesstatistics.store_id = stores.store_id WHERE date = '2023-05-08' AND profit > 1000;
SELECT p.category_name, SUM(s.sales_quantity) FROM products p JOIN salesstatistics s ON p.product_id = s.product_id GROUP BY p.category_name;
SELECT s.store_name, e.name FROM stores s JOIN employees e ON s.store_id = e.store_id;
SELECT order_id FROM salesorders WHERE total_amount > (SELECT AVG(total_amount) FROM salesorders);
SELECT * FROM salesorders WHERE order_date BETWEEN '开始日期' AND '结束日期';
SELECT e.employee_id, e.name, s.order_date, s.total_amount FROM employees e JOIN salesorders s ON e.employee_id = s.employee_id;
SELECT employee_id, SUM(total_amount) FROM salesorders GROUP BY employee_id;
SELECT employee_id, SUM(sales_quantity) AS total_sales_quantity, SUM(profit) AS total_profit FROM salesstatistics GROUP BY employee_id;
SELECT DISTINCT s.store_id FROM salesorders s JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '佳能EOS R6' AND strftime('%Y-%m', s.order_date) = '2023-05' AND s.total_amount > 10000;
SELECT s.manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-05' GROUP BY so.store_id ORDER BY SUM(so.total_amount) DESC LIMIT 1;
SELECT store_name, SUM(sales_quantity) AS total_sales_quantity, SUM(sales_amount) AS total_sales_amount FROM salesstatistics JOIN stores ON salesstatistics.store_id = stores.store_id GROUP BY store_name;
SELECT manager_name FROM stores WHERE store_id = (SELECT store_id FROM salesstatistics WHERE date >= '2023-05-01' AND date <= '2023-05-31' GROUP BY store_id ORDER BY SUM(sales_quantity) DESC LIMIT 1);
SELECT order_id, total_amount FROM salesorders WHERE employee_id = '特定员工ID';
SELECT order_detail_id, order_id, quantity, unit_price FROM orderdetails WHERE product_id = '某商品';
SELECT store_id, SUM(sales_amount) AS total_sales_amount, MAX(date) AS last_stat_date FROM salesstatistics GROUP BY store_id;

SELECT s.manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-09' GROUP BY so.store_id, s.manager_name HAVING SUM(so.total_amount) > 10000;
SELECT s.store_name, s.manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-02' GROUP BY so.store_id ORDER BY SUM(so.total_amount) DESC LIMIT 1;
SELECT s.manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-09' AND so.total_amount > 1000;
SELECT DISTINCT e.employee_id, p.category_name FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date >= '2023-05-01' AND so.order_date < '2023-06-01' AND so.total_amount > 10000;
SELECT store_name, SUM(profit) FROM salesstatistics JOIN stores ON salesstatistics.store_id = stores.store_id GROUP BY store_name;
SELECT s.store_name, e.name, ss.sales_amount, p.product_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' AND ss.sales_amount > 10000 AND p.supplier_name = '索尼官方旗舰店';
SELECT s.order_id, o.order_detail_id FROM salesorders s JOIN orderdetails o ON s.order_id = o.order_id WHERE s.total_amount > 5000;
SELECT product_id, sales_amount FROM salesstatistics WHERE date = '2023-05-02';
SELECT s.sales_quantity, st.store_name FROM salesstatistics s JOIN stores st ON s.store_id = st.store_id WHERE YEAR(s.date) = 2023 AND MONTH(s.date) = 5;
SELECT product_id, sale_price, purchase_price FROM products;
SELECT s.store_name, SUM(ss.sales_quantity) AS sales_quantity FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' AND p.category_name = '智能手表' AND p.supplier_name = '索尼官方旗舰店' GROUP BY s.store_name HAVING SUM(ss.sales_quantity) > 10;
SELECT s.manager_name FROM salesorders o JOIN stores s ON o.store_id = s.store_id WHERE o.order_date >= '2023-05-01' AND o.order_date < '2023-06-01' GROUP BY o.store_id, s.manager_name HAVING AVG(o.total_amount) > 10000;
SELECT store_id, profit FROM salesstatistics WHERE date = '2023-05-02' AND product_id = (SELECT product_id FROM products WHERE product_name = 'iPad Air');
SELECT s.store_name, SUM(ss.profit) FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' GROUP BY s.store_name;
SELECT store_id, SUM(sales_quantity) AS total_sales_quantity, SUM(sales_amount) AS total_sales_amount FROM salesstatistics WHERE date >= '2023-05-01' AND date < '2023-06-01' GROUP BY store_id ORDER BY total_sales_quantity DESC LIMIT 1;
SELECT s.store_name, SUM(so.total_amount) FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND so.order_date = '2023-05-09' GROUP BY s.store_name;
SELECT quantity, unit_price FROM orderdetails;
SELECT DISTINCT s.store_name, e.position FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE p.product_name = 'Nintendo Switch' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31';
SELECT * FROM salesstatistics WHERE sales_quantity > 1;
SELECT store_id, SUM(profit) FROM salesstatistics WHERE product_id = (SELECT product_id FROM products WHERE product_name = 'Nintendo Switch') AND date >= '2023-05-01' AND date < '2023-06-01' GROUP BY store_id;
SELECT total_amount, order_date FROM salesorders;
SELECT store_id, SUM(total_amount) AS total_amount, SUM(sales_quantity) AS sales_quantity FROM salesorders JOIN salesstatistics USING(store_id) GROUP BY store_id;
SELECT * FROM orderdetails WHERE quantity = 2;
SELECT DISTINCT s.store_id, e.position FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id JOIN employees e ON ss.employee_id = e.employee_id WHERE p.product_name = '戴尔灵越15' AND ss.date = '2023-05-01';
SELECT position, store_id FROM employees;
SELECT store_id, SUM(profit) AS total_profit FROM salesstatistics WHERE date = '2023-05-03' AND product_id = (SELECT product_id FROM products WHERE product_name = '佳能EOS R6') GROUP BY store_id;
SELECT SUM(profit) FROM salesstatistics WHERE date = '2023-05-05' AND product_id = (SELECT product_id FROM products WHERE product_name = 'iPhone 13');
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-06' AND p.product_name = '华为Mate 40 Pro' AND od.quantity > 1;
SELECT orderdetails.order_id, products.product_name, orderdetails.quantity FROM orderdetails JOIN products ON orderdetails.product_id = products.product_id;
SELECT e.name, e.position, s.phone FROM employees e JOIN stores s ON e.store_id = s.store_id;
SELECT s.store_name, e.name, ss.sales_quantity FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesstatistics ss ON e.employee_id = ss.employee_id WHERE ss.date = '2023-05-05' AND ss.product_id = (SELECT product_id FROM products WHERE product_name = '戴尔灵越15') AND ss.sales_quantity > 1;
SELECT so.order_id, p.product_name FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.total_amount > 5000;
SELECT employee_id, SUM(total_amount) FROM salesorders GROUP BY employee_id;
SELECT date FROM salesstatistics WHERE profit > 3000;
SELECT s.store_name FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-01' AND p.product_name = 'Apple Watch Series 7' GROUP BY s.store_name HAVING SUM(so.total_amount) > 7000;
SELECT remaining_quantity, category_name FROM products;
SELECT DISTINCT e.employee_id, e.name FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-07' AND p.category_name = '相机' AND so.total_amount > 15000;
SELECT store_id, SUM(profit) FROM salesstatistics WHERE product_id = (SELECT product_id FROM products WHERE product_name = 'iPhone 13') AND date = '2023-05-03' GROUP BY store_id;
SELECT s.store_id, s.manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-08' GROUP BY s.store_id, s.manager_name ORDER BY SUM(so.total_amount) DESC LIMIT 1;
SELECT s.employee_id, s.sales_quantity, s.sales_amount FROM salesstatistics s JOIN stores st ON s.store_id = st.store_id JOIN products p ON s.product_id = p.product_id WHERE st.store_name = '数字大道店' AND p.product_name = 'Nintendo Switch' AND s.date = '2023-05-03';
SELECT DISTINCT s.store_name FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-05' AND p.product_name = '戴森V11' AND ss.profit > 500;
SELECT s.store_name, s.manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE DATE(so.order_date) = '2023-05-09' GROUP BY s.store_name, s.manager_name HAVING SUM(so.total_amount) > 2000;
SELECT s.manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-01' GROUP BY so.store_id, s.manager_name HAVING SUM(so.total_amount) > 10000;
SELECT manager_name FROM stores WHERE store_id IN (SELECT store_id FROM salesstatistics WHERE product_id = (SELECT product_id FROM products WHERE product_name = 'iPhone 13') AND date = '2023-05-09');
SELECT s.sales_amount, p.remaining_quantity FROM salesstatistics s JOIN products p ON s.product_id = p.product_id WHERE p.product_id = '某个商品的ID';
SELECT store_name, address, phone FROM stores;
SELECT s.store_name, e.name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.employee_id = e.employee_id WHERE so.order_date = '2023-05-02' AND so.total_amount > 2000;
SELECT store_id, SUM(sales_quantity) AS total_sales_quantity, SUM(profit) AS total_profit FROM salesstatistics GROUP BY store_id;
SELECT manager_name FROM stores WHERE store_id IN (SELECT store_id FROM salesstatistics WHERE date = '2023-05-07' AND profit > 1000);
SELECT s.manager_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-08' GROUP BY ss.store_id ORDER BY SUM(ss.sales_quantity) DESC LIMIT 1;
SELECT store_id FROM salesstatistics WHERE date = '2023-05-09' GROUP BY store_id ORDER BY SUM(profit) DESC LIMIT 1;
SELECT DISTINCT s.store_name FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN salesstatistics ss ON so.order_id = ss.order_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '佳能EOS R6相机' AND so.order_date >= '2023-05-01' AND so.order_date <= '2023-05-31' AND so.total_amount > 5000;
SELECT DISTINCT s.store_id, e.position FROM salesorders s JOIN employees e ON s.employee_id = e.employee_id JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPad Air' AND s.order_date >= '2023-05-01' AND s.order_date <= '2023-05-31';
SELECT category_name, sale_price FROM products;
SELECT s.store_name, COUNT(e.employee_id) AS manager_count FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN employees e ON so.store_id = e.store_id WHERE e.position = '销售经理' AND DATE_FORMAT(so.order_date, '%Y-%m') = '2023-05' GROUP BY s.store_name HAVING SUM(so.total_amount) > 10000;
SELECT p.product_id, p.remaining_quantity, SUM(s.sales_quantity) AS sales_quantity FROM products p LEFT JOIN salesstatistics s ON p.product_id = s.product_id GROUP BY p.product_id, p.remaining_quantity;
SELECT order_id, order_date, total_amount FROM salesorders;
SELECT store_name FROM stores WHERE store_id IN (SELECT store_id FROM salesstatistics WHERE date = '2023-05-06' AND product_id = (SELECT product_id FROM products WHERE product_name = '华为Mate 40 Pro') AND sales_quantity > 1);
SELECT s.store_name, e.name, e.position FROM employees e JOIN stores s ON e.store_id = s.store_id;
SELECT e.name, SUM(od.quantity * od.unit_price) AS total_sales_amount FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '创客空间店' AND p.product_name = '华为Mate 40 Pro' AND so.order_date = '2023-05-01' GROUP BY e.name;
SELECT DISTINCT s.store_id, e.position FROM products p JOIN salesstatistics ss ON p.product_id = ss.product_id JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON ss.store_id = s.store_id WHERE p.product_name = '戴森V11' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31';
SELECT * FROM orderdetails INNER JOIN products ON orderdetails.product_id = products.product_id;
SELECT employee_id FROM salesstatistics JOIN products ON salesstatistics.product_id = products.product_id WHERE date = '2023-05-06' AND sales_quantity > 1 AND supplier_name = '戴尔官方旗舰店';
SELECT product_name, sale_price FROM products;
SELECT manager_name, phone FROM stores;
SELECT s.total_amount, st.store_name FROM salesorders s JOIN employees e ON s.employee_id = e.employee_id JOIN stores st ON s.store_id = st.store_id WHERE e.name = '范莹' AND s.order_date = '2023-05-07';
SELECT s.store_id FROM salesorders s JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'Apple Watch Series 7' AND s.order_date >= '2023-05-01' AND s.order_date <= '2023-05-31' GROUP BY s.store_id HAVING SUM(s.total_amount) > 10000;
SELECT store_id, SUM(total_amount) FROM salesorders WHERE order_date >= '2023-05-01' AND order_date < '2023-06-01' GROUP BY store_id;
SELECT store_name, manager_name FROM stores;
SELECT sale_price, remaining_quantity FROM products;
SELECT s.store_id, SUM(so.total_amount) FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND so.order_date = '2023-05-01' GROUP BY s.store_id;
SELECT DISTINCT s.store_name FROM products p JOIN orderdetails od ON p.product_id = od.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores s ON so.store_id = s.store_id WHERE p.product_name = '索尼WH-1000XM4' AND so.order_date = '2023-05-08' AND so.total_amount > 15000;
SELECT manager_name FROM stores WHERE store_id = (SELECT store_id FROM salesstatistics WHERE date = '2023-05-09' GROUP BY store_id ORDER BY SUM(sales_quantity) DESC LIMIT 1);
SELECT SUM(profit) FROM salesstatistics;
SELECT s.order_id, st.store_name FROM salesorders s JOIN stores st ON s.store_id = st.store_id WHERE s.employee_id = '特定员工ID';
SELECT stores.store_name, SUM(salesstatistics.sales_quantity) FROM salesstatistics JOIN stores ON salesstatistics.store_id = stores.store_id WHERE salesstatistics.employee_id = '黄萍' AND salesstatistics.date >= '2023-05-01' AND salesstatistics.date <= '2023-05-31' GROUP BY stores.store_name ORDER BY SUM(salesstatistics.sales_quantity) DESC LIMIT 1;
SELECT store_id, profit FROM salesstatistics JOIN products ON salesstatistics.product_id = products.product_id WHERE products.product_name = 'Nintendo Switch' AND date = '2023-05-08';
SELECT s.store_name, SUM(so.total_amount) FROM stores s JOIN salesorders so ON s.store_id = so.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4耳机' AND so.order_date = '2023-05-05' GROUP BY s.store_name;
SELECT e.name FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-05' AND s.store_name = '智能生活馆' AND p.supplier_name = '小米官方旗舰店';
SELECT s.store_name, s.manager_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-07' GROUP BY ss.store_id ORDER BY SUM(ss.profit) DESC LIMIT 1;
SELECT s.store_id, ss.profit FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4' AND ss.date = '2023-05-09';
SELECT sales_quantity, sales_amount FROM salesstatistics WHERE product_id = '某个商品ID';
SELECT s.store_name, SUM(so.total_amount) FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-03' GROUP BY s.store_name;
SELECT * FROM orderdetails WHERE quantity > 1;
SELECT s.store_id, s.total_amount FROM salesorders s JOIN orderdetails o ON s.order_id = o.order_id JOIN products p ON o.product_id = p.product_id WHERE p.product_name = 'iPhone 13' AND s.order_date = '2023-05-05';
SELECT salesorders.*, stores.store_name FROM salesorders JOIN stores ON salesorders.store_id = stores.store_id WHERE salesorders.order_date = '2023-05-05';
SELECT p.product_name, o.order_id FROM orderdetails o JOIN products p ON o.product_id = p.product_id WHERE o.quantity > 1;
SELECT order_id FROM salesorders WHERE order_date BETWEEN '2023-05-01' AND '2023-05-31';
SELECT employee_id, SUM(sales_quantity) FROM salesstatistics GROUP BY employee_id;
SELECT category_name, remaining_quantity FROM products;
SELECT e.employee_id, SUM(s.sales_quantity) AS sales_quantity, st.store_name FROM salesstatistics s JOIN employees e ON s.employee_id = e.employee_id JOIN stores st ON e.store_id = st.store_id GROUP BY e.employee_id, st.store_name;
SELECT order_id, product_id FROM orderdetails;
SELECT * FROM salesstatistics WHERE date = '2023-10-01';
SELECT s.employee_id, s.sales_quantity, s.sales_amount FROM salesstatistics s JOIN stores st ON s.store_id = st.store_id JOIN products p ON s.product_id = p.product_id WHERE st.store_name = '科技园店' AND p.product_name = 'iPhone 13' AND s.date = '2023-05-01';
SELECT DISTINCT e.employee_id FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-09' AND p.product_name = 'Apple Watch Series 7' AND p.supplier_name = '任天堂官方旗舰店';
SELECT s.store_name, so.total_amount FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-06';
SELECT * FROM salesorders WHERE order_date = '特定日期';
SELECT e.name, SUM(so.total_amount) FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id WHERE s.store_name = '智慧街店' AND p.product_name = '佳能EOS R6相机' AND so.order_date = '2023-05-07' GROUP BY e.name;
SELECT store_id, COUNT(*) AS total_sales_quantity, SUM(total_amount) AS total_sales_amount FROM salesorders GROUP BY store_id;
SELECT s.store_id, SUM(so.total_amount) AS total_amount FROM salesorders so JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '佳能EOS R6' AND so.order_date = '2023-05-05' GROUP BY s.store_id;
SELECT * FROM products WHERE sale_price > 15000;
SELECT store_id FROM salesstatistics JOIN products ON salesstatistics.product_id = products.product_id WHERE products.product_name = '索尼WH-1000XM4' AND salesstatistics.date = '2023-05-08' AND salesstatistics.sales_quantity > 1;
SELECT s.store_name, e.name, p.product_name, so.total_amount FROM salesorders so JOIN employees e ON so.employee_id = e.employee_id JOIN stores s ON so.store_id = s.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-01' AND so.total_amount > 1000 AND p.supplier_name = '戴森官方旗舰店';
SELECT sales_quantity FROM salesstatistics WHERE product_id = '特定商品ID';
SELECT s.store_name, SUM(so.total_amount) AS total_sales FROM salesorders so JOIN stores s ON so.store_id = s.store_id GROUP BY s.store_name;
SELECT s.order_id, o.quantity FROM salesorders s JOIN orderdetails o ON s.order_id = o.order_id WHERE s.order_date = '特定日期';
SELECT s.order_date, e.name FROM salesorders s JOIN employees e ON s.employee_id = e.employee_id;
SELECT product_name, supplier_name FROM products;
SELECT product_name, sale_price, supplier_name FROM products;
SELECT orderdetails.*, products.product_name, products.sale_price FROM orderdetails JOIN products ON orderdetails.product_id = products.product_id;
SELECT s.store_name, s.phone FROM stores s JOIN (SELECT store_id, SUM(total_amount) AS total_sales FROM salesorders WHERE order_date >= '2023-05-01' AND order_date < '2023-06-01' GROUP BY store_id HAVING SUM(total_amount) > 3000) so ON s.store_id = so.store_id;
SELECT store_name, manager_name FROM stores;
SELECT e.name, s.phone FROM employees e JOIN stores s ON e.store_id = s.store_id;
SELECT s.employee_id, s.sales_quantity, s.profit FROM salesstatistics s JOIN employees e ON s.employee_id = e.employee_id JOIN stores st ON s.store_id = st.store_id JOIN products p ON s.product_id = p.product_id WHERE s.date = '2023-05-09' AND st.store_name = '创新路专卖店' AND p.product_name = 'iPad Air';
SELECT e.name FROM employees e JOIN salesorders s ON e.employee_id = s.employee_id JOIN stores st ON s.store_id = st.store_id WHERE st.store_name = '未来城店' AND s.order_date = '2023-05-07' AND s.total_amount > 15000;
SELECT product_id, sale_price - purchase_price AS price_difference FROM products;
SELECT s.manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date >= '2023-05-01' AND so.order_date <= '2023-05-31' GROUP BY s.manager_name HAVING SUM(so.total_amount) > 10000;
SELECT store_id, SUM(profit), SUM(sales_quantity) FROM salesstatistics GROUP BY store_id;
SELECT * FROM salesorders WHERE store_id = '64921abb-1d54-4e03-a15e-ea42f058f31c';
SELECT DISTINCT s.store_id FROM salesorders s JOIN orderdetails od ON s.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '小米电视4A' AND s.order_date = '2023-05-06' AND s.total_amount > 10000;
SELECT DISTINCT s.store_name FROM salesstatistics ss JOIN products p ON ss.product_id = p.product_id JOIN stores s ON ss.store_id = s.store_id WHERE p.product_name = 'Nintendo Switch' AND ss.date >= '2023-05-01' AND ss.date <= '2023-05-31' AND ss.profit > 1000;
SELECT s.store_name, SUM(ss.sales_quantity) AS total_quantity, SUM(ss.sales_amount) AS total_amount FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '索尼WH-1000XM4' AND ss.date = '2023-05-09' GROUP BY s.store_name;
SELECT * FROM salesorders WHERE store_id = '特定门店ID';
SELECT manager_name FROM stores WHERE store_id = (SELECT store_id FROM salesorders WHERE order_date = '2023-05-03' GROUP BY store_id ORDER BY SUM(total_amount) DESC LIMIT 1);
SELECT s.manager_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-03' GROUP BY ss.store_id, s.manager_name ORDER BY SUM(ss.sales_quantity) DESC LIMIT 1;
SELECT s.store_name, so.total_amount FROM products p JOIN orderdetails od ON p.product_id = od.product_id JOIN salesorders so ON od.order_id = so.order_id JOIN stores s ON so.store_id = s.store_id WHERE p.product_name = 'iPad Air' AND so.order_date = '2023-05-01';
SELECT store_id, SUM(total_amount) FROM salesorders GROUP BY store_id;
SELECT e.position, COUNT(s.order_id) FROM employees e JOIN salesorders s ON e.employee_id = s.employee_id GROUP BY e.position;
SELECT * FROM salesstatistics WHERE store_id = '特定门店ID';
SELECT s.manager_name FROM salesorders so JOIN stores s ON so.store_id = s.store_id WHERE so.order_date >= '2023-05-01' AND so.order_date <= '2023-05-31' GROUP BY s.store_id, s.manager_name HAVING SUM(so.total_amount) > 10000;
SELECT DISTINCT s.store_id FROM salesorders so JOIN stores s ON so.store_id = s.store_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE so.order_date = '2023-05-02' AND so.total_amount > 10000 AND p.supplier_name = '华为官方旗舰店';
SELECT order_id FROM salesorders WHERE order_id IN (SELECT order_id FROM salesstatistics WHERE date BETWEEN '指定开始日期' AND '指定结束日期' AND product_id = (SELECT product_id FROM salesstatistics WHERE date BETWEEN '指定开始日期' AND '指定结束日期' ORDER BY sales_quantity DESC LIMIT 1));
SELECT * FROM salesorders WHERE employee_id = '特定员工ID';
SELECT manager_name FROM stores WHERE store_id = (SELECT store_id FROM salesorders WHERE order_date = '2023-05-04' GROUP BY store_id ORDER BY SUM(total_amount) DESC LIMIT 1);
SELECT s.store_name, e.position FROM salesstatistics ss JOIN employees e ON ss.employee_id = e.employee_id JOIN stores s ON ss.store_id = s.store_id JOIN products p ON ss.product_id = p.product_id WHERE p.product_name = '华为Mate 40 Pro' AND ss.date = '2023-05-01';
SELECT s.manager_name FROM salesstatistics ss JOIN stores s ON ss.store_id = s.store_id WHERE ss.date = '2023-05-06' AND ss.sales_amount > 10000;
SELECT s.store_name, e.name, so.total_amount FROM stores s JOIN employees e ON s.store_id = e.store_id JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.product_name = '戴尔灵越15笔记本电脑' AND so.order_date BETWEEN '2023-05-01' AND '2023-05-31' AND so.total_amount > 5000;
SELECT product_id, remaining_quantity, sale_price FROM products;
SELECT store_id, COUNT(employee_id) FROM employees GROUP BY store_id;
SELECT e.name FROM employees e JOIN salesorders so ON e.employee_id = so.employee_id JOIN orderdetails od ON so.order_id = od.order_id JOIN products p ON od.product_id = p.product_id JOIN stores s ON so.store_id = s.store_id WHERE so.order_date = '2023-05-05' AND s.store_name = '科技中心店' AND p.product_name = '戴森V11' AND od.quantity > 1;
SELECT order_id, total_amount FROM salesorders JOIN stores ON salesorders.store_id = stores.store_id WHERE store_name = '数码广场店';
SELECT ra.assessment_id, ra.risk_level, ra.impact_score, re.event_type, re.event_description FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id WHERE ra.risk_level = '高' AND ra.impact_score > 8;
SELECT * FROM risk_events WHERE event_type = '合规风险';
SELECT a.event_id, l.audit_result FROM alerts a JOIN audit_logs l ON a.event_id = l.event_id WHERE a.alert_type = '欺诈嫌疑预警';
SELECT report_type, AVG(severity) FROM risk_reports JOIN risk_events ON risk_reports.event_id = risk_events.event_id WHERE approval_status = '已批准' GROUP BY report_type;
SELECT risk_level, COUNT(*) AS customer_count, AVG(credit_score) AS avg_credit_score FROM customers GROUP BY risk_level;
SELECT ri.*, rml.* FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id WHERE rml.monitoring_date LIKE '2023-10%';
SELECT report_id, author, event_id FROM risk_reports WHERE approval_status = '已批准';
SELECT c.risk_level, t.transaction_type, CASE WHEN t.amount BETWEEN 0 AND 1000 THEN '0-1000' WHEN t.amount BETWEEN 1001 AND 5000 THEN '1001-5000' WHEN t.amount BETWEEN 5001 AND 10000 THEN '5001-10000' ELSE '10001+' END AS amount_range, COUNT(*) AS transaction_count, AVG(t.risk_score) AS avg_risk_score FROM transactions t JOIN customers c ON t.customer_id = c.customer_id GROUP BY c.risk_level, t.transaction_type, amount_range;
SELECT audit_result FROM audit_logs WHERE event_id = '特定风险事件的event_id';
SELECT rr.report_id, re.event_type, ra.risk_level FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE rr.author = '周婷';
SELECT author, approval_status FROM risk_reports WHERE report_date > '2023-01-01';
SELECT re.event_description, ra.risk_level, ra.mitigation_plan FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE re.event_description LIKE '%系统%';
SELECT a.indicator_id, a.actual_value AS current_value, b.actual_value AS value_30_days_ago, ((a.actual_value - b.actual_value) / b.actual_value) * 100 AS change_percentage FROM (SELECT indicator_id, actual_value FROM risk_monitoring_logs WHERE monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs)) a JOIN (SELECT indicator_id, actual_value FROM risk_monitoring_logs WHERE monitoring_date = (SELECT DATE_SUB(MAX(monitoring_date), INTERVAL 30 DAY) FROM risk_monitoring_logs)) b ON a.indicator_id = b.indicator_id;
SELECT event_id FROM risk_assessments WHERE risk_level = '高风险' AND assessor = '曾强';
SELECT DISTINCT customer_id FROM transactions WHERE transaction_type = '投资' AND risk_score > 60;
SELECT created_at, status FROM risk_events;
SELECT c.customer_id, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.credit_score < 600;
SELECT t.amount, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.transaction_date LIKE '2023-12%' AND t.status = '成功';
SELECT alert_type, alert_content FROM alerts;
SELECT report_id, approved_by FROM risk_reports;
SELECT transaction_type, SUM(CASE WHEN status = '成功' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) AS success_rate, AVG(risk_score) AS avg_risk_score FROM transactions GROUP BY transaction_type;
SELECT a.alert_id, r.rule_description FROM alerts a JOIN rule_configurations r ON a.rule_id = r.rule_id;
SELECT customer_id, status FROM transactions WHERE (customer_id, transaction_date) IN (SELECT customer_id, MAX(transaction_date) FROM transactions GROUP BY customer_id);
SELECT indicator_id, AVG(actual_value) AS avg_value, STDDEV(actual_value) AS stddev_value, STDDEV(actual_value)/AVG(actual_value) AS coefficient_of_variation FROM risk_monitoring_logs GROUP BY indicator_id;
SELECT DISTINCT t.customer_id FROM transactions t JOIN audit_logs a ON t.transaction_id = a.related_id WHERE t.risk_score > 80 AND t.amount > 500000 AND a.audit_result = '未通过' AND t.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
SELECT AVG(impact_score) FROM risk_assessments WHERE mitigation_plan IS NULL;
SELECT alert_content, status FROM alerts;
SELECT c.customer_id, (COUNT(t.transaction_id) * 2 + COUNT(a.alert_id) * 3 + (1 / c.credit_score) * 1000) AS risk_index FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id AND t.transaction_date >= datetime('now', '-90 days') AND t.risk_score > 7 LEFT JOIN alerts a ON c.customer_id = a.assigned_to AND a.status = '未处理' GROUP BY c.customer_id ORDER BY risk_index DESC LIMIT 10;
SELECT event_type, COUNT(*) AS occurrence_count, AVG(severity) AS avg_severity FROM risk_events WHERE SUBSTR(occurrence_time, 1, 4) = '2023' GROUP BY event_type ORDER BY occurrence_count DESC;
SELECT rr.report_id, rr.event_id, re.event_description FROM risk_reports rr JOIN risk_events re ON rr.event_id = re.event_id WHERE rr.report_content LIKE '%合规风险%';
SELECT update_frequency, data_source FROM risk_indicators;
SELECT re.event_id, rr.report_id FROM risk_events re JOIN (SELECT event_id, MAX(report_date) AS latest_report_date FROM risk_reports GROUP BY event_id) latest_rr ON re.event_id = latest_rr.event_id JOIN risk_reports rr ON latest_rr.event_id = rr.event_id AND latest_rr.latest_report_date = rr.report_date WHERE re.status = '未解决';
SELECT rule_type, AVG(trigger_count) AS avg_trigger_count, MAX(updated_at) AS last_updated FROM (SELECT rc.rule_type, rc.updated_at, COUNT(a.alert_id) AS trigger_count FROM rule_configurations rc LEFT JOIN alerts a ON rc.rule_id = a.rule_id GROUP BY rc.rule_id) AS subquery GROUP BY rule_type;
SELECT event_type, COUNT(event_id) FROM risk_events GROUP BY event_type ORDER BY COUNT(event_id) DESC;
SELECT DISTINCT c.customer_id FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.credit_score < 700 AND t.transaction_date LIKE '2023%';
SELECT risk_events.*, risk_reports.* FROM risk_events LEFT JOIN risk_reports ON risk_events.event_id = risk_reports.event_id;
SELECT COUNT(*) FROM risk_reports WHERE approval_status = '拒绝' AND strftime('%Y', report_date) = '2023';
SELECT assessment_id, mitigation_plan FROM risk_assessments;
SELECT * FROM risk_monitoring_logs WHERE (indicator_id, monitoring_date) IN (SELECT indicator_id, MAX(monitoring_date) FROM risk_monitoring_logs GROUP BY indicator_id);
SELECT rule_configurations.rule_id, COUNT(alerts.alert_id) AS alert_count FROM rule_configurations LEFT JOIN alerts ON rule_configurations.rule_id = alerts.rule_id GROUP BY rule_configurations.rule_id;
SELECT * FROM transactions WHERE event_id IN (SELECT event_id FROM risk_events WHERE event_type = '信用风险事件') AND status = '成功';
SELECT risk_level, COUNT(*) FROM customers GROUP BY risk_level;
SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY total_amount) FROM (SELECT SUM(amount) AS total_amount FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.registration_date < '2019-01-01' AND c.risk_level = '高' GROUP BY t.customer_id) AS customer_totals;
SELECT a.rule_id, r.event_description FROM alerts a JOIN risk_events r ON a.event_id = r.event_id WHERE a.alert_level = '高风险';
SELECT created_at, status FROM risk_events;
SELECT event_type, strftime('%Y-%m', occurrence_time) AS month, COUNT(*) AS frequency, (COUNT(*) - LAG(COUNT(*), 1) OVER (PARTITION BY event_type ORDER BY strftime('%Y-%m', occurrence_time))) / LAG(COUNT(*), 1) OVER (PARTITION BY event_type ORDER BY strftime('%Y-%m', occurrence_time)) AS growth_rate FROM risk_events GROUP BY event_type, month;
SELECT strftime('%Y-%m', transaction_date) AS month, AVG(amount) AS avg_amount, COUNT(transaction_id) AS transaction_count FROM transactions GROUP BY month;
SELECT risk_reports.report_id, risk_reports.report_type, risk_reports.approved_by, risk_events.event_description, risk_events.severity FROM risk_reports JOIN risk_events ON risk_reports.event_id = risk_events.event_id WHERE risk_reports.approval_status = '已批准';
SELECT c.risk_level, t.status FROM customers c JOIN transactions t ON c.customer_id = t.customer_id;
SELECT t.transaction_id, t.transaction_type, t.amount, t.transaction_date, t.status, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.risk_level = '高风险';
SELECT report_id FROM risk_reports WHERE author = '孙宇' AND approval_status = '未审批';
SELECT a.alert_content, r.event_description FROM alerts a JOIN risk_events r ON a.event_id = r.event_id WHERE a.status = '未处理';
SELECT risk_level, COUNT(*) FROM customers WHERE risk_level IN ('中', '高') GROUP BY risk_level;
SELECT customer_id, COUNT(*) AS transaction_count, AVG(risk_score) AS avg_risk_score FROM transactions GROUP BY customer_id;
SELECT SUBSTR(registration_date, 1, 7) AS month, COUNT(*) AS high_risk_customer_count FROM customers WHERE risk_level = '高' GROUP BY SUBSTR(registration_date, 1, 7);
SELECT rml.log_id, rml.indicator_id, rml.monitoring_date, rml.actual_value, rml.is_exceeding_threshold, rml.notes, a.alert_id, a.alert_type, a.alert_content, a.alert_level, a.alert_time, a.status, a.assigned_to, al.audit_id, al.audit_type, al.auditor, al.audit_time, al.audit_result, al.audit_comments FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id JOIN alerts a ON rml.log_id = a.event_id JOIN audit_logs al ON a.alert_id = al.alert_id WHERE ri.risk_level = '高风险' AND rml.monitoring_date = (SELECT MAX(monitoring_date) FROM risk_monitoring_logs WHERE indicator_id = ri.indicator_id);
SELECT risk_level, COUNT(customer_id), AVG(credit_score) FROM customers GROUP BY risk_level;
SELECT alert_type FROM alerts JOIN audit_logs ON alerts.alert_id = audit_logs.alert_id WHERE alerts.status = '已解决' GROUP BY alert_type ORDER BY MAX(STRFTIME('%s', audit_logs.audit_time) - STRFTIME('%s', alerts.alert_time)) DESC LIMIT 1;
SELECT c.customer_name, t.amount, t.transaction_date FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.transaction_date LIKE '2023-11%' AND t.amount > 100000;
SELECT SUM(threshold_value) FROM risk_indicators WHERE indicator_name LIKE '%财务%';
SELECT customer_name, credit_score FROM customers;
SELECT customer_id, transaction_date, risk_score FROM transactions WHERE (customer_id, transaction_date) IN (SELECT customer_id, MAX(transaction_date) FROM transactions GROUP BY customer_id);
SELECT * FROM risk_monitoring_logs WHERE actual_value > threshold_value;
SELECT AVG(t.risk_score) FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.risk_level = '高风险';
SELECT customer_id, transaction_id, transaction_type, amount, transaction_date, status, risk_score FROM transactions;
SELECT report_type, COUNT(*) FROM risk_reports WHERE status = '已拒绝' GROUP BY report_type;
SELECT * FROM customers WHERE risk_level = '高' AND credit_score < 600;
SELECT c.risk_level, AVG(t.amount) AS avg_amount, COUNT(t.transaction_id) AS transaction_count FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY c.risk_level;
SELECT report_id, report_content FROM risk_reports WHERE event_id IN (SELECT event_id FROM risk_events WHERE event_type = '流动性风险');
SELECT COUNT(DISTINCT customers.customer_id), SUM(transactions.amount) FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE customers.credit_score BETWEEN 600 AND 800;
SELECT report_content FROM risk_reports WHERE approved_by = '王思远' AND report_date LIKE '2023-03%';
SELECT risk_events.event_id, risk_events.event_description, risk_reports.report_id, risk_reports.report_content FROM risk_events JOIN risk_reports ON risk_events.event_id = risk_reports.event_id WHERE risk_events.event_type = '合规风险';
SELECT * FROM transactions WHERE transaction_date >= '2023-06-01' AND transaction_date <= '2023-06-30';
SELECT event_id FROM risk_events WHERE severity = 3 AND event_id IN (SELECT event_id FROM audit_logs);
SELECT threshold_value, actual_value FROM risk_indicators JOIN risk_monitoring_logs ON risk_indicators.indicator_id = risk_monitoring_logs.indicator_id WHERE actual_value > threshold_value;
SELECT customers.credit_score, transactions.status FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id;
SELECT re.event_id, re.event_type, a.alert_id, a.alert_content FROM risk_events re JOIN alerts a ON re.event_id = a.event_id WHERE a.alert_level = '高';
SELECT risk_events.event_id, risk_events.event_type, alerts.alert_id, alerts.alert_time FROM risk_events JOIN alerts ON risk_events.event_id = alerts.event_id ORDER BY alerts.alert_time;
SELECT c.risk_level, AVG(t.amount) AS avg_amount, COUNT(t.transaction_id) AS transaction_count FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 90 DAY) GROUP BY c.risk_level;
SELECT customer_id FROM customers WHERE risk_level = '高' AND credit_score < 700;
SELECT c.customer_id, c.credit_score, t.transaction_id, t.transaction_type, t.amount, t.transaction_date, t.status FROM customers c INNER JOIN (SELECT customer_id, transaction_id, transaction_type, amount, transaction_date, status FROM transactions WHERE status = '失败' ORDER BY transaction_date DESC LIMIT 1) t ON c.customer_id = t.customer_id;
SELECT ra.event_id FROM risk_assessments ra JOIN customers c ON ra.event_id = c.event_id WHERE ra.risk_level = '高风险' AND c.credit_score > 700;
SELECT * FROM customers WHERE customer_type = '企业' ORDER BY credit_score DESC LIMIT 10;
SELECT strftime('%Y-%m', created_at) AS month, COUNT(*) AS new_rules_count, AVG(CASE WHEN is_active = '是' THEN 1 ELSE 0 END) AS avg_active_rules FROM rule_configurations GROUP BY strftime('%Y-%m', created_at);
SELECT author, approval_status FROM risk_reports WHERE approval_status = '已批准';
SELECT customer_id, amount, status FROM transactions;
SELECT re.event_id, re.event_type, re.event_description, re.occurrence_time, re.severity, re.status, re.reporter, re.created_at, ra.assessment_id, ra.assessor, ra.assessment_date, ra.risk_level, ra.impact_score, ra.probability_score, ra.mitigation_plan FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id;
SELECT ri.indicator_id, ri.threshold_value, AVG(rml.actual_value) AS avg_actual_value FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id GROUP BY ri.indicator_id, ri.threshold_value;
SELECT r.report_id, r.event_id, e.event_type, e.event_description FROM risk_reports r JOIN risk_events e ON r.event_id = e.event_id WHERE r.approval_status = '已批准';
SELECT DISTINCT t.customer_id FROM transactions t INNER JOIN alerts a ON t.customer_id = a.assigned_to AND DATE(t.transaction_date) = DATE(a.alert_time) WHERE t.risk_score > 90 AND a.alert_level = '高级别';
SELECT t.*, c.* FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.risk_score > 80;
SELECT re.event_description, ra.assessment_date FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id WHERE ra.risk_level = '高';
SELECT c.customer_id FROM customers c JOIN (SELECT t.customer_id, MAX(t.transaction_date) AS last_transaction_date FROM transactions t GROUP BY t.customer_id) AS last_trans ON c.customer_id = last_trans.customer_id JOIN transactions t ON last_trans.customer_id = t.customer_id AND last_trans.last_transaction_date = t.transaction_date WHERE c.risk_level = '高风险' AND t.status = '失败';
SELECT event_id, COUNT(*) FROM transactions GROUP BY event_id;
SELECT t.transaction_id, t.amount, t.transaction_date, c.customer_name, c.customer_type FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.risk_level = '高风险' AND t.amount > 500000 AND t.transaction_date BETWEEN '2023-01-01' AND '2023-03-31';
SELECT re.event_description, re.severity, ra.risk_level, ra.mitigation_plan FROM risk_events re JOIN risk_assessments ra ON re.event_id = ra.event_id WHERE re.severity IN (4, 5) AND re.occurrence_time LIKE '2023%';
SELECT * FROM risk_monitoring_logs WHERE is_exceeding_threshold = '否';
SELECT r.report_id, r.author, r.event_id, a.audit_result, a.audit_time FROM risk_reports r LEFT JOIN (SELECT related_id, audit_result, audit_time FROM audit_logs WHERE audit_type = '风险报告' ORDER BY audit_time DESC) a ON r.report_id = a.related_id WHERE r.approval_status = '待审批';
SELECT customer_name FROM customers WHERE YEAR(registration_date) = 2021 AND risk_level = '高' AND credit_score < 550;
SELECT t.customer_id, t.transaction_id, t.transaction_type, t.amount, t.transaction_date, t.status, t.risk_score, a.alert_id FROM (SELECT customer_id, MAX(transaction_date) AS last_transaction_date FROM transactions GROUP BY customer_id) AS latest_transactions JOIN transactions t ON latest_transactions.customer_id = t.customer_id AND latest_transactions.last_transaction_date = t.transaction_date LEFT JOIN alerts a ON t.transaction_id = a.event_id;
SELECT event_type, COUNT(*) FROM risk_events GROUP BY event_type;
SELECT c.customer_name, r.rule_name, COUNT(a.alert_id) AS trigger_count FROM customers c JOIN alerts a ON c.customer_id = a.assigned_to JOIN rule_configurations r ON a.rule_id = r.rule_id WHERE c.risk_level = '高' GROUP BY c.customer_name, r.rule_name;
SELECT event_type, strftime('%Y-%m', occurrence_time) AS month, COUNT(*) AS event_count, AVG(severity) AS avg_severity, SUM(CASE WHEN status = '已解决' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) AS resolution_rate FROM risk_events GROUP BY event_type, strftime('%Y-%m', occurrence_time);
SELECT actual_value, threshold_value FROM risk_monitoring_logs JOIN risk_indicators ON risk_monitoring_logs.indicator_id = risk_indicators.indicator_id;
SELECT c.risk_level, t.transaction_type, AVG(t.amount) FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.risk_level, t.transaction_type;
SELECT COUNT(*) FROM rule_configurations WHERE is_active = '激活';
SELECT risk_level, credit_score FROM customers;
SELECT COUNT(*), AVG(update_frequency) FROM risk_indicators WHERE threshold_value > 100;
SELECT customer_name, registration_date FROM customers;
SELECT actual_value, is_exceeding_threshold FROM risk_monitoring_logs;
SELECT rmi.indicator_id, rmi.data_source, AVG(rml.actual_value) AS avg_value, STDDEV(rml.actual_value) AS stddev_value FROM risk_monitoring_logs rml JOIN risk_indicators rmi ON rml.indicator_id = rmi.indicator_id GROUP BY rmi.indicator_id, rmi.data_source;
SELECT auditor FROM audit_logs WHERE audit_result = '拒绝';
SELECT alert_type, alert_content FROM alerts;
SELECT a.alert_id, a.alert_type, a.alert_content, a.alert_level, a.alert_time, a.assigned_to, re.event_description, al.audit_result, al.audit_comments FROM alerts a JOIN risk_events re ON a.event_id = re.event_id LEFT JOIN (SELECT * FROM audit_logs WHERE audit_time = (SELECT MAX(audit_time) FROM audit_logs al2 WHERE al2.alert_id = audit_logs.alert_id)) al ON a.alert_id = al.alert_id WHERE a.status = '未处理';
SELECT AVG(alert_time) FROM alerts WHERE status = '未处理';
SELECT c.customer_id, COUNT(ra.assessment_id) * AVG(ra.impact_score) + COUNT(a.alert_id) * 2 AS risk_index FROM customers c LEFT JOIN risk_events re ON c.customer_id = re.reporter LEFT JOIN risk_assessments ra ON re.event_id = ra.event_id LEFT JOIN alerts a ON re.event_id = a.event_id GROUP BY c.customer_id;
SELECT event_type, COUNT(*) FROM risk_events WHERE status = '未处理' GROUP BY event_type;
SELECT t.* FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.risk_level = '低' AND c.credit_score > 700;
SELECT a.alert_id, r.event_description FROM alerts a JOIN risk_events r ON a.event_id = r.event_id WHERE a.status = '未处理' AND a.alert_level = '高级别';
SELECT alerts.alert_id, alerts.status FROM alerts JOIN rule_configurations ON alerts.rule_id = rule_configurations.rule_id WHERE rule_configurations.rule_type = '合规违规';
SELECT c.customer_id, c.risk_level, SUM(t.amount) AS total_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.risk_score > 80 GROUP BY c.customer_id, c.risk_level;
SELECT report_content FROM risk_reports WHERE report_type = '月度风险报告' AND approval_status = '已拒绝';
SELECT event_type, COUNT(*) FROM risk_events GROUP BY event_type;
SELECT customer_id FROM transactions WHERE transaction_date = '2023-05-04' AND transaction_type = '转账' AND amount > 200000;
SELECT a.alert_id, a.alert_content, a.assigned_to, r.event_description FROM alerts a JOIN risk_events r ON a.event_id = r.event_id WHERE a.alert_level = '高级别' AND a.status = '未处理';
SELECT report_id FROM risk_reports WHERE report_date LIKE '2023-04%' AND approved_by = '高志远';
SELECT transaction_type, SUM(CASE WHEN status = '成功' THEN 1 ELSE 0 END) AS success_count, SUM(CASE WHEN status = '失败' THEN 1 ELSE 0 END) AS failure_count FROM transactions GROUP BY transaction_type;
SELECT re.event_id, ra.risk_level FROM risk_events re JOIN (SELECT event_id, risk_level, ROW_NUMBER() OVER (PARTITION BY event_id ORDER BY assessment_date DESC) AS rn FROM risk_assessments) ra ON re.event_id = ra.event_id WHERE ra.rn = 1;
SELECT c.customer_name, COUNT(DISTINCT ra.assessment_id) AS risk_assessment_count, COUNT(DISTINCT t.transaction_id) AS large_transaction_count FROM customers c JOIN risk_assessments ra ON c.customer_id = ra.event_id JOIN transactions t ON c.customer_id = t.customer_id WHERE ra.risk_level = '高风险' AND t.amount > 500000 AND ra.assessment_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND t.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY c.customer_name;
SELECT * FROM transactions WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_name = '恒基能源有限公司');
SELECT event_id, MAX(severity) FROM risk_events GROUP BY event_id;
SELECT risk_level, COUNT(DISTINCT customers.customer_id) AS customer_count, AVG(transactions.amount) AS avg_transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY risk_level;
SELECT a.alert_id, a.alert_type, a.alert_content, a.alert_level, a.alert_time, a.status, a.assigned_to, a.event_id, al.audit_result FROM alerts a JOIN audit_logs al ON a.alert_id = al.alert_id WHERE al.auditor = '张强';
SELECT rml.actual_value, rml.is_exceeding_threshold, ri.indicator_name FROM risk_monitoring_logs rml JOIN risk_indicators ri ON rml.indicator_id = ri.indicator_id;
SELECT indicator_id, COUNT(*) AS exceed_count, AVG(actual_value - threshold_value) AS avg_exceed_value FROM risk_monitoring_logs WHERE is_exceeding_threshold = '是' AND monitoring_date LIKE '2023%' GROUP BY indicator_id;
SELECT alert_id, status FROM alerts WHERE alert_time LIKE '2023%';
SELECT indicator_id, actual_value FROM risk_monitoring_logs WHERE (indicator_id, monitoring_date) IN (SELECT indicator_id, MAX(monitoring_date) FROM risk_monitoring_logs GROUP BY indicator_id);
SELECT indicator_id, COUNT(*) AS exceed_count, COUNT(*) * 100.0 / SUM(COUNT(*)) OVER () AS exceed_percentage FROM risk_monitoring_logs WHERE is_exceeding_threshold = '是' AND monitoring_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY indicator_id ORDER BY exceed_count DESC LIMIT 10;
SELECT risk_level, COUNT(*) FROM customers GROUP BY risk_level;
SELECT risk_score, status FROM transactions;
SELECT ra.event_id FROM risk_assessments ra JOIN transactions t ON ra.event_id = t.event_id WHERE ra.risk_level = '高风险' AND t.risk_score < 50;
SELECT transaction_type FROM transactions WHERE status = '成功' GROUP BY transaction_type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT * FROM transactions WHERE status = '失败' AND event_id IN (SELECT event_id FROM risk_events WHERE status = '已解决');
SELECT t.transaction_id, t.customer_id, c.customer_name, c.customer_type FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.status = '处理中';
SELECT t.transaction_id, t.amount, r.event_id, r.event_type FROM transactions t JOIN risk_events r ON t.event_id = r.event_id WHERE t.amount > 1000;
SELECT t.transaction_id, t.customer_id, t.amount, t.transaction_date, t.risk_score, t.event_id, re.event_type, re.event_description, re.occurrence_time, re.severity, re.status, re.reporter, re.created_at FROM transactions t JOIN customers c ON t.customer_id = c.customer_id JOIN risk_events re ON t.event_id = re.event_id WHERE t.amount > 100000 AND c.risk_level = '高' AND t.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
SELECT * FROM risk_assessments WHERE mitigation_plan IS NOT NULL;
SELECT transaction_id, customer_id, transaction_type, amount, transaction_date, status, risk_score FROM transactions WHERE customer_id IN (SELECT customer_id FROM customers WHERE risk_level = '高');
SELECT risk_monitoring_logs.actual_value, risk_indicators.indicator_name FROM risk_monitoring_logs JOIN risk_indicators ON risk_monitoring_logs.indicator_id = risk_indicators.indicator_id WHERE risk_monitoring_logs.actual_value < risk_indicators.threshold_value;
SELECT risk_reports.report_id, risk_events.event_type, risk_events.status FROM risk_reports INNER JOIN risk_events ON risk_reports.event_id = risk_events.event_id WHERE risk_reports.approval_status = '已拒绝';
SELECT DISTINCT c.customer_id FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE YEAR(c.registration_date) = 2021 AND c.credit_score > 700 AND t.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
SELECT a.alert_id, a.event_id, re.event_type, re.event_description, t.transaction_id, t.transaction_type, t.amount FROM alerts a JOIN risk_events re ON a.event_id = re.event_id JOIN transactions t ON a.event_id = t.event_id WHERE a.assigned_to = '陈强';
SELECT * FROM risk_reports WHERE report_content LIKE '%合规%';
SELECT strftime('%Y-%m', risk_events.occurrence_time) AS month, COUNT(risk_events.event_id) AS event_count, AVG(risk_events.severity) AS avg_severity, COUNT(alerts.alert_id) AS alert_count FROM risk_events LEFT JOIN alerts ON risk_events.event_id = alerts.event_id GROUP BY month;
SELECT indicator_name, threshold_value FROM risk_indicators;
SELECT indicator_id, monitoring_date, actual_value, is_exceeding_threshold FROM risk_monitoring_logs WHERE (indicator_id, monitoring_date) IN (SELECT indicator_id, MAX(monitoring_date) FROM risk_monitoring_logs GROUP BY indicator_id);
SELECT t.*, c.* FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id WHERE t.amount > 100000;
SELECT * FROM risk_reports WHERE approval_status = '已批准';
SELECT transaction_type, AVG(risk_score) FROM transactions GROUP BY transaction_type;
SELECT event_type, AVG(JULIANDAY(occurrence_time) - JULIANDAY(created_at)) AS avg_resolution_time, AVG(CASE WHEN status = '未处理' THEN JULIANDAY(occurrence_time) - JULIANDAY(created_at) END) AS avg_unresolved_time, AVG(CASE WHEN status = '处理中' THEN JULIANDAY(occurrence_time) - JULIANDAY(created_at) END) AS avg_in_progress_time, AVG(CASE WHEN status = '已解决' THEN JULIANDAY(occurrence_time) - JULIANDAY(created_at) END) AS avg_resolved_time FROM risk_events GROUP BY event_type;
SELECT alert_type, COUNT(*) AS alert_count, AVG(STRFTIME('%s', audit_time) - STRFTIME('%s', alert_time)) AS avg_processing_time FROM alerts JOIN audit_logs ON alerts.alert_id = audit_logs.alert_id WHERE alerts.status = '已处理' GROUP BY alert_type;
SELECT event_type, AVG(JULIANDAY('now') - JULIANDAY(created_at)) AS avg_processing_time FROM risk_events WHERE status = '已解决' GROUP BY event_type;
SELECT a.alert_id, a.rule_id, r.status FROM alerts a JOIN risk_events r ON a.event_id = r.event_id;
SELECT c.customer_name, COUNT(DISTINCT t.transaction_id) AS high_risk_transaction_count, COUNT(DISTINCT a.alert_id) AS high_level_alert_count FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN alerts a ON t.event_id = a.event_id WHERE t.risk_score > 80 AND a.alert_level = '高级别' AND strftime('%Y', t.transaction_date) = '2023' GROUP BY c.customer_name;
SELECT severity, risk_level FROM risk_events JOIN risk_assessments ON risk_events.event_id = risk_assessments.event_id;
SELECT * FROM transactions WHERE event_id = '特定风险事件';
SELECT customer_type, COUNT(*) FROM customers GROUP BY customer_type;
SELECT * FROM risk_assessments JOIN risk_events ON risk_assessments.event_id = risk_events.event_id;
SELECT customer_id FROM customers WHERE risk_level = '高风险' AND NOT EXISTS (SELECT 1 FROM transactions WHERE customers.customer_id = transactions.customer_id AND transactions.transaction_date >= DATE('now', '-30 days'));
SELECT c.customer_name, c.risk_level, t.transaction_date, t.amount, t.risk_score FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高风险' AND t.transaction_date = (SELECT MAX(transaction_date) FROM transactions WHERE customer_id = c.customer_id);
SELECT transaction_type, COUNT(*) AS total_transactions, SUM(CASE WHEN status = '成功' THEN 1 ELSE 0 END) AS successful_transactions, SUM(CASE WHEN status = '成功' THEN 1 ELSE 0 END) / COUNT(*) AS success_rate FROM transactions GROUP BY transaction_type;
SELECT event_id, mitigation_plan, assessor FROM risk_assessments WHERE risk_level = '高';
SELECT customer_name FROM customers WHERE risk_level = '高' AND credit_score < 700;
SELECT customer_id FROM customers WHERE risk_level = '高' AND credit_score < 600;
SELECT c.risk_level, SUM(t.amount) FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.status = '成功' GROUP BY c.risk_level;
SELECT r.report_id, r.report_content, e.event_type, e.event_description FROM risk_reports r JOIN risk_events e ON r.event_id = e.event_id WHERE r.approval_status = '已批准';
SELECT author FROM risk_reports GROUP BY author ORDER BY COUNT(*) DESC LIMIT 1;
SELECT event_id, reporter FROM risk_events WHERE status = '未处理';
SELECT customer_name, last_update_date FROM customers WHERE registration_date > '2021-01-01';
SELECT r.report_id, e.* FROM risk_reports r JOIN risk_events e ON r.event_id = e.event_id WHERE r.approved_by = '高志远';
SELECT ri.threshold_value, rml.actual_value, rml.monitoring_date FROM risk_indicators ri JOIN risk_monitoring_logs rml ON ri.indicator_id = rml.indicator_id;
SELECT * FROM risk_monitoring_logs JOIN risk_indicators ON risk_monitoring_logs.indicator_id = risk_indicators.indicator_id;
SELECT AVG(impact_score), AVG(probability_score) FROM risk_assessments;
SELECT risk_events.*, risk_assessments.* FROM risk_events INNER JOIN risk_assessments ON risk_events.event_id = risk_assessments.event_id WHERE risk_assessments.assessor IS NOT NULL;
SELECT SUM(amount) FROM transactions WHERE transaction_type = '退款';
SELECT ri.*, rml.* FROM risk_indicators ri JOIN (SELECT indicator_id, MAX(monitoring_date) AS latest_date FROM risk_monitoring_logs GROUP BY indicator_id) latest ON ri.indicator_id = latest.indicator_id JOIN risk_monitoring_logs rml ON latest.indicator_id = rml.indicator_id AND latest.latest_date = rml.monitoring_date;
SELECT event_type, AVG(CAST(SUBSTRING(mitigation_plan, PATINDEX('%[0-9]%', mitigation_plan), LEN(mitigation_plan)) AS INT)) AS avg_execution_time FROM risk_events JOIN risk_assessments ON risk_events.event_id = risk_assessments.event_id GROUP BY event_type;
SELECT event_type, COUNT(*) FROM risk_events GROUP BY event_type;
SELECT ra.assessment_id, ra.event_id, ra.assessor, re.event_type, re.event_description FROM risk_assessments ra JOIN risk_events re ON ra.event_id = re.event_id;
SELECT COUNT(*) FROM risk_monitoring_logs WHERE is_exceeding_threshold = '是';
SELECT event_id, risk_level, mitigation_plan FROM risk_assessments;
SELECT report_id, author FROM risk_reports WHERE approval_status = '已批准';
SELECT customer_id, customer_name FROM customers WHERE risk_level = '高' AND credit_score > (SELECT AVG(credit_score) FROM customers);
SELECT alert_content, assigned_to FROM alerts;
SELECT event_description, severity, created_at, (occurrence_time - created_at) AS resolve_time FROM risk_events WHERE status = '已解决' ORDER BY resolve_time DESC LIMIT 10;
SELECT rule_configurations.*, risk_indicators.* FROM rule_configurations JOIN risk_indicators ON rule_configurations.indicator_id = risk_indicators.indicator_id WHERE rule_configurations.is_active = '激活';
SELECT risk_level, COUNT(*) FROM customers GROUP BY risk_level;
SELECT event_id, reporter FROM risk_events WHERE status = '未处理';
SELECT event_id, created_at FROM risk_events WHERE severity >= 3;
SELECT mitigation_plan, assessor FROM risk_assessments;
SELECT a.alert_id, r.event_description, al.audit_comments FROM alerts a JOIN risk_events r ON a.event_id = r.event_id JOIN (SELECT alert_id, MAX(audit_time) AS latest_audit_time FROM audit_logs GROUP BY alert_id) latest ON a.alert_id = latest.alert_id JOIN audit_logs al ON latest.alert_id = al.alert_id AND latest.latest_audit_time = al.audit_time WHERE a.status = '未解决' AND a.alert_level = '高级别';
SELECT event_id, mitigation_plan FROM risk_assessments WHERE risk_level = '高';
SELECT DISTINCT c.customer_id FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.risk_level = '高风险' AND t.amount > 100000 AND t.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
SELECT * FROM risk_assessments WHERE impact_score > 8 AND risk_level = '高';
SELECT risk_events.event_id, risk_reports.report_type, risk_reports.report_content FROM risk_events JOIN risk_reports ON risk_events.event_id = risk_reports.event_id;
SELECT DISTINCT rr.institution_id FROM regulatory_reports rr JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND rr.report_date BETWEEN '2023-07-01' AND '2023-09-30' AND npl.npl_ratio > 2;
SELECT report_id, institution_id FROM regulatory_reports WHERE submission_date = '2023-11-01';
SELECT DISTINCT c.institution_id FROM capital_adequacy_ratio c JOIN non_performing_loans n ON c.institution_id = n.institution_id AND c.report_date = n.report_date WHERE c.report_date = '2023-06-30' AND c.total_car < 12 AND n.npl_ratio > 2;
SELECT fi.institution_name FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id ORDER BY (re.market_risk_exposure / re.total_risk_exposure) DESC LIMIT 1;
SELECT institution_name FROM financial_institution_info JOIN regulatory_reports ON financial_institution_info.institution_id = regulatory_reports.institution_id WHERE report_date BETWEEN '2023-07-01' AND '2023-09-30' AND report_type = '季度报告' AND approval_status = '需修改' AND registered_capital > 50000000;
SELECT fi.institution_name, (car.risk_weighted_assets / bs.total_assets) AS risk_weighted_asset_density FROM capital_adequacy_ratio car JOIN balance_sheet bs ON car.institution_id = bs.institution_id AND car.report_date = bs.report_date JOIN financial_institution_info fi ON car.institution_id = fi.institution_id ORDER BY risk_weighted_asset_density DESC LIMIT 1;
SELECT liquidity_coverage_ratio, net_stable_funding_ratio FROM liquidity_ratio;
SELECT institution_name FROM financial_institution_info WHERE institution_id IN (SELECT institution_id FROM compliance_records WHERE EXTRACT(YEAR FROM record_date) = 2023 AND EXTRACT(MONTH FROM record_date) = 12 AND status = '未解决');
SELECT loans_and_advances, deposits FROM balance_sheet WHERE YEAR(report_date) = 2024;
SELECT * FROM balance_sheet WHERE report_date = '2039-06-08';
SELECT COUNT(DISTINCT institution_id) FROM non_performing_loans WHERE npl_ratio > 3;
SELECT net_interest_income, non_interest_income FROM income_statement WHERE report_date = '2023-03-01';
SELECT npl_amount / total_loans FROM non_performing_loans;
SELECT fi.institution_name FROM financial_institution_info fi INNER JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id INNER JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE YEAR(rr.report_date) = 2023 AND rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND YEAR(npl.report_date) = 2023 AND npl.npl_ratio > 1;
SELECT institution_name FROM financial_institution_info WHERE institution_id IN (SELECT institution_id FROM regulatory_reports WHERE report_date = '2023-10-01' AND report_type = '半年度报告' AND approval_status = '待审核');
SELECT institution_name FROM financial_institution_info WHERE institution_type != '银行' ORDER BY registered_capital DESC LIMIT 5;
SELECT COUNT(DISTINCT b.institution_id) FROM balance_sheet b JOIN non_performing_loans n ON b.institution_id = n.institution_id WHERE b.institution_id IN (SELECT institution_id FROM balance_sheet ORDER BY total_assets DESC LIMIT 500) AND n.npl_ratio < 1 AND n.provision_coverage_ratio > 200;
SELECT fi.institution_name FROM capital_adequacy_ratio car JOIN regulatory_reports rr ON car.institution_id = rr.institution_id JOIN financial_institution_info fi ON car.institution_id = fi.institution_id WHERE car.core_tier_1_ratio < 10 AND car.report_date = '2023-12-01' AND rr.approval_status = '待审核' AND rr.report_date = '2023-12-01';
SELECT fi.institution_name FROM financial_institution_info fi JOIN (SELECT i1.institution_id FROM income_statement i1 JOIN income_statement i2 ON i1.institution_id = i2.institution_id AND YEAR(i1.report_date) = YEAR(i2.report_date) - 1 WHERE (i1.net_interest_income + i1.non_interest_income) > (i2.net_interest_income + i2.non_interest_income) ORDER BY ((i1.net_interest_income + i1.non_interest_income) - (i2.net_interest_income + i2.non_interest_income)) / (i2.net_interest_income + i2.non_interest_income) DESC LIMIT 1) AS max_revenue ON fi.institution_id = max_revenue.institution_id JOIN (SELECT i1.institution_id FROM income_statement i1 JOIN income_statement i2 ON i1.institution_id = i2.institution_id AND YEAR(i1.report_date) = YEAR(i2.report_date) - 1 WHERE i1.net_profit < i2.net_profit ORDER BY (i1.net_profit - i2.net_profit) / i2.net_profit ASC LIMIT 1) AS min_profit ON fi.institution_id = min_profit.institution_id;
SELECT report_type, approval_status FROM regulatory_reports WHERE report_date = '2023-07-01';
SELECT institution_id FROM capital_adequacy_ratio WHERE core_tier_1_ratio > (SELECT AVG(core_tier_1_ratio) FROM capital_adequacy_ratio) AND tier_1_ratio > (SELECT AVG(tier_1_ratio) FROM capital_adequacy_ratio) AND total_car > (SELECT AVG(total_car) FROM capital_adequacy_ratio);
SELECT * FROM compliance_records WHERE YEAR(record_date) = 2023 AND status = '已解决';
SELECT report_type FROM regulatory_reports WHERE report_date >= '2023-07-01' AND report_date <= '2023-09-30' GROUP BY report_type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT tier_1_ratio FROM capital_adequacy_ratio;
SELECT fi.institution_name, lr.report_date FROM liquidity_ratio lr JOIN financial_institution_info fi ON lr.institution_id = fi.institution_id WHERE lr.liquidity_coverage_ratio > 100;
SELECT lr.institution_id, lr.report_date, lr.liquidity_coverage_ratio FROM liquidity_ratio lr WHERE lr.institution_id IN (SELECT bs.institution_id FROM balance_sheet bs WHERE bs.report_date >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR) GROUP BY bs.institution_id ORDER BY STDDEV(bs.total_liabilities / bs.total_assets) DESC LIMIT 5) ORDER BY lr.institution_id, lr.report_date;
SELECT description, severity FROM compliance_records WHERE record_date >= '2023-03-01' AND record_date < '2023-04-01';
SELECT description, severity FROM compliance_records WHERE YEAR(record_date) = 2024;
SELECT report_type FROM regulatory_reports WHERE report_date = '2023-10-01';
SELECT * FROM compliance_records WHERE YEAR(record_date) = 2023 AND severity = '中';
SELECT status FROM compliance_records WHERE record_date = '2023-10-01';
SELECT institution_id FROM liquidity_ratio WHERE liquidity_coverage_ratio > (SELECT AVG(liquidity_coverage_ratio) FROM liquidity_ratio) AND net_stable_funding_ratio > (SELECT AVG(net_stable_funding_ratio) FROM liquidity_ratio) AND loan_to_deposit_ratio > (SELECT AVG(loan_to_deposit_ratio) FROM liquidity_ratio);
SELECT fi.institution_name, rr.report_type, rr.submission_date FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id WHERE rr.report_date BETWEEN '2023-07-01' AND '2023-09-30' AND rr.approval_status = '需修改' ORDER BY rr.submission_date DESC;
SELECT n.institution_id FROM non_performing_loans n JOIN (SELECT institution_id FROM capital_adequacy_ratio WHERE total_car <= (SELECT PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY total_car) FROM capital_adequacy_ratio)) c ON n.institution_id = c.institution_id WHERE n.npl_ratio < (SELECT AVG(npl_ratio) FROM non_performing_loans);
SELECT registered_capital, institution_type FROM financial_institution_info;
SELECT establishment_date, legal_representative FROM financial_institution_info;
SELECT * FROM compliance_records WHERE status = '已解决';
SELECT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id AND rr.report_date = npl.report_date WHERE rr.approval_status = '需修改' AND npl.npl_ratio > 1 AND rr.report_date = '2023-07-01';
SELECT institution_id FROM balance_sheet ORDER BY ABS(loans_and_advances / deposits - 1) LIMIT 1;
SELECT fi.* FROM financial_institution_info fi JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE npl.total_loans > 100000000000;
SELECT cash_and_equivalents FROM balance_sheet WHERE report_date = '2026-04-27';
SELECT institution_name FROM financial_institution_info WHERE institution_id IN (SELECT institution_id FROM capital_adequacy_ratio WHERE core_tier_1_ratio < 9);
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE YEAR(rr.report_date) = 2023 AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝' AND YEAR(npl.report_date) = 2023 AND npl.npl_ratio > 2;
SELECT COUNT(DISTINCT ca.institution_id) FROM capital_adequacy_ratio ca JOIN balance_sheet bs ON ca.institution_id = bs.institution_id AND ca.report_date = bs.report_date JOIN risk_exposure re ON ca.institution_id = re.institution_id AND ca.report_date = re.report_date WHERE (ca.risk_weighted_assets / bs.total_assets) IN (SELECT (ca2.risk_weighted_assets / bs2.total_assets) FROM capital_adequacy_ratio ca2 JOIN balance_sheet bs2 ON ca2.institution_id = bs2.institution_id AND ca2.report_date = bs2.report_date ORDER BY (ca2.risk_weighted_assets / bs2.total_assets) DESC LIMIT 10) AND re.market_risk_exposure > 1000;
SELECT NULL;
SELECT DISTINCT re.institution_id FROM risk_exposure re JOIN capital_adequacy_ratio car ON re.institution_id = car.institution_id WHERE re.market_risk_exposure > 20 AND car.core_tier_1_ratio < 8.5;
SELECT fi.institution_name, ca.core_tier_1_ratio, ca.tier_1_ratio, ca.total_car FROM financial_institution_info fi JOIN capital_adequacy_ratio ca ON fi.institution_id = ca.institution_id WHERE ca.report_date = '2023-12-01' AND ca.core_tier_1_ratio < 10 AND ca.total_car < 12;
SELECT COUNT(*) FROM compliance_records WHERE severity = '高' AND EXTRACT(YEAR FROM record_date) = 2023;
SELECT institution_name FROM balance_sheet JOIN financial_institution_info ON balance_sheet.institution_id = financial_institution_info.institution_id ORDER BY (cash_and_equivalents / total_assets) DESC LIMIT 1;
SELECT institution_name FROM financial_institution_info JOIN risk_exposure ON financial_institution_info.institution_id = risk_exposure.institution_id WHERE (market_risk_exposure / total_risk_exposure) > 0.4;
SELECT institution_id FROM regulatory_reports WHERE report_date >= '2023-01-01' AND report_date <= '2023-12-31' AND approval_status = '批准' GROUP BY institution_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT fi.institution_name FROM financial_institution_info fi JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id WHERE car.core_tier_1_ratio < 8 AND rr.approval_status = '已批准' AND YEAR(car.report_date) = 2023 AND YEAR(rr.report_date) = 2023;
SELECT credit_risk_exposure, operational_risk_exposure FROM risk_exposure WHERE report_date >= '2024-01-01' AND report_date < '2024-02-01';
SELECT description, severity FROM compliance_records WHERE record_date = '2023-04-02';
SELECT npl_ratio, report_date FROM non_performing_loans ORDER BY report_date;
SELECT institution_id, provision_coverage_ratio FROM non_performing_loans WHERE provision_coverage_ratio > 150;
SELECT * FROM related_party_transactions WHERE transaction_date = '2023-12-22';
SELECT fi.institution_name FROM financial_institution_info fi JOIN liquidity_ratio lr ON fi.institution_id = lr.institution_id JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE lr.liquidity_coverage_ratio > 110 AND npl.npl_ratio < 1.5;
SELECT DISTINCT rr.institution_id FROM regulatory_reports rr JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE YEAR(rr.report_date) = 2023 AND rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND npl.npl_ratio > 2;
SELECT institution_id FROM income_statement WHERE report_date >= '2021-01-01' GROUP BY institution_id ORDER BY AVG(net_profit / (net_interest_income + non_interest_income)) DESC LIMIT 5;
SELECT fi.institution_type, AVG(npl.npl_ratio) FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id WHERE YEAR(npl.report_date) = 2023 GROUP BY fi.institution_type;
SELECT COUNT(DISTINCT re.institution_id) FROM risk_exposure re JOIN capital_adequacy_ratio car ON re.institution_id = car.institution_id AND re.report_date = car.report_date WHERE (re.market_risk_exposure - LAG(re.market_risk_exposure) OVER (PARTITION BY re.institution_id ORDER BY re.report_date)) / LAG(re.market_risk_exposure) OVER (PARTITION BY re.institution_id ORDER BY re.report_date) > 0.5 AND (car.total_car - LAG(car.total_car) OVER (PARTITION BY car.institution_id ORDER BY car.report_date)) < 1;
SELECT total_assets, total_liabilities FROM balance_sheet;
SELECT DISTINCT fii.institution_name FROM financial_institution_info fii JOIN regulatory_reports rr ON fii.institution_id = rr.institution_id JOIN related_party_transactions rpt ON fii.institution_id = rpt.institution_id WHERE rr.approval_status = '需修改' AND rpt.transaction_amount > 5000000 AND rr.report_date BETWEEN '2023-07-01' AND '2023-07-31' AND rpt.transaction_date BETWEEN '2023-07-01' AND '2023-07-31';
SELECT AVG(total_car) FROM capital_adequacy_ratio WHERE institution_id IN (SELECT institution_id FROM balance_sheet WHERE total_assets > 1000000000000);
SELECT * FROM risk_exposure WHERE report_date = '2023-10-01';
SELECT DISTINCT fii.institution_name FROM related_party_transactions rpt JOIN regulatory_reports rr ON rpt.institution_id = rr.institution_id JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id WHERE rpt.transaction_date = '2023-06-01' AND rpt.transaction_amount > 5000000 AND rr.approval_status = '已批准';
SELECT bs.total_assets, car.total_car FROM balance_sheet bs JOIN capital_adequacy_ratio car ON bs.institution_id = car.institution_id AND bs.report_date = car.report_date;
SELECT fi.institution_name FROM financial_institution_info fi JOIN related_party_transactions rpt ON fi.institution_id = rpt.institution_id WHERE YEAR(rpt.transaction_date) = 2023 GROUP BY fi.institution_name HAVING SUM(CASE WHEN rpt.approval_status = '未通过' THEN 1 ELSE 0 END) / COUNT(*) > 0.2;
SELECT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE rr.report_date = '2023-07-01' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND npl.npl_ratio > 2;
SELECT r.approval_status, c.compliance_type, c.status FROM regulatory_reports r JOIN compliance_records c ON r.institution_id = c.institution_id WHERE YEAR(r.report_date) = 2023 AND YEAR(c.record_date) = 2023;
SELECT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND npl.npl_ratio > 2;
SELECT liquidity_coverage_ratio, net_stable_funding_ratio FROM liquidity_ratio WHERE report_date = '2023-05-01';
SELECT institution_id, SUM(non_interest_income) FROM income_statement WHERE report_date = '2023-03-01' GROUP BY institution_id;
SELECT * FROM risk_exposure WHERE report_date = '2023-02-01';
SELECT COUNT(*) FROM related_party_transactions WHERE YEAR(transaction_date) = 2023 AND transaction_amount > 500000000 AND transaction_type = '资产转移';
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN related_party_transactions rpt ON fi.institution_id = rpt.institution_id WHERE rr.report_date = '2023-08-01' AND rr.approval_status = '需修改' AND rpt.transaction_amount > 5000000;
SELECT DISTINCT rr.institution_id FROM regulatory_reports rr JOIN income_statement is ON rr.institution_id = is.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '已拒绝' AND YEAR(rr.report_date) = 2023 AND YEAR(is.report_date) = 2023 AND QUARTER(is.report_date) = 1 AND is.net_profit > 10000000;
SELECT institution_id FROM regulatory_reports WHERE report_date = '2023-07-01' AND approval_status = '需要修改';
SELECT * FROM compliance_records WHERE compliance_type = '内控管理';
SELECT DISTINCT r.institution_id FROM regulatory_reports r JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.report_date = '2023-10-01' AND r.report_type = '半年度报告' AND r.approval_status = '待审核' AND n.npl_ratio > 1;
SELECT institution_type, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY npl_ratio) AS median_npl_ratio FROM financial_institution_info JOIN non_performing_loans ON financial_institution_info.institution_id = non_performing_loans.institution_id GROUP BY institution_type;
SELECT * FROM capital_adequacy_ratio WHERE core_tier_1_ratio < 8;
SELECT institution_name FROM regulatory_reports JOIN financial_institution_info ON regulatory_reports.institution_id = financial_institution_info.institution_id WHERE YEAR(report_date) = 2023 AND report_type = '半年度报告' AND approval_status = '待审核' AND registered_capital > 50000000;
SELECT institution_name FROM financial_institution_info WHERE institution_id IN (SELECT institution_id FROM related_party_transactions WHERE transaction_date = '2023-06-01' AND transaction_amount > 5000000 AND approval_status = '待审批');
SELECT fi.institution_name FROM financial_institution_info fi JOIN liquidity_ratio lr ON fi.institution_id = lr.institution_id WHERE lr.loan_to_deposit_ratio > (SELECT AVG(loan_to_deposit_ratio) FROM liquidity_ratio) AND lr.liquidity_coverage_ratio < (SELECT AVG(liquidity_coverage_ratio) FROM liquidity_ratio);
SELECT fi.institution_name FROM income_statement i JOIN financial_institution_info fi ON i.institution_id = fi.institution_id WHERE i.report_date = '2023-04-01' AND i.net_interest_income > 1000000000;
SELECT DISTINCT rr.institution_id FROM regulatory_reports rr JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '需修改' AND YEAR(rr.report_date) = 2023 AND npl.npl_ratio > 1 AND YEAR(npl.report_date) = 2023;
SELECT fi.institution_name FROM financial_institution_info fi JOIN risk_exposure re ON fi.institution_id = re.institution_id JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id WHERE re.report_date = '2023-10-01' AND re.total_risk_exposure > 300000000000 AND car.core_tier_1_ratio < 8;
SELECT COUNT(DISTINCT institution_id) FROM risk_exposure WHERE report_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND ABS((market_risk_exposure - credit_risk_exposure) / credit_risk_exposure) > 0.1;
SELECT institution_id FROM balance_sheet WHERE loans_and_advances > deposits;
SELECT fi.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id WHERE YEAR(rr.report_date) = 2023 AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝';
SELECT fi.institution_name FROM income_statement i JOIN financial_institution_info fi ON i.institution_id = fi.institution_id WHERE i.report_date = '2023-04-01' AND i.non_interest_income > 200000000;
SELECT institution_id FROM related_party_transactions WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY institution_id ORDER BY COUNT(transaction_id) DESC LIMIT 1;
SELECT institution_name, credit_risk_exposure / total_risk_exposure AS ratio FROM risk_exposure JOIN financial_institution_info ON risk_exposure.institution_id = financial_institution_info.institution_id ORDER BY ratio DESC LIMIT 1;
SELECT DISTINCT institution_name FROM financial_institution_info WHERE institution_id IN (SELECT institution_id FROM risk_exposure WHERE YEAR(report_date) = 2023);
SELECT institution_name FROM financial_institution_info WHERE institution_id IN (SELECT institution_id FROM capital_adequacy_ratio WHERE risk_weighted_assets > 120000000000 AND report_date = '2023-11');
SELECT severity, resolution_date FROM compliance_records;
SELECT COUNT(DISTINCT institution_id) FROM liquidity_ratio WHERE liquidity_coverage_ratio > 100 AND net_stable_funding_ratio > 100;
SELECT AVG(npl.npl_ratio) AS avg_npl_ratio, AVG(npl.provision_coverage_ratio) AS avg_provision_coverage_ratio, AVG(car.total_car) AS avg_total_car FROM (SELECT institution_id FROM balance_sheet ORDER BY total_assets DESC LIMIT 1000) AS top_assets JOIN non_performing_loans AS npl ON top_assets.institution_id = npl.institution_id JOIN capital_adequacy_ratio AS car ON top_assets.institution_id = car.institution_id;
SELECT institution_name FROM financial_institution_info JOIN regulatory_reports ON financial_institution_info.institution_id = regulatory_reports.institution_id JOIN non_performing_loans ON financial_institution_info.institution_id = non_performing_loans.institution_id WHERE regulatory_reports.report_date = '2023-07-01' AND regulatory_reports.report_type = '季度报告' AND non_performing_loans.npl_ratio > 1.5;
SELECT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE rr.report_date = '2024-01-01' AND rr.report_type = '年度报告' AND rr.approval_status = '已批准' AND npl.npl_ratio > 1;
SELECT lr.loan_to_deposit_ratio, bs.total_assets, bs.total_liabilities, bs.total_equity, bs.cash_and_equivalents, bs.loans_and_advances, bs.deposits FROM liquidity_ratio lr JOIN balance_sheet bs ON lr.institution_id = bs.institution_id AND lr.report_date = bs.report_date;
SELECT institution_name FROM financial_institution_info WHERE institution_id IN (SELECT institution_id FROM non_performing_loans WHERE npl_ratio > 1.5 AND report_date = '2023-12-01');
SELECT institution_id FROM liquidity_ratio WHERE loan_to_deposit_ratio > 75 AND liquidity_coverage_ratio < 120;
SELECT * FROM regulatory_reports WHERE report_type = '半年度报告';
SELECT record_id FROM compliance_records ORDER BY (resolution_date - record_date) DESC LIMIT 5;
SELECT DISTINCT r.institution_id FROM regulatory_reports r JOIN non_performing_loans n ON r.institution_id = n.institution_id WHERE r.report_type = '季度报告' AND r.approval_status = '已拒绝' AND r.report_date >= '2023-01-01' AND r.report_date <= '2023-12-31' AND n.npl_ratio > 2 AND n.report_date >= '2023-01-01' AND n.report_date <= '2023-12-31';
SELECT fi.institution_name, rr.report_id, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '已拒绝' AND YEAR(rr.report_date) = 2023;
SELECT institution_id FROM liquidity_ratio WHERE loan_to_deposit_ratio BETWEEN 60 AND 80;
SELECT institution_id FROM capital_adequacy_ratio ORDER BY ABS(core_tier_1_ratio - total_car) LIMIT 1;
SELECT bs.total_liabilities, fi.registered_capital FROM balance_sheet bs JOIN financial_institution_info fi ON bs.institution_id = fi.institution_id WHERE YEAR(bs.report_date) = 2024;
SELECT CORR(re.credit_risk_exposure, npl.npl_ratio) AS correlation FROM risk_exposure re JOIN non_performing_loans npl ON re.institution_id = npl.institution_id AND re.report_date = npl.report_date;
SELECT institution_name FROM financial_institution_info WHERE institution_id IN (SELECT r.institution_id FROM regulatory_reports r JOIN capital_adequacy_ratio c ON r.institution_id = c.institution_id WHERE YEAR(r.report_date) = 2023 AND r.approval_status = '已批准' AND c.total_car > 10);
SELECT npl_ratio, institution_id FROM non_performing_loans WHERE report_date = '2023-06-01';
SELECT institution_name FROM financial_institution_info WHERE institution_id IN (SELECT institution_id FROM risk_exposure WHERE report_date = '2023-05' AND market_risk_exposure > 20000000000);
SELECT fi.institution_name, rr.report_date, rr.approval_status FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id WHERE YEAR(rr.report_date) = 2024 AND rr.report_type = '年度报告' AND rr.approval_status = '已批准';
SELECT * FROM capital_adequacy_ratio WHERE report_date = '2023-11-01';
SELECT lr.net_stable_funding_ratio, car.core_tier_1_ratio FROM liquidity_ratio lr JOIN capital_adequacy_ratio car ON lr.institution_id = car.institution_id AND lr.report_date = car.report_date;
SELECT fi.institution_name, rr.report_date FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id WHERE rr.report_type = '年度报告' AND rr.approval_status = '已批准' AND YEAR(rr.report_date) = 2024;
SELECT * FROM capital_adequacy_ratio WHERE report_date = '2023-11-01';
SELECT * FROM capital_adequacy_ratio WHERE institution_id = 2162;
SELECT total_loans, npl_amount FROM non_performing_loans WHERE YEAR(report_date) = 2023;
SELECT re.market_risk_exposure / re.total_risk_exposure AS market_risk_ratio, is.non_interest_income / (is.net_interest_income + is.non_interest_income) AS transaction_income_ratio FROM risk_exposure re JOIN income_statement is ON re.institution_id = is.institution_id AND re.report_date = is.report_date;
SELECT institution_id FROM non_performing_loans ORDER BY provision_coverage_ratio DESC LIMIT 1;
SELECT lr.institution_id, lr.report_date, lr.liquidity_coverage_ratio, lr.net_stable_funding_ratio, lr.loan_to_deposit_ratio, car.core_tier_1_ratio, car.tier_1_ratio, car.total_car FROM liquidity_ratio lr JOIN capital_adequacy_ratio car ON lr.institution_id = car.institution_id AND lr.report_date = car.report_date WHERE YEAR(lr.report_date) = 2023;
SELECT fi.institution_name FROM income_statement i JOIN financial_institution_info fi ON i.institution_id = fi.institution_id WHERE i.report_date = '2023-04-01' GROUP BY fi.institution_name ORDER BY SUM(i.operating_expenses) DESC LIMIT 1;
SELECT institution_id, non_interest_income, net_profit FROM income_statement WHERE YEAR(report_date) = 2023;
SELECT DISTINCT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '已拒绝' AND npl.npl_ratio > 2 AND YEAR(rr.report_date) = 2023 AND YEAR(npl.report_date) = 2023;
SELECT institution_id FROM capital_adequacy_ratio WHERE report_date = '2023-12-01' AND core_tier_1_ratio < 9;
SELECT institution_name FROM financial_institution_info WHERE institution_id IN (SELECT institution_id FROM liquidity_ratio WHERE liquidity_coverage_ratio < 110 AND report_date >= '2023-11-01' AND report_date < '2023-12-01');
SELECT re.market_risk_exposure, npl.provision_coverage_ratio FROM risk_exposure re JOIN non_performing_loans npl ON re.institution_id = npl.institution_id AND re.report_date = npl.report_date WHERE re.report_date = '2023-03-01';
SELECT legal_representative, contact_number FROM financial_institution_info;
SELECT institution_id FROM related_party_transactions WHERE YEAR(transaction_date) = 2023 GROUP BY institution_id ORDER BY COUNT(DISTINCT related_party) DESC LIMIT 1;
SELECT address FROM financial_institution_info JOIN liquidity_ratio ON financial_institution_info.institution_id = liquidity_ratio.institution_id GROUP BY address ORDER BY AVG(liquidity_coverage_ratio) DESC LIMIT 1;
SELECT QUARTER(report_date) AS quarter, AVG(LENGTH(comments)) AS avg_word_count FROM regulatory_reports WHERE YEAR(report_date) = 2023 GROUP BY QUARTER(report_date);
SELECT f.institution_name, n.provision_coverage_ratio FROM financial_institution_info f JOIN non_performing_loans n ON f.institution_id = n.institution_id ORDER BY n.provision_coverage_ratio DESC LIMIT 1;
SELECT legal_representative, contact_number FROM financial_institution_info;
SELECT fi.institution_name, rr.report_date, rr.submission_date FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id WHERE YEAR(rr.report_date) = 2023 AND rr.report_type = '季度报告' AND rr.approval_status = '需修改';
SELECT fi.institution_name FROM financial_institution_info fi JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id WHERE car.total_car > 12 AND npl.npl_ratio < 2;
SELECT institution_name FROM financial_institution_info JOIN liquidity_ratio ON financial_institution_info.institution_id = liquidity_ratio.institution_id ORDER BY (net_stable_funding_ratio + loan_to_deposit_ratio) DESC LIMIT 10;
SELECT institution_id FROM risk_exposure WHERE YEAR(report_date) = 2023 AND credit_risk_exposure > 50000000000;
SELECT institution_name FROM financial_institution_info WHERE institution_id IN (SELECT institution_id FROM non_performing_loans WHERE npl_ratio > 2);
SELECT * FROM capital_adequacy_ratio WHERE report_date = '2023-05-01';
SELECT institution_id, severity FROM compliance_records WHERE YEAR(record_date) = 2023;
SELECT f.institution_name, r.report_date, r.comments FROM regulatory_reports r JOIN financial_institution_info f ON r.institution_id = f.institution_id WHERE r.report_type = '季度报告' AND r.approval_status = '已拒绝' AND YEAR(r.report_date) = 2023;
SELECT institution_id, related_party, transaction_type, transaction_amount FROM related_party_transactions;
SELECT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN related_party_transactions rpt ON fi.institution_id = rpt.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' GROUP BY fi.institution_name HAVING SUM(rpt.transaction_amount) > 10000000;
SELECT fi.institution_name, rr.report_id, rr.report_date, rr.comments FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id WHERE YEAR(rr.report_date) = 2023 AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝';
SELECT fi.institution_name, rr.report_type, rr.approval_status, rr.submission_date FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id WHERE YEAR(rr.report_date) = 2023 AND rr.report_type = '季度报告' AND rr.approval_status = '已拒绝';
SELECT npl.npl_ratio, fi.address FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id;
SELECT report_type, approval_status FROM regulatory_reports WHERE YEAR(report_date) = 2024;
SELECT institution_type, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY liquidity_coverage_ratio) AS median_liquidity_coverage_ratio FROM financial_institution_info JOIN liquidity_ratio ON financial_institution_info.institution_id = liquidity_ratio.institution_id GROUP BY institution_type;
SELECT DISTINCT rr.institution_id FROM regulatory_reports rr JOIN capital_adequacy_ratio car ON rr.institution_id = car.institution_id WHERE rr.report_type = '季度报告' AND rr.approval_status = '已拒绝' AND YEAR(rr.report_date) = 2023 AND car.report_date = '2023-06-01' AND car.core_tier_1_ratio < 8;
SELECT AVG(npl_ratio) FROM non_performing_loans WHERE institution_id IN (SELECT institution_id FROM capital_adequacy_ratio WHERE report_date BETWEEN '2023-07-01' AND '2023-09-30' ORDER BY total_car DESC LIMIT 10) AND report_date BETWEEN '2023-07-01' AND '2023-09-30';
SELECT institution_name FROM compliance_records JOIN financial_institution_info ON compliance_records.institution_id = financial_institution_info.institution_id WHERE status = '未解决' GROUP BY institution_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT * FROM related_party_transactions WHERE YEAR(transaction_date) = 2023 AND transaction_amount > 5000000;
SELECT institution_id FROM risk_exposure WHERE market_risk_exposure / total_risk_exposure > 0.25;
SELECT fi.institution_name, rpt.transaction_amount, rpt.transaction_type FROM related_party_transactions rpt JOIN financial_institution_info fi ON rpt.institution_id = fi.institution_id WHERE rpt.transaction_date >= '2023-08-01' AND rpt.transaction_date <= '2023-08-31' AND rpt.transaction_amount > 5000000 AND rpt.approval_status = '待审批';
SELECT DISTINCT r.institution_id FROM regulatory_reports r JOIN income_statement i ON r.institution_id = i.institution_id WHERE r.report_type = '季度报告' AND r.approval_status = '需修改' AND YEAR(r.report_date) = 2023 AND YEAR(i.report_date) = 2023 AND QUARTER(i.report_date) = 1 AND i.net_profit > 50000000;
SELECT DISTINCT n.institution_id FROM non_performing_loans n JOIN capital_adequacy_ratio c ON n.institution_id = c.institution_id WHERE n.npl_ratio > (SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY npl_ratio) FROM non_performing_loans) AND n.provision_coverage_ratio > (SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY provision_coverage_ratio) FROM non_performing_loans) AND c.total_car > (SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY total_car) FROM capital_adequacy_ratio);
SELECT related_party FROM related_party_transactions ORDER BY transaction_amount DESC LIMIT 1;
SELECT fi.institution_name FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id WHERE rr.report_date = '2023-10-01' AND rr.approval_status = '待审批';
SELECT institution_id FROM risk_exposure WHERE report_date = '2023-05-01' AND total_risk_exposure > 15000000000;
SELECT institution_name FROM financial_institution_info WHERE institution_id IN (SELECT institution_id FROM regulatory_reports WHERE report_type = '季度报告' AND approval_status = '需修改' AND YEAR(report_date) = 2023) AND registered_capital > 50000000;
SELECT market_risk_exposure, credit_risk_exposure FROM risk_exposure WHERE report_date >= '2023-11-01' AND report_date < '2023-12-01';
SELECT institution_id, total_risk_exposure, credit_risk_exposure FROM risk_exposure WHERE report_date = '2023-09-01';
SELECT institution_name FROM financial_institution_info WHERE institution_id IN (SELECT institution_id FROM related_party_transactions WHERE transaction_date >= '2023-05-01' AND transaction_date <= '2023-05-31' AND transaction_amount > 5000000 AND approval_status = '已批准');
SELECT institution_id FROM capital_adequacy_ratio WHERE risk_weighted_assets > 8000;
SELECT COUNT(DISTINCT fi.institution_id) FROM financial_institution_info fi JOIN balance_sheet bs ON fi.institution_id = bs.institution_id WHERE fi.registered_capital < 1000000000 AND bs.total_assets > 100000000000;
SELECT DISTINCT fii.institution_name FROM capital_adequacy_ratio car JOIN non_performing_loans npl ON car.institution_id = npl.institution_id JOIN financial_institution_info fii ON car.institution_id = fii.institution_id WHERE car.total_car < 12 AND npl.npl_ratio > 2 AND car.report_date BETWEEN '2023-07-01' AND '2023-09-30' AND npl.report_date BETWEEN '2023-07-01' AND '2023-09-30';
SELECT report_date, approval_status FROM regulatory_reports;
SELECT institution_id FROM balance_sheet WHERE YEAR(report_date) = 2024 ORDER BY total_assets DESC LIMIT 1;
SELECT compliance_type FROM compliance_records WHERE severity = '严重' AND record_date >= '2023-01-01' AND record_date < '2024-01-01' GROUP BY compliance_type ORDER BY AVG(resolution_date - record_date) DESC LIMIT 1;
SELECT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN related_party_transactions rpt ON fi.institution_id = rpt.institution_id WHERE rr.report_date = '2023-10-01' AND rr.report_type = '半年度报告' AND rpt.transaction_amount > 5000000;
SELECT AVG(non_interest_income) FROM income_statement WHERE report_date = '2023-01-01';
SELECT npl_amount FROM non_performing_loans WHERE report_date = '2023-06';
SELECT institution_id FROM non_performing_loans WHERE provision_coverage_ratio < 200;
SELECT AVG(car.total_car) FROM (SELECT i.institution_id FROM income_statement i WHERE i.report_date >= '2023-10-01' AND i.report_date <= '2023-12-31' ORDER BY i.net_profit DESC LIMIT 10) top10 JOIN capital_adequacy_ratio car ON top10.institution_id = car.institution_id WHERE car.report_date >= '2023-10-01' AND car.report_date <= '2023-12-31';
SELECT institution_id FROM compliance_records WHERE description LIKE '%客户投诉%';
SELECT institution_id, net_interest_income, non_interest_income FROM income_statement WHERE report_date = '2023-07-01';
SELECT DISTINCT rr.institution_id FROM regulatory_reports rr JOIN non_performing_loans npl ON rr.institution_id = npl.institution_id AND YEAR(rr.report_date) = 2023 AND YEAR(npl.report_date) = 2023 WHERE rr.report_type = '季度报告' AND rr.approval_status = '已拒绝' AND npl.npl_ratio > 1;
SELECT npl_amount, provision_coverage_ratio FROM non_performing_loans WHERE report_date = '2023-03-01';
SELECT b.total_assets, c.total_car, l.liquidity_coverage_ratio FROM balance_sheet b JOIN capital_adequacy_ratio c ON b.institution_id = c.institution_id AND b.report_date = c.report_date JOIN liquidity_ratio l ON b.institution_id = l.institution_id AND b.report_date = l.report_date;
SELECT institution_id FROM regulatory_reports WHERE YEAR(report_date) = 2023 AND approval_status = '已拒绝';
SELECT COUNT(DISTINCT n1.institution_id) FROM non_performing_loans n1 JOIN non_performing_loans n2 ON n1.institution_id = n2.institution_id AND YEAR(n1.report_date) = YEAR(n2.report_date) - 1 JOIN capital_adequacy_ratio c1 ON n1.institution_id = c1.institution_id JOIN capital_adequacy_ratio c2 ON c1.institution_id = c2.institution_id AND YEAR(c1.report_date) = YEAR(c2.report_date) - 1 WHERE (n1.total_loans - n2.total_loans) / n2.total_loans > 0.2 AND c1.total_car > c2.total_car;
SELECT fi.institution_name FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id WHERE rr.report_date BETWEEN '2023-07-01' AND '2023-09-30' AND rr.report_type = '季度报告' AND rr.approval_status = '需修改';
SELECT institution_name FROM financial_institution_info JOIN regulatory_reports ON financial_institution_info.institution_id = regulatory_reports.institution_id JOIN non_performing_loans ON financial_institution_info.institution_id = non_performing_loans.institution_id WHERE regulatory_reports.report_date = '2023-07-01' AND regulatory_reports.report_type = '季度报告' AND non_performing_loans.npl_ratio > 1;
SELECT DISTINCT fii.institution_name FROM related_party_transactions rpt JOIN financial_institution_info fii ON rpt.institution_id = fii.institution_id WHERE rpt.transaction_date >= '2023-10-01' AND rpt.transaction_date < '2023-11-01';
SELECT fi.institution_name FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id JOIN non_performing_loans npl ON fi.institution_id = npl.institution_id AND rr.report_date = npl.report_date WHERE rr.report_date = '2023-07-01' AND rr.report_type = '季度报告' AND npl.npl_ratio > 2;
SELECT c.report_date, c.total_car, r.total_risk_exposure FROM capital_adequacy_ratio c JOIN risk_exposure r ON c.institution_id = r.institution_id AND c.report_date = r.report_date ORDER BY c.report_date;
SELECT l.institution_id, l.liquidity_coverage_ratio, r.approval_status FROM liquidity_ratio l JOIN regulatory_reports r ON l.institution_id = r.institution_id AND l.report_date = r.report_date WHERE YEAR(l.report_date) = 2023 GROUP BY l.institution_id;
SELECT fi.institution_name, rr.report_date, rr.approval_status FROM financial_institution_info fi JOIN regulatory_reports rr ON fi.institution_id = rr.institution_id WHERE rr.report_date > '2023-07-01' AND rr.approval_status = '需修改';
SELECT COUNT(*) FROM regulatory_reports WHERE report_date BETWEEN '2023-04-01' AND '2023-06-30' AND approval_status = '拒绝';
SELECT credit_risk_exposure, market_risk_exposure, operational_risk_exposure, total_risk_exposure FROM risk_exposure WHERE report_date = '2023-10-01';
SELECT fii.institution_name, (MAX(bs.loans_and_advances) - MIN(bs.loans_and_advances)) / MIN(bs.loans_and_advances) * 100 AS growth_rate FROM balance_sheet bs JOIN financial_institution_info fii ON bs.institution_id = fii.institution_id GROUP BY bs.institution_id ORDER BY growth_rate DESC LIMIT 1;
SELECT fi.institution_name FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id WHERE YEAR(re.report_date) = 2023 AND (re.market_risk_exposure / re.total_risk_exposure) > 0.15;
SELECT fi.institution_name, rr.report_type, rr.submission_date FROM regulatory_reports rr JOIN financial_institution_info fi ON rr.institution_id = fi.institution_id WHERE YEAR(rr.report_date) = 2023 AND rr.approval_status = '需修改' ORDER BY rr.submission_date DESC;
SELECT DISTINCT r.institution_id FROM regulatory_reports r JOIN related_party_transactions t ON r.institution_id = t.institution_id WHERE YEAR(r.report_date) = 2023 AND r.report_type = '季度报告' AND r.approval_status = '需修改' AND YEAR(t.transaction_date) = 2023 AND t.transaction_amount > 10000000;
SELECT lr.liquidity_coverage_ratio, fii.institution_name FROM liquidity_ratio lr JOIN financial_institution_info fii ON lr.institution_id = fii.institution_id WHERE fii.institution_name LIKE '%国际%' OR fii.institution_type LIKE '%国际%';
SELECT institution_name FROM financial_institution_info WHERE institution_id IN (SELECT institution_id FROM related_party_transactions WHERE transaction_date >= '2023-10-01' AND transaction_date <= '2023-10-31' AND transaction_amount > 10000000);
SELECT fi.institution_name FROM related_party_transactions rpt JOIN financial_institution_info fi ON rpt.institution_id = fi.institution_id WHERE rpt.transaction_date >= '2023-01-01' GROUP BY fi.institution_name ORDER BY SUM(CASE WHEN rpt.approval_status = '未通过' THEN 1 ELSE 0 END) / COUNT(*) DESC LIMIT 1;
SELECT fi.institution_name FROM risk_exposure re JOIN financial_institution_info fi ON re.institution_id = fi.institution_id WHERE YEAR(re.report_date) = 2023 ORDER BY (re.operational_risk_exposure / re.total_risk_exposure) DESC LIMIT 1;
SELECT DISTINCT institution_id FROM regulatory_reports WHERE YEAR(report_date) = 2023 AND comments IS NOT NULL;
SELECT npl.npl_amount, fi.institution_name FROM non_performing_loans npl JOIN financial_institution_info fi ON npl.institution_id = fi.institution_id WHERE npl.report_date = '2023-03-01';
SELECT institution_name FROM financial_institution_info WHERE legal_representative LIKE '王%';
SELECT fi.institution_name FROM financial_institution_info fi JOIN capital_adequacy_ratio car ON fi.institution_id = car.institution_id WHERE car.report_date BETWEEN '2023-01-01' AND '2023-03-31' AND car.total_car > 10;