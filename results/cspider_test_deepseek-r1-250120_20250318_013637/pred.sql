SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Min_Age, MAX(Age) AS Max_Age FROM singer WHERE Country = 'France';
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Min_Age, MAX(Age) AS Max_Age FROM singer WHERE Country = 'France';
SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);
SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT Country, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Country;
SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country;
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM stadium;
SELECT AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM stadium;
SELECT Name, Capacity FROM stadium ORDER BY (Average / Capacity) DESC LIMIT 1;
SELECT Name, Capacity FROM stadium ORDER BY (Average / Capacity) DESC LIMIT 1;
SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015');
SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015');
SELECT s.Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID, s.Name;
SELECT s.Stadium_ID, s.Name, COUNT(c.concert_ID) AS NumberOfConcerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID, s.Name;
SELECT Stadium.Name, Stadium.Capacity FROM stadium JOIN (SELECT CAST(concert.Stadium_ID AS INTEGER) AS Stadium_ID, COUNT(*) AS ConcertCount FROM concert WHERE concert.Year >= '2014' GROUP BY CAST(concert.Stadium_ID AS INTEGER)) AS ConcertStats ON Stadium.Stadium_ID = ConcertStats.Stadium_ID WHERE ConcertStats.ConcertCount = (SELECT MAX(ConcertCount) FROM (SELECT CAST(Stadium_ID AS INTEGER) AS Stadium_ID, COUNT(*) AS ConcertCount FROM concert WHERE Year >= '2014' GROUP BY CAST(Stadium_ID AS INTEGER)) AS MaxCount);
SELECT s.Name, s.Capacity FROM stadium s JOIN (SELECT CAST(c.Stadium_ID AS INTEGER) AS Stadium_ID, COUNT(*) AS concert_count FROM concert c WHERE c.Year > '2013' GROUP BY c.Stadium_ID) AS sub ON s.Stadium_ID = sub.Stadium_ID WHERE sub.concert_count = (SELECT MAX(concert_count) FROM (SELECT CAST(Stadium_ID AS INTEGER) AS Stadium_ID, COUNT(*) AS concert_count FROM concert WHERE Year > '2013' GROUP BY Stadium_ID));
SELECT Year FROM concert GROUP BY Year HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM concert GROUP BY Year) AS sub);
SELECT Year FROM concert GROUP BY Year HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM concert GROUP BY Year) AS subquery);
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT CAST(Stadium_ID AS INTEGER) FROM concert);
SELECT s.Name FROM stadium s LEFT JOIN concert c ON CAST(s.Stadium_ID AS TEXT) = c.Stadium_ID WHERE c.Stadium_ID IS NULL;
SELECT DISTINCT Country FROM singer WHERE Age > 40 OR Age < 30;
SELECT s.Name FROM stadium s WHERE s.Stadium_ID NOT IN ( SELECT DISTINCT c.Stadium_ID FROM concert c WHERE c.Year = '2014' );
SELECT s.Name FROM stadium s WHERE NOT EXISTS (SELECT 1 FROM concert c WHERE c.Stadium_ID = s.Stadium_ID AND c.Year = '2014');
SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS Singer_Count FROM concert c LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme;
SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS Singer_Count FROM concert c LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme;
SELECT Singer.Name, COUNT(singer_in_concert.concert_ID) AS Concert_Count FROM singer LEFT JOIN singer_in_concert ON singer.Singer_ID = CAST(singer_in_concert.Singer_ID AS INTEGER) GROUP BY singer.Singer_ID, Singer.Name;
SELECT s.Name, COUNT(sic.concert_ID) AS NumberOfConcerts FROM singer s LEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Singer_ID, s.Name;
SELECT s.Name FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID WHERE c.Year = '2014';
SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%You%';
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%ä½ %';
SELECT s.Name, s.Location FROM stadium s WHERE EXISTS ( SELECT 1 FROM concert c1 WHERE c1.Stadium_ID = s.Stadium_ID AND c1.Year = '2014' ) AND EXISTS ( SELECT 1 FROM concert c2 WHERE c2.Stadium_ID = s.Stadium_ID AND c2.Year = '2015' );
SELECT s.Name, s.Location FROM stadium s WHERE EXISTS ( SELECT 1 FROM concert c WHERE c.Stadium_ID = s.Stadium_ID AND c.Year = '2014' ) AND EXISTS ( SELECT 1 FROM concert c WHERE c.Stadium_ID = s.Stadium_ID AND c.Year = '2015' );
SELECT COUNT(*) FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium));
SELECT COUNT(*) FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium));
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT weight FROM Pets WHERE PetType = 'Dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'Dog');
SELECT p.weight FROM Pets p JOIN Has_Pet hp ON p.PetID = hp.PetID WHERE p.PetType = 'Dog' ORDER BY p.pet_age ASC LIMIT 1;
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT Student.StuID, COUNT(Has_Pet.PetID) AS NumberOfPets FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20 GROUP BY Student.StuID;
SELECT COUNT(*) AS TotalPets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20;
SELECT COUNT(*) AS Num_Dogs FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'Female' AND Pets.PetType = 'Dog';
SELECT COUNT(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'Female' AND Pets.PetType = 'Dog';
SELECT PetType, COUNT(PetID) AS Number FROM Pets GROUP BY PetType;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT S.Fname, S.LName FROM Student S WHERE EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE HP.StuID = S.StuID AND P.PetType = 'Cat') AND EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE HP.StuID = S.StuID AND P.PetType = 'Dog');
SELECT DISTINCT CONCAT(s.Fname, ' ', s.Lname) AS Name FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('Cat', 'Dog');
SELECT S.Fname, S.LName FROM Student S WHERE EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE HP.StuID = S.StuID AND P.PetType = 'Cat') AND EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE HP.StuID = S.StuID AND P.PetType = 'Dog');
SELECT S.Fname, S.LName FROM Student S WHERE EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE HP.StuID = S.StuID AND P.PetType = 'Cat') AND EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE HP.StuID = S.StuID AND P.PetType = 'Dog');
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'Cat');
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'Cat');
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'Cat');
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN ( SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'Cat' );
SELECT S.Fname, S.LName, S.Age FROM Student S WHERE EXISTS ( SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE HP.StuID = S.StuID AND P.PetType = 'Dog' ) AND NOT EXISTS ( SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE HP.StuID = S.StuID AND P.PetType = 'Cat' );
SELECT S.Fname, S.LName FROM Student S WHERE EXISTS ( SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE HP.StuID = S.StuID AND P.PetType = 'Dog' ) AND NOT EXISTS ( SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE HP.StuID = S.StuID AND P.PetType = 'Cat' );
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaxAge FROM Pets GROUP BY PetType;
SELECT PetType, AVG(pet_age) AS AvgAge, MAX(pet_age) AS MaxAge FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AvgWeight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AvgWeight FROM Pets GROUP BY PetType;
SELECT Fname, LName, Age FROM Student WHERE EXISTS (SELECT 1 FROM Has_Pet WHERE Student.StuID = Has_Pet.StuID);
SELECT DISTINCT S.Fname, S.LName, S.Age FROM Student S INNER JOIN Has_Pet HP ON S.StuID = HP.StuID;
SELECT Student.StuID FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.LName = 'Lin';
SELECT StuID FROM Student WHERE LName = 'Lin' AND EXISTS (SELECT 1 FROM Has_Pet WHERE Has_Pet.StuID = Student.StuID);
SELECT Has_Pet.StuID, COUNT(Has_Pet.PetID) AS PetCount FROM Has_Pet GROUP BY Has_Pet.StuID;
SELECT Student.StuID, COUNT(Has_Pet.PetID) AS NumberOfPets FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID;
SELECT Student.Fname, Student.Lname, Student.Sex FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 1;
SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1);
SELECT DISTINCT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'Cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'Cat' AND Pets.pet_age = 3;
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT COUNT(*) FROM continents;
SELECT COUNT(DISTINCT Continent) FROM continents;
SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumberOfCountries FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumberOfCountries FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(CountryId) FROM countries;
SELECT cm.Maker, cm.Id, COUNT(ml.ModelId) AS NumberOfModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS ModelsProduced FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY CAST(cars_data.Horsepower AS INTEGER) ASC LIMIT 1;
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE CAST(cars_data.Horsepower AS INTEGER) = ( SELECT MIN(CAST(Horsepower AS INTEGER)) FROM cars_data );
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT DISTINCT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT DISTINCT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT cm.Maker, cd.Year FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Year = (SELECT MIN(Year) FROM cars_data);
SELECT cm.Maker, MIN(cd.Year) AS FirstYear FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id GROUP BY cm.Maker ORDER BY FirstYear ASC LIMIT 1;
SELECT DISTINCT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Year > 1980;
SELECT DISTINCT cn.Make FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980;
SELECT continents.Continent, COUNT(car_makers.Id) AS NumberOfMakers FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
SELECT c.Continent, COUNT(cm.Id) AS NumberOfMakers FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent LEFT JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;
SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;
SELECT cm.FullName, COUNT(ml.ModelId) AS NumberOfModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;
SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS NumberOfModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'Camaro';
SELECT cars_data.Accelerate FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_names.Make = 'Camaro';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States';
SELECT COUNT(*) AS NumberOfModels FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker WHERE countries.CountryName = 'USA';
SELECT AVG(CAST(MPG AS FLOAT)) AS Average_MPG FROM cars_data WHERE Cylinders = 4;
SELECT AVG(CAST(MPG AS REAL)) FROM cars_data WHERE Cylinders = 4;
SELECT MIN(cd.Weight) FROM cars_data cd WHERE cd.Year = 1974 AND cd.Cylinders = 8;
SELECT MIN(cd.Weight) FROM cars_data cd WHERE cd.Year = 1974 AND cd.Cylinders = 8;
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;
SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker;
SELECT DISTINCT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT countries.CountryId, countries.CountryName FROM countries WHERE countries.CountryId IN (SELECT DISTINCT car_makers.Country FROM car_makers);
SELECT COUNT(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150;
SELECT COUNT(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150;
SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year ORDER BY Year;
SELECT `Year`, AVG(Weight) AS Average_Weight FROM cars_data GROUP BY `Year` ORDER BY `Year`;
SELECT c.CountryName FROM continents AS cont JOIN countries AS c ON cont.ContId = c.Continent JOIN car_makers AS cm ON c.CountryId = cm.Country WHERE cont.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3;
SELECT c.CountryName FROM countries c JOIN continents ct ON c.Continent = ct.ContId JOIN car_makers cm ON c.CountryId = cm.Country WHERE ct.Continent = 'Europe' GROUP BY c.CountryId HAVING COUNT(DISTINCT cm.Id) >= 3;
SELECT cm.Maker, ml.Model, CAST(cd.Horsepower AS INTEGER) AS Horsepower FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Cylinders = 3 ORDER BY Horsepower DESC LIMIT 1;
SELECT cm.Maker, CAST(cd.Horsepower AS INTEGER) AS MaxHorsepower FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Cylinders = 3 AND CAST(cd.Horsepower AS INTEGER) = ( SELECT MAX(CAST(Horsepower AS INTEGER)) FROM cars_data WHERE Cylinders = 3 ) LIMIT 1;
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE CAST(cars_data.MPG AS REAL) = (SELECT MAX(CAST(MPG AS REAL)) FROM cars_data);
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY CAST(cars_data.MPG AS REAL) DESC LIMIT 1;
SELECT AVG(CAST(Horsepower AS NUMERIC)) FROM cars_data WHERE Year < 1980;
SELECT AVG(CAST(cars_data.Horsepower AS FLOAT)) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year < 1980;
SELECT AVG(cars_data.Edispl) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'Geely';
SELECT AVG(cars_data.Edispl) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'Geely';
SELECT Cylinders, MAX(Accelerate) AS MaxAcceleration FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) AS MaxAcceleration FROM cars_data GROUP BY Cylinders;
SELECT model_list.Model, COUNT(car_names.Make) AS VersionCount FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.Model ORDER BY VersionCount DESC LIMIT 1;
SELECT Model FROM car_names GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'FAW';
SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'Faw';
SELECT cm.Id, cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName HAVING COUNT(ml.ModelId) > 3;
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.ModelId) > 3;
SELECT car_names.Make FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'SAIC' UNION SELECT car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight > 3500;
SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_makers.FullName = 'SAIC' UNION SELECT DISTINCT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight > 3500;
SELECT DISTINCT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000;
SELECT Year FROM cars_data GROUP BY Year HAVING SUM(Weight < 4000) > 0 AND SUM(Weight > 3000) > 0;
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MIN(Accelerate) FROM cars_data);
SELECT cars_data.Cylinders FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'Geely' ORDER BY cars_data.Accelerate ASC LIMIT 1;
SELECT cars_data.Cylinders FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'Geely' ORDER BY cars_data.Accelerate ASC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data WHERE CAST(Horsepower AS INTEGER) = (SELECT MAX(CAST(Horsepower AS INTEGER)) FROM cars_data));
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data WHERE CAST(Horsepower AS INTEGER) = (SELECT MAX(CAST(Horsepower AS INTEGER)) FROM cars_data));
SELECT COUNT(*) FROM (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 2) AS Subquery;
SELECT COUNT(*) FROM (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) > 2) AS SubQuery;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 4 AND CAST(cars_data.Horsepower AS INTEGER) = (SELECT MAX(CAST(Horsepower AS INTEGER)) FROM cars_data WHERE Cylinders = 4);
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 ORDER BY CAST(cars_data.Horsepower AS INTEGER) DESC LIMIT 1;
SELECT DISTINCT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE CAST(cd.Horsepower AS INTEGER) > (SELECT MIN(CAST(Horsepower AS INTEGER)) FROM cars_data) AND cd.Cylinders <= 3;
SELECT DISTINCT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders < 4 AND CAST(cd.Horsepower AS INTEGER) <> (SELECT MIN(CAST(Horsepower AS INTEGER)) FROM cars_data);
SELECT MAX(CAST(MPG AS REAL)) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(CAST(MPG AS FLOAT)) FROM cars_data WHERE Year < 1980 OR Cylinders = 8;
SELECT DISTINCT car_names.Make FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'GAC';
SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker != 'GAC' AND cars_data.Weight < 3500;
SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Country IS NULL;
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NULL;
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(DISTINCT cn.Make) >= 3;
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(DISTINCT cn.Make) > 3;
SELECT countries.CountryId, countries.CountryName FROM countries WHERE countries.CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3) OR countries.CountryId IN (SELECT car_makers.Country FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE model_list.Model = 'Roewe');
SELECT c.CountryId, c.CountryName FROM countries c WHERE EXISTS ( SELECT 1 FROM car_makers cm WHERE cm.Country = c.CountryId GROUP BY cm.Country HAVING COUNT(cm.Id) > 3 ) OR EXISTS ( SELECT 1 FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Country = c.CountryId AND ml.Model = 'Roewe' );
SELECT Country FROM airlines WHERE Airline = 'Shenzhen Airlines';
SELECT Country FROM airlines WHERE Airline = 'Shenzhen Airlines';
SELECT Abbreviation FROM airlines WHERE Airline = 'Shenzhen Airlines';
SELECT Abbreviation FROM airlines WHERE Airline = 'Shenzhen Airlines';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'United States';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'United States';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Lhasa';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Lhasa';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(uid) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE Country = 'United States';
SELECT COUNT(*) FROM airlines WHERE Country = 'United States';
SELECT City, Country FROM airports WHERE AirportName = 'Eastern';
SELECT City, Country FROM airports WHERE AirportName = 'Eastern';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Harbin';
SELECT AirportName FROM airports WHERE City = 'Harbin';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Changsha';
SELECT COUNT(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Changsha');
SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Tianjin';
SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Tianjin';
SELECT COUNT(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Harbin');
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Harbin';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Harbin';
SELECT COUNT(*) AS NumberOfFlights FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Harbin';
SELECT COUNT(*) FROM flights f JOIN airports src ON f.SourceAirport = src.AirportCode JOIN airports dest ON f.DestAirport = dest.AirportCode WHERE src.City = 'Harbin' AND dest.City = 'Xi''an';
SELECT COUNT(*) FROM flights f JOIN airports src ON f.SourceAirport = src.AirportCode JOIN airports dest ON f.DestAirport = dest.AirportCode WHERE src.City = 'Harbin' AND dest.City = 'Xi''an';
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'Shenzhen Airlines');
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'Shenzhen Airlines');
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'Southern Airlines' AND airports.AirportName = 'Hongqiao';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'Southern Airlines' AND airports.AirportName = 'Hongqiao Airport';
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'China Southern Airlines') AND SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Pudong');
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'China Southern Airlines' AND airports.AirportName LIKE '%Pudong%';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'Southern Airlines' AND airports.City = 'Harbin';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'Southern Airlines' AND airports.City = 'Harbin';
SELECT a.City, COUNT(*) AS NumberOfFlights FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode GROUP BY a.City ORDER BY NumberOfFlights DESC LIMIT 1;
SELECT airports.City, airports.Country, COUNT(*) AS DestinationCount FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City, airports.Country ORDER BY DestinationCount DESC LIMIT 1;
SELECT airports.City, COUNT(*) AS NumberOfFlights FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY NumberOfFlights DESC LIMIT 1;
SELECT a.City FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY a.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AirportCode FROM ( SELECT AirportCode, COUNT(*) AS TotalFlights FROM ( SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport FROM flights ) Combined GROUP BY AirportCode ORDER BY TotalFlights DESC LIMIT 1 ) MaxFlights;
SELECT AirportCode FROM ( SELECT AirportCode, COUNT(*) AS TotalFlights FROM ( SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport FROM flights ) Combined GROUP BY AirportCode ORDER BY TotalFlights DESC LIMIT 1 ) AS MaxFlights;
SELECT a.AirportCode FROM airports a LEFT JOIN ( SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport FROM flights ) f ON a.AirportCode = f.AirportCode GROUP BY a.AirportCode ORDER BY COUNT(f.AirportCode) ASC LIMIT 1;
SELECT AirportCode FROM ( SELECT a.AirportCode, (COALESCE(SourceCount, 0) + COALESCE(DestCount, 0)) AS TotalFlights FROM airports a LEFT JOIN (SELECT SourceAirport, COUNT(*) AS SourceCount FROM flights GROUP BY SourceAirport) s ON a.AirportCode = s.SourceAirport LEFT JOIN (SELECT DestAirport, COUNT(*) AS DestCount FROM flights GROUP BY DestAirport) d ON a.AirportCode = d.DestAirport ) AS FlightCounts WHERE TotalFlights = (SELECT MIN(TotalFlights) FROM ( SELECT (COALESCE(SourceCount, 0) + COALESCE(DestCount, 0)) AS TotalFlights FROM airports a LEFT JOIN (SELECT SourceAirport, COUNT(*) AS SourceCount FROM flights GROUP BY SourceAirport) s ON a.AirportCode = s.SourceAirport LEFT JOIN (SELECT DestAirport, COUNT(*) AS DestCount FROM flights GROUP BY DestAirport) d ON a.AirportCode = d.DestAirport ) AS MinFlightCounts);
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.uid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.uid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT a.Abbreviation, a.Country FROM airlines a LEFT JOIN flights f ON a.uid = f.Airline GROUP BY a.uid HAVING COUNT(f.Airline) = (SELECT MIN(flight_count) FROM (SELECT COUNT(f2.Airline) AS flight_count FROM airlines a2 LEFT JOIN flights f2 ON a2.uid = f2.Airline GROUP BY a2.uid));
SELECT a.Abbreviation, a.Country FROM airlines a JOIN (SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline ORDER BY num_flights ASC LIMIT 1) f ON a.UID = f.Airline;
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Pudong';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline JOIN airports ap ON f.SourceAirport = ap.AirportCode WHERE ap.AirportName LIKE '%Pudong%';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE ap.City = 'Pudong';
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName LIKE '%Pudong%';
SELECT * FROM airlines WHERE uid IN (SELECT f.Airline FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Changsha' INTERSECT SELECT f.Airline FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Baiyun');
SELECT Airline FROM airlines WHERE uid IN (SELECT f.Airline FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Changsha' INTERSECT SELECT f.Airline FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Baiyun');
SELECT a.Airline FROM airlines a WHERE EXISTS ( SELECT 1 FROM flights f JOIN airports src ON f.SourceAirport = src.AirportCode WHERE f.Airline = a.uid AND src.City = 'Baiyun' ) AND NOT EXISTS ( SELECT 1 FROM flights f2 JOIN airports src2 ON f2.SourceAirport = src2.AirportCode WHERE f2.Airline = a.uid AND src2.City = 'Changsha' );
SELECT Airline FROM airlines WHERE uid IN (SELECT DISTINCT f.Airline FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Baiyun') AND uid NOT IN (SELECT DISTINCT f.Airline FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Changsha');
SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10);
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.uid HAVING COUNT(*) >= 10;
SELECT a.Airline FROM airlines a LEFT JOIN flights f ON a.uid = f.Airline GROUP BY a.uid HAVING COUNT(f.FlightNo) < 200;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.uid HAVING COUNT(*) < 200;
SELECT f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'Southern Airlines';
SELECT f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'Southern Airlines';
SELECT FlightNo FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Changsha';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Changsha';
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Changsha';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Changsha';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Harbin';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Harbin';
SELECT f.FlightNo FROM flights AS f JOIN airports AS a ON f.DestAirport = a.AirportCode WHERE a.City = 'Harbin';
SELECT FlightNo FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Harbin');
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Harbin', 'Changchun');
SELECT COUNT(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City IN ('Harbin', 'Changchun')) OR DestAirport IN (SELECT AirportCode FROM airports WHERE City IN ('Harbin', 'Changchun'));
SELECT a.AirportName FROM airports a WHERE a.AirportCode NOT IN (SELECT f.SourceAirport FROM flights f UNION SELECT f.DestAirport FROM flights f);
SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT City, COUNT(Employee_ID) AS Number_of_Employees FROM employee GROUP BY City;
SELECT City, COUNT(Employee_ID) AS Employee_Count FROM employee GROUP BY City;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
SELECT Location, COUNT(Shop_ID) AS Number_of_Shops FROM shop GROUP BY Location;
SELECT Location, COUNT(*) AS Number_of_Shops FROM shop GROUP BY Location;
SELECT Manager_Name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT MIN(Number_products) AS MinProducts, MAX(Number_products) AS MaxProducts FROM shop;
SELECT MIN(Number_products) AS MinProducts, MAX(Number_products) AS MaxProducts FROM shop;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT e.Name FROM employee e JOIN (SELECT Employee_ID, COUNT(*) AS award_count FROM evaluation GROUP BY Employee_ID) AS counts ON e.Employee_ID = counts.Employee_ID WHERE counts.award_count = (SELECT MAX(award_count) FROM (SELECT COUNT(*) AS award_count FROM evaluation GROUP BY Employee_ID) AS max_counts);
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation);
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation);
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT CAST(Employee_ID AS INTEGER) FROM evaluation);
SELECT e.Name FROM employee e WHERE e.Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);
SELECT s.Name FROM shop s JOIN (SELECT h.Shop_ID, COUNT(*) AS cnt FROM hiring h GROUP BY h.Shop_ID ORDER BY cnt DESC LIMIT 1) AS t ON s.Shop_ID = t.Shop_ID;
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;
SELECT s.Name FROM shop s WHERE s.Shop_ID NOT IN (SELECT DISTINCT h.Shop_ID FROM hiring h);
SELECT s.Name FROM shop s WHERE s.Shop_ID NOT IN (SELECT h.Shop_ID FROM hiring h);
SELECT s.Name, COUNT(h.Employee_ID) AS Employee_Count FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID;
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Employee_Count FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name;
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM(Bonus) FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT DISTINCT s1.District FROM shop s1 WHERE EXISTS (SELECT 1 FROM shop s2 WHERE s1.District = s2.District AND s2.Number_products < 3000) AND EXISTS (SELECT 1 FROM shop s3 WHERE s1.District = s3.District AND s3.Number_products > 10000);
SELECT District FROM shop GROUP BY District HAVING SUM(CASE WHEN Number_products < 3000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Number_products > 1000 THEN 1 ELSE 0 END) > 0;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(Document_ID) AS NumberOfDocuments FROM Documents;
SELECT COUNT(Document_ID) AS Document_Count FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_Name, Template_ID FROM Documents WHERE LOWER(Document_Description) LIKE '%w%';
SELECT Document_Name, Template_ID FROM Documents WHERE UPPER(Document_Description) LIKE '%W%';
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Luo Chao''s Resume';
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Luo Chao''s Resume';
SELECT COUNT(DISTINCT d.Template_ID) AS Unique_Template_Count FROM Documents d;
SELECT COUNT(DISTINCT Template_ID) FROM Documents;
SELECT COUNT(*) FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT';
SELECT COUNT(*) FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE t.Template_Type_Code = 'PPT';
SELECT Template_ID, COUNT(*) AS Usage_Count FROM Documents GROUP BY Template_ID;
SELECT Template_ID, COUNT(*) AS UsageCount FROM Documents GROUP BY Template_ID;
SELECT t.Template_ID, t.Template_Type_Code FROM Templates t JOIN (SELECT Template_ID, COUNT(*) AS cnt FROM Documents GROUP BY Template_ID) doc_counts ON t.Template_ID = doc_counts.Template_ID WHERE doc_counts.cnt = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Documents GROUP BY Template_ID) tmp);
SELECT t.Template_ID, t.Template_Type_Code FROM Templates t JOIN ( SELECT Template_ID, COUNT(*) AS doc_count, DENSE_RANK() OVER (ORDER BY COUNT(*) DESC) AS rnk FROM Documents GROUP BY Template_ID ) counts ON t.Template_ID = counts.Template_ID WHERE counts.rnk = 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1;
SELECT t.Template_ID FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_ID IS NULL;
SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Template_ID IS NULL;
SELECT COUNT(*) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'Resume';
SELECT COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Resume';
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT R.Template_Type_Code, COUNT(T.Template_ID) AS Number_Of_Templates FROM Ref_Template_Types R LEFT JOIN Templates T ON R.Template_Type_Code = T.Template_Type_Code GROUP BY R.Template_Type_Code ;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Template_Count FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt WHERE rtt.Template_Type_Code = ( SELECT t.Template_Type_Code FROM Templates t JOIN ( SELECT Template_ID, COUNT(*) AS doc_count FROM Documents GROUP BY Template_ID ORDER BY doc_count DESC LIMIT 1 ) max_doc ON t.Template_ID = max_doc.Template_ID );
SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code GROUP BY rtt.Template_Type_Code HAVING COUNT(t.Template_ID) < 3;
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3;
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number = (SELECT MIN(Version_Number) FROM Templates);
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number = (SELECT MIN(Version_Number) FROM Templates);
SELECT t.Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Database';
SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Database';
SELECT d.Document_Name FROM Documents d INNER JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) AS Document_Count FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) AS Document_Count FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;
SELECT r.Template_Type_Code FROM Ref_Template_Types r WHERE NOT EXISTS ( SELECT 1 FROM Templates t INNER JOIN Documents d ON t.Template_ID = d.Template_ID WHERE t.Template_Type_Code = r.Template_Type_Code );
SELECT Template_Type_Code FROM Ref_Template_Types WHERE NOT EXISTS (SELECT 1 FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code);
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'Advertisement';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'Advertisement';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT DISTINCT r.Template_Type_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code;
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT t.Template_ID FROM Templates t INNER JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'Demo';
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) AS Paragraph_Count FROM Paragraphs;
SELECT COUNT(p.Paragraph_ID) FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE d.Document_Name = 'Summer Tour';
SELECT COUNT(p.Paragraph_ID) FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE d.Document_Name = 'Summer Tour';
SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korean%';
SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE '%Hangul%';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Documents d INNER JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE d.Document_Name = 'Welcome To New York';
SELECT P.Paragraph_ID, P.Paragraph_Text FROM Paragraphs P INNER JOIN Documents D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Welcome To New York';
SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer Review';
SELECT p.Paragraph_Text FROM Paragraphs p INNER JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer Review';
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Paragraph_Count FROM Documents D LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2;
SELECT d.Document_ID, d.Document_Name FROM Documents d INNER JOIN (SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID) p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Count = (SELECT MAX(Paragraph_Count) FROM (SELECT COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID) AS subquery);
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents JOIN (SELECT Document_ID, COUNT(*) AS ParagraphCount FROM Paragraphs GROUP BY Document_ID) AS SubQuery ON Documents.Document_ID = SubQuery.Document_ID WHERE SubQuery.ParagraphCount = (SELECT MAX(ParagraphCount) FROM (SELECT COUNT(*) AS ParagraphCount FROM Paragraphs GROUP BY Document_ID) AS MaxQuery);
SELECT d.Document_ID FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) = ( SELECT MIN(cnt) FROM ( SELECT COUNT(p2.Paragraph_ID) AS cnt FROM Documents d2 LEFT JOIN Paragraphs p2 ON d2.Document_ID = p2.Document_ID GROUP BY d2.Document_ID ) AS subquery );
SELECT Document_ID FROM Documents LEFT JOIN Paragraphs USING (Document_ID) GROUP BY Document_ID HAVING COUNT(Paragraph_ID) = (SELECT MIN(cnt) FROM (SELECT COUNT(Paragraph_ID) AS cnt FROM Documents LEFT JOIN Paragraphs USING (Document_ID) GROUP BY Document_ID) AS SubQuery);
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) IN (1, 2);
SELECT Documents.Document_ID FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;
SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text LIKE '%Brazil%' AND p.Paragraph_Text LIKE '%Ireland%';
SELECT DISTINCT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%' AND Paragraph_Text LIKE '%Ireland%';
SELECT COUNT(Teacher_ID) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY CAST(Age AS INTEGER) ASC;
SELECT Age, Hometown FROM teacher;
SELECT Name, Age, Hometown FROM teacher;
SELECT Name FROM teacher WHERE Hometown != 'Xiaoganggan Urban Area';
SELECT Name FROM teacher WHERE Hometown != 'Xiaoganggancheng';
SELECT Name FROM teacher WHERE Age IN ('32', '33');
SELECT Name FROM teacher WHERE Age IN ('32', '33');
SELECT Hometown FROM teacher WHERE CAST(Age AS INTEGER) = (SELECT MIN(CAST(Age AS INTEGER)) FROM teacher);
SELECT Hometown FROM teacher WHERE CAST(Age AS INTEGER) = (SELECT MIN(CAST(Age AS INTEGER)) FROM teacher);
SELECT Hometown, COUNT(Teacher_ID) AS Teacher_Count FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS Teacher_Count FROM teacher GROUP BY Hometown;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM teacher GROUP BY Hometown) AS counts);
SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;
SELECT Teacher.Name, Course.Course FROM course_arrange INNER JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math';
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Mathematics';
SELECT t.Name AS Teacher_Name, COUNT(ca.Course_ID) AS Course_Count FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID, t.Name ORDER BY Course_Count DESC;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS NumberOfCourses FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID, teacher.Name;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(ca.Course_ID) >= 2;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(DISTINCT ca.Course_ID) >= 2;
SELECT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Teacher_ID IS NULL;
SELECT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Teacher_ID IS NULL;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'National Art Gallery';
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010');
SELECT v.ID, v.Name, v.Age FROM visitor v JOIN visit vt ON v.ID = CAST(vt.visitor_ID AS INTEGER) GROUP BY v.ID, v.Name, v.Age HAVING COUNT(*) > 1;
SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN (SELECT visitor_ID, SUM(Total_spent) AS total FROM visit GROUP BY visitor_ID HAVING total = (SELECT MAX(total) FROM (SELECT SUM(Total_spent) AS total FROM visit GROUP BY visitor_ID))) max_spent ON v.ID = CAST(max_spent.visitor_ID AS INTEGER);
SELECT Museum.Museum_ID, Museum.Name FROM Museum JOIN ( SELECT Museum_ID, COUNT(*) AS VisitCount FROM Visit GROUP BY Museum_ID ORDER BY VisitCount DESC LIMIT 1 ) AS MostVisited ON Museum.Museum_ID = MostVisited.Museum_ID;
SELECT m.Name FROM museum m LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE v.Museum_ID IS NULL;
SELECT v.Name, v.Age FROM visitor v JOIN visit vt ON v.ID = vt.visitor_ID WHERE vt.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit);
SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Max_Tickets FROM visit;
SELECT SUM(visit.Total_spent) FROM visitor JOIN visit ON CAST(visit.visitor_ID AS INTEGER) = visitor.ID WHERE visitor.Level_of_membership = 1;
SELECT v.Name FROM visitor v WHERE EXISTS (SELECT 1 FROM visit vt JOIN museum m1 ON vt.Museum_ID = m1.Museum_ID WHERE vt.visitor_ID = CAST(v.ID AS TEXT) AND m1.Open_Year <= '2009') AND EXISTS (SELECT 1 FROM visit vt2 JOIN museum m2 ON vt2.Museum_ID = m2.Museum_ID WHERE vt2.visitor_ID = CAST(v.ID AS TEXT) AND m2.Open_Year > '2011');
SELECT COUNT(*) FROM visitor WHERE ID NOT IN (SELECT CAST(visitor_ID AS INTEGER) FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year = '2010'));
SELECT COUNT(*) FROM museum WHERE CAST(Open_Year AS INTEGER) < 2008 OR CAST(Open_Year AS INTEGER) > 2013;
SELECT COUNT(player_id) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, last_name, birth_date FROM players WHERE country_code = 'China';
SELECT first_name, last_name, birth_date FROM players WHERE country_code = 'China';
SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches;
SELECT AVG(winner_age) AS average_winner_age, AVG(loser_age) AS average_loser_age FROM matches;
SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
SELECT MAX(loser_rank) AS highest_loser_rank FROM matches;
SELECT MIN(r.ranking) AS best_rank FROM matches m JOIN rankings r ON m.loser_id = r.player_id;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) AS num_unique_loser_names FROM matches;
SELECT Tourney_Name FROM matches GROUP BY Tourney_Name HAVING COUNT(*) > 10;
SELECT Tourney_Name FROM matches GROUP BY Tourney_Name HAVING COUNT(*) > 10;
SELECT DISTINCT winner_name FROM matches WHERE year IN (2013, 2016);
SELECT DISTINCT p.first_name, p.last_name FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.year IN (2013, 2016);
SELECT year, COUNT(*) AS number_of_matches FROM matches WHERE year IN (2013, 2016) GROUP BY year;
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT p.country_code, p.first_name, p.last_name FROM players p WHERE p.player_id IN ( SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' INTERSECT SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' );
SELECT p.first_name, p.last_name, p.country_code FROM players p WHERE p.player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') AND p.player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open');
SELECT first_name || ' ' || last_name AS name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT first_name || ' ' || last_name AS name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players);
SELECT first_name, last_name FROM players ORDER BY birth_date ASC;
SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date;

SELECT p.first_name, p.last_name, p.country_code FROM players p JOIN (SELECT player_id, MAX(tours) AS max_tours FROM rankings GROUP BY player_id) r ON p.player_id = r.player_id WHERE r.max_tours = (SELECT MAX(max_tours) FROM (SELECT player_id, MAX(tours) AS max_tours FROM rankings GROUP BY player_id));
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.first_name || ' ' || p.last_name AS winner_name, r.ranking_points FROM players p JOIN (SELECT winner_id, COUNT(*) AS wins FROM matches GROUP BY winner_id ORDER BY wins DESC LIMIT 1) t ON p.player_id = t.winner_id JOIN (SELECT player_id, ranking_points, RANK() OVER (PARTITION BY player_id ORDER BY ranking_date DESC) AS rn FROM rankings) r ON p.player_id = r.player_id AND r.rn = 1;
SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN ( SELECT winner_id, COUNT(*) AS wins FROM matches GROUP BY winner_id HAVING COUNT(*) = ( SELECT MAX(win_count) FROM ( SELECT COUNT(*) AS win_count FROM matches GROUP BY winner_id ) t ) ) m ON p.player_id = m.winner_id JOIN ( SELECT player_id, ranking_points FROM ( SELECT player_id, ranking_points, ROW_NUMBER() OVER (PARTITION BY player_id ORDER BY ranking_date DESC) AS rn FROM rankings ) t WHERE rn = 1 ) r ON p.player_id = r.player_id;
SELECT p.first_name, p.last_name FROM players p WHERE p.player_id IN (SELECT r.player_id FROM rankings r WHERE r.ranking_points = (SELECT MAX(r2.ranking_points) FROM rankings r2 JOIN matches m ON r2.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open') INTERSECT SELECT m.winner_id FROM matches m WHERE m.tourney_name = 'Australian Open');
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open');
SELECT w.first_name AS winner_first_name, w.last_name AS winner_last_name, l.first_name AS loser_first_name, l.last_name AS loser_last_name FROM matches m JOIN players w ON m.winner_id = w.player_id JOIN players l ON m.loser_id = l.player_id WHERE m.minutes = (SELECT MAX(minutes) FROM matches);
SELECT w.first_name || ' ' || w.last_name AS winner_name, l.first_name || ' ' || l.last_name AS loser_name FROM matches m JOIN players w ON m.winner_id = w.player_id JOIN players l ON m.loser_id = l.player_id WHERE m.minutes = (SELECT MAX(minutes) FROM matches);
SELECT p.first_name || ' ' || p.last_name AS player_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name, p.last_name;
SELECT p.first_name, p.last_name, AVG(r.ranking) AS average_ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name, p.last_name;
SELECT p.first_name, p.last_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players LEFT JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;
SELECT country_code AS Country, COUNT(player_id) AS PlayerCount FROM players GROUP BY country_code;
SELECT Country_Code AS Country, COUNT(Player_ID) AS Number_Of_Players FROM Players GROUP BY Country_Code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date ORDER BY ranking_date;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY year;
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year;
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;
SELECT p.first_name, p.last_name, m.winner_rank FROM ( SELECT winner_id, winner_rank, winner_age, ROW_NUMBER() OVER (PARTITION BY winner_id ORDER BY winner_age) AS rn FROM matches ) AS m JOIN players p ON m.winner_id = p.player_id WHERE m.rn = 1 ORDER BY m.winner_age LIMIT 3;
SELECT COUNT(DISTINCT m.winner_id) FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = 'WTA Championships' AND p.hand = 'L';
SELECT COUNT(DISTINCT m.winner_id) FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = 'WTA Championships' AND p.hand = 'L';
SELECT p.first_name, p.last_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches);
SELECT p.first_name, p.last_name, p.country_code, p.birth_date FROM players p WHERE p.player_id = (SELECT ms.player_id FROM (SELECT winner_id AS player_id, SUM(CAST(SUBSTR(score, 1, INSTR(score, '-') - 1) AS INTEGER)) AS total_points FROM matches GROUP BY winner_id UNION ALL SELECT loser_id AS player_id, SUM(CAST(SUBSTR(score, INSTR(score, '-') + 1) AS INTEGER) + CAST(SUBSTR(score, 1, INSTR(score, '-') - 1) AS INTEGER)) AS total_points FROM matches GROUP BY loser_id) ms GROUP BY ms.player_id ORDER BY SUM(ms.total_points) DESC LIMIT 1);
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;
SELECT hand, COUNT(player_id) FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(killed) AS max_deaths, MIN(killed) AS min_deaths FROM death;
SELECT AVG(injured) FROM death;
SELECT death.* FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 'T';
SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander != 'Boris';
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Sailing Ship';
SELECT Battle.id, Battle.name FROM Battle INNER JOIN Ship ON Battle.id = Ship.lost_in_battle INNER JOIN Death ON Ship.id = Death.caused_by_ship_id GROUP BY Battle.id, Battle.name HAVING SUM(Death.killed) > 10;
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.killed + death.injured) DESC LIMIT 1;
SELECT DISTINCT b.name FROM battle AS b WHERE b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225');
SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name IN ('Expedition', 'Long March') GROUP BY b.id HAVING COUNT(DISTINCT s.name) = 2;
SELECT B.NAME, B.RESULT, B.BULGARIAN_COMMANDER FROM BATTLE B WHERE B.ID NOT IN (SELECT S.LOST_IN_BATTLE FROM SHIP S WHERE S.LOCATION = 'English Channel');
SELECT death.note FROM death WHERE death.note LIKE '%East%';
SELECT line_1, line_2 FROM Addresses;
SELECT line_1, line_2 FROM Addresses;
SELECT COUNT(*) FROM Courses;
SELECT COUNT(*) FROM Courses;
SELECT course_description FROM Courses WHERE course_name = 'Mathematics';
SELECT course_description FROM Courses WHERE course_name LIKE '%Mathematics%';
SELECT zip_postcode FROM Addresses WHERE city = 'Dalian';
SELECT zip_postcode FROM Addresses WHERE city = 'Dalian';
SELECT d.department_id, d.department_name, COUNT(*) AS total_degrees FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Departments d ON dp.department_id = d.department_id GROUP BY d.department_id, d.department_name ORDER BY total_degrees DESC LIMIT 1;
SELECT d.department_name FROM Departments d JOIN (SELECT department_id, COUNT(*) AS degree_count FROM Degree_Programs GROUP BY department_id) AS sub ON d.department_id = sub.department_id WHERE sub.degree_count = (SELECT MAX(degree_count) FROM (SELECT COUNT(*) AS degree_count FROM Degree_Programs GROUP BY department_id) AS max_sub);
SELECT COUNT(DISTINCT Departments.department_id) FROM Departments INNER JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id;
SELECT COUNT(DISTINCT Departments.department_id) FROM Departments INNER JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id;
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT COUNT(*) FROM Degree_Programs;
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT Courses.course_id, Courses.course_name FROM Courses LEFT JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(Sections.section_id) <= 2;
SELECT C.course_id, C.course_name FROM Courses C LEFT JOIN Sections S ON C.course_id = S.course_id GROUP BY C.course_id, C.course_name HAVING COUNT(S.section_id) < 2;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT s.semester_id, s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(DISTINCT se.student_id) DESC LIMIT 1;
SELECT s.semester_id, s.semester_name FROM Semesters s JOIN (SELECT semester_id, COUNT(DISTINCT student_id) AS num_students FROM Student_Enrolment GROUP BY semester_id) AS counts ON s.semester_id = counts.semester_id WHERE counts.num_students = (SELECT MAX(num_students) FROM (SELECT COUNT(DISTINCT student_id) AS num_students FROM Student_Enrolment GROUP BY semester_id) AS sub);
SELECT department_description FROM Departments WHERE department_name LIKE '%Computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%Computer%';
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s WHERE s.student_id IN (SELECT se.student_id FROM Student_Enrolment se GROUP BY se.student_id, se.semester_id HAVING COUNT(DISTINCT se.degree_program_id) >= 2);
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s WHERE s.student_id IN (SELECT se.student_id FROM Student_Enrolment se GROUP BY se.student_id, se.semester_id HAVING COUNT(DISTINCT se.degree_program_id) >= 2);
SELECT S.first_name, S.middle_name, S.last_name FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor';
SELECT S.First_Name, S.Middle_Name, S.Last_Name FROM Students S INNER JOIN Student_Enrolment SE ON S.Student_ID = SE.Student_ID INNER JOIN Degree_Programs DP ON SE.Degree_Program_ID = DP.Degree_Program_ID WHERE DP.Degree_Summary_Name = 'Bachelor';
SELECT dp.degree_program_id, dp.degree_summary_name, COUNT(DISTINCT se.student_id) AS student_count FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY student_count DESC LIMIT 1;
SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id ORDER BY COUNT(DISTINCT se.student_id) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN ( SELECT degree_program_id, COUNT(*) AS cnt FROM Student_Enrolment GROUP BY degree_program_id HAVING COUNT(*) = ( SELECT MAX(student_count) FROM ( SELECT COUNT(*) AS student_count FROM Student_Enrolment GROUP BY degree_program_id ) counts ) ) sub ON dp.degree_program_id = sub.degree_program_id;
SELECT dp.degree_program_id, dp.degree_summary_name, dp.degree_summary_description FROM Degree_Programs dp JOIN (SELECT degree_program_id, COUNT(DISTINCT student_id) AS student_count FROM Student_Enrolment GROUP BY degree_program_id ORDER BY student_count DESC LIMIT 1) most_popular ON dp.degree_program_id = most_popular.degree_program_id;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, ec.enrollment_count, s.student_id FROM Students s JOIN (SELECT student_id, COUNT(*) AS enrollment_count, DENSE_RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM Student_Enrolment GROUP BY student_id) ec ON s.student_id = ec.student_id WHERE ec.rank = 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, cnt.participation_count FROM (SELECT sec.student_id, COUNT(*) AS participation_count FROM Student_Enrolment_Courses sec GROUP BY sec.student_id) cnt JOIN Students s ON cnt.student_id = s.student_id WHERE cnt.participation_count = (SELECT MAX(participation_count) FROM (SELECT student_id, COUNT(*) AS participation_count FROM Student_Enrolment_Courses GROUP BY student_id) t);
SELECT S.semester_name FROM Semesters S LEFT JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id WHERE SE.semester_id IS NULL;
SELECT S.semester_name FROM Semesters S LEFT JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id WHERE SE.semester_id IS NULL;
SELECT DISTINCT C.course_name FROM Courses C INNER JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id;
SELECT DISTINCT C.course_name FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id GROUP BY c.course_id ORDER BY COUNT(DISTINCT se.student_id) DESC LIMIT 1;
SELECT c.course_name FROM Courses c JOIN (SELECT sec.course_id, COUNT(DISTINCT se.student_id) AS student_count FROM Student_Enrolment_Courses sec JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id GROUP BY sec.course_id ORDER BY student_count DESC LIMIT 1) AS max_course ON c.course_id = max_course.course_id;
SELECT S.last_name FROM Students S JOIN Addresses A ON S.current_address_id = A.address_id WHERE A.state_province_county = 'Hubei' AND NOT EXISTS (SELECT 1 FROM Student_Enrolment SE WHERE SE.student_id = S.student_id);
SELECT S.last_name FROM Students S JOIN Addresses A ON S.current_address_id = A.address_id WHERE A.state_province_county = 'Hubei' AND NOT EXISTS (SELECT 1 FROM Student_Enrolment SE WHERE SE.student_id = S.student_id);
SELECT Transcripts.transcript_id, Transcripts.transcript_date FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id, Transcripts.transcript_date HAVING COUNT(Transcript_Contents.student_course_id) >= 2;
SELECT T.transcript_id, T.transcript_date FROM Transcripts T JOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id JOIN Student_Enrolment_Courses SEC ON TC.student_course_id = SEC.student_course_id GROUP BY T.transcript_id, T.transcript_date HAVING COUNT(DISTINCT SEC.course_id) >= 2;
SELECT cell_mobile_number FROM Students WHERE first_name = 'Zhong' AND last_name = 'Rui';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Rui' AND last_name = 'Zhong';
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT First_Name, Middle_Name, Last_Name FROM Students ORDER BY Date_First_Registered ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students WHERE date_left IS NOT NULL);
SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1;
SELECT S.first_name, S.last_name FROM Students S WHERE S.current_address_id != S.permanent_address_id;
SELECT S.first_name, S.last_name FROM Students S WHERE S.current_address_id <> S.permanent_address_id;
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN (SELECT address_id, COUNT(DISTINCT student_id) AS student_count FROM (SELECT current_address_id AS address_id, student_id FROM Students WHERE current_address_id IS NOT NULL UNION ALL SELECT permanent_address_id AS address_id, student_id FROM Students WHERE permanent_address_id IS NOT NULL) combined GROUP BY address_id ORDER BY student_count DESC LIMIT 1) max_addr ON a.address_id = max_addr.address_id;
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN ( SELECT address_id, COUNT(*) AS student_count FROM ( SELECT current_address_id AS address_id FROM Students WHERE current_address_id IS NOT NULL UNION ALL SELECT permanent_address_id AS address_id FROM Students WHERE permanent_address_id IS NOT NULL ) combined GROUP BY address_id ORDER BY student_count DESC LIMIT 1 ) counts ON a.address_id = counts.address_id;
SELECT AVG(transcript_date) AS average_print_time FROM Transcripts;
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;
SELECT transcript_date, other_details FROM Transcripts WHERE transcript_date = (SELECT MIN(transcript_date) FROM Transcripts);
SELECT COUNT(transcript_id) FROM Transcripts;
SELECT COUNT(*) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT student_course_id, COUNT(DISTINCT transcript_id) AS max_count FROM Transcript_Contents GROUP BY student_course_id ORDER BY max_count DESC LIMIT 1;
SELECT Courses.course_id, COUNT(*) AS max_occurrence FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id GROUP BY Courses.course_id ORDER BY max_occurrence DESC LIMIT 1;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t LEFT JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) = (SELECT MIN(score_count) FROM (SELECT COUNT(tc2.student_course_id) AS score_count FROM Transcripts t2 LEFT JOIN Transcript_Contents tc2 ON t2.transcript_id = tc2.transcript_id GROUP BY t2.transcript_id) AS subquery);
SELECT T.transcript_id, T.transcript_date FROM Transcripts T LEFT JOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_id, T.transcript_date HAVING COUNT(TC.student_course_id) = (SELECT MIN(cnt) FROM (SELECT COUNT(TC2.student_course_id) AS cnt FROM Transcripts T2 LEFT JOIN Transcript_Contents TC2 ON T2.transcript_id = TC2.transcript_id GROUP BY T2.transcript_id) AS Sub);
SELECT s.semester_id, s.semester_name FROM Semesters s WHERE EXISTS (SELECT 1 FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE se.semester_id = s.semester_id AND dp.degree_summary_name LIKE '%Master%') AND EXISTS (SELECT 1 FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE se.semester_id = s.semester_id AND dp.degree_summary_name LIKE '%Bachelor%');
SELECT s.semester_id FROM Student_Enrolment s JOIN Degree_Programs d ON s.degree_program_id = d.degree_program_id WHERE d.degree_summary_name LIKE '%Master%' OR d.degree_summary_name LIKE '%Bachelor%' GROUP BY s.semester_id HAVING COUNT(DISTINCT CASE WHEN d.degree_summary_name LIKE '%Master%' THEN 1 END) >= 1 AND COUNT(DISTINCT CASE WHEN d.degree_summary_name LIKE '%Bachelor%' THEN 1 END) >= 1;
SELECT COUNT(DISTINCT current_address_id) FROM Students;
SELECT DISTINCT a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT other_student_details FROM Students ORDER BY other_student_details DESC;
SELECT section_description FROM Sections WHERE section_name = 'Third';
SELECT section_description FROM Sections WHERE section_name = 'Third';
SELECT s.first_name, s.middle_name, s.last_name FROM Students s LEFT JOIN Addresses a ON s.permanent_address_id = a.address_id WHERE a.country = 'Haiti' OR s.cell_mobile_number = '09700166582';
SELECT S.first_name, S.middle_name, S.last_name FROM Students S LEFT JOIN Addresses A ON S.permanent_address_id = A.address_id WHERE A.country = 'Haiti' OR S.cell_mobile_number = '09700166582';
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT * FROM Cartoon WHERE Directed_by = 'Huang Weiming';
SELECT c.Title FROM Cartoon c WHERE c.Directed_by = 'Huang Weiming';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Li Hui';
SELECT COUNT(*) FROM Cartoon WHERE Directed_by = 'Li Hui';
SELECT Title, Directed_by FROM Cartoon;
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title FROM Cartoon WHERE Directed_by IN ('Huang Weiming', 'Jiang Wen');
SELECT Title FROM Cartoon WHERE Directed_by IN ('Weiming Huang', 'Jiang Wen');
SELECT Country, COUNT(*) AS channel_count FROM TV_Channel GROUP BY Country HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM TV_Channel GROUP BY Country) AS sub) ORDER BY channel_count DESC;
SELECT Country, COUNT(id) AS NumberOfChannels FROM TV_Channel GROUP BY Country ORDER BY NumberOfChannels DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name) AS series_count, COUNT(DISTINCT Content) AS content_count FROM TV_Channel;
SELECT COUNT(DISTINCT series_name) AS Distinct_Series_Count, COUNT(DISTINCT Content) AS Distinct_Content_Count FROM TV_Channel;
SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = 'Qian Fu';
SELECT Content FROM TV_Channel WHERE series_name = 'Lurk';
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = 'Lurking';
SELECT DISTINCT Package_Option FROM TV_Channel WHERE series_name = 'Lurk';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT Language, COUNT(*) AS NumberOfChannels FROM (SELECT TV_Channel.id, CASE WHEN TRIM(SUBSTR(TV_Channel.Language, pos+1, LENGTH(TV_Channel.Language)-pos)) IN ('ä¸­æ') THEN 'Chinese' WHEN TRIM(SUBSTR(TV_Channel.Language, pos+1, LENGTH(TV_Channel.Language)-pos)) IN ('è±è¯­') THEN 'English' ELSE TRIM(SUBSTR(TV_Channel.Language, pos+1, LENGTH(TV_Channel.Language)-pos)) END AS Language FROM (SELECT TV_Channel.id, TV_Channel.Language, (SELECT MIN(value) FROM (SELECT 1 AS value UNION SELECT LENGTH(Language) - LENGTH(REPLACE(Language, ',', '')) + 1)) ) AS LangCount FROM TV_Channel) AS Channels, (SELECT 0 AS pos UNION ALL SELECT pos + 1 FROM (SELECT 0 AS pos) WHERE pos < (SELECT MAX(LENGTH(Language) - LENGTH(REPLACE(Language, ',', ''))) FROM TV_Channel))) WHERE pos <= LENGTH(Language) - LENGTH(REPLACE(Language, ',', '')) AND LangCount = (SELECT MIN(LENGTH(Language) - LENGTH(REPLACE(Language, ',', '')) + 1) FROM TV_Channel)) GROUP BY Language;
SELECT Language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1;
SELECT Language, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language;
SELECT Language, COUNT(id) AS channel_count FROM TV_Channel GROUP BY Language;
SELECT TV_Channel.series_name FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'Black Cat Sheriff';
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'Black Cat Sheriff';
SELECT DISTINCT c.Title FROM TV_Channel tc JOIN TV_series ts ON tc.id = ts.Channel JOIN Cartoon c ON tc.id = c.Channel WHERE ts.series_name = 'Undercover';
SELECT DISTINCT c.Title FROM TV_series s JOIN Cartoon c ON s.Channel = c.Channel WHERE s.series_name = 'Undercover';
SELECT * FROM TV_series ORDER BY CAST(Rating AS REAL) DESC;
SELECT * FROM TV_series ORDER BY CAST(Rating AS REAL) DESC;
SELECT Episode, Rating FROM TV_series ORDER BY CAST(Rating AS REAL) DESC LIMIT 3;
SELECT TV_Channel.series_name, TV_series.Rating FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id ORDER BY CAST(TV_series.Rating AS REAL) DESC LIMIT 3;
SELECT MIN(Share) AS MinShare, MAX(Share) AS MaxShare FROM TV_series;
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series;
SELECT TV_series.Air_Date FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Da Zhai Men';
SELECT Air_Date FROM TV_series WHERE Episode = 'The Grand Mansion Gate';
SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = 'Lifetime Love';
SELECT TV_series.Weekly_Rank FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Da Zhai Men';
SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = 'Da Zhai Men';
SELECT DISTINCT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = 'Da Zhai Men';
SELECT Episode FROM TV_series WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = 'Lurking');
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Lurking';
SELECT Directed_by, COUNT(*) AS Number_of_Works FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(id) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);
SELECT Cartoon.Production_code, TV_Channel.series_name AS Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date DESC LIMIT 1;
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes';
SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Bai Ying';
SELECT DISTINCT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Bai Ying';
SELECT DISTINCT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Country NOT IN (SELECT DISTINCT TV_Channel.Country FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Bai Ying');
SELECT DISTINCT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Country NOT IN ( SELECT DISTINCT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Bai Ying' );
SELECT DISTINCT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by LIKE '%Huang Weiming%' AND Cartoon.Directed_by LIKE '%Yang Jie%';
SELECT DISTINCT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Huang Weiming', 'Yang Jie');
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT Country, Pixel_aspect_ratio_PAR FROM TV_Channel WHERE Language != 'English';
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.Country IN ( SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2 );
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id IN ( SELECT Channel FROM ( SELECT Channel FROM TV_series UNION ALL SELECT Channel FROM Cartoon ) AS combined GROUP BY Channel HAVING COUNT(*) > 2 );
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT DISTINCT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Huang Weiming');
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN ( SELECT DISTINCT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Huang Weiming' );
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Huang Weiming');
SELECT DISTINCT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Huang Weiming');
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(Poker_Player_ID) FROM poker_player;
SELECT p.Name, pp.Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;
SELECT people.Name, poker_player.Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC;
SELECT p.Name, pp.Final_Table_Made, pp.Best_Finish FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID;
SELECT p.Name, pp.Final_Table_Made, pp.Best_Finish FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID;
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player) LIMIT 1;
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT pp.Final_Table_Made FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings < 200000;
SELECT p.Name FROM poker_player AS pp INNER JOIN people AS p ON pp.People_ID = p.People_ID;
SELECT p.Name FROM people p INNER JOIN poker_player pp ON p.People_ID = pp.People_ID;
SELECT p.Name FROM poker_player pp INNER JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;
SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);
SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height = (SELECT MAX(Height) FROM people);
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height = (SELECT MAX(Height) FROM people);
SELECT AVG(p.Earnings) FROM poker_player p INNER JOIN people pp ON p.People_ID = pp.People_ID WHERE pp.Height > 200;
SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;
SELECT people.Name FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC;
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC;
SELECT Nationality, COUNT(*) AS NumberOfPeople FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS NumberOfPeople FROM people GROUP BY Nationality;
SELECT p.Nationality, COUNT(*) AS Count FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID GROUP BY p.Nationality ORDER BY Count DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name;
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL;
SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM VOTES;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;
SELECT MAX(created) AS last_vote_date FROM VOTES WHERE state = 'Zhejiang';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Li Hong';
SELECT state, MIN(created) AS start_time FROM VOTES GROUP BY state;
SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C JOIN VOTES V ON C.contestant_number = V.contestant_number GROUP BY C.contestant_number, C.contestant_name HAVING COUNT(*) >= 2;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN (SELECT contestant_number, COUNT(*) AS cnt FROM VOTES GROUP BY contestant_number) v ON c.contestant_number = v.contestant_number WHERE v.cnt = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM VOTES GROUP BY contestant_number) t);
SELECT COUNT(*) FROM VOTES WHERE state IN ('Jiangsu', 'Zhejiang');
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES);
SELECT a.area_code FROM VOTES v JOIN AREA_CODE_STATE a ON a.area_code = CAST(SUBSTR(CAST(v.phone_number AS TEXT), 1, 3) AS INTEGER) GROUP BY a.area_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT V.created, V.state, V.phone_number FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Wang Wei';
SELECT DISTINCT acs.area_code FROM AREA_CODE_STATE acs WHERE acs.state IN (SELECT v.state FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number WHERE c.contestant_name = 'Wang Wei' INTERSECT SELECT v.state FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number WHERE c.contestant_name = 'Wang Fang');
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Yong%';
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT SUM(country.SurfaceArea) FROM country WHERE country.Region = 'Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT Continent FROM country WHERE Name = 'Anguilla';
SELECT Continent FROM country WHERE Name = 'Anguilla';
SELECT District FROM city WHERE Name = 'Wenzhou';
SELECT District FROM city WHERE Name = 'Wenzhou';
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') AND IsOfficial = 'T';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa';
SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy IS NOT NULL ORDER BY LifeExpectancy ASC LIMIT 1;
SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia' AND LifeExpectancy IS NOT NULL);
SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia';
SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(Population) FROM city WHERE District = 'Xihu';
SELECT SUM(Population) FROM city WHERE District = 'West Lake';
SELECT AVG(GNP) AS AverageGNP, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm = 'American Dependency';
SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm LIKE '%United States%';
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';
SELECT c.Name FROM country c JOIN (SELECT CountryCode, COUNT(*) AS LangCount FROM countrylanguage GROUP BY CountryCode ORDER BY LangCount DESC LIMIT 1) AS max_lang ON c.Code = max_lang.CountryCode;
SELECT country.Name FROM country JOIN ( SELECT CountryCode, COUNT(*) AS LangCount FROM countrylanguage GROUP BY CountryCode ) AS lang_counts ON country.Code = lang_counts.CountryCode WHERE lang_counts.LangCount = ( SELECT MAX(LangCount) FROM ( SELECT COUNT(*) AS LangCount FROM countrylanguage GROUP BY CountryCode ) );
SELECT Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1;
SELECT Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1;
SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') AS T;
SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') AS T;
SELECT Name FROM country WHERE Code IN (SELECT a.CountryCode FROM countrylanguage a JOIN countrylanguage b ON a.CountryCode = b.CountryCode WHERE a.Language = 'English' AND b.Language = 'French');
SELECT Name FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE CountryCode = country.Code AND Language = 'English') AND EXISTS (SELECT 1 FROM countrylanguage WHERE CountryCode = country.Code AND Language = 'French');
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'Yes' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'Yes';
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese';
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese';
SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT DISTINCT c.Region FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English');
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY SUM(c.Population * cl.Percentage / 100) DESC LIMIT 1;
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY SUM(c.Population * cl.Percentage / 100) DESC LIMIT 1;
SELECT cl.Language FROM countrylanguage cl WHERE cl.CountryCode IN (SELECT c.Code FROM country c WHERE c.GovernmentForm = 'Republic') GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1 AND COUNT(*) = (SELECT COUNT(*) FROM countrylanguage cl2 WHERE cl2.Language = cl.Language);
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY (city.Population * countrylanguage.Percentage) DESC LIMIT 1;
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia');
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
SELECT SUM(country.Population) FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT SUM(country.Population) FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Bush' AND cl.IsOfficial = 'T';
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = 'Bush' AND countrylanguage.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';

SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < ALL (SELECT Population FROM country WHERE Continent = 'Asia');
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');
SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');
SELECT Name FROM country WHERE Continent = 'Asia' AND Population > ALL (SELECT Population FROM country WHERE Continent = 'Africa');
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT DISTINCT CountryCode FROM countrylanguage WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT Code FROM country 
WHERE GovernmentForm != 'Republic' 
AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT Code FROM country WHERE GovernmentForm != 'Republic' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT c.Name FROM city c JOIN country ct ON c.CountryCode = ct.Code WHERE ct.Continent = 'Europe' AND ct.Code NOT IN ( SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' );
SELECT c.Name FROM country c WHERE c.Continent = 'Europe' AND NOT EXISTS ( SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English' AND cl.IsOfficial = 'T' ) AND EXISTS ( SELECT 1 FROM city WHERE city.CountryCode = c.Code );
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1;
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1;
SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(DISTINCT countrylanguage.Language) >= 3;
SELECT country.Name, COUNT(countrylanguage.Language) AS NumberOfLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) > 2;
SELECT District, COUNT(*) FROM city c1 WHERE Population > (SELECT AVG(c2.Population) FROM city c2 WHERE c2.District = c1.District) GROUP BY District;
SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72;
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72;
SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AvgLifeExpectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT Name, Region FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT * FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Language, COUNT(CountryCode) AS CountryCount FROM countrylanguage GROUP BY Language ORDER BY CountryCount DESC LIMIT 1;
SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = (SELECT MAX(cnt) FROM (SELECT COUNT(DISTINCT CountryCode) AS cnt FROM countrylanguage GROUP BY Language));
SELECT c.Name AS Country, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = c.Code);
SELECT country.Code AS CountryCode, sub.Language FROM country JOIN ( SELECT cl.CountryCode, cl.Language, ROW_NUMBER() OVER (PARTITION BY cl.CountryCode ORDER BY (c.Population * cl.Percentage) DESC) AS rn FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code ) AS sub ON country.Code = sub.CountryCode AND sub.rn = 1;
SELECT COUNT(*) FROM countrylanguage AS cl JOIN ( SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage GROUP BY CountryCode ) AS max_percent ON cl.CountryCode = max_percent.CountryCode WHERE cl.Language = 'Spanish' AND cl.Percentage = max_percent.MaxPercentage;
SELECT COUNT(DISTINCT c1.CountryCode) FROM countrylanguage c1 WHERE c1.Language = 'Spanish' AND c1.Percentage = (SELECT MAX(c2.Percentage) FROM countrylanguage c2 WHERE c2.CountryCode = c1.CountryCode);
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish');
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work ASC;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor WHERE Nationality <> 'United States';
SELECT Name FROM conductor WHERE Nationality != 'United States';
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT AVG(Attendance) FROM show;
SELECT AVG(Attendance) FROM show;
SELECT Type FROM performance WHERE Type != 'Final Live Broadcast' AND CAST(REPLACE(Share, '%', '') AS REAL) = (SELECT MAX(CAST(REPLACE(Share, '%', '') AS REAL)) FROM performance WHERE Type != 'Final Live Broadcast') UNION ALL SELECT Type FROM performance WHERE Type != 'Final Live Broadcast' AND CAST(REPLACE(Share, '%', '') AS REAL) = (SELECT MIN(CAST(REPLACE(Share, '%', '') AS REAL)) FROM performance WHERE Type != 'Final Live Broadcast');
SELECT MAX(CAST(REPLACE(Share, '%', '') AS FLOAT)) AS Max_Share, MIN(CAST(REPLACE(Share, '%', '') AS FLOAT)) AS Min_Share FROM performance WHERE Type != 'Final Live';
SELECT COUNT(DISTINCT Nationality) AS Number_of_Nationalities FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor);
SELECT Name FROM conductor ORDER BY Year_of_Work ASC LIMIT 1;
SELECT conductor.Name, orchestra.Orchestra FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c WHERE c.Conductor_ID IN ( SELECT o.Conductor_ID FROM orchestra o GROUP BY o.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra_ID) > 1 );
SELECT c.Name FROM conductor c JOIN (SELECT Conductor_ID, COUNT(*) AS orchestra_count FROM orchestra GROUP BY Conductor_ID) AS sub ON c.Conductor_ID = sub.Conductor_ID WHERE sub.orchestra_count = (SELECT MAX(orchestra_count) FROM (SELECT COUNT(*) AS orchestra_count FROM orchestra GROUP BY Conductor_ID) AS temp);
SELECT c.Name FROM conductor c JOIN (SELECT Conductor_ID, COUNT(*) AS count FROM orchestra GROUP BY Conductor_ID ORDER BY count DESC LIMIT 1) AS max_conductor ON c.Conductor_ID = max_conductor.Conductor_ID;
SELECT DISTINCT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT DISTINCT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT Record_Company, COUNT(Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(Orchestra_ID) AS Managed_Orchestras FROM orchestra GROUP BY Record_Company;
SELECT Major_Record_Format, COUNT(*) AS Quantity FROM orchestra GROUP BY Major_Record_Format ORDER BY Quantity ASC;
SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;
SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(*) = ( SELECT MAX(company_count) FROM ( SELECT COUNT(*) AS company_count FROM orchestra GROUP BY Record_Company ) AS counts );
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1;
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Orchestra_ID IS NULL;
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Orchestra_ID IS NULL;
SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING SUM(CASE WHEN Year_of_Founded < 2003 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Year_of_Founded >= 2003 THEN 1 ELSE 0 END) > 0;
SELECT DISTINCT o1.Record_Company FROM orchestra o1 WHERE o1.Year_of_Founded < 2003 INTERSECT SELECT DISTINCT o2.Record_Company FROM orchestra o2 WHERE o2.Year_of_Founded >= 2003;
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(DISTINCT o.Orchestra_ID) FROM orchestra AS o WHERE o.Major_Record_Format IN ('CD', 'DVD');
SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID, o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1;
SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1);
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE name = 'Xiaojun';
SELECT grade FROM Highschooler WHERE name = 'Xiaojun';
SELECT Name FROM Highschooler WHERE Grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Xiaojun';
SELECT ID FROM Highschooler WHERE name = 'Xiaojun';
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT grade, COUNT(*) AS student_count FROM Highschooler GROUP BY grade ORDER BY grade;
SELECT grade, COUNT(ID) AS student_count FROM Highschooler GROUP BY grade;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) = ( SELECT MAX(student_count) FROM ( SELECT COUNT(*) AS student_count FROM Highschooler GROUP BY grade ) );
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Highschooler GROUP BY grade) AS subquery);
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT Highschooler.ID, COUNT(Friend.friend_id) AS Friend_Count FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT Highschooler.ID, Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name;
SELECT Highschooler.name, COUNT(Friend.friend_id) AS FriendCount FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name;
SELECT Highschooler.name, COUNT(Friend.friend_id) AS friend_count FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name;
SELECT Highschooler.name FROM Highschooler JOIN (SELECT student_id, COUNT(*) AS friend_count FROM Friend GROUP BY student_id) AS counts ON Highschooler.ID = counts.student_id WHERE counts.friend_count = (SELECT MAX(friend_count) FROM (SELECT COUNT(*) AS friend_count FROM Friend GROUP BY student_id) AS max_counts);
SELECT h.name FROM Highschooler h JOIN ( SELECT student_id, COUNT(*) AS friend_count FROM Friend GROUP BY student_id HAVING friend_count = ( SELECT MAX(cnt) FROM ( SELECT COUNT(*) AS cnt FROM Friend GROUP BY student_id ) AS temp ) ) AS max_friends ON h.ID = max_friends.student_id;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID HAVING COUNT(F.friend_id) >= 3;
SELECT Name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 3);
SELECT H2.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = 'Xiaojun';
SELECT H2.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = 'Xiaojun';
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Xiaojun');
SELECT COUNT(*) FROM (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Xiaojun') UNION SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Xiaojun')) AS Friends;
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT H.ID FROM Highschooler H WHERE EXISTS (SELECT 1 FROM Friend F WHERE F.student_id = H.ID) AND EXISTS (SELECT 1 FROM Likes L WHERE L.liked_id = H.ID);
SELECT DISTINCT H.ID FROM Highschooler H WHERE EXISTS (SELECT 1 FROM Friend F WHERE F.student_id = H.ID) AND EXISTS (SELECT 1 FROM Likes L WHERE L.liked_id = H.ID);
SELECT H.name FROM Highschooler H WHERE EXISTS (SELECT 1 FROM Friend F WHERE F.student_id = H.ID) AND EXISTS (SELECT 1 FROM Likes L WHERE L.liked_id = H.ID);
SELECT Name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes);
SELECT Highschooler.ID, COUNT(Likes.student_id) AS like_count FROM Highschooler LEFT JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID;
SELECT H.ID, COUNT(L.student_id) AS like_count FROM Highschooler H LEFT JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID;
SELECT H.name, COUNT(L.liked_id) AS liked_count FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID, H.name HAVING COUNT(L.liked_id) > 0 ORDER BY liked_count DESC;
SELECT Highschooler.name, COUNT(Likes.liked_id) AS NumberOfLikes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID, Highschooler.name;
SELECT H.name FROM Highschooler H JOIN (SELECT liked_id, COUNT(*) AS cnt FROM Likes GROUP BY liked_id) AS like_counts ON H.ID = like_counts.liked_id WHERE like_counts.cnt = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Likes GROUP BY liked_id) AS max_counts);
SELECT H.name FROM Highschooler H JOIN (SELECT liked_id, COUNT(*) AS cnt FROM Likes GROUP BY liked_id) AS L ON H.ID = L.liked_id WHERE L.cnt = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Likes GROUP BY liked_id) AS T);
SELECT Highschooler.name FROM Highschooler JOIN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(*) >= 2) AS LikesCount ON Highschooler.ID = LikesCount.student_id;
SELECT Highschooler.name FROM Highschooler JOIN ( SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(*) >= 2 ) AS L ON Highschooler.ID = L.student_id;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id WHERE H.grade > 5 GROUP BY H.ID HAVING COUNT(F.friend_id) >= 2;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id WHERE H.grade > 5 GROUP BY H.ID HAVING COUNT(F.friend_id) >= 2;
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Xiaojun');
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Xiaojun');
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend);
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend);
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
SELECT name, grade FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND grade = (SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend));
SELECT DISTINCT O.state FROM Owners O WHERE EXISTS (SELECT 1 FROM Professionals P WHERE P.state = O.state);
SELECT Owners.state FROM Owners INNER JOIN Professionals ON Owners.state = Professionals.state GROUP BY Owners.state HAVING COUNT(DISTINCT Owners.owner_id) >= 1 AND COUNT(DISTINCT Professionals.professional_id) >= 1;
SELECT AVG(CAST(age AS NUMERIC)) AS average_age FROM Dogs WHERE EXISTS (SELECT 1 FROM Treatments WHERE Treatments.dog_id = Dogs.dog_id);
SELECT AVG(CAST(age AS FLOAT)) FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2);
SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = 'Indiana' GROUP BY Professionals.professional_id HAVING COUNT(Treatments.treatment_id) > 2;
SELECT D.name FROM Dogs D LEFT JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.dog_id HAVING COALESCE(SUM(T.cost_of_treatment), 0) <= 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.dog_id HAVING SUM(Treatments.cost_of_treatment) > 1000;
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs;
SELECT DISTINCT first_name FROM ( SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners ) AS CombinedNames WHERE first_name NOT IN (SELECT name FROM Dogs);
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;
SELECT P.professional_id, P.role_code, P.email_address FROM Professionals P WHERE NOT EXISTS (SELECT 1 FROM Treatments T WHERE T.professional_id = P.professional_id);
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN (SELECT owner_id, COUNT(*) AS dog_count FROM Dogs GROUP BY owner_id ORDER BY dog_count DESC LIMIT 1) AS top_owner ON o.owner_id = top_owner.owner_id;
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN (SELECT owner_id, COUNT(*) AS dog_count FROM Dogs GROUP BY owner_id) AS dog_counts ON o.owner_id = dog_counts.owner_id WHERE dog_counts.dog_count = (SELECT MAX(dog_count) FROM (SELECT COUNT(*) AS dog_count FROM Dogs GROUP BY owner_id) AS max_counts);
SELECT p.professional_id, p.role_code, CONCAT(p.first_name, ' ', p.last_name) AS name FROM Professionals p JOIN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2) t ON p.professional_id = t.professional_id;
SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(Treatments.treatment_id) >= 2;
SELECT B.breed_name FROM Breeds B JOIN (SELECT breed_code, COUNT(*) AS count FROM Dogs WHERE date_adopted IS NOT NULL GROUP BY breed_code ORDER BY count DESC LIMIT 1) AS MaxCount ON B.breed_code = MaxCount.breed_code;
SELECT B.breed_name FROM Breeds B JOIN Dogs D ON B.breed_code = D.breed_code GROUP BY B.breed_name HAVING COUNT(*) = (SELECT MAX(count_dog) FROM (SELECT COUNT(*) AS count_dog FROM Dogs GROUP BY breed_code) AS counts);
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name HAVING SUM(Treatments.cost_of_treatment) = (SELECT MAX(total) FROM (SELECT SUM(T2.cost_of_treatment) AS total FROM Owners O2 JOIN Dogs D2 ON O2.owner_id = D2.owner_id JOIN Treatments T2 ON D2.dog_id = T2.dog_id GROUP BY O2.owner_id) AS subquery);
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT Treatment_Types.treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1);
SELECT Treatment_Types.treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1);
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code HAVING SUM(COALESCE(Treatments.cost_of_treatment, 0)) = (SELECT MAX(total_cost) FROM (SELECT SUM(COALESCE(Treatments.cost_of_treatment, 0)) AS total_cost FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.owner_id) AS subquery);
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT P.professional_id, P.cell_number FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(T.treatment_id) >= 2;
SELECT DISTINCT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT Professionals.first_name, Professionals.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING AVG(Treatments.cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT T.date_of_treatment, P.first_name, P.last_name FROM Treatments T JOIN Professionals P ON T.professional_id = P.professional_id;
SELECT T.date_of_treatment, P.first_name || ' ' || P.last_name AS professional_name FROM Treatments T JOIN Professionals P ON T.professional_id = P.professional_id;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT O.first_name, O.last_name, S.size_description FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code;
SELECT o.first_name, o.last_name, s.size_description FROM Owners o INNER JOIN Dogs d ON o.owner_id = d.owner_id INNER JOIN Sizes s ON d.size_code = s.size_code;
SELECT Owners.first_name || ' ' || Owners.last_name AS owner_name, Dogs.name AS dog_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.First_Name, Owners.Last_Name, Dogs.Name FROM Owners JOIN Dogs ON Owners.Owner_ID = Dogs.Owner_ID;
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN ( SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = ( SELECT MIN(breed_count) FROM ( SELECT COUNT(*) AS breed_count FROM Dogs GROUP BY breed_code ) AS subquery ) );
SELECT d.Name, t.Date_Of_Treatment FROM Dogs d JOIN Treatments t ON d.Dog_ID = t.Dog_ID WHERE d.Breed_Code = (SELECT Breed_Code FROM Dogs GROUP BY Breed_Code ORDER BY COUNT(*) ASC LIMIT 1);
SELECT Owners.first_name, Owners.last_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Shanxi';
SELECT O.First_Name, O.Last_Name, D.Name FROM Owners O JOIN Dogs D ON O.Owner_ID = D.Owner_ID WHERE O.State = 'Shanxi';
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT date_arrived, date_departed FROM Dogs WHERE EXISTS (SELECT 1 FROM Treatments WHERE Treatments.dog_id = Dogs.dog_id);
SELECT DISTINCT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE CAST(Dogs.age AS INTEGER) = (SELECT MIN(CAST(age AS INTEGER)) FROM Dogs);
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs);
SELECT Email_Address FROM Professionals WHERE State IN ('Taiwan', 'Fujian');
SELECT Email_Address FROM Professionals WHERE State IN ('Taiwan', 'Fujian');
SELECT date_arrived AS "Hospitalization Date", date_departed AS "Discharge Date" FROM Dogs;
SELECT dog_id, name, date_arrived AS hospitalization_date, date_departed AS discharge_date FROM Dogs;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT Treatments.dog_id) FROM Treatments;
SELECT COUNT(DISTINCT Treatments.professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT First_Name, Last_Name, Email_Address FROM Owners WHERE State LIKE '%North%';
SELECT last_name, first_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT COUNT(*) FROM Dogs WHERE CAST(age AS INTEGER) < (SELECT AVG(CAST(age AS INTEGER)) FROM Dogs);
SELECT COUNT(*) FROM Dogs WHERE CAST(age AS INTEGER) < (SELECT AVG(CAST(age AS INTEGER)) FROM Dogs);
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT date_of_treatment, cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments) ORDER BY date_of_treatment DESC;
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(DISTINCT Treatments.dog_id) FROM Treatments;
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);
SELECT Owners.* FROM Owners LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.dog_id IS NULL;
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
SELECT AVG(CAST(age AS FLOAT)) AS average_age FROM Dogs;
SELECT AVG(CAST(age AS REAL)) FROM Dogs;
SELECT MAX(age) AS oldest_age FROM Dogs;
SELECT MAX(CAST(age AS INTEGER)) AS OldestAge FROM Dogs;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT MAX(charge_amount) AS MaxChargeAmount FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT Breeds.breed_name, Sizes.size_description FROM Breeds CROSS JOIN Sizes;
SELECT DISTINCT Breeds.breed_name, Sizes.size_description FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Professionals.first_name, Professionals.last_name, Treatment_Types.treatment_type_description FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT P.first_name, P.last_name, TT.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) AS Total_Singers FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name, Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship != 'Paris';
SELECT Name FROM singer WHERE Citizenship != 'France';
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Citizenship, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship;
SELECT Citizenship FROM singer GROUP BY Citizenship HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM singer GROUP BY Citizenship) AS subquery);
SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT DISTINCT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000;
SELECT DISTINCT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000;
SELECT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(sg.Song_ID) > 1;
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(Song_ID) > 1);
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID, singer.Name;
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT Singer.Name FROM Singer LEFT JOIN Song ON Singer.Singer_ID = Song.Singer_ID WHERE Song.Song_ID IS NULL;
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945
INTERSECT
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year > 1955;
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year > 1955;
SELECT COUNT(*) FROM Other_Available_Features;
SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = 'Spring Airlines';
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = 'CODE';
SELECT property_name FROM Properties WHERE property_type_code IN ('HSE', 'APT') AND room_count > 1;